PHP,3e33an,freebit,4,Tue Jul 21 16:13:35 2015 UTC,"In the above example, adding a pepper could mean replacing hash('sha256', $_POST['password'], true) with hash_hmac('sha256', $_POST['password'], CONSTANT_SECRET_KEY, true). We do not recommend this approach.  Peppers do not add any meaningful security above and beyond the salt that password_hash() generates for you.   That's not factual though, is it. Salt is public, it's often a part of the final hash. Pepper is stored separately and never exposed on purpose, so it's a secret. If your attacker has access to the database, and database only, which is quite common in real-world attacks, then they have access to the hash and salt, but not the pepper.  Defense at depth does include layers of seemingly redundant measures, but added together they improve security due to the different context of the attacks, which can go through some of those layers, but not others.  The same reasoning that goes with ""pepper doesn't do anything salt doesn't already do"" can go for two-factor authentication: ""an SMS with secret code doesn't do anything a password doesn't already do"". But it's instantly obvious why it's not the case; the information comes from different channels. The attacker may not have access to all those channels at once.  Even if you decide to argue pepper doesn't help, you certainly can't argue it does damage. It's at best neutral. So why not do it? Do it if you want, you've got nothing to lose no matter who's right in that argument.   Password policies (especially shameful ones) are usually a dead give-away that an application doesn't employ proper password hashing.  [...] Establishing minimum requirements (e.g. password must be at least 12 characters long) is fine  [...] Your zxcvbn password strength must be at least level 3 (on the 0-4 scale).   Contradicting advice detected. How can you say ""password policies are a dead give-away for no proper password hashing"" and then start listing password policies? Surely you don't consider it secure to have an app that allows the password to be ""p""?  So the advice is more like ""don't have bad policies, have good ones"".   To clarify: if one changes first byte in the rememberme cookie from an W to an X the comparison will fail slightly faster than if the last character was incremented from n to o.    This may apply to B-tree indexes in some databases, but doesn't apply to hash indexes, for ex. Details matter.  Also I don't think a practical remote attack against an SQL B-Tree index has been demonstrated for a real-world application (and not just an isolated local attack against that B-tree with nothing else running).   Google's Anthony Ferrara covered this topic in his blog post, It's All About Time.   It's inappropriate to drag Google's name in anything Anthony Ferrara says on his personal blog.   Also, his job at Google is a ""developer advocate"" not a ""security expert"".   Even if the query doesn't find a valid entry for the supplied remember me token, attackers get unlimited tries. They can keep re-sending a slightly different cookie until they get their desired result. Especially if your application is not tracking and rate-limiting automatic authentications.   So attackers get unlimited tries unless we limit their tries...? I guess it doesn't sound so dramatic put this way.   On the database side of things, the token is not stored wholesale; instead, the SHA-256 hash of token is recorded. With this failsafe in place, if somehow the auth_tokens table is leaked, immediate widespread user impersonation is prevented.   If you store the hash then looking up back by that hash you've prevented the timing attack from happening. You don't need a selector. Especially if you add pepper so the hash is not predictable (funny we come back to that).   Separate selector from token.  Grab the row in auth_tokens for the given selector  Hash the token provided by the user's cookie with SHA-256  Compare the SHA-256 hash we generated with the hash stored in the database, using hash_equals()  If step 4 passes, associate the current session with the appropriate user ID   I feel this process is starting to look more like superstition-based ritual."
PHP,3e33an,porkslow,5,Tue Jul 21 17:26:24 2015 UTC,"Their password reset recommendations are also pretty questionable.   Unreliable second authentication factors (e.g. a random token sent to the user's email address or cell phone).   In what world is email or phone is insecure? Maybe if you are running Wikileaks or a bank. I'm unsure why would anyone bother wiretapping the users of your average CRUD app.   Allow your users to attach a GnuPG public key to their profile. When an account recovery request is issued for their account, encrypt the account recovery token with their public key so only someone in possession of their private key can access it. We do this for ASGard.   Do they honestly think that your average user has any idea what a public key encryption is? It would work only if your app is aimed at unix beards."
PHP,3e33an,Zhmoopz,2,Tue Jul 21 19:14:53 2015 UTC,"There is this story, where some guy used social engineering to hijack a domain and gain access to the user's e-mail address.  https://medium.com/@N/how-i-lost-my-50-000-twitter-username-24eb09e026dd  I am not sure about the phone though; I imagine it would be pretty hard to hijack a phone number."
PHP,3e33an,sarciszewski,1 point,Tue Jul 21 19:27:26 2015 UTC,"In what world is email or phone is insecure?    Phones:   At least where I live, most peoples' ISPs and phone providers are the same company the ISPs are easily socially engineered by calling their internal team, saying you're out in the field, and requesting VPN credentials the ISP's intranet apps are vulnerable to SQL injection (this and the above two points actually happened)   Email:   SMTP is unencrypted and STARTTLS is trivially stripped (it's opportunistic encryption)    Do they honestly think that your average user has any idea what a public key encryption is? It would work only if your app is aimed at unix beards.   The feature I described was optional.   If only ""unix beards"" will supply a GPG public key, then only they will enjoy encryption. The average user can ignore this optional step and place their trust in their providers, just like always."
PHP,3e33an,sarciszewski,2,Tue Jul 21 19:26:14 2015 UTC,"Thanks for sharing your thoughts on this blog post. I'll attempt to respond inline:   If your attacker has access to the database, and database only, which is quite common in real-world attacks,   If I can compromise your database, I can often compromise your filesystem. The best way to mitigate this is to make sure your database and webserver are on separate hardware. Most low-budget websites don't do this.   Contradicting advice detected.    Not at all.    How can you say ""password policies are a dead give-away for no proper password hashing"" and then start listing password policies? Surely you don't consider it secure to have an app that allows the password to be ""p""?   Maybe read the line after that where I said ""Establishing minimum requirements (e.g. password must be at least 12 characters long) is fine..."" implying that not all restrictions are bad. Or the parenthetical statement (especially shameful ones) wherein I linked to the Password Policy Hall of Shame.  If that section confused you that badly, it probably confused others as well, and warrants a rewrite.   This may apply to B-tree indexes in some databases, but doesn't apply to hash indexes, for ex. Details matter.   See also: there are no good constant time data structures and Do hash tables work in constant time?   Also I don't think a practical remote attack against an SQL B-Tree index has been demonstrated for a real-world application (and not just an isolated local attack against that B-tree with nothing else running).   Funnily enough, if you make the requirements for ""real-world"" vague enough, you can exclude most vulnerabilities. In security, we have a rule: attacks only get better. So even if nobody has demonstrated one yet, that doesn't mean that no one will.   It's inappropriate to drag Google's name in anything Anthony Ferrara says on his personal blog.   You're absolutely right, especially since he's leaving in like a week. I've amended the article.   Also, his job at Google is a ""developer advocate"" not a ""security expert"".   I never said his job was security expert. Is that even a job title one can hold?   Especially if you add pepper so the hash is not predictable (funny we come back to that).   This blinds the timing information. We call it ""double HMAC"", and it is an effective mitigation against timing attacks, provided the second HMAC uses a nonce. (Even a nonce from a weak PRNG will screw up attacks.)"
PHP,3e33an,fiskfisk,2,Tue Jul 21 18:51:08 2015 UTC,"If I can compromise your database, I can often compromise your filesystem.   That's an arbitrary conclusion. Let's take a typical example: SQL injection where you can modify a SELECT query's WHERE clause, but you can't append other queries (multiquery disabled).  Now access my file system.   Maybe read the line after that where I said ""Establishing minimum requirements (e.g. password must be at least 12 characters long) is fine..."" implying that not all restrictions are bad ones.   Read the sentence before next sentence where you say that policies are typically a sign of ""no proper hashing"".  The fact your sentences contradict each other is why I'm calling it out. You can definitely word that better.   See also: there are no good constant time data structures and Do hash tables work in constant time?   This refers to a data structures' O notation complexity and not timing attack vulnerabilities.   I never said his job was security expert. >:[   When you cite someone and cite their employer, it pretty much reads like ""here's security advice from Google"". So how we say things matters."
PHP,3e33an,sarciszewski,3,Tue Jul 21 19:04:32 2015 UTC,"That's an arbitrary conclusion. Let's take a typical example: SQL injection where you can modify a SELECT query's WHERE clause, but you can't append other queries (multiquery disabled).   I'd also like to point out that as soon as you go beyond basic sites, the database server is physically a different server - so even if you're able to somehow read files local to the DB engine, the code might very well not live anywhere close (where the pepper is)."
PHP,3e33an,sarciszewski,1 point,Tue Jul 21 19:17:01 2015 UTC,This is a good thing. Hardware separation renders SQLi -> source code compromise moot except for incredibly rare edge cases.
PHP,3e33an,sarciszewski,1 point,Tue Jul 21 20:11:03 2015 UTC,"That's an arbitrary conclusion. Let's take a typical example: SQL injection where you can modify a SELECT query's WHERE clause, but you can't append other queries (multiquery disabled).  Now access my file system.   Subqueries.  Example query:  $data = $db->query(""SELECT * FROM users WHERE username = '"" . $_GET['inject'] . ""'"");   An exploit might look like this:  ' AND userid != (SELECT '<?php eval(base64_decode(gzinflate(""someevilcodehere""))));' INTO OUTFILE '/var/www/reverse_shell.php'); --"
PHP,3e33an,Zhmoopz,1 point,Tue Jul 21 20:00:40 2015 UTC,"INTO OUTFILE can't be used in nested subqueries. If you're lucky and there's nothing after the injectable parameter (no other params, no ORDER BY, LIMIT etc.) you can give it a shot on the root SELECT query, but then you can't overwrite the SELECT ... clause so you need to insert PHP code into the table being selected so you can write PHP code out from it."
PHP,3e33an,sarciszewski,1 point,Tue Jul 21 20:05:53 2015 UTC,"or UNION SELECT .... ;-- comment out the rest, maybe"
PHP,3e33an,Mr-Yellow,5,Tue Jul 21 20:06:52 2015 UTC,"This is an interesting read, although the account recovery section is not realistic. If a system does not have an automatic password reset option, it will likely be seen as a usability problem by users. As for GnuPG, depending on your audience, the average user may not have the technical expertise to or be willing to decrypt a recovery token.   Also, is there a particular problem with sending an auth code to a cell phone? Wouldn't that require the attacker to be in possession of the user's phone?"
PHP,3e33an,sarciszewski,4,Tue Jul 21 19:23:18 2015 UTC,"As for GnuPG, depending on your audience, the average user may not have the technical expertise to or be willing to decrypt a recovery token.    When I've deployed these features, I've always made them optional. If the user wishes to trust their email provider (and every router between my server and their email provider's), they can. If they do not, I offer to encrypt with their GPG public key.   Also, is there a particular problem with sending an auth code to a cell phone? Wouldn't that require the attacker to be in possession of the user's phone?   There's no problem with auth codes, outside ""they're probably sent in the clear"", but I'd like to develop a system to send encrypted messages to TextSecure users in the near future. (Maybe even integrate with Twilio.) Just to be sure."
PHP,3e33an,phpdevster,4,Tue Jul 21 19:54:39 2015 UTC,"In a similar vein and similarly written, on password hashing techniques.  https://crackstation.net/hashing-security.htm"
PHP,3e33an,sarciszewski,2,Tue Jul 21 19:26:52 2015 UTC,"Hi freebit,  Thanks for sharing this blog post.  A bit of context: This blog post proposes a secure design for a user authentication system with an optional ""remember me on this computer"" checkbox / auto-login feature that is designed to minimize cryptographic side-channels and employ best standards.  This won't protect people from malware or from packet sniffing if your website uses plaintext HTTP. It doesn't incorporate two-factor authentication (I intended this for a follow-up blog post, but that hasn't happened yet), which is quickly becoming industry standard.  You're more likely to find someone screw up and concatenate a variable with their SQL query or discover a predictable PRNG is used for password reset tokens (in conjunction with knowing the admin user's email address) than you are to exploit a timing attack on a password reset feature. Of course, depending on where offensive security research decides to go in the next decade, my forecast could be dead wrong."
PHP,3e33an,phpdevster,1 point,Tue Jul 21 19:11:55 2015 UTC,What are your thoughts on Medium's password-less one-time authentication requests?
PHP,3e3eop,aequasi08,1 point,Tue Jul 21 17:31:09 2015 UTC,Very cool.
PHP,3e3eop,coffeesleeve,1 point,Tue Jul 21 23:39:55 2015 UTC,"I can't figure out how to apply the script to a whole folder. I mean, I could pipe ls or find, but I'm pretty sure I'm doing it wrong."
PHP,3e3eop,amenadiel,1 point,Wed Jul 22 00:25:57 2015 UTC,"the one for ""dead code"" this one could be mistaken when you have ""magic"" methods, such as getters/setters that follow a specific ""pattern"" that is interpreted at run-time but never directly called. I hate those."
PHP,3e3eop,compubomb,1 point,Wed Jul 22 03:14:15 2015 UTC,"Yeah, i thought the same thing"
PHP,3e4g13,rafamds,3,Tue Jul 21 21:48:45 2015 UTC,"CakePHP is created by pragmatic folks with medium level skills, who work on small to medium sites.   I'd say it's appropriate for web sites, less appropriate for web apps (many PHP frameworks aren't, actually).  It's not as popular as it was, so you probably won't get many opinions about it here.  CakePHP is comparatively slow (so is Laravel), but this doesn't matter for most sites.  If you like CakePHP, use CakePHP. It'll be ok."
PHP,3e4g13,FuckingLoveStarWars,2,Tue Jul 21 22:11:39 2015 UTC,I have seen people make this web site vs web app comparison a couple times on here. I wish they would stop. Almost all popular PHP full-stack frameworks are easily capable of building significantly complex web apps. I've got the apps to prove it.
PHP,3e4g13,utotwel,1 point,Wed Jul 22 04:45:03 2015 UTC,"I have seen people make this web site vs web app comparison a couple times on here. I wish they would stop.   Instead of instantly wishing that people unconditionally accept your point of view, have you considered maybe they have something in mind when they make that distinction?  I'm trying to think of one feature in Laravel that wouldn't be a burden to me in a complex web service API, and I can't pick one. While in a site where I mostly have simple CRUD logic and lots of pages with semi-static content, I wouldn't mind Laravel."
PHP,3e4g13,FuckingLoveStarWars,2,Wed Jul 22 05:34:30 2015 UTC,"Thats the thing, I was looking for opinions to see if I would spend time on it or not.  Thanks for your comment.   One more thing, what do you think its appropriate for a web app?"
PHP,3e4g13,FuckingLoveStarWars,2,Tue Jul 21 22:24:04 2015 UTC,"Collections of components which are not so tightly woven into a framework, which leaves you free to adapt app architecture to your needs. Say Aura (not an Aura user, but it's a good example of the traits I'm talking about)."
PHP,3e4g13,shealyw2,2,Tue Jul 21 22:31:36 2015 UTC,"I'm a cake fan. However I was thinking about how I would build an api or another less websitey (sorry best I could come up with) app and that was the same conclusion I came to. As you say most frameworks I think would have to much overhead for something that needs to be lean, and rather finding the right tools an bringing them together would be better."
PHP,3e4g13,harikt,3,Wed Jul 22 03:48:24 2015 UTC,"CakePHP is good, use it if you like.  Never ask an opinion about a framework. Different people have different opinions / taste and their likes. Whether you build framework from components or use a monolithic framework the app don't care other than tests / performance.  It is the architect in you that help the app. Not the framework developers ;) ."
PHP,3e3a9u,crmpicco,11,Tue Jul 21 17:01:43 2015 UTC,"DokuWiki is lightweight and stores everything in text files, which is good for a small site. My one problem with it is that there are no built-in file descriptions (and file uploading itself is a bit unintuitive).  MediaWiki is good if you know how to edit Wikipedia, but it's harder to setup."
PHP,3e3a9u,Jack126Guy,4,Tue Jul 21 18:23:03 2015 UTC,"I'll echo that: I've used dokuwiki on several wiki now. It also supports a concept called wiki farm where you install the software once and run multiple wiki off it,  which makes upgrading a lot less tedious if, like me,  you're running four or five wiki on the same server."
PHP,3e3a9u,paulatthehug,9,Tue Jul 21 20:21:15 2015 UTC,MediaWiki
PHP,3e3a9u,pee-ayche-pee,1 point,Tue Jul 21 17:08:57 2015 UTC,"I've used MediaWiki on and off for a long time. However, I've always had nagging performance problems no matter how many upgrades or tweaks I apply."
PHP,3e46qk,assertchris,4,Tue Jul 21 20:42:50 2015 UTC,"The one-liner way of doing this is array_map(null, ...$array)."
PHP,3e46qk,nikic,3,Tue Jul 21 22:45:28 2015 UTC,"I saw this one as an answer on StackOverflow, and like all neat hacks, it's best not to use it.    If your root level keys are strings, you get a fatal error. If you root level keys are non-consecutive numbers, they get remapped to consecutive indexes. If you have string keys in the deeper levels, they get lost and remapped to consecutive indexes. Generally icky feeling from using a semi-documented behavior like passing a null handler, that may change.   I'd probably consider a single loop + array_column as middle ground solution (if it's faster at all)."
PHP,3e46qk,FuckingLoveStarWars,1 point,Tue Jul 21 23:39:54 2015 UTC,"Hmmm, that array spreading... :)"
PHP,3e46qk,jezmck,2,Tue Jul 21 23:32:03 2015 UTC,Not sure I see the point of this article.
PHP,3e46qk,coderstephen,0,Tue Jul 21 21:43:09 2015 UTC,"A friend of mine is starting to write posts about PHP. This is essentially the first attempt. Sharing it in support of that, whether or not you feel it teaches you anything, personally. :)"
PHP,3e2kxw,SaltTM,4,Tue Jul 21 13:53:24 2015 UTC,An example would be factory creation methods.
PHP,3e2kxw,ct2k7,2,Tue Jul 21 14:09:12 2015 UTC,"An example would be factory creation methods.   There's no such thing as a 'factory creation method'.  If you meant a named constructor, that is fine. But a static method is not a factory.  A factory is a separate class that should be passed around as an instance, so that it can encapsulate the exact details of how the first class is created."
PHP,3e2kxw,Danack,3,Tue Jul 21 14:29:12 2015 UTC,I think he meant the creation method of a factory class.  MyFactory::create('something');
PHP,3e2kxw,BlueScreenJunky,3,Tue Jul 21 14:34:44 2015 UTC,"I think he meant the creation method of a factory class.   That is not a factory. A factory is something like this:  class FooFactory {     private $dbConnection;     private $logger;     function __construct(DBConnection $dbConnection, Logger $logger) {         $this->dbConnection = $dbConnection;         $this->logger = $logger;     }     function create($info) {         return new Foo($this->dbConnection, $this->logger, $info);     }  }   Having it be an instance allow the presence of DBConnection and Logger to be encapsulated away. The class that depends on the factory (and will be calling $fooFactory->create($info)) doesn't need to know about DBConnection or Logger - it only needs to know about the factory.  If it's a static method then it doesn't encapsulate anything."
PHP,3e2kxw,Danack,2,Tue Jul 21 14:49:04 2015 UTC,"Thanks for clarifying. My knowledge of the factory pattern was limited to what's described on phptherightway , but the example doesn't encapsulate anything, it just prevents duplicating code if creating the object is more complicated. I guess your example makes more sense."
PHP,3e2kxw,BlueScreenJunky,4,Tue Jul 21 14:58:00 2015 UTC,"It doesn't have to accept parameters (although in practice, it's useful to pass some info into a factory this way).  I guess /u/Danack just really loves that particular use case.  A factory can be static, or an object instance (objects are more flexible, but not always suitable)."
PHP,3e2kxw,matstars,-1,Tue Jul 21 15:20:49 2015 UTC,Your FooFactory::create method is using local variables that are not present - $logger and $dbConnection
PHP,3e2kxw,dwolf555,3,Tue Jul 21 16:49:42 2015 UTC,create isn't static
PHP,3e2kxw,ct2k7,1 point,Tue Jul 21 17:38:41 2015 UTC,"Apologies, didn't know the actual name for it.  A factory method can be static, but a factory isn't necessary a separate class."
PHP,3e2kxw,evilmaus,4,Tue Jul 21 15:49:06 2015 UTC,"Generally speaking, you should use static methods when the method in question has both nothing to do with any state that is not passed in as an argument to it and has more to do with the abstract notion of the class involved, rather than with a concrete instance of one. That is, the function relates to the idea of the thing, rather than to the thing, itself. A few examples would help clarify, but I'm coming up blank right this moment."
PHP,3e2kxw,dracony,3,Tue Jul 21 15:15:26 2015 UTC,In those cases you can also extract that logic into a separate service
PHP,3e2kxw,evilmaus,1 point,Tue Jul 21 15:39:19 2015 UTC,"Yeah, I find that just about every time I make something static, I end up either removing the ""static"" keyword or pulling it off onto another class, as you suggest."
PHP,3e2kxw,Disgruntled__Goat,3,Tue Jul 21 17:42:20 2015 UTC,"One reason static methods look better to you is because you're using ""new"" in a curious way here.  Just so we're on the same page, what your second code example reads like is this: ""I create a new middleware, I register this function at it, and I throw the middleware away"".  Chances are you don't want to throw away something you've just set up. You want to keep it around and use it. So why do you throw it away?  The static example is also curious. Do you always have just one middleware? Ever? That's odd, maybe the class is named incorrectly.  Static vs. non-static depends a lot on intent, so we need to understand intent before we can give good advice."
PHP,3e2kxw,Disgruntled__Goat,-3,Tue Jul 21 15:26:51 2015 UTC,The middleware example look like Laravel so I assume the static version is a facade.
PHP,3e2kxw,aequasi08,6,Tue Jul 21 15:59:58 2015 UTC,"Nope. Also, please let's avoid Laravel-specific term misappropriations when not talking about Laravel :P"
PHP,3e2kxw,ratbastid,0,Tue Jul 21 16:10:51 2015 UTC,"Nope.   OK my bad.   Also, please let's avoid Laravel-specific term misappropriations when not talking about Laravel :P   What a non-sentence. Clearly I would have if I didn't think it was Laravel."
PHP,3e2kxw,littletinyumbrellas,-3,Tue Jul 21 16:25:07 2015 UTC,he was talking about laravel lol  edit: Downvotes. Classy.
PHP,3e2kxw,jasdkfajsd,4,Tue Jul 21 17:34:53 2015 UTC,"I thought he said it's ""like Laravel"" and not that it ""is Laravel"". Never mind."
PHP,3e43qr,rustynapsack,4,Tue Jul 21 20:21:16 2015 UTC,The Content-Type header should have a capital T.  Assuming fixing that doesn't resolve the issue:   What is the value of $type? What are the actual headers that the browser receives? What is the type and size of the field in which the data is stored? What is the size of the original file?
PHP,3e43qr,AllenJB83,2,Tue Jul 21 20:50:17 2015 UTC,"Just BTW, that's indeed the canonical format, but headers are case insensitive."
PHP,3e43qr,xav0989,1 point,Tue Jul 21 21:46:31 2015 UTC,Not with all versions of IE. It bit me once.
PHP,3e43qr,oddmanout,1 point,Wed Jul 22 04:13:12 2015 UTC,"if I had to guess, I'd say $type is wrong.  Can you output that and see what it is?"
PHP,3e43qr,jezmck,1 point,Tue Jul 21 21:30:25 2015 UTC,Just set it to application/octet-stream
PHP,3e42w8,lunacyfoundme,4,Tue Jul 21 20:15:32 2015 UTC,"Heavy work should be avoided in a web process never mind if it's Java or PHP. The web process should ideally do light processing immediately related to the displayed page and nothing else.  A better solution is a task queue. You can look at Gearman (it can tie together PHP, Java, Python etc.) and similar solutions."
PHP,3e42w8,coderstephen,2,Tue Jul 21 21:23:08 2015 UTC,"As already mentioned in other comments, doing heavy computation in a web request is not usually a good idea, but PHP should actually perform decently at the analysis (depending on the details). Do you need to know anything about the process or when it's done (like some sort of user-facing webpage that shows the current status)? If that is the case, some sort of task queue server like beanstalkd or Gearman. With task queues, you should be able to query if a task has been completed or not, and be able to display that information to the user.  Depending on what platform facilities are available to you, there are some other methods that may be simpler, faster, or require less setup. Here are some ideas to explore:   Simple standalone script: If yuo want to write a standalone Java program, you can, but you could just as well write a similar PHP script that could take advantage of the same libraries & code your website uses (DB access, etc.). You can launch a background process like this:  exec(""php processRecords.php > /dev/null 2>/dev/null &"");  but note that you won't be able to read the program's standard output, so you will probably need to create a file at a known location to store the results that you can check in your website code for. You may also need to lock the file with flock() to make sure the external program and the website don't bump heads. Daemon processes: Would work in Linux servers that you have control over. Most daemon libraries/frameworks trivialize saving data to disk and checking if a particular daemon process is still running or not. Some helpful libraries: Clio, PHP Daemon. Threading using pthreads: Doesn't separate the request & processing, but could be used to speed up the processing code. Requires some understanding of threads and a little extra work.   Here are some relevant links that may help you get started:   Working with PHP and Beanstalkd Introduction to Gearman – Multitasking in PHP Multi-Threading in PHP with pthreads"
PHP,3e42w8,compubomb,2,Wed Jul 22 02:59:05 2015 UTC,"well, hate to be the first person to mention, but you should probably look into rabbitmq for queues, possibly consider ratchet for websockets, haproxy to merge your websockets & http server traffic together and zeromq to be the go-between from your completion response between your queue & websockets to communicate back to your client it's completed.  rabbitmq: http://www.sitepoint.com/use-rabbitmq-php/ ratchet: http://socketo.me/docs/push (use the pub/sub model) look into zmq look into autoban for websockets communication.  php will not be a problem for high-processing type workloads unless it's a lot of math computation which you might consider writing a very minimal extention for php."
PHP,3e42w8,progdog78,0,Wed Jul 22 03:28:20 2015 UTC,"It's pretty easy to run shell commands from inside PHP, say using shell_exec, assuming you're not in a locked-down security type config. That should let you kick off a Java process, and then it shouldn't be too hard for you to knock your PHP app again — perhaps via a PHP shell command, a flag in a database both access, or something else.  The other thing to keep in mind is that if there's no need for synchronousness between the two, you could trivially set up cron jobs to run, check up on, and clean up after each other."
PHP,3e42w8,halfercode,0,Tue Jul 21 20:53:47 2015 UTC,"Can you do this processing in a stored procedure? If so, just call the proc from PHP - if it reads or writes a lot it'll be faster this way anyway."
PHP,3e3v27,ehansen,2,Tue Jul 21 19:22:33 2015 UTC,Here's a screencast. Notice you can scroll down past the video to read the text version without paying for access to the screencast.
PHP,3e3v27,dadamssg,2,Tue Jul 21 19:47:49 2015 UTC,You can take a look into http://codeception.com as an alternative Probably it is more designed for testing with docs covering the most related to web application testing
PHP,3e40v6,velmu3k,1 point,Tue Jul 21 20:01:47 2015 UTC,Was not expecting the naked dude in that link.
PHP,3e40v6,gethereddout,1 point,Wed Jul 22 03:38:16 2015 UTC,clickbait title
PHP,3dzty8,malkusch,7,Mon Jul 20 21:32:30 2015 UTC,I already use markTestIncomplete when a test is crap and needs to be re-examined
PHP,3dzty8,anon515,11,Tue Jul 21 00:00:08 2015 UTC,"Unless you're Linus Torvalds, that kind of language in code is juvenile, by my reckoning."
PHP,3dzty8,hojimbo,12,Tue Jul 21 04:25:53 2015 UTC,"It's juvenile when Linus says it, too."
PHP,3dzty8,suphper,0,Tue Jul 21 08:15:45 2015 UTC,"Yeah, but he's earned the right to be juvenile."
PHP,3dzty8,foldor,1 point,Tue Jul 21 11:35:54 2015 UTC,"Only in the eyes of other juveniles, who aspire one day to be dicks on the mailing lists of their own popular projects."
PHP,3dzty8,FuckingLoveStarWars,7,Wed Jul 22 04:24:14 2015 UTC,"look at the commit.  that's just a crazy amount of boilerplate to add such a simple feature.  i wanted to add a new assertion the other month...god, i had to implement so much crap. i'm still not sure what all of it does."
PHP,3dzty8,mahacctissoawsum,4,Tue Jul 21 03:11:43 2015 UTC,"I like the idea, but i really think you should use a more PC term, instead of Bullshit.  edit: Closed and locked."
PHP,3dzty8,aequasi08,9,Mon Jul 20 21:53:30 2015 UTC,"It's a cute concept, but in any sort of professional setting, just delete the test and justify doing so in your code review. That way there can be a reasonable discussion and it also doesn't clutter up the tests with garbage."
PHP,3dzty8,Firehed,5,Mon Jul 20 22:08:27 2015 UTC,"Unless you sometimes WANT to run the ""bullshit"" tests."
PHP,3dzty8,aequasi08,0,Mon Jul 20 22:34:44 2015 UTC,"If you want to run it, it's probably not a bullshit test. Poorly written or covering annoying code, but not meaningless."
PHP,3dzty8,Firehed,1 point,Tue Jul 21 11:28:35 2015 UTC,"the test itself isnt bullshit, its the code thats being tested that is bullshit, and jsut because you want to run it, doesn't mean its not bullshit."
PHP,3dzty8,aequasi08,1 point,Tue Jul 21 17:30:19 2015 UTC,"You know, this explanation makes no sense to me."
PHP,3dzty8,FuckingLoveStarWars,4,Wed Jul 22 04:20:52 2015 UTC,Hold on a second... You don't curse in your repo?
PHP,3dzty8,random314,3,Tue Jul 21 03:42:00 2015 UTC,"many years ago, we sold a 250k line project to some british conglomerate. the deal was, naturally, subject to passing the buyer's internal code review.  i spent four days reading every comment and deleting/editing all the juvenile crap my co-devs had inserted, thinking they were speaking exclusively to the private audience of their peers.  so, no. i don't curse in my repo."
PHP,3dzty8,--frymaster--,1 point,Tue Jul 21 13:59:00 2015 UTC,"We are less strict about it, we curse and joke around a lot, but nothing insensitive."
PHP,3dzty8,random314,1 point,Tue Jul 21 14:58:35 2015 UTC,"Maybe they're past puberty, so they don't need to."
PHP,3dzty8,FuckingLoveStarWars,3,Wed Jul 22 04:21:42 2015 UTC,"In the philosophy of truth and rhetoric  Assertions of fact  Bullshit is commonly used to describe statements made by people more concerned with the response of the audience than in truth and accuracy, such as goal-oriented statements made in the field of politics or advertising. On one prominent occasion, the word itself was part of a controversial advertisement. During the 1980 U.S. presidential campaign, the Citizens Party candidate Barry Commoner ran a radio advertisement that began with an actor exclaiming: ""Bullshit! Carter, Reagan and Anderson, it's all bullshit!"" NBC refused to run the advertisement because of its use of the expletive, but Commoner's campaign successfully appealed to the Federal Communications Commission to allow the advertisement to run unedited.  Distinguished from lying  ""Bullshit"" does not necessarily have to be a complete fabrication; with only basic knowledge about a topic, bullshit is often used to make the audience believe that one knows far more about the topic by feigning total certainty or making probable predictions. It may also merely be ""filler"" or nonsense that, by virtue of its style or wording, gives the impression that it actually means something.  In his essay on the subject, William G. Perry called bull[shit] ""relevancies, however relevant, without data"" and gave a definition of the verb ""to bull[shit]"" as follows:   To discourse upon the contexts, frames of reference and points of observation which would determine the origin, nature, and meaning of data if one had any. To present evidence of an understanding of form in the hope that the reader may be deceived into supposing a familiarity with content.   The bullshitter generally either knows the statements are likely false, exaggerated, and in other ways misleading or has no interest in their factual accuracy one way or the other. ""Talking bullshit"" is thus a lesser form of lying, and is likely to elicit a correspondingly weaker emotional response: whereas an obvious liar may be greeted with derision, outrage, or anger, an exponent of bullshit tends to be dismissed with an indifferent sneer.   https://en.wikipedia.org/wiki/Bullshit#In_the_philosophy_of_truth_and_rhetoric     Bullshit asymmetry principle  Publicly formulated the first time on January 2013 by Alberto Brandolini, an Italian programmer, the Bullshit Asymmetry Principle (also known as Brandolini’s law) states that:   The amount of energy needed to refute bullshit is an order of magnitude bigger than to produce it.    https://en.wikipedia.org/wiki/Bullshit#Bullshit_asymmetry_principle"
PHP,3dzty8,alexanderpas,1 point,Mon Jul 20 22:46:24 2015 UTC,All it needs now is to be closed with a comment about it being bullshit.
PHP,3dzty8,haydenk1337,1 point,Tue Jul 21 04:16:53 2015 UTC,I can't take credit for that term. That's what my coworkers use most of the time.
PHP,3dzty8,rowe92,2,Mon Jul 20 22:08:52 2015 UTC,"Just give it a sensible name, you're not 15 years old"
PHP,3dzty8,pee-ayche-pee,0,Tue Jul 21 12:44:21 2015 UTC,"Bullshit is the official term in my workplace, we'd have no issue using in code.  Nonsense, questionable, unorthodox, rubbish, unreliable... I don't think they convey quite as clearly as bullshit."
PHP,3e3omu,harrypotterthewizard,3,Tue Jul 21 18:38:55 2015 UTC,"Follow they money. They all have pros and cons. Im still loving laravel for my own projects, but its probably not widely adopted commercially.  If you just pick one and practice good OOP, the others will come to you more quickly.  Symfony maybe to start? It is probably the biggest and most widely used commercially, but I dont have a source to back that claim up, so don't take my word."
PHP,3e3omu,JDD87,3,Tue Jul 21 18:55:03 2015 UTC,"Laravel, Symfony2, and probably Wordpress if you can stomach it. Maybe Drupal too."
PHP,3e3omu,WishCow,2,Tue Jul 21 19:06:09 2015 UTC,symfony. I've seen it used in many other big PHP projects (open and commercial). It is also used heavily by laravel.  It's a well designed set of components and there are so many examples to learn from. Want to build x for your project? All you need to do is go to Github and look at how the other FOSS projects use the components.
PHP,3e3omu,avindra,2,Tue Jul 21 19:12:04 2015 UTC,"You shouldn't focus on learning a specific framework. You should focus on learning advanced programming concepts and fundamentals, design patterns, algorithms, etc. All of which can be applied to any PHP project, framework-backed or not.  You can certainly pick up on fundamentals by using a framework, seeing how others use it, checking out their internals, etc. I would recommend Symfony since it is one of the most enterprise level fameworks, and generally regarded as the most best practice as well. But don't think in terms of learning the framework -- think in terms of how the framework is built, what problems does it solve, what architecture is used to solve those problems, etc. This is what hiring managers care about."
PHP,3e3omu,akeniscool,2,Tue Jul 21 19:44:51 2015 UTC,"There's a general shortage of programmers, so you might want to just choose whichever interests you most (at least that way you'll perhaps enjoy the work more).   Wordpress and something like WooCommerce - companies will obviously pay for online shops, and require support for sometime once they're deployed. Magento - apparent steep learning curve, very customisable, definite shortage of skills, again - probably used by larger companies. Symfony - far more 'bespoke'  Slim framework - seems to be gaining a reasonable mindshare ....   </2p>"
PHP,3e3omu,TheGingerDog,1 point,Tue Jul 21 19:11:16 2015 UTC,"If you haven't worked with any frameworks before, I would start with Laravel. It's commercially viable and have a low barrier to entry. It also is a nice stepping stone to the more complex Symfony. If you get to know Laravel and Symfony well it will be easy to pick up other frameworks as needed.  You could also take a look at Wordpress, learning enough to customize themes and write plugins is pretty easy.  I would stay away from Drupal and Magento for now though, they seem to be almost like separate career paths for a lot of people."
PHP,3e3omu,mediascreen,1 point,Tue Jul 21 20:23:30 2015 UTC,"Well it depends on your future clients. If you're looking to freelance for small websites and need to let the customer edit its content, you have to consider using Drupal/WordPress or any user-friendly CMS. They're gonna love the fact to edit everything.  However, if you're looking for something more corporate, you should take a look at something heavier, stronger with Symfony, Zend, etc. You're will tend to work for bigger clients (with bigger budgets).  But I'm still using Laravel for its simplicity and pureness for my personal projects."
PHP,3e27bx,newbbali,1 point,Tue Jul 21 11:40:06 2015 UTC,Similar recent discussion: https://www.reddit.com/r/PHP/comments/3c2d4c/why_no_good_php_based_erp/
PHP,3e27bx,xmachee,1 point,Tue Jul 21 13:43:14 2015 UTC,many businesses do everything you're describing with Magento
PHP,3e27bx,jesse_dev,0,Tue Jul 21 13:49:26 2015 UTC,Isn't Odoo PHP-based?
PHP,3e27bx,EnragedMikey,1 point,Tue Jul 21 14:32:15 2015 UTC,Python ;)
PHP,3e27bx,CODESIGN2,2,Tue Jul 21 20:56:10 2015 UTC,"PHP, Python.. they both start with P. Same thing, right?"
PHP,3e27bx,EnragedMikey,0,Tue Jul 21 23:38:44 2015 UTC,"Not syntactically, but DW, it's worse if like me you occasionally think people have different names...   At uni I called a guy Rob for an entire year, when his name was James. After a year he told me his name was James, and my only reply, was why the fuck have you been letting me call you Rob? You'll be Rob forever now... He is still Rob :D"
PHP,3dzclm,layneobserdia,7,Mon Jul 20 19:29:34 2015 UTC,This article isn't really about defensive programming - it's just standard practices that everyone should be using already like consistent naming and not trusting user input.
PHP,3dzclm,sekjun9878,3,Tue Jul 21 01:14:52 2015 UTC,"(Author here) It's definitely defensive programming (which, as you say, everyone should be using). It's intended to be a high level overview though, and perhaps I should've made that a little clearer. Almost the entirety of this article is on subjects that experienced PHP devs should already be doing - it's a reminder at best. Given the feedback, I'm considering doing a more practical and advanced guide made up primarily of coding examples and such as a Part II later on some time - it's on the list anyway."
PHP,3dzclm,jeffreylees,3,Tue Jul 21 14:29:07 2015 UTC,"Ah, you're the author! Thank you so much for writing articles like these - without tutorials and explanations like SitePoint I would never have been able to teach myself proper PHP!  It's just that with Defensive Programming I would expect things like ""die on anomalies asap"", XSS / SQL Injection / CSRF attacks, using interfaces to reduce bugs, typecast bugs in PHP, constant time hash comparison, things like that. I think the article could've been better titled to be a bit more generalised than Defensive Programming.  But PHP has a wide audience - great article nonetheless!"
PHP,3e2iwu,webmanio,2,Tue Jul 21 13:35:43 2015 UTC,http://superuser.com/questions/227509/git-ping-check-if-remote-repository-exists#answers-header  git ls-remote appears as if it would do it for it and not limit it to github.
PHP,3e2iwu,haydenk1337,1 point,Tue Jul 21 13:52:21 2015 UTC,"This is my recommendation. Though you would have to make sure you do not have any ssh-keys attached to the ssh agent, otherwise you would be able to run that against private projects that you have access to."
PHP,3e2iwu,mathewpeterson,1 point,Tue Jul 21 15:11:23 2015 UTC,Probably by using this: https://developer.github.com/v3/repos/#get
PHP,3e2iwu,joshholat,1 point,Tue Jul 21 13:45:10 2015 UTC,"GitHub's API is wonderful, I got the chance to work on it when working on Ship. Their API has the perfect method for what you're wanting :-). It has a key (private) which is used for this. Though (unless you're a member or owner of the repository) it'll throw a 404 on the API if it's not public anyway."
PHP,3dyz2l,bereddy,1 point,Mon Jul 20 17:54:47 2015 UTC,"Great Article, good to see that they reduced the load on their server by 50% and reducing the response time by half!"
PHP,3dy5yp,suphper,9,Mon Jul 20 14:25:09 2015 UTC,"Hey, screenshot links in the readme are broken when I view it."
PHP,3dy5yp,Tzaar91,6,Mon Jul 20 14:36:08 2015 UTC,.. and the github page does not work.
PHP,3dy5yp,CliffEdgeOrg,18,Mon Jul 20 14:43:42 2015 UTC,clearly they didn't run their unit tests...
PHP,3dy5yp,--frymaster--,3,Mon Jul 20 16:21:37 2015 UTC,"Well to be fair they are using visual unit tests, it's not automatic."
PHP,3dy5yp,goatanuss,2,Mon Jul 20 22:06:07 2015 UTC,except that the images are showing on http://visualphpunit.github.io/VisualPHPUnit/ which means the bug is on the github side.
PHP,3dy5yp,alexanderpas,1 point,Tue Jul 21 00:46:45 2015 UTC,does anybody use this? Any comments?
PHP,3dz8hi,inducido,3,Mon Jul 20 18:59:45 2015 UTC,"I am not going to defend Laravel or Lumen here, just want to ask, how is Laravel slow? From my personal experience, the project I am currently working on is handling 40 thousand visitors per day on a 20 bucks server (DigitalOcean) and that thing is smooth as breeze. Sure, some caching is used, but the system is under daily development for the last 20 months, and is huge. Never had any problems with slowness, only when I used the Eloquent ORM wrong (and that was my mistake)."
PHP,3dz8hi,rodion3,8,Mon Jul 20 19:56:40 2015 UTC,"I don't know how to count 40k visitors (is it 40k visits or N page views per visitor?), but if it's 40k visits, and let's spread them over 8 hours (and not 24) to account for uneven load during different hours of the day, you get ~1.38 visit/sec.   Any of the mainstream frameworks can handle couple of visits a second on modern hardware, anything less would be tragic (it depends on your app code too, but you know what I mean).  Laravel is kinda heavy (maybe the slowest of the popular ones right now), but it doesn't matter, because many projects never reach the kind of traffic where the framework becomes a bottleneck. If you pay per CPU minute, however, you may see larger bills with Laravel than with leaner components."
PHP,3dz8hi,rodion3,2,Mon Jul 20 20:10:04 2015 UTC,"40k visitors, so unique visitors of the page. We have around 300k pageviews per day, so I assume thats from returning visitors and visitors are visiting multiple pages. Here is an actual screen, 8:07 AM: http://i.imgur.com/YPEJ2BQ.png  Anyway, thank you very much for your response. I will keep it in mind, because traffic grows each month, so in future years, this could become a problem. We pay per month."
PHP,3dz8hi,lithstud,3,Tue Jul 21 06:11:07 2015 UTC,"Exact.  Laravel has raw output of 5 req/s on low end HW (when others are around 200 r/s). Most of the time one may consider it does not matter because his own app is :   - almost static (like ie a CMS)  - makes use of cache  - or There is no traffic (below 5 r/s)  Sure, for all of our crappy apps, there is no difference.  Until you reach any success (or a peack) , and then there will be a huge impact either on your wallet or on the user experience (pages response delay). Or both. I suppose you know multiplication ;-)"
PHP,3dz8hi,PatrickBauer89,1 point,Mon Jul 20 20:28:07 2015 UTC,I'm wondering what would you suggest using then?
PHP,3dz8hi,CODESIGN2,3,Mon Jul 20 20:36:25 2015 UTC,"There aren't easy suggestions either OP or anyone can give you. You keep going with the solution that works until it stops working. And when it stops, it pays to be aware & ready to go for an alternative. This post is about awareness."
PHP,3dz8hi,kikikol,1 point,Mon Jul 20 21:08:34 2015 UTC,"Yep.  It is just that they advertize as being a ""stunningly fast micro-framework"" and faster than Slim. This post is about awareness."
PHP,3dz8hi,gearvOsh,4,Mon Jul 20 22:53:26 2015 UTC,"Taylor's marketing copy reminds me of the early days of Ruby on Rails. Bold, simple, sexy statements, the way Apple would advertise a framework.  There's something I can't quite place, though, where with him it crosses the line into self-parody. I applaud his self-confidence, but the amount of hubris needs to be taken down a notch or two. I can't read that stuff without laughing.   Yet there is a substantial core of Laravel fans that accept these statements verbatim. Interesting and... educational."
PHP,3dz8hi,anlutro,2,Mon Jul 20 23:18:07 2015 UTC,I'd like to see that benchmark please. 5r/s seems much too low.
PHP,3dz8hi,gearvOsh,1 point,Mon Jul 20 21:09:16 2015 UTC,"Easy. Here is sample code (Slim framework)  Routing goes to a separate file just to be fair with classical frameworks: You will notice a randomly generated value just to be certain there is no caching at transport levels. then --> ab -k -t 10 -c 10 url  class HomeController  {     public function welcome()     {         header('Content-Type: '.('application/json').'; '.'charset=utf-8');         echo json_encode(array('id'=>rand(),'name' => 'mickey', 'state' => 'get'));     }  }"
PHP,3dz8hi,utotwel,1 point,Mon Jul 20 22:59:44 2015 UTC,"To be honest it doesn't surprise me, but 5r/s is probably enough for a 12 user web-app taking enterprise speeds, and the fact people are not machines into consideration.  The problem with simplistic logic, and using benchmarks to decide a stack, is that benchmarks are only good for a code-base that is under a consistent load, with consistent data, working with robots.   I would also doubt 200 r/s for most complex web-apps on a single node, with end-points requiring auth. This is why we cloud, and in any case the app would not do much for 200 r/s."
PHP,3dz8hi,pmjones,10,Tue Jul 21 10:59:27 2015 UTC,"Lumen isn't a sham but Taylor's benchmarks are. They are impossible to replicate, at least for me. I'm not talking about absolute speed of course, I'm talking about the difference/ratio between Slim, Silex, and Lumen.  In my tests Lumen is much slower (2-3x) than Slim 2 or even 3 and about on par with Silex.  But as we all know speed isn't everything, hardware can be scaled up and content can be cached. Lumen is already much faster than its big brother Laravel. If you are comfortable and/or depend on Laravel libraries then great, no need to stop because of some hello world benchmarks and enjoy Lumen!"
PHP,3dz8hi,pmjones,5,Mon Jul 20 19:13:47 2015 UTC,"I honestly find it hard to believe that Lumen is faster than Slim 2, especially considering that Slim 2 is only a handful of classes with minimal functionality, while Lumen is basically the entire Laravel framework."
PHP,3dz8hi,pmjones,1 point,Mon Jul 20 22:13:06 2015 UTC,"Slim 2 is definitely lightweight, but it is not a single class."
PHP,3dz8hi,phpgumpy,1 point,Tue Jul 21 06:25:09 2015 UTC,"Not sure why I said single, definitely meant a minimal amount. Thanks for pointing it out."
PHP,3dz8hi,utotwel,5,Tue Jul 21 07:00:28 2015 UTC,I literally recorded a video of me running the benchmarks. I don't know what else to do. I've done it on Homestead and on Forge configurations with the same results every time.
PHP,3dz8hi,lordofworms,4,Mon Jul 20 20:10:14 2015 UTC,"I don't know what else to do.   It might be useful to publish the step-by-step instructions using AWS. It's what I did for my benchmarking project, and it did a lot to pre-empt complaints about unfairness and bias."
PHP,3dz8hi,CODESIGN2,1 point,Tue Jul 21 00:46:05 2015 UTC,That is exactly what I did (Box on AWS).  IMHO: It is more relevant than testing in a local VM or in your local PC. Closer to real production conditions. But it is still flawed because client is in the same machine. Doing Benchmark is a profession ;-)
PHP,3dz8hi,lordofworms,1 point,Tue Jul 21 11:59:03 2015 UTC,"It is more relevant than testing in a local VM or in your local PC.   Absolutely true.   still flawed because client is in the same machine.   Also absolutely true; however, it is less flawed than doing it ""in a local VM or in your local PC.""  Basically, if someone cannot publish written-down step-by-step instructions, or a script, to run their benchmark on widely-available platforms, especially with AWS available to all, then it's not to be trusted.  EDIT: Speaking of which, are your instructions published somewhere?"
PHP,3dz8hi,lordofworms,1 point,Tue Jul 21 13:27:26 2015 UTC,"the main info is on the article. I think I will have to post full instructions later on - Should I have to do a video too? ;-)  Besides, I love that benchmarking project, thanks for sharing (I did smthing similar last year that I called ""The bloat test"")"
PHP,3dz8hi,assertchris,1 point,Tue Jul 21 15:15:26 2015 UTC,"Should I have to do a video too? ;-)   No, video is ... well, let's say it would be more marketing than craft. ;-)  Glad you like the old project, although I gave it up when I discovered the TechEmpower folks. AFAICT they do a much more thorough job."
PHP,3dz8hi,lordofworms,1 point,Wed Jul 22 02:39:33 2015 UTC,"I noticed on your video, in your browser you specify a port - but in your ab test the port is missing (so defaults to 80). Maybe the ab wasn't hitting what you think it's hitting?"
PHP,3dz8hi,lordofworms,4,Mon Jul 20 20:40:38 2015 UTC,"That's because I am running ab from within the VM, while in my browser I'm on the host machine so need to use port forwarding. So, it is correct.  All of that would also be moot on a Forge server where I get the same results."
PHP,3dz8hi,lordofworms,-1,Mon Jul 20 20:59:25 2015 UTC,where is the video?
PHP,3dz8hi,lordofworms,4,Mon Jul 20 22:50:17 2015 UTC,http://taylorotwell.com/how-lumen-is-benchmarked/
PHP,3dz8hi,assertchris,0,Mon Jul 20 23:26:06 2015 UTC,"don't do anything more, once a video is out there, that is it."
PHP,3dz8hi,lordofworms,4,Tue Jul 21 10:49:25 2015 UTC,"Like OP, I was puzzled what does Lumen have to do with ""micro-services"". It's like whoever wrote the copy was skimming headlines on /r/programming and just liked how ""micro-services"" rolls off the tongue."
PHP,3dz8hi,lordofworms,5,Mon Jul 20 19:30:27 2015 UTC,"This is not a microframework (158k SLOC!)   TIL that total lines of code determines whether a framework is ""micro"" or not"
PHP,3dz8hi,Tiquortoo,5,Mon Jul 20 22:43:40 2015 UTC,"LOC is probably not a good measure, but if you start digging you'll find the term ""micro-framework"" is, in fact, impossible to define. Yet another meaningless buzzword."
PHP,3dz8hi,CaptainYankaroo,2,Mon Jul 20 22:49:00 2015 UTC,"Sure. It tends to mean smaller or lighter weight than ""full stack"" frameworks (whatever that means).  ""Has less stuff and therefore might be faster""... problem is the stuff it doesn't have you might end up actually needing.. so you drag in a pile of dependencies to fill in the gaps and you're back to a full stack framework anyway."
PHP,3dz8hi,Tiquortoo,1 point,Mon Jul 20 22:54:11 2015 UTC,I mean technically it just consumes a ton of illuminate packages. It's github.com/laravel/framework that is 158k SLOC...
PHP,3dz8hi,lordofworms,0,Mon Jul 20 22:46:09 2015 UTC,"Sure. But once you installed Lumen you got this huge vendor folder, used by the framework."
PHP,3dz8hi,lordofworms,3,Mon Jul 20 23:02:20 2015 UTC,so what?
PHP,3dz8hi,lordofworms,1 point,Mon Jul 20 23:26:52 2015 UTC,"I meant, It is part of the framework, because the framework uses it: Symfony components, illuminates folder..."
PHP,3dz8hi,dracony,5,Tue Jul 21 08:13:50 2015 UTC,so... what? So what? Doesn't matter.  I couldn't care if it was 800k lines of code. It still doesn't mean jack shit to me. What EXACTLY is your argument? That somehow we're going to run out of kilobytes? or files? ARE WE RUNNING OUT OF FILES? OMG TELL ME WE'RE NOT RUNNING OUT OF FILES!
PHP,3dz8hi,assertchris,-1,Tue Jul 21 08:18:33 2015 UTC,"Can i say that: when you use a framework, it enters in the codebase of your maintainance? You got linked not to a framework, but to a particular version of a framework.    Think about it. You used Laravel 3 because you tought it was the best at that time. Then they moved to v5. But you still have your app buit on top of it. Should you migrate? should you rebuilt it at some point in time?  Another thought: more files means more risks regarding security."
PHP,3dz8hi,dracony,2,Tue Jul 21 08:52:47 2015 UTC,"when you use a framework, it enters in the codebase of your maintainance?   Er, i'd disagree. When you choose to use someone else's code (be that a library or a framework) you are in part choosing to do so in order to offload some of the maintenance overhead to them. I am not responsible for maintaining Symfony Components in my application anymore than you are for maintaining F3.   You got linked not to a framework, but to a particular version of a framework.   True of any framework you select. The size of the framework rarely matters. How much you intertwine your code with that framework does. You can minimise the impact of an upgrade (or wholesale framework change) by being selective about how much of the framework your code knows about.    Think about it. You used Laravel 3 because you tought it was the best at that time. Then they moved to v5.   They went from 3 to 4, an upgrade I didn't perform myself, but 4 to 5 was not that hard. A day's worth of work at most. And upgrading is one option. Another option is to not upgrade and be satisfied with your framework for as long as security updates keep coming your way, at which point you have to make that difficult choice again....You could at this point DECIDE that the framework is your responsibility and start patching it yourself. Or you could take the upgrade pain. Choices. And the difficulty of those choices are largely down to how you as a developer have done your job, not the tool you've selected to help you along the way.   Another thought: more files means more risks regarding security.   Maybe. But I'll take carefully selected components which are used by a large number of users and subject to rigorous security tests over something just because it's small, thank you. It's all about risk, and how you mitigate it.  Besides, these points have nothing to do with your original premise - that Lumen is not a microframework because it's larger than 10k LOC, and that somehow this is linked to PERFORMANCE.  Really the only justification I could come up with is the cognitive load of having the entire framework's codebase in your head at once. And IF that's important then 10k LOC is probably the most anyone could manage. But I don't know where storing a framework in your head like this would be useful. More useful to store your app code in your head I'd think? Unless you're actually writing the framework.  Your whole article is... kind of weirdly aggressive. Your point that Lumen's benchmarks may be misleading is probably a valid one to make, but to accuse it of being a sham, to all but accuse it's author of falsifying the results... to conclude that it's only reason for existing is because Laravel's performance is ""pathetic"" (hint, it's not. It just doesn't see performance as it's major reason for being. It's trading performance for utility. The safer conclusion is that Lumen exists so that Taylor can have a framework for cases where performance is more important than utility while retaining a familiar API... which is a valid enough reason for writing it!) is unnecessary and disrespectful, and detracts from your point."
PHP,3dz8hi,assertchris,1 point,Tue Jul 21 09:16:42 2015 UTC,"I am happy to have that kind of discussion with you.  Even if we do not agree ;-)  I agree the article appears aggressive. But I confirm that I think that the author is falsifying the results.  Regarding Laravel. ""pathetic"" is the right word for its perf. I agree it is a deliberate choice, but to me it is not trading, but replacing performance for utility.  That being said, what is the purpose of a framework?  you will say ""it depends on your goals"" ;-) To me performance matters.  Otherwise my opinion is that it should be a concentration of best pratices so that you that reinvent the wheel + you could work in group."
PHP,3dz8hi,utotwel,3,Tue Jul 21 10:19:56 2015 UTC,"I agree the article appears aggressive. But I confirm that I think that the author is falsifying the results.   At least you're honest I guess. On what basis do you conclude that Taylor has falsified his results? That's a fairly big accusation to level at somebody. Quite an unprofessional thing to do if you don't have evidence. You've not shown anything conclusive in this regard.   Regarding Laravel. ""pathetic"" is the right word for its perf. I agree it is a deliberate choice, but to me it is not trading, but replacing performance for utility.   Its performance is more than adequate for what it does. Nowhere near ""pathetic"". I mean it's not as fast as fat free, but it does more. You pay for that. That's a trade off. You absolutely ARE trading. You give up one thing in trade for another thing. If you don't like the trade off, don't make it. But don't go around calling other peoples' work ""pathetic"".   but replacing performance for utility.   Which is exactly trading. So again, your point is?   That being said, what is the purpose of a framework? you will say ""it depends on your goals"" ;-) To me performance matters.   Of course performance matters. But micro optimisations don't. And if you get to the point where Laravel itself becomes the bottleneck (and the cases for this are most certainly not in the main).. guess what, you can use Lumen to write a service which offloads just that portion of the performance problem onto another server somewhere. Or you can use Slim to do the same. Or you can go and write something in C and use that as a service... the point is you have choices. Your claims that Laravel's performance is ""pathetic"" is ... well ... pretty laughable. Your conclusion that Lumen is somehow an admission of that patheticness betrays a pretty serious case of not getting it.  You could have written your article in a manner which wasn't disrespecful, taken the higher ground, asked some actual serious questions and analysed the answers.. instead you decided to take the low road. And I'm left wondering why? what is the point?"
PHP,3dz8hi,lordofworms,1 point,Tue Jul 21 10:43:36 2015 UTC,"Yes, that's true. Just to give some context; Slim (^ 2.6) has upwards of 7k SLOC outside of the vendor folder and Silex (^ 1.3) has upwards of 504k SLOC inside the vendor folder. I'm not sure SLOC is a good measurement of ""micro-framework"", or that the location of the code really matters..."
PHP,3dz8hi,dracony,-5,Tue Jul 21 00:56:37 2015 UTC,My opinion: A microframework is below 10K SLOC
PHP,3dz8hi,pmjones,4,Mon Jul 20 23:01:14 2015 UTC,"Why? What possible use is an arbitrary number like that? so at 10,001 SLOC it's a full stack framework? It's ""Bloatware""? C'mon.."
PHP,3dz8hi,rafamds,5,Mon Jul 20 23:25:26 2015 UTC,"That's what I told the cop too, ""she's turning 18 next week, man"". Son of a bitch cuffed me anyway."
PHP,3dz8hi,lordofworms,1 point,Tue Jul 21 00:04:50 2015 UTC,lol.. was asking a serious question. Why 10k? why not 30k? why not 100k? do you include external dependencies? if not why not?  what is the advantage of 10k SLOC over any other number? You can write 10k lines of incredibly slow code.. so speed isn't the reason...
PHP,3dz8hi,EliAscent,2,Tue Jul 21 00:12:57 2015 UTC,"It's his opinion. It's like asking why Twitter made tweets 140 chars. Why not 141? Because reasons.   Hard definitions may be arbitrary, but they work.  In fact, I propose microframeworks be 64kb (that'd be close to 10K LOC, BTW).  65536 bytes. A nice, round number..."
PHP,3dz8hi,dracony,2,Tue Jul 21 00:27:05 2015 UTC,"Twitter made tweets 140 characters because originally they were conceived as being sent and received via SMS which has a message limit of 140 characters when you take into account all the various services. The SMS part went away over time, but the limit stayed."
PHP,3dz8hi,EliAscent,1 point,Tue Jul 21 10:08:37 2015 UTC,"Nope, SMS has a limit of 160 characters, which Twitter split like: 20 for username and separator, 140 for Tweet.  So the pressing question of ""why not 141 chars"" remains open."
PHP,3dz8hi,dracony,1 point,Tue Jul 21 15:36:29 2015 UTC,In the biz we call that padding.
PHP,3dz8hi,r0ck0,1 point,Tue Jul 21 18:45:38 2015 UTC,"Yes, as I said, it's not just ""reasons"". They had a good reason. Character limit, minus reasonable upper limit of info that will be in every message. This pressing issue is not open. We know why they did it and it is not arbitrary as much as it might involve some gut and informed guessing."
PHP,3dz8hi,btcMike,-2,Tue Jul 21 18:54:03 2015 UTC,"it is not an opinion. It is the results of some measurements. Take any framework, remove then tests, include the dependancies (vendor), then count sloc using a cloc tool"
PHP,3e0s76,Jotaro13,6,Tue Jul 21 02:02:13 2015 UTC,"Extract is useful for templating libraries. I have not come across other uses yet. You definitely should not use it in your ""normal"" code."
PHP,3e0s76,dreistdreist,4,Tue Jul 21 07:18:18 2015 UTC,You should not have to guess or try hard to understand code. Code should be written so it's understandable and reasonable as soon as possible.  function work(array $a) {     extract($a);     // no one can be sure what variables are now in scope }
PHP,3e0s76,dave1010,3,Tue Jul 21 07:17:40 2015 UTC,"Extract makes it harder to figure out where all your variables come from as they are not initialized as they typically would. This is especially true on older PHP projects that make heavy use of globals such as WordPress, at some point you just have no idea where are those initialized variables come from. It's especially annoying when you are maintaining someone else's code and becomes very quickly unmanageable. I wouldn't say never ever use them but make sure you have a pretty good reason, and I really can't think of one off the top of my head. That's my 2 cents about them, there might be other reasons but to me it's essentially maintainability."
PHP,3e0s76,cykelpop,1 point,Tue Jul 21 02:33:41 2015 UTC,"I only use them about 90% of the time on  Select  A, B, C from Table then look and set the value as the key, but when i heard it might cause a security issue, I wanted to confirm with the public before moving on and potentially keep an issue alive"
PHP,3e0s76,cykelpop,5,Tue Jul 21 02:38:11 2015 UTC,"I doubt it'll cause a security issue if you extract results from queries, but it can easily cause bugs. Say, you have variable $id for some other purpose, you may accidentally overwrite it when extracting results for ""SELECT * FROM foo"", and column ""id"" is present.  No need to halt everything and start removing extract() calls, but it's best you phase it out and avoid it in new code.  I mean, $row['foo'] is simple enough, the pros/cons ratio is not good on ""save a few chars"" / ""cause obscure bugs"".  Additionally, some PHP IDEs get confused when you use a variable that came out of nowhere, and may report it as an error, making it a pain for those who use such IDEs."
PHP,3e0s76,jk3us,2,Tue Jul 21 02:48:13 2015 UTC,"I really doubt you could cause security issues unless you do something really weird, like enabling it to overwrite various other variables from get or post calls."
PHP,3e0s76,inducido,1 point,Tue Jul 21 02:58:07 2015 UTC,"A long time ago, I would do things like extract($_GET); because I got tired of typing ""$_GET"" all the time.  THAT is a huge security issue.  Never ever ever do that."
PHP,3e0s76,djmattyg007,2,Tue Jul 21 17:40:00 2015 UTC,"Extract can be sandboxed within a function.  it is not bad by itself, it is used internally by most of the templating engines.  That being said, my personal ""good practice"" says that you should avoid using it just because of your laziness. ;-)"
PHP,3e0s76,DSchalla,1 point,Tue Jul 21 10:31:04 2015 UTC,I don't know why you were downvoted. Presumably people don't realise big frameworks like Laravel use this in their templating engines.
PHP,3e0s76,ThePsion5,2,Tue Jul 21 08:50:45 2015 UTC,"I have been using the extract() function on my for each loops, particularly for database calls.   I assume he got downvoted for that statement. Its a bad usecase for extract like stated in other answers stated, yet its a good thing that he asks whats wrong with it."
PHP,3e0s76,adrianc333,1 point,Tue Jul 21 13:09:11 2015 UTC,"So far the biggest issue Im seeing is the lack of knowing the exact variable being called into question, like i said, still new trying to understand."
PHP,3e0aud,croxarens,2,Mon Jul 20 23:40:52 2015 UTC,"Analysis and design are ""two sides of the same coin"". One (analysis) is taking things apart, and the other (design) is putting things together.  Analysis is about studying something and understanding itself, its parts, and properties involved. Design is about deriving something by combining things with interesting properties in interesting ways.  Analyzing just mean reasoning about something so you understand it (or some aspects of it) better."
PHP,3e0aud,phao,2,Tue Jul 21 00:01:43 2015 UTC,"Which one are the best tools for Design and Analysing objects?   I suppose we can put UML diagraming tools and high-level static analysis tools in that category (for example tools which plot the graph of dependencies in your code; what uses what).   There aren't any required tools, though. ""OO design and analysis"" means being able to reason how project requirements are best modeled as objects, knowing pros and cons of the common design patterns, recognizing them in existing code, and thinking in objects in general.  For PHP, high-level analysis tools are slightly harder to come by than for, say, Java. I tend to do my PHP ""OO design and analysis"" with pen and paper, or a white board, and it's good enough most of the time."
PHP,3dxbje,53rd-and-3rd,4,Mon Jul 20 08:39:16 2015 UTC,"If your description of this service is accurate (and I can't know that, maybe you're missing a detail or another from the docs) then it's incomplete.  Sign-in should return a token. And that token should be possible to send to the service, which will return a unique user id of some sort. Note that if you can contact a service through JavaScript, chances are you can contact it through PHP as well. Unless it uses some complicated JSONP handshake and there's no other option, it's just HTTP.  Anyway, if the service doesn't provide you with a token that can be resolved (through a service call, or otherwise) to a unique id, then basically you don't have an authentication service, you have a service that returns some keyvals based on a user and password.   Triple check the documentation, consult your service providers about all this and if it remains the case they don't provide a token resolvable to user id, tell your boss the service is incomplete and you can't do your job because of it."
PHP,3dxbje,Towerful,1 point,Mon Jul 20 09:48:52 2015 UTC,"Thanks for the reply.   When a user logins through username password pair or going through Social Login than a call to their api is sent, cookies are stored on the client browser and the whole serialized user object is returned to the client. No tokens. Any call to THEIR web service is checked against user authentication and authorisation.  On the client it is possible to check id user is (still) authenticated through a client api call but no token is exchanged, nor there is a method that can turn a ""token"" to a user unique object. So it is an authentication and authorisation system, but for the platform service itself (e.g. they provide ""follow"" functionalities on our topics or entities, I cannot follow a topic / artist without being authenticated or authorized; but all this happens on their side not mine)  So we have no tokens.  I omitted one piece of information. There's the ability to log in towards the service as an administrator and being able to manipulate other user's data (so for example get a complete profile of a user based on his username, modify user profiles and so on)  So, taken the above what to do now?  Something along the lines of this can be considered acceptable?   I create a script that can produce a token based on some rules and that can return the user id given the token (need advice on the standard libraries to produce secure decryptable tokens) I also create a PHP script that logs in to the server as admin and can check if a specific field is present and has a certain value on a particular user  user (client - authenticated) goes to the form page X async call to my script to generate the token when token is generated at the same time I do two things    I store the token on user profile I put both the token and the username in the form fields  on form submit I reject all the calls that don't have token and username in it. I check if user has the token in their profile and if yes and the token is valid I proceed. On operation success I delete the token from user profile."
PHP,3dxbje,Towerful,2,Mon Jul 20 12:15:08 2015 UTC,"Is this something that JWT is designed to solve?  User logs in with external service, and is directed to your authentication system. Your auth system looks at the details provided by external auth system. Checks it against a users table (via any unique attributes of the data provided by the external auth system that you can trust). Create/return that user's uuid for your auth system. Store that in a JWT and pass to client.  Now any of your services use the JWT to verify the users identity, and and that they are authenticated with your service.  Basically, use external auth as your first point of authentication, then rely on your own implementation. External auth only provides users details, and that this is who they are. Then your auth says 'we know this person'. Using JWT with a shared secret between all your services means they can share JWT tokens/payloads and verify they have not been tampered with.  Unless I have mistaken something. Also, on mobile. Please forgive any mistakes or formatting issues."
PHP,3dxbje,WishCow,2,Mon Jul 20 12:48:08 2015 UTC,"Thanks Towerful, so basically what you're saying is:   on the first occasion use the client side data coming from the external service to generate a JWT that will then be stored in a session cookie client-side. use that JWT token as the source of truth on who the user is and if it is authenticated   Then I should only be concerned of the times when the user calls the logout on the external service during the same session. if it happens than I should also delete the JWT token right?"
PHP,3dxbje,halfercode,2,Mon Jul 20 13:19:48 2015 UTC,"Don't create your own parallel token system to the auth service, you'll get your user identity stolen & info leaked.  If you trust blindly the client and the client prepares proofs for user identity you can't verify on the server, anyone can forge those proofs with a simple browser JavaScript console.  Talk. To. The. Service. Provider. Ask about obtaining a token (likely stored in the cookies the service client code uses), and verifying its user id on the server side."
PHP,3dxbje,halfercode,1 point,Mon Jul 20 13:59:45 2015 UTC,I. Will. Do. That. :) I was asking to see and evaluate if there are reliable ways to tackle a situation in which none would be possible platform side and management will still keep on pushing to have the features implemented.
PHP,3dxkfx,erp-expert,24,Mon Jul 20 10:49:22 2015 UTC,"For me, it's Magento, when you need to modify some core features, speed up the site etc."
PHP,3dxkfx,Promios,4,Mon Jul 20 11:00:46 2015 UTC,"The answer is, without a doubt, Magento. Also the area which brings in the most money as a PHP developer, though you are basically trading your sanity for money."
PHP,3dxkfx,ultio,2,Mon Jul 20 11:21:48 2015 UTC,I remember Magento fondly as the one of the reason I turned down a high paying freelance job. I'm surprised people can get that thing working on any scale without requiring a massive server cluster
PHP,3dxkfx,Disjunto,2,Mon Jul 20 12:39:02 2015 UTC,"It's really not that bad once you introduce caching and load balancing. Most of my customers run three dedicated front-end servers and a separate MySQL server. Coupled with Varnish and Memcached, the performance is pretty good, but it's obviously not something you would set up for a small shop and definitely costs more money than most shop owners can afford."
PHP,3dxkfx,ultio,3,Mon Jul 20 12:46:20 2015 UTC,"And it's not like it's ""good"" complexity... want to modify the size of product thumbnails? Congratulations, edit the core application code where it's defined statically and forever break future compatibility! You introduce complexity in software to allow flexibility or to handle scalability - not just because someone has a checkbox that says ""xml-driven xml.""  I swear Magento exists the way it does primarily to keep the core company in business and employ dozens of contract PHP developers to keep a ship built out of leaky, meaningless abstraction from sinking into the ocean."
PHP,3dxkfx,littletinyumbrellas,2,Mon Jul 20 18:12:38 2015 UTC,"I also came here to say Magento.  I've been working with it for a bit over 5 years, and am still learning new things about it."
PHP,3dxkfx,DxMonkey,2,Mon Jul 20 11:06:35 2015 UTC,/thread
PHP,3dxkfx,ThaFuck,2,Mon Jul 20 11:29:45 2015 UTC,I don't think there had been anything that didn't make me more crazy than magento. I've spent hours with my head in my hands pulling my hair out.
PHP,3dxkfx,theedeacon,2,Mon Jul 20 12:02:30 2015 UTC,"I think typo3 is also up there when it comes with it comes to ridiculous complexity.   Hint: If you decide your CMS should have support for its own programming language, you're doing something wrong."
PHP,3dxkfx,Jonne,1 point,Mon Jul 20 14:36:04 2015 UTC,I've never heard of it. Feels like is should check it out.
PHP,3dxkfx,theedeacon,2,Mon Jul 20 15:55:22 2015 UTC,Don't do it if you value your sanity. This thing is enterprise for enterprise's sake.
PHP,3dxkfx,Jonne,1 point,Mon Jul 20 16:04:45 2015 UTC,I sometimes like the idea of hell to remind me that what I deal with is great.
PHP,3dxkfx,theedeacon,1 point,Tue Jul 21 00:05:34 2015 UTC,I agree on Magento. A fairly simple task can turn into a longer nightmare than necessary.
PHP,3dxkfx,mckeder,1 point,Mon Jul 20 17:09:01 2015 UTC,"Dear god this. I have no idea why they built it the way they did, why they try to do their own indexing when that should be the database's job, and why even the simplest of tasks like importing products requires a third-party tool.  I am glad that I no longer handle e-commerce at my place of employment."
PHP,3dxkfx,NeuroXc,6,Mon Jul 20 18:28:06 2015 UTC,"It's an interesting question, but I'd say it's a little weighted. You'll probably find that the most complex problems solved with PHP, including IT and business rules/logic are almost certainly not going to be a product.  With complexity, you're starting to get into the realm of bespoke development and logic - something that a ""product"" wont answer off the shelf, and then you're into the age old question of using someone else's code versus rolling your own. The most complicated things I've been involved with didn't need PHP - that was just by choice, but it did need a lot of thinking time (design/planning). Business rules will confound your complexities way more than the language and IT requirements will."
PHP,3dxkfx,no_not_me,4,Mon Jul 20 12:28:26 2015 UTC,"The most complex project I setup, is 4 distinct applications with a unified UI front-end, sat on top of the same data base with 150 tables.    The infrastructure is split into 2 sections:    The back-end which is a webserver running the ""media buyer"" portion of the application, with the database running Citus db which is a clustered database and sharding across several servers.  There are 5 db servers which allows for 100s of millions of rows in a single request in under a second.   The front-end is 1 web server with varnish, nginx, hhvm and currently redis.  Within a month may be varnish, golang and aerospike (depending on the performance).  Aerospike will give the ability to horizontally scale for redundancy and have all 3 server serving requests.  Seriously, Aerospike > Redis in a huge way. There is a backend process built in python with zeromq which pushes messages between both the Redis server and postgres database.  A 1 minute interval is in play to move the data from the front-end to the back-end for near real-time analysis.   It's the most complicated architecture I have set up to date.  When then primary desire is speed as 100ms can make all the difference.  You tend to find that certain languages and database applications just don't cut it."
PHP,3dxkfx,no1youknowz,2,Mon Jul 20 13:27:52 2015 UTC,SugarCRM
PHP,3dxkfx,kludgecruft,1 point,Tue Jul 21 15:44:46 2015 UTC,A few years ago I had the displeasure of working with ZenCart. It was such a pain to do anything.
PHP,3dxkfx,forgetfulcoder,1 point,Mon Jul 20 15:32:25 2015 UTC,The company's product was a PHP platform that used regular expressions to parse and run its own scripting-language... I'm not sure I can rightly say the PHP was complex as much as the whole interlocking system was.
PHP,3du810,speckz,20,Sun Jul 19 14:56:45 2015 UTC,"Good article. I am on the other end of the spectrum. I started my career as an embedded software engineer. Drivers, timings for protocols, writing GUI libraries from scratch, managing memory - you can have it. Was it interesting? For a time, sure, like most new things I am learning. It is not something I am eager to go back to, though. I know how ""easy"" web developers have it and I love it."
PHP,3du810,SpiffyJr,8,Sun Jul 19 15:21:12 2015 UTC,"I started with desktop development in Delphi and toying around in C. I played around with assembly while making my own neat little OS... but PHP eventually gave me way more job opportunities, and it felt good to be able to show my creations online. I still do some low end development, and I do diddle with Arduino from time to time.  The article stated that ""Setting up a Wordpress blog takes significantly less knowledge and effort than building an operating system"". Fuck yeah, of course it does - it's meant to be that way! The average Joe can install Wordpress in no time at all, it's a WP feature! But does that make that average Joe a webdev? Who the hell cares. I do my job, and I try to do it well, but title-epithets are not something I really care about, and I won't get my jollies up by felling all high and mighty over some dude who sells Wordpress sites with a bought theme."
PHP,3du810,bureX,17,Sun Jul 19 18:40:35 2015 UTC,"""programming - the process of writing computer programs.""  automation upon automation upon automation.  web programming is real programming. and the best thing about it is: i am one, but i can serve millions."
PHP,3du810,pirminis,6,Sun Jul 19 16:00:18 2015 UTC,"Web programming is real programming. However web developers seem to be more content writing the same old thing over and over and over again than other types of programmers.  To take just one example, in most other fields in programming people would probably have murdered browser development teams for even suggesting that every website and webserver under the sun should work around browser bugs."
PHP,3du810,Taladar,7,Sun Jul 19 20:37:46 2015 UTC,I'm pretty sure web developers feel the same way but only until very recently did any of the browser give two shits what developers want or need.
PHP,3du810,MyWorkAccountThisIs,1 point,Sun Jul 19 22:33:00 2015 UTC,"Honestly, this has been my biggest gripe with web development. Each project is so similar to the previous that I don't feel like I'm growing as a developer. I spend a good deal of my free time learning other programming niches because I'd like the option to move between different types of work."
PHP,3du810,Breaking-Away,1 point,Sun Jul 19 23:23:57 2015 UTC,"You're lucky to be able to keep up without any effort.   I feel like there is a new js framework coming out every week, tons of php frameworks to keep updated on, a constant flow of new libraries, a greatly increased number of new css apis and modules, at least a dozen testing libraries for both js and php, new interesting third party services, new ways do deploy code, new AWS services, a ton to learn when it comes to devops (puppet/ansible/chef and their respective ecosystems), etc  Then there are fundamentals like teamwork, communication, architecture, design and writing that I feel I could always be better at.  Every time I start a new consulting assignment at a new company there are at least a few major things I need to learn pretty quickly. And I just work with php/js. Sometimes I meet prospective clients that expect developers to polyglot and I just don't understand how people find the time to get really god at anything. One company I talked to wanted me to work in Java, Javascript, php, Go, actionscript and pyton..."
PHP,3du810,mediascreen,10,Tue Jul 21 20:12:13 2015 UTC,"So in other words: DGAF.  Just do what you love, and stop worrying about your job."
PHP,3du810,cj5,13,Sun Jul 19 16:26:23 2015 UTC,"What a great article, which I can totally relate to. I too have those feeling of ""I'm only a web developer, not a real one"" and ""I must learn C or C++ or anything that would make me work harder, use pointers, manage memory etc"" because I mean like, Web development is so easy a 10 year old kid can do it. Then I go online, and stumble upon dozens of terrible, annoying, pathetic websites/webapps, then is when I get that feeling ""I can do it so much better"" and ""What the fu*ing fuk was this guy thinking to himself while making this"". This is the kind of balance I usually find when getting down on my job.  I do find my self planing to learn C or something in that area, but that just never happens because I can't find the need. Which returns me to the same ol' loop."
PHP,3du810,lood,17,Sun Jul 19 16:49:03 2015 UTC,"You're not ""only"" à web developer. Other developers just specialize in other domains. Tell a C developer to whip up a quick form with some client-side validation, and watch how your skills are actually valuable."
PHP,3du810,michel_v,16,Sun Jul 19 17:37:36 2015 UTC,"There are a ton of skills that go into Web development other than strict ""programming"" skills.   Knowing CSS, its box model, and how to get them to do interesting things isn't really programming, per se, but it's definitely a meaningful skill. Knowing the ins and outs of HTTP is crucial to really understanding what's going on between a browser and a server. You likely have to keep up with two languages at once, along with their respective libraries and frameworks. Most other devs, even if they've worked in multiple languages, only have to be good at a single language at a time. If that isn't difficult enough, one of those languages that you have to keep up with on the Web is JavaScript, which is rapidly changing as a language, supported to varying degrees across different execution environments, and downright churning in terms of libraries and frameworks. It'd be a feat to keep up with that language and ecosystem on its own, much less with PHP, Python, or whatever other language you may use on the server. You level-dip into system administration (a whole field unto itself) with the need to have a decent grasp of DNS, how to set up and maintain Apache and MySQL (or equivalent programs), and sometimes are on the hook for keeping the system itself up to date and running well. You need to also level-dip into being a database administrator. I have seen ""real"" programmers who act frightened of writing SQL and are useless when their ORM is taken away. (Oh look, a tool that does the hard work for them, which the author pointed out as a criticism of Web devs!) This is a far cry from having the skills to find out just why a database server is getting hammered, how to index intelligently, how to design a schema that is simply normalized in the first place, or why a particular query may look innocent, but murder the server when your back is turned. Oh yeah, it also helps to have a good eye for design, or at least the ability to intelligently implement the designs of others. This is harder than it sounds, since there are a lot of fine details that make a design come together. This level-dip isn't even tech-related, unlike all of the others that a Web developer is forced to take.   After all of these diverse knowledge requirements are satisfied, is it any wonder that supposedly ""core"" programming skills drop by the way-side? Particularly when they're rarely even applicable to Web development? Web development is a crazy fusion of skills from across disciplines. That's why I love it.  Programmers are techies. Like all other fields of tech, there's a strong tendency to over-value one's own skill-set while under-appreciating the skills and jobs of others. I think it stems from insecurity. Ironic, isn't it?  Edit: Oh yeah, if you do anything with JavaScript (who on the Web doesn't?) then you very quickly get exposed to dealing with asynchronous programming, which is commonly understood to be difficult."
PHP,3du810,evilmaus,3,Sun Jul 19 22:01:30 2015 UTC,I was making a little quiz/game using web sockets and it was bending my mind. Data going and going out all at the same time.
PHP,3du810,MyWorkAccountThisIs,5,Sun Jul 19 22:34:59 2015 UTC,"i posted a rather angry and curse laden response elsewhere.  here's the bottom line - if you support yourself by writing code that solves people's problems than the hell with what anyone else thinks.  somewhere along the line, the programming industry has attracted people who want to engage in some kind of dick measuring contest based on the tech they use.  really?  really?  if you think you are a more worthy human being because you know a particular programming language then you really are beneath contempt and thank you for identifying yourself as a flaming asshole instead of leaving me to guess."
PHP,3du810,anon0108,1 point,Mon Jul 20 11:08:22 2015 UTC,"That ""somewhere along the line"" was 1979 when suddenly there were multiple platforms and languages to choose from to accomplish something. By 1986 people were starting to get paid very differently according to which platforms they knew. Today it's alpha geekdom, and if you don't know anyone who thinks they are better because of what techs they are using, you aren't paying attention or haven't worked with a team of programmers. The dick measuring contest begins with which keywords you can lie about on your resume and ends with how much money and power you are getting because you have those keywords. It's part of the brogrammer universe. Have fun in IT."
PHP,3du810,Undertoad,2,Mon Jul 20 12:38:26 2015 UTC,"that's interesting.    i got into the industry in 1990 and didn't notice this till the mid 90s.  since then, i have worked with people who thought their intellectual shit didn't stink and had excessive pride in having memorized parts of different language specs.  i just thought this crap was a relatively new invention.  i've got a simple solution to dealing with it though.  i work remotely.  when my only interaction with you is thru IM and email, i can ignore an awful lot."
PHP,3du810,anon0108,1 point,Mon Jul 20 13:25:02 2015 UTC,So you're getting judged only on the quality and quantity of the work you provide? That's crazy! :)
PHP,3du810,Undertoad,1 point,Mon Jul 20 13:38:05 2015 UTC,"everyone on my team has different strengths and weaknesses - there's the server side guy, the javascript guy, the android guy, the iOS guy and so on.    largely, yeah as long as the stuff works, nobody gives you grief."
PHP,3du810,anon0108,3,Mon Jul 20 14:09:08 2015 UTC,"Web programming is like a gateway drug to full distributed system programming. So hating yourself for that is hilarious. Distributed systems do a lot more real-world work than a little C toy kernel would, and the algorithms for creating resilient distributed systems are fascinating.  Many of the lower-level problems you can solve in lower-level languages have been solved (say you don't write everything in C, you write yourself a runtime like Java, PHP, JS and write most code there). Distributed systems is where it's at. And the web is the most mainstream (and largest) distributed system."
PHP,3du810,underwatr_cheestrain,5,Mon Jul 20 06:52:22 2015 UTC,"Love this post!!  I went to school for a totally unrelated field in healthcare because in the late 90s cs wasn't that big a deal and healthcare was.  I spent all my free time obsessed with the web.  Mind you I loved ""real programming"" because of video games and convinced myself that I was going to learn c++ and algorithms and make sick games.    Well that never really panned out as I wasn't that interested in learning all that and realized that one person couldn't make sick games.  I still was obsessed with the web and started following the work of Eric Jordan and Shane Mielke.  I was on Ultrashock forums 24/7 and was obsessed with web interface design.  I would learn stuff and each new thing I learned made me extremely happy.  I did this all in my spare time while going to school for a degree that I had no interest in.  I ended up getting a job in healthcare out of college but was still obsessed with web dev/design.  By the time I was out of college I had a really good grasp of Actionscript, html, css, php, and Js.  I'm in my 30s now still working in healthcare.  But my heart is in web design.  I love creating interfaces.  So I am currently freelancing, and am actually thinking hard about turning that into a thing.  Anyway that's my two cents."
PHP,3du810,deathbybayleaf,3,Sun Jul 19 16:55:20 2015 UTC,"dude, keep going! doing what you love and working for yourself is literally the best shit in the world!"
PHP,3du810,LEO_TROLLSTOY,2,Mon Jul 20 02:31:28 2015 UTC,"i had the same doubts about web dev being real programming as ""too""  much is abstracted.  but then i put it to myself like this: If my goal is to build a house,  i would rather start with pre-assembled parts than being forced first to build my tools first and go mine minerals for concrete or chop wood.  (this is a comparison to low level languages)  i do learn c now but only because i need it to achieve specific tasks.  But to be honest ,  memory management seems a waste of time if it can be abstracted.  Coding should be about intelligent code,  not losing your life learbing all the underlying tech BS.  I dont want to be a frikin PHD in languages just to be able to speak i. e German"
PHP,3du810,sillentkil,1 point,Mon Jul 20 08:41:18 2015 UTC,"Wow good article, i think it describes a part of most ""web developers"" lives. Almost every web developer i know, mostly php developers have at one point talked about this feeling myself included.   I think i was lucky, at the time i had a lot of contact with the users i was building the software for the thing that kept me going was their great feedback. Knowing i was able to develop new features that would make their live easier, and being able to develop them within a short time span.   But still at the time i didn't always had the feeling i was an software developer, i think that came the last few years with php maturing and me writing more complex, more structured and better code.   What i learned the past few years is that PHP might not be the best programming language, but done correctly we can make/write beautiful software and dominate the web with our ability to quickly develop and deploy new features."
PHP,3du810,creatiff,1 point,Mon Jul 20 07:50:39 2015 UTC,"php and jquery is not the definition of ""web development"". after 10+ years of embedded-, PCL programming and web development i EASILY prefer programming in the term of ""easy"". real webdevelopment is ALL but easy, and my experience with people who call it easy usually indeed stop at jquery and php."
PHP,3du810,kerel,1 point,Mon Jul 20 08:16:22 2015 UTC,"I guess this is some good timing OP. I felt that I went through the same feelings a couple of months ago and I'm just now starting to realise that I actually like web developing.   Your post reminded me of how people are cunts most of the time and are so insecure they make everyone else feel worse to feel better.   I do hope you can find your love again, maybe you weren't made to program forever ? I don't even know, I don't think it's a given to do a job all your life.   Good luck to you OP."
PHP,3du810,piercemoore,1 point,Mon Jul 20 09:11:47 2015 UTC,"Wow. Just... Wow.   This article was beautiful and passionate and powerful and overwhelming and empowering all at once.   This article mirrors my own brain in so many ways it's eerie.   Push through, OP. The grass is always greener on the other side. Until you get there, of course.   Give me a shout if you want to talk nerd."
PHP,3du810,shivenigma,1 point,Mon Jul 20 12:20:51 2015 UTC,one of the best articles I've read in a while..
PHP,3du810,treycook,1 point,Tue Jul 21 07:41:31 2015 UTC,"Oh, hey, twinsies!"
PHP,3du810,halfercode,-2,Sun Jul 19 18:01:38 2015 UTC,"Someone beat ya to it, in /r/webdev! :-)  https://www.reddit.com/r/webdev/comments/3dte3a/the_selfhating_web_developer/  Edit: I don't mind the DVs but I don't understand them. Is it not of interest that a Reddit discussion may already be underway elsewhere?"
PHP,3du810,Disgruntled__Goat,2,Sun Jul 19 17:30:46 2015 UTC,"Probably the way you phrased the comment. By saying ""Someone beat ya to it"" you're implying we should be having the discussion over there and not here as well.  (By the way, anyone who wants to view other discussions can click the appropriate link at the top of the page.)"
PHP,3du810,halfercode,1 point,Mon Jul 20 15:34:05 2015 UTC,"For clarity, it isn't my view that people may not discuss the post in two places, but that there is increased value if it is all in one place. People may well click on the top bar, but they would not necessarily know it has already been posted in a related sub.  Thanks for the feedback though - I will ease off mentioning it, unless it is x-posting from one user."
PHP,3du810,Disgruntled__Goat,1 point,Mon Jul 20 15:52:28 2015 UTC,"there is increased value if it is all in one place   Maybe, but different subs have different user bases and concerns. The comments here would naturally focus more on PHP."
PHP,3dyo9v,roeyhazot,3,Mon Jul 20 16:39:43 2015 UTC,"This is not a support subreddit. In any case, just add the following lines before the mail() method and check if your data is there:  var_dump($name); var_dump($number); var_dump($email); var_dump($comment);   Enable debugging options in the php.ini and see if any errors appear. If you plan on working more with PHP, get PHPStorm, enable xDebug and learn how to use the debugger.  Also, read and do this:  https://stackoverflow.com/questions/845021/how-to-get-useful-error-messages-in-php"
PHP,3dyo9v,ultio,1 point,Mon Jul 20 16:48:08 2015 UTC,Also make sure wherever you are hosting this script has PHP mail enabled as some of them will block this functionality to prevent spam.  With that being said this method is almost 90% headed for a spam folder.
PHP,3dyo9v,agoldenberg,2,Mon Jul 20 16:58:26 2015 UTC,But if it's just being sent to my email which is hosted through the same company then is there still concern surrounding spam?
PHP,3dyo9v,agoldenberg,1 point,Mon Jul 20 17:11:40 2015 UTC,Depends on what kind of spam filtering they are doing.  It might also be that they do not have the PHP Mail functions available to prevent people from spamming via PHP.
PHP,3dyo9v,shoxty,1 point,Mon Jul 20 17:19:37 2015 UTC,"I've gone through a lot of pain and tears over the past 10 years trying to deal with sending mail from my own servers. It's very difficult to get your web server trusted with a lot of mail clients. Try running your servers IP address through spamhaus (https://www.spamhaus.org/) to see if you are blocked. If you are they have a process you can go through to whitelist it.   One thing you may consider, is using a sass provider such as Sendgrid. These days this is what I do because I just got so fed up with my email always being considered spam from my own server. Sendgrid on the other hand has a free tier that lets you send 16,000 emails a month (which for me was way more than enough) and their servers are trusted. I've never had an issue with an email considered spam coming from them. You can easily send your email via Sendgrid by using SMTP or a REST call by updating your server configuration or modifying this PHP script slightly. Their instructions are very easy to understand.  Regardless, good luck with your project!"
PHP,3dyo9v,PeppersMagik,1 point,Mon Jul 20 17:45:34 2015 UTC,"I'd like to add that; if disabled, a lot of hosting companies will enable PHP mail once you ask, they may ask you to provide a couple details about how it will be used.  I don't see any red flags in the script but I can't back what u/ultio said enough, learn to debug PHP.  Without using an extra debugging tools, I would print the input right from the start, then you can rule out your form not being setup correctly. After that dump the variables. If you've gotten this far you know php mail is getting all the info it needs to work. Then you can also print the response of php mail.  $result = mail($to, $subject, $body); print_r($result);   Should that result be true then you know that your script is working fine and it's something external from your script, like IP reputation or server config that is causing your mail not to send.  If it does turn out that it's your hosting company and they aren't willing to unblock it, you can use a service like Mandrill to send your mail or as an email alternative, Slack to push alerts to. Both work via API and have PHP packages."
PHP,3dyo9v,disclosure5,2,Mon Jul 20 17:54:51 2015 UTC,"PHP's mail() function makes a lot of assumptions about the server which may not be true. Google the various ""PHP SMTP"" solutions."
PHP,3dw63l,tournesol1985,24,Mon Jul 20 01:08:02 2015 UTC,"You could give it a shot and if you just absolutely hate it, start looking another gig while working at your current place. There are even a lot of remote based Laravel jobs you might be able to land.  But at the very least, if you learn a little WordPress then decide to move on to another gig, at least you now know some WordPress, which you never know when that could come in handy down the road."
PHP,3dw63l,utotwel,3,Mon Jul 20 01:10:58 2015 UTC,"Thank you Taylor, your work absolutely inspires me and is the reason I get to call myself a web developer. I'll keep an eye on Laravel jobs.  My personal experience with WP is a simple website i built back in 2009, when I had near to zero PHP knowledge.  Now the other members of the team are using WP, which is good because they could help me out (although everybody is supposed to work solo on a project). On the other hand I see everyday some of the pros/cons and the struggles that come with the WP ecosystem, and that discourages me."
PHP,3dw63l,nerdklers,4,Mon Jul 20 01:26:12 2015 UTC,"Learning is never a negative thing and will only make you a more versatile developer. You will most certain benefit from it not just in the scope of Laravel and Wordpress, but PHP and programming in general. And as /u/utotwel said, you can always try to find work somewhere else if you don't like it. Good luck! :)"
PHP,3dw63l,utotwel,1 point,Mon Jul 20 05:34:59 2015 UTC,"You're right, learning is not a bad thing. My objection is that I would prefer learning things/tools like git, testing, design patterns, deployment strategies etc, than learning a CMS from scratch that will require far more time for me to master."
PHP,3dw63l,jezmck,4,Mon Jul 20 16:43:27 2015 UTC,Good luck in whatever you decide! :)
PHP,3dw63l,lordofworms,1 point,Mon Jul 20 01:32:51 2015 UTC,WordPress has improved a lot since then. Add Advanced Custom Fields and you can do a lot.
PHP,3dw63l,kodiashi,-4,Mon Jul 20 21:05:08 2015 UTC,"Thank you Taylor, your work absolutely inspires me and is the reason I get to call myself a web developer.   Just curious, aside from Laravel & HTML/CSS/JS, what else do you have experience with?  EDIT Wait, you said in the post. Nothing else. My bad."
PHP,3dw63l,kodiashi,12,Mon Jul 20 05:05:45 2015 UTC,"If I accept to learn Wordpress, should I do it at work during my shift, or in my free time at home? (I think my employer implied the latter.)   I think if you are being asked to learn Wordpress, at the very least you should be given some time to learn on the job."
PHP,3dw63l,theedeacon,1 point,Mon Jul 20 04:35:06 2015 UTC,That sounds fair.
PHP,3dw63l,davzie,6,Mon Jul 20 16:35:35 2015 UTC,"I never understand why developers are so against learning different tools, I really like Laravel and use it often, but it shouldn't be the only tool in your kit.  Wordpress may not be the best CMS out there, and to a programming purist the codebase is horrific, but in many cases it gets the job done just fine.  I have a very large site running on Wordpress right now with 50k users and a highly customized theme, it runs perfectly and allows my client the ability to make the simple changes they want.  For the more complicated tasks and 3rd-party vendor needs, I have Laravel installed on a sub-domain and use it to power a REST API.  That works great too and allows me to use each tool to its best abilities.  Don't lock yourself into one tool and declare yourself done.  At one point CodeIgniter was great, and then Laravel came along.  In five years Laravel could go the same way and we'll all be using something else.  Never stop learning, build your skillset, and become a better developer."
PHP,3dw63l,dracony,1 point,Mon Jul 20 14:34:27 2015 UTC,"Of course, CodeIgniter wasn't forever, and Laravel may follow the same path in the future. CI made me a better developer compared with my custom-PHP days. Then Laravel taught me a lot of things and made me again a better developer than I was in my CI days. Can I expect the same with Wordpress?  I understand it's like comparing apples and oranges, because WP is a CMS and not a framework. It's power lies in the simplicity for the end-user, it gets the job done like you said.  But it might be a headache for a developer like me who is accustomed to build things from the ground-up and not customizing ready-made themes and plugins."
PHP,3dw63l,dracony,3,Mon Jul 20 17:02:39 2015 UTC,"To me, a 'better' developer is someone who can demonstrate their problem solving skills and complete the task at hand regardless of the (tools,language,platform,etc) that they're provided with.  Laravel may have taught you better practices and made you a better developer in the process, but you shouldn't be so tightly coupled to it that its your only means of solving a problem.    Nothing says that you have to customize ready-made themes and plugins, I regularly make my own based on ZURB Foundation or Bootstrap and the process is pretty straightforward.  The same thing goes for plugins, take ownership and write your own to do exactly what you need.  You can even pull in Laravel components if you feel that they do a better job than what Wordpress provides. I actually use the Laravel Validation class in one of my Wordpress themes and it works great.  So before you quit and tell your boss that you only know how to use one tool, you may want to consider showing them how versatile you are in other areas.  You can still be an advocate for Laravel and push for it's use when it's the best fit.  Best of luck."
PHP,3dw63l,alexanderpas,1 point,Mon Jul 20 18:21:31 2015 UTC,"I agree here, throwing in the towel when faced using a different tool doesn't make a dev any better. But, if you aren't happy, leave. A new challenge is awesome, and that is why I program."
PHP,3dw63l,BetraY__,1 point,Tue Jul 21 03:41:56 2015 UTC,"This whole argument about being open minded and learning new tools is great but falls down when you sit and really think about the finite time we often have available to us. That also coupled with the often crippling feeling of imposter syndrome you can understand why developers like to stick to what they know sometimes. Never stop learning of course, but not at the expense of your sanity :) additionally op, I am looking to hire a  trustworthy remote Laravel developer ;)"
PHP,3dw63l,bauski,5,Mon Jul 20 18:23:02 2015 UTC,"I work as a Laravel developer and my employer wants me to learn Wordpress. What should I do?   I maintain a complicated service-oriented application based on a custom framework. Absolutely no WordPress in it. The public-facing pages though? WordPress. You gotta learn to be flexible and combine multiple existing solutions into new solutions.  Right at this stage, you're rejecting WordPress before you even have learned it, so the problem seems PEBKAC oriented. Learn WordPress so you know why you hate it, at least. Then when you know why you hate it, we can discuss solutions to specific problems it has."
PHP,3dw63l,bauski,1 point,Mon Jul 20 05:00:58 2015 UTC,Whats Pebkac ?)
PHP,3dw63l,johnpbloch,2,Mon Jul 20 07:49:21 2015 UTC,"It's a politically correct (or politically incorrect, depending on how you see it) way of suggesting the problem is not the technology but the person :P Google it."
PHP,3dw63l,ScuzzyAyanami,1 point,Mon Jul 20 07:52:46 2015 UTC,"Ah, I just did ) Going to start using it now )"
PHP,3dw63l,NeuroXc,1 point,Mon Jul 20 08:14:55 2015 UTC,Don't forget the Error with ID: 10-T
PHP,3dw63l,alexanderpas,1 point,Mon Jul 20 22:50:18 2015 UTC,Problem exists between keyboard and chair.  Basically saying that he is the problem for knocking wp before he tries it.
PHP,3dw63l,alexanderpas,1 point,Mon Jul 20 07:55:57 2015 UTC,"Yup, i'm negatively biased against WordPress. That's why I want /r/PHP's opinion. But I'm open to learn it (at least not in my free time), but I fear the frustration and the difference in code quality."
PHP,3dw63l,alexanderpas,4,Mon Jul 20 16:49:18 2015 UTC,"Learning is not a bad thing. I know you want to be a fine honed knife that focuses on only a few things but i believe, as in development and in life, one  should never disregard things without personally trying it out first.   Not only would I suggest you try out wordpress but I would suggest you go into it with an open mind. Try to learn from their good and bad. Every experience can be a teaching tool. Don't let previous experiences narrow your mind but instead let it broaden it."
PHP,3dw63l,Nicoon,1 point,Mon Jul 20 14:48:31 2015 UTC,I like your point of view. Cheers!
PHP,3dw63l,fieldOfThunder,2,Mon Jul 20 17:03:24 2015 UTC,"Thanks. I just don't want you to end up in my shoes where it took me 5 years before I even acknowledged WordPress. I've not only learned a lot about how I design my CMS frontends and backends, but I've also found a great way to improve my resume, get easy one off jobs for simple site deployments, and broader experience."
PHP,3dw63l,rafamds,3,Mon Jul 20 17:45:40 2015 UTC,"As a WordPress developer who's always been a dabbler in all things MVC, I'd suggest checking out Roots. Also, I've used twig, monolog, etc. with WordPress, so I'd imagine a lot of laravel's components could also be leveraged.  Anyway, if your employer wants to pay you to do WordPress work, the implication is that they do not wish to pay you for non-WordPress work. You should decide if that's something you want. I wouldn't really worry about it limiting your career. A lot of WordPress developers ""leave"" it for other platforms without any discernible detriment for having made money building on a platform that powers a quarter of the web."
PHP,3dw63l,fieldOfThunder,1 point,Mon Jul 20 16:17:01 2015 UTC,"Roots looks promising!  I think the implication is that there won't be enough new projects (web apps) to sustain my Laravel-work. On the other hand, there are Wordpress-presentational-website projects that need to be done, so I need to learn how to do that, in order to keep my position and the company going."
PHP,3dw63l,geggleto,2,Mon Jul 20 17:13:24 2015 UTC,"One thing I rather liked about WordPress is the ""codex"" documentation is quite good and will help you understand how it all ties together. The very first thing I was asked to code for a WordPress site was straight into the deep end with plugin development. Once I started producing the extensions our other designers required It become fairly straight forwards thereafter.  you do feel dirty doing things the ""wordpress way"" but if its for a job, its for a job."
PHP,3dw63l,dracony,3,Mon Jul 20 04:38:47 2015 UTC,"I personally disagree with you about the codex documentation being good. Having developed a few plugins as well, I have had numerous times where I've been stuck trying to figure out what type of data am I supposed to pass into a function and what am I getting back from it (e.g. get_sample_permalink returns ""array with two entries of type string""; What are those two strings? I have no way of knowing other than to throw in some sample data to my plugin and hope that it works.)"
PHP,3dw63l,aequasi08,1 point,Mon Jul 20 12:19:27 2015 UTC,The horror!
PHP,3dw63l,dracony,1 point,Mon Jul 20 17:06:16 2015 UTC,"If you want to see horror, here ya go:  https://codex.wordpress.org/The_Loop  and the following function:  https://codex.wordpress.org/Function_Reference/have_posts   Calling this function within The Loop will cause an infinite loop."
PHP,3dw63l,mbthegreat,1 point,Mon Jul 20 22:58:37 2015 UTC,"This is painful. Wait, do I see a lot of functions there without any argument?"
PHP,3dw63l,dracony,1 point,Tue Jul 21 00:02:25 2015 UTC,"Yup, they all interact with the global $wp_query and related global variables."
PHP,3dw63l,mbthegreat,1 point,Tue Jul 21 00:17:55 2015 UTC,You had me at global.
PHP,3dw63l,Aalicki,1 point,Tue Jul 21 00:28:25 2015 UTC,I know ;)
PHP,3dw63l,mbthegreat,2,Tue Jul 21 01:10:04 2015 UTC,"If I accept to learn Wordpress, should I do it at work during my shift, or in my free time at home? (I think my employer implied the latter.)   You get paid for your time. If your employer expect you to work without monetary compensation, tell him no."
PHP,3dw63l,aequasi08,1 point,Mon Jul 20 07:14:12 2015 UTC,Fair enough!
PHP,3dw63l,ericnkatz,3,Mon Jul 20 17:40:49 2015 UTC,You could tip the scales in your favour.  (Disclaimer: I haven't used that.)
PHP,3dw63l,alexanderpas,2,Mon Jul 20 07:24:16 2015 UTC,"this looks awesome, never heard of it and it looks very cool. Thanks for the share :D"
PHP,3dw63l,dbbk,2,Mon Jul 20 13:55:50 2015 UTC,You're welcome! I have no idea why it's flying under the radar. I just randomly stumbled over it a while ago and haven't heard anyone talking about it since.
PHP,3dw63l,ThePsion5,1 point,Mon Jul 20 14:13:46 2015 UTC,That looks beautiful!
PHP,3dw63l,pmjones,2,Mon Jul 20 17:07:39 2015 UTC,/quit
PHP,3dw63l,dracony,3,Mon Jul 20 13:32:35 2015 UTC,"There is seriously nothing wrong with developing in Wordpress.   Yes it's API is build entirely on functions but that doesn't meen you can't use classes in your own code. PHP API is 99% functions itself, and also a big chunk of coding with Laravel is calling static functions. So it's not like WP is that different.  You can still use Composer and whatever tools you like for your code within Wordpress. And, of course you can find a lot of familiar pattern in there. E.g. their whole filtering is based on the chain-of-responsibility pattern, etc."
PHP,3dw63l,AcidShAwk,8,Mon Jul 20 01:32:03 2015 UTC,"There is seriously nothing wrong with developing in Wordpress.   Theres a lot of things wrong with it, lets not be misleading. But yes, its still a viable tool for certain situations, and has some good stuff in it."
PHP,3dw63l,dracony,1 point,Mon Jul 20 05:15:13 2015 UTC,"Really? Entertain me then, what is inherintly wrong with it ? And no, complains about low quality 3rd party plugins that you install yourself is not WP fault"
PHP,3dw63l,AcidShAwk,3,Mon Jul 20 07:23:28 2015 UTC,"Wordpress doesn't really expose a controller type layer to deal with your application logic. It takes requests and pushes them directly toward views (templates). This means that views become responsible for a lot of the logic or your application. Of course you can differ this to the dreaded functions.php (I think the existence of that shows the sort of dodgy mindset WP comes from), but it doesn't really solve the problem. You still end up with serious coupling problems.  On the admin end the problem is the other way round, you aren't really given a proper system for providing views so you see an awful lot of inline html being spat out by your code which defines option pages etc. Once you get in to stuff like the settings api you are really staring into the abyss."
PHP,3dw63l,aequasi08,-1,Mon Jul 20 10:35:42 2015 UTC,You never have to manage the coupling between wordpress application and templating logic. It is not like you are going to be integrating twig with it. If you consider wordpress as just an API with heaps of functions ( like th ePHP stdlib itself is) you can build any architecture you like around that API.   you aren't really given a proper system for providing views   Well put anytemplating engine you like and pass the HTML it renders to Wordpress.  Nothing wrong with that really
PHP,3dw63l,johnpbloch,2,Mon Jul 20 10:56:06 2015 UTC,So.... build your own framework then?
PHP,3dw63l,alexanderpas,2,Mon Jul 20 11:51:44 2015 UTC,He did :\
PHP,3dw63l,johnpbloch,1 point,Mon Jul 20 14:01:51 2015 UTC,:p I know.
PHP,3dw63l,alexanderpas,1 point,Mon Jul 20 16:48:49 2015 UTC,Thats not an excuse for having your view handling a ton of logic.
PHP,3dw63l,amenadiel,1 point,Mon Jul 20 14:12:31 2015 UTC,"Or maybe you can integrate Twig with Timber? http://slides.com/ericnkatz/wordpress-theme-dev-w-twig-and-gulp#/ :) I think with a real template layer you can use your Standard WordPress template hierarchy as a psuedo Controller system.   Granted it is still very different from any other MVC system, but I think it can work."
PHP,3dw63l,Vusys,1 point,Mon Jul 20 14:58:00 2015 UTC,"https://codex.wordpress.org/The_Loop  requires you to use  https://codex.wordpress.org/Function_Reference/have_posts  which has the following note:   Calling this function within The Loop will cause an infinite loop.   Effectively, the concept they use is a circular array with an empty spot in it to denote the end.  If an filled spot is accessed, it stays at that spot, until the data is read out. If the empty spot is accessed it directly moves to the next spot, and the above applies again after that."
PHP,3dw63l,fleshintogear,1 point,Mon Jul 20 23:06:01 2015 UTC,"The first time I had to dig into learning WordPress, I came across this whole loop thing and just immediately knew I was in for a bad time."
PHP,3dw63l,fleshintogear,3,Tue Jul 21 21:54:30 2015 UTC,also a big chunk of coding with Laravel is calling static functions   You mean static object proxies. ;)
PHP,3dw63l,CODESIGN2,2,Mon Jul 20 11:54:50 2015 UTC,Heh. :-)
PHP,3dw63l,maiorano84,1 point,Mon Jul 20 12:56:00 2015 UTC,Not necessarily. You can use dependency injection for most things instead of Facades and helper functions.
PHP,3dw63l,epoxxy,0,Mon Jul 20 17:16:43 2015 UTC,"It is still a static call. It doesn't matter what the code behind the static call does. The important part is that it is a hidden dependency that you don't see immediately.  I know you were making a joke, but wanted to plug some explanation too )"
PHP,3dvzpp,relyon,3,Mon Jul 20 00:10:11 2015 UTC,"How often do you roll your own ""no-framework"" framework to clients? When frameworks like Symfony and Laravel are too big for you?"
PHP,3dvzpp,vrijdenker,4,Mon Jul 20 08:05:49 2015 UTC,"I always do it, because when you connect the components yourself you know how they interact and there are no hidden shortcuts taken between components that can become an obstacle to refactoring later.  That aside also an application should have the freedom to define its own architecture. You can definitely fork a framework and customize it, but now you're entirely on your own, merging patches from upstream and so on.  A better solution is to draw the line at components: I'll use these components, not fork them, but integrate them as-is, and the ""framework"" part will be in my repository where I can customize it.  I.e. the framework becomes a little bit of glue code between third party components, much easier to maintain than a full framework fork."
PHP,3dvzpp,vrijdenker,2,Mon Jul 20 08:38:46 2015 UTC,"A good framework and good knowledge of the framework won't have hidden shortcuts neither. Using a (good) framework will actually help you prevent hidden shortcuts. For example, the fact that Symfony (which is out of scope in this discussion, but just for the sake of discussion) has attempted to completely implement the webstack as it should be has helped me a lot in order te prevent a page from being available as a GET-request while it should be available as a POST-request only.  When connecting components yourself each time these stuff will most likely happen a lot more often."
PHP,3dvzpp,vrijdenker,3,Mon Jul 20 10:03:22 2015 UTC,"The particular example you cite is solved by listing the methods in your route, which most routers support:   $router->add('POST', '/hello/', Handler::class);   ...or even enforce:  $router->post('/hello/', Handler::class);   You can also filter methods at the level of the controller, or before the router. The method is a simple string, it doesn't take someone to implement a ""webstack"" for you to filter by it.  When you use a framework, the default assumption is what you describe: there's a complex solution to my needs here and it can't be done in a simpler way, it's implemented as it should be.   As your app evolves you'll start hitting walls, either in features or performance and that's when smaller, more focused components become preferable over large ready-made ""stacks""."
PHP,3dvzpp,vrijdenker,1 point,Mon Jul 20 10:27:57 2015 UTC,"Yes, that was ""just an example"" and indeed a router component can fix that. Maybe it was a bad example. The point I was trying to make is that you will have to think about how to tie things together whereas the people who wrote a framework already did that work for you. The Silex framework I mentioned does exactly what you want: you can use as little as nothing of it or you can make it as big and complex as you want. But still: it does give the toolbox to help you with that job instead of you will have to start from scratch each time.  Still though: in the end it's just about getting the job done either way :)"
PHP,3dvzpp,Disgruntled__Goat,3,Mon Jul 20 15:51:44 2015 UTC,"The point I was trying to make is that you will have to think about how to tie things together whereas the people who wrote a framework already did that work for you.   I guess this shows our difference of perspective. I already know how to tie things together (I mean, it's fairly simple, it's not a lot of code and you can have a template to start with for a new project), so someone else doing it for me is a drawback, not an aid. Consider that a framework author is building a ""generic solution"" without any regard for your specific project needs. Not all apps are the same by far, and being able to replace components one by one is essential for the longevity of a codebase.   All Silex does is combine together Symfony components. If I want to replace one of those Symfony components with another, there's no simple way for me to do it, Symfony's interfaces are not designed to be easily replaceable - consider the HttpKernel, very minimal, one method, right? Yet it takes a Symfony request and returns a Symfony response, and those are gigantic composite objects made of other composite objects. Any third party component that doesn't speak ""Symfony"" can't play in the Silex sandbox because it can't use the same Symfony objects. This is why PSR-7 happened, but there are many other such tie-ins to Symfony for which we don't have a PSR standard and adapters.  So Silex may seem minimal and decoupled, but it's anything but. It's simply Symfony Light.  Also, in Silex the Application class is a god object that combines routing, handler creation, dependency injection and dispatching (among other things). If you need to tease those apart to customize & control them, you have to fork Silex. Which, as I said is undesirable, as a framework repository is typically not designed to be ""forkable"" - a lot of reusable code is mixed in with the ""glue code"" and if you fork it, you need to maintain it all.  I support the idea of there being a public ""app skeleton"" which we can download and use as a starting point for our projects. And many frameworks have that. The problem is that the ""tieing things together"" code is in the framework (reusable code) and not in the app skeleton (customizable code).   Most PHP frameworks are like that - they don't separate reusable and customizable code in a way that gives app developers control over their own app architecture. Maybe the framework authors feel the need to maintain control and dictate architecture to the app developers, or more likely it's simply where we are in our state of art right now. We've more to learn."
PHP,3dvzpp,gearvOsh,1 point,Mon Jul 20 16:05:26 2015 UTC,"Wow, point taken. Your explanation makes a lot of sense now. I'm guess I'm gonna try your way some time :)"
PHP,3dvzpp,Disgruntled__Goat,4,Mon Jul 20 17:05:49 2015 UTC,Not. I now use Silex (http://silex.sensiolabs.org/) in those cases so that I am still flexible enough to quickly expand the project if needed.
PHP,3dvzpp,gearvOsh,2,Mon Jul 20 08:15:19 2015 UTC,"Is there a reason that namespaces used in regular code are relative, but namespaces in ""use"" are not? Example:  namespace MyNamespace;  // doing this is relative and refers to \MyNamespace\Vendor\Package\SomeClass $thing = new Vendor\Package\SomeClass; // need leading backslash $thing = new \Vendor\Package\SomeClass;   But here, Vendor is a top-level NS without the leading backslash:  namespace MyNamespace; use Vendor\Package\SomeClass;"
PHP,3dvzpp,teuna,2,Mon Jul 20 13:12:41 2015 UTC,"Because use is importing from the global scope, not the local scope."
PHP,3dvzpp,forgetfulcoder,1 point,Mon Jul 20 22:14:41 2015 UTC,"Yes... my question is why?  Doing use \Vendor\... works, so why not use that for importing from global scope, and have the lack of backslash import from the local scope? Then it would be consistent with the rest of your code."
PHP,3dvzpp,teuna,1 point,Tue Jul 21 00:38:57 2015 UTC,No idea really.
PHP,3dvzpp,teuna,1 point,Tue Jul 21 00:58:11 2015 UTC,"PHP has a lot of frameworks, but they're all kind of similar. Essentially all takes on RoR's MVC-ish layout.  What are your most common annoyances with those, and what would you imagine a hypothetical better framework could be?"
PHP,3dvzpp,teuna,1 point,Mon Jul 20 06:18:50 2015 UTC,"no context?  people tend to want to fit everyone's problems into ""their"" own version of how it should be done, truth is, it dépends, it dépends on so many things.. do you work for clients? in team? how many programmers in your team? skill level? what are you building? etc..."
PHP,3dvzpp,teuna,5,Mon Jul 20 07:33:57 2015 UTC,Why do you spell 'depend' with an 'é' but no other word you typed that has an 'e' has the accent on it?
PHP,3dvzpp,jaym5s,1 point,Mon Jul 20 15:30:10 2015 UTC,heh sorry about that
PHP,3dvzpp,teuna,1 point,Mon Jul 20 18:04:22 2015 UTC,"I see, it seems like I'm asking for a framework. I edited the wording to clarify this. From:   ""what would you imagine a better framework would be""   to   ""what would you imagine a hypothetical better framework could be"".   I'm trying to start a discussion about your frustrations (as in, not mine, but those who will reply) with frameworks, and what do you think the PHP framework landscape lacks.  Skill level: ninja-phurtle (i.e. advanced :P)."
PHP,3dvzpp,DrummerOfFenrir,1 point,Mon Jul 20 07:55:16 2015 UTC,"it dépends, a hypothetical better framework to do what?  sorry I don't use frameworks so... but I can tell you that I hate it when in a meeting some software shop dev ask what framework we use and we tell him none and he (and our management guys) give us that weird look like we just killed kittens or something"
PHP,3dvzpp,flyingkiwi9,0,Mon Jul 20 08:30:35 2015 UTC,"Well, let's use a more generic term: architecture, infrastructure, plumbing.  How do you organize and tie your code to make a web application?"
PHP,3dvzpp,DrummerOfFenrir,2,Mon Jul 20 08:32:14 2015 UTC,"if all you need is a 3 page website with a contact form I'll tell you to use plain old html files and maybe have a php function declared somewhere at the top of your contact ""page"" to send your contact form data somewhere (email, db, whatever)  if you need to build the next etsy... it really dépends on what you're building  where I work we maintain a single ""app"" with different ""modules"" used by around 200 people (coworkers) daily, we don't use front controllers (or ""controllers"" at all) because we think they are an overhead and add unecessary complexity to a very simple and extremely flexible ""base"" architecture (we lost that war several years ago to java/c# devs, I know)  we use apache httpd and a combination of multiviews / ressourcefallback and a basic route() function à la microframeworks for ""clean urls"" / views and doctrine to model our domain"
PHP,3dvzpp,relyon,1 point,Mon Jul 20 09:59:52 2015 UTC,"we don't use front controllers (or ""controllers"" at all) because we think they are an overhead and add unecessary complexity to a very simple and extremely flexible ""base"" architecture   I'm quite curious what that would be like.  Usually when people say ""we don't use controllers"" there is a component that is 1:1 a controller, but they just have another name for it (handler, action, ...). But if it's not the case, that makes your architecture a lot more interesting.  The front controller is typically the router, BTW, so... do you have a router? If not, how do you identify and call the code relevant to a given URL/page? One way is routing through the file-system, old-school style, which works, but can be a bit limiting."
PHP,3dvzpp,PrintfReddit,1 point,Mon Jul 20 10:33:14 2015 UTC,"our ""router"" is a combination of file-system routing and a small function that parse URLs then run a callable just like microframeworks do (derived from web.php route() function)  httpd MultiViews does it's magic routing through the file-system then our function will map the request to a callable  our app has a ""human ressources"" module (more like a collection of HR modules), in our htdocs (document_root) we have a hr folder with an index.php in it, httpd (with Multiviews enabled) will ""use"" this file for every requests to 'http://mydomain/rh(*.)', if we add a mymodule.php file in this hr folder httpd will use it for every 'http://mydomain/rh/mymodule(*.)' requests  inside those files it works like in microframeworks  <?php include $_SERVER['DOCUMENT_ROOT'] .'/../lib/bootstrap.php'; route(['GET'], '/hr/employee/%s', function($uuid) {     if (null === $employee = entity('\Hr\Employee')->findByUuid($uuid))         return http_response_code(404);     return new View\Html('/hr/employee.phtml', ['employee' => $employee]); });   remember this is in a controlled environment but even if we fuck up and php source is seen we don't care, there's nothing usefull to see, domain objects and services are not in document_root  you know I learn a lot from you (deleted accounts :p) even when you're angry"
PHP,3dvzpp,relyon,2,Mon Jul 20 11:42:39 2015 UTC,"All right, interesting hybrid of file system routing and pattern based routing. Thanks for sharing! But you still have controllers, mymodule.php in every folder is your controller ;)   you know I learn a lot from you (deleted accounts :p) even when you're angry   How the heck ... :D"
PHP,3dvzpp,fiskfisk,1 point,Mon Jul 20 13:47:30 2015 UTC,Just out of interest why do you worry about resources if only 200 people are using your app?
PHP,3dvzpp,haburidabura,2,Mon Jul 20 22:45:44 2015 UTC,"it's a habit, back in the days you had to think about resources before shipping your program or else you were screwed  it's a bit of a shame really that today's dev are fine with throwing hardware or cache at performance problems, just my opinion"
PHP,3dvzpp,haburidabura,1 point,Tue Jul 21 02:02:02 2015 UTC,"Hello, I have a question that I recently ran into the other day.  Is it possible to get a constant of a  class, that is stored in a member variable of another class without an intermediate variable?  If I had a class Car and a class Engine, and $car->engine is an instance of Engine. Is it possible to get $car->engine::TYPE? I was getting errors so my workaround was creating a temp variable $engine = $car->engine, so I could get $engine::TYPE"
PHP,3dvzpp,haburidabura,7,Mon Jul 20 02:16:49 2015 UTC,"Just FYI this is fixed in the upcoming PHP7, so you'll be able to do $car->engine::TYPE in there and it'll work fine."
PHP,3dvzpp,anlutro,4,Mon Jul 20 06:20:40 2015 UTC,Just use a getType() method on engine... $car->engine->getType()
PHP,3dvzpp,haburidabura,4,Mon Jul 20 02:27:11 2015 UTC,aaaand internally return self::TYPE I am guessing. I love falling into coding tunnel vision.  Thank you for the quick response!
PHP,3dvzpp,iCupid,1 point,Mon Jul 20 02:29:04 2015 UTC,"Imagine I would need to store some history of users performing calculations on fields they entered, these data are sent from JSON from an mobile app, is it OKAY to just store the JSON data in a MYSQL-database, or is it good practise to try convert the data to fit in a relational database structure?"
PHP,3dvpxt,mario_deluna,5,Sun Jul 19 22:45:48 2015 UTC,"Again there are several ways how to do this, my philosphy is to allow as mutch freedom as possible.   Does that include spelling words? ...Kidding aside.  I don't think the freedom to write the same thing 4 different ways is ""freedom"". That kind of thing where foo(a, b, c) is the same as foo([a, b, c]) will bite users in the rear, when they pass what they think is a scalar and it's an array. I'm talking injection-level security problems. It's much better for a dynamically typed language to keep method signature simple and predictable, so input is treated exactly like users expect it would be.  I'm talking from experience, because I did use to heavily overload my API methods, but in PHP it doesn't work well."
PHP,3dvpxt,geggleto,1 point,Mon Jul 20 05:52:18 2015 UTC,"I see, it's kind of the classical source of the ""It's not a bug, its a feature"" thingy. I think the best solution would be an optional setting to allow parameter parsing. Thanks for your feedback! :)  PS: Yeah my english is pretty much as horrible as a spoon when all you need is a knife."
PHP,3dvpxt,cakecoke,0,Mon Jul 20 09:53:43 2015 UTC,Laravel would like to have a word with you.
PHP,3dvpxt,paddydev,1 point,Mon Jul 20 17:51:43 2015 UTC,"Basically every query builder would like to have a word with me :)  They almost all implement the same Api pattern ( Kohana, FuelPHP, Laravel, AuraPHP, CCF, Codeigniter, FluentPDO ) and so does Hydrahon."
PHP,3dvpxt,rafamds,3,Tue Jul 21 09:13:12 2015 UTC,"you have a typo near 'age', '>' 18  looks good, ill give it a try"
PHP,3dvpxt,rafamds,2,Sun Jul 19 22:53:54 2015 UTC,"Awesome, great library!"
PHP,3dvpxt,dracony,1 point,Sun Jul 19 23:08:09 2015 UTC,"It seems promising, how about ORDER BY? Have you planned it?"
PHP,3dvpxt,dracony,1 point,Mon Jul 20 09:29:41 2015 UTC,It's there https://github.com/ClanCats/Hydrahon#ordering :)
PHP,3dvpxt,dracony,1 point,Mon Jul 20 09:38:42 2015 UTC,"oh my bad, totally missed it"
PHP,3dvpxt,Disgruntled__Goat,0,Mon Jul 20 09:53:57 2015 UTC,"Well, ho do you do this:  SELECT * FROM stats WHERE views > viewsRequired ?"
PHP,3dvpxt,dracony,1 point,Mon Jul 20 01:42:15 2015 UTC,"To come back at you, how'd you do it (in a hypothetical library), in terms of public API?  In my query generator I have something like this, but it's clunky: ->where('views', '>', new Field('viewsRequired'))  It works, but it's clunky not just because of the explicit object creation, but also because it's asymmetric - 'views' is a string, but the second operand can't be (if it's to be seen as a field)."
PHP,3dvpxt,Disgruntled__Goat,1 point,Mon Jul 20 05:54:43 2015 UTC,I have a special set of operators e.g. '>*' that means field to field comparisons
PHP,3dvpxt,dracony,2,Mon Jul 20 07:13:28 2015 UTC,"Well, it's another way, but not sure it's a clear direction forward either. Your solution is shorter, which is a definite plus, but kinda obscure (if we keep adding magical symbols, soon we'll have Perl).  Maybe in PHP 7.1 (or whenever) when we get access to PHP's AST, things will get interesting."
PHP,3duy1i,harrypotterthewizard,4,Sun Jul 19 18:50:16 2015 UTC,I use it for any CMS project with enough budget to cover the cost of licensing (EE + add-ons is usually around $500+ for the sites I build). Most of the my clients that I have built sites for love using it. I quite enjoy working with it and version 3.0 just around the corner brings some much need changes to the core architecture.   I have built one site with Craft and wasn't a big fan at the time. I would be willing to look into again however.
PHP,3duy1i,jworboys,10,Mon Jul 20 00:15:56 2015 UTC,"Perception is currently at level ""wat""."
PHP,3duy1i,2012-09-04,3,Sun Jul 19 18:51:50 2015 UTC,I second that. The name sounds familiar but I haven't heard it in years and years.
PHP,3duy1i,gimpy22222,2,Sun Jul 19 21:48:56 2015 UTC,"The flexibility and speed that you can create a complex content driven site in EE is pretty amazing. Just like any framework or tool available, finding what fits your requirements best is what is important.  Expression Engine also has a strong Stack Exchange site that has a pretty high Answer percentage and has a great community revolving around it. (http://expressionengine.stackexchange.com/)  EE does have a learning curve, but once you understand how it works, how simply it can be extended and the large quantity of quality plugins available (http://devot-ee.com), EE becomes a tool that can quickly and securely develop easy to use, solid sites.  Being part of of the EE community, i have never had and bad feelings from within, just from other people who may not understand or care to learn how the CMS works, or don't want to be part of the community."
PHP,3duy1i,Svpernova09,1 point,Mon Jul 20 16:21:27 2015 UTC,"I work for an agency that uses EE extensively. I've only started learning it and my initial impression is that it's crazy powerful. I struggle with it's templates a decent bit. I feel much more comfortable once I get down into a mod/plugin since it seems like there is less ""magic"" happening there."
PHP,3duy1i,commercial-hippie,1 point,Mon Jul 20 16:38:46 2015 UTC,A lot of EE developers moved over to Craft.  IMO it's much nicer that EE. They are currently re-writing it with Yii 2.
PHP,3duy1i,CODESIGN2,1 point,Sun Jul 19 23:22:40 2015 UTC,"A lot of people dislike ellislab products like EE and CI... It's based in general ignorance, scapegoating, and dev-snobbery. When released all these projects are using out-of-date PHP, but so is Laravel, so is Slim, and Symfony, and some of these add technical debt that PHP does not need.  I Think of Laravel as a completely separate thing to EE as well, so these are not comparing easily comparable objects.  It really depends upon the developer, but I don't see much about plugins on craft page, and as it is commercial, it seems really limited for what it does See Plugin docs for Craft"
PHP,3duy1i,no1youknowz,1 point,Mon Jul 20 12:33:39 2015 UTC,"5 years ago is really a long time.  Laravel wasn't even around then.  Personally my first question would be instead of taking the temperature of the ""community"", is why you think you need to use EE, if indeed there is a use-case rather than beating a dead horse."
PHP,3drhpx,lonebeta,22,Sat Jul 18 19:22:58 2015 UTC,"I'm sure new Array was just the result of high adrenaline. I think programmers freaking out in job interviews is the rule rather than the exception.   SQL command line was bad practice   If you meant connecting to a production server and running SQL on the CLI then fuck yeah. I'm sure you meant something which made sense, but lost your train of thought as you were phrasing it due to emotions.  The array push, on the other hand, I just can't fathom how you never came across that in 6 years of development. You didn't use it yourself, but you must have seen it thousands of times.   Somehow you managed to ignore it and that makes me wonder if maybe you just tend to ignore things you come across and don't understand. If that's the case, I think curiosity is what you need to work on. Make sure you have a very clear understanding of the code you're looking at, at all times."
PHP,3drhpx,Pardalean,5,Sat Jul 18 20:01:33 2015 UTC,"Huh. I used PHP for 4 years and never realized that you could use array_push. I was always cursing the language for making me use $array[] = $var, which makes me feel tremendously unsafe -- if I screw that up and write $array = $var, then I've wiped out my array."
PHP,3drhpx,kenlubin,6,Sat Jul 18 23:46:24 2015 UTC,"If you don't have a lot of stuff around your ears, you could try to spend some time reading other people's code on Github. I don't really do this myself, but it is definitely something to have on the priority list :)  Reading other people's code is one of the best ways to learn, and then you will come across a lot of different ways to acomplish the same task - both in terms of code conventions and architecture :)"
PHP,3drhpx,legato_gelato,2,Sun Jul 19 02:17:14 2015 UTC,"The docs suggest that you don't use array_push unless you are adding multiple items on to an array, due to performance issues."
PHP,3drhpx,baileylo,2,Sun Jul 19 17:20:42 2015 UTC,TIL this. I always knew using the bracket syntax was standard but never knew why.
PHP,3drhpx,NeuroXc,3,Mon Jul 20 12:31:53 2015 UTC,"I agree on $array[] =""whatevs"";   I ran into so often that I asked on this sub about it and found out that basically it's the preferred and faster method of appending to arrays over array_push until you reach into the tens of thousands of objects."
PHP,3drhpx,tatorface,8,Sat Jul 18 23:59:44 2015 UTC,"I'm the same. Probably worse and in multiple languages. I presume you are self taught? With me, I didn't go ok I'll learn this language and then I'll be able to get a job or say I'm a programmer, I used the language because I needed to solve a specific problem. It's very easy when you want to build a specific thing to focus on pretty advanced stuff and for the basics to seem less important.   For the next interview I suggest you run through a code academy (or some other) course from start to finish. I was amazed at the basic stuff I wasn't aware of. Actually lolled to myself at some of the heath robinson style solutions I programmed in the past because I wasn't aware of some stuff.  I've still vast tracts of ignorance but you can't know it all and as long as you are willing to learn ignorance isn't a crime."
PHP,3drhpx,triplehardvark,2,Sat Jul 18 21:21:13 2015 UTC,"Exactly like this. I don't think I know anyone who got into programming as a ""career choice"".  What you're saying makes a lot of sense though. There has been no structured learning so I may very well have missed out on some fundamentals along the way. Thanks."
PHP,3drhpx,legato_gelato,8,Sat Jul 18 21:31:27 2015 UTC,"I don't think I know anyone who got into programming as a ""career choice"".   Wait, what? Computer science/software development tracks at universities are filled with people who chose it as a career choice without having a clue of what it really entails. That's one of the reason for the very high dropout rates in CS. Software development is amoungst the most highly paid job in many countries and very hyped in all those ""top 10 jobs"" articles you see floating around the web, so this is a natural consequence of the hype, and some people being like ""Well, I do like sitting at the computer..""  However, those who stay and finish the education are of course interested in programming, and from my experience very passionate. So maybe you just don't know about people's motives for getting into programming?  (Doesn't really matter any way, but the industry is extremely hyped and this is very appearent at the universities, so just found it hard to believe)"
PHP,3drhpx,fhayde,1 point,Sun Jul 19 01:45:35 2015 UTC,"Yeah, I get asked a lot whether or not so-and-so should try their hand at programming and I try to be as honest as possible. While you can force yourself to achieve an academic understanding of programming, overall, the work we do has a creative element that really can't be forced. If you don't have a little passion for it trying to construct complex problems and solutions in your head is going to be damn near impossible and only end in heartache and frustration."
PHP,3drhpx,nobrandheroes,1 point,Sun Jul 19 05:53:55 2015 UTC,"Most of the programmers I've worked with have fallen into it. You're right, there is a lot of interest, but I went for a CS to be a DBA, but job market and yada yada, I'm a web dev.  We do exist."
PHP,3drhpx,cyborg_ninja_pirates,2,Mon Jul 20 08:23:23 2015 UTC,"So, I chose software development as a career choice. This makes no sense."
PHP,3drhpx,cschs,6,Sun Jul 19 02:31:34 2015 UTC,"I know this likely isn't what you want to hear, but the two things you mentioned ($arr[] = ... and $var = new Array) would have both been red flags to me if I were hiring a PHP developer with 6 years of experience. It sounds like you're very knowledgeable and that you have quite a lot of PHP under your belt, so I'm sure it's just one of those freak things where you got unlucky that they asked the few questions that would stump you, but from the interviewer's perspective, it immediately raises a lot of doubts.  $arr[] is the idiomatic way to append to an array in PHP, and array_push is largely seen as outdated. What other idioms might you have missed? What other community things might you be behind in: Have you come across SQL injection in 6 years? Are you familiar with the deprecation of the mysql extension? The relatively large security-awareness leaps the PHP community is making? So on, so forth. (Also, for what it's worth, in JavaScript, var a = new Array() is not the preferred way to create an array. Idiomatic JavaScript prefers var a = [].)  Put bluntly: while it seems that you have a good grasp of using the languages to get things done (at least I would assume so after 6 years), if I were an interviewer and you told me that you were unfamiliar with either of those, I would assume that you're either lying about 6 years of experience (which I very seriously doubt is the case, but is not a risk an interviewer wants to take), or perhaps even worse, I would assume that you've been living in isolation.  The best thing I think you can do coming away from this is go read as much high quality PHP as you can. Go find well respected libraries, peruse the code, and try to notice things they did differently than you would have done them. Even better, if you can find a skilled, well-respected person or community, get them to review some of your code (perhaps codereview.stackexchange.com, though I'm not sure if they have much of a PHP presence these days). Best case, you'll learn a lot about idiomatic PHP and best practices, and worst case you'll reaffirm that it was just a freak occurrence (it really does happen to everyone!), and you'll move into your next interview knowing that you were just frazzled last time, and you'll feel more at ease.  edit: fixed the ambiguity about MySQL vs ext/mysql."
PHP,3drhpx,spin81,3,Sun Jul 19 02:47:14 2015 UTC,"This is solid advice, thank you. I think I'm going to be a bit more proactive in reading through popular libraries and contributing to open source projects.  I think you've hit the nail on the head to be honest. I work with number of other developers but they are all junior level. I some respects, I have been living in isolation. I think the best I can take from here is a wake up call to better my PHP."
PHP,3drhpx,chocslaw,0,Sun Jul 19 15:14:23 2015 UTC,"Good post, I agree with everything you say, except for this which is complete and utter nonsense:   Are you familiar with the deprecation of mysql?   I've been programming PHP for 15 years now, and I'm not familiar with that. I'm pretty sure MySQL is used very widely and it's not deprecated at all, in fact it's still supported in PHP 7 (of course, legacy code using the old API may need to be updated).  Can you point me to an announcement somewhere deprecating MySQL?"
PHP,3drhpx,spin81,4,Sun Jul 19 16:15:45 2015 UTC,"The original MySQL extension was deprecated in 5.5.   The fact that you hastily called his statement nonsense with out spending 15 seconds to google ""php MySQL deprecated"" is concerning.  It is quite possible you share some similarities with the OP.      Soss:  http://php.net/manual/en/migration55.deprecated.php"
PHP,3drhpx,ebonwumon,-2,Sun Jul 19 16:36:26 2015 UTC,"The original MySQL extension was deprecated in 5.5.   Which is why I mentioned that legacy code using the old API may need to be updated.   The fact that you hastily called his statement nonsense with out spending 15 seconds to google ""php MySQL deprecated"" is concerning.   I did, and I found that MySQL isn't deprecated, and that it's still supported in PHP 7.  Edit: FYI the original extension will be taken out of PHP 7: source."
PHP,3drhpx,spin81,3,Sun Jul 19 16:43:51 2015 UTC,"He could be referring to the deprecation of the mysql_* functions in favour of new methods like PDO.  He could also be referring to MariaDB, which many Linux distros are now shipping instead of MySQL in the official repos (Arch Linux, for example, only has MariaDB in the official repos).  Both of those are very real things that have happened."
PHP,3drhpx,ebonwumon,0,Sun Jul 19 16:28:49 2015 UTC,"He could be referring to the deprecation of the mysql_* functions in favour of new methods like PDO.   Who knows.   He could also be referring to MariaDB, which many Linux distros are now shipping instead of MySQL in the official repos (Arch Linux, for example, only has MariaDB in the official repos).   I'm not 100% sure about this, but I believe that MariaDB will work seamlessly with PHP as if it were a MySQL database. But I guess that doesn't really mean that PHP supports MariaDB. On the other hand I'm not aware of PHP having officially endorsed or decried either MariaDB or MySQL recently. I'd expect both to work fine with PHP for years and years to come."
PHP,3drhpx,spin81,1 point,Sun Jul 19 16:47:15 2015 UTC,"I'm not 100% sure about this, but I believe that MariaDB will work seamlessly with PHP as if it were a MySQL database.   Yes, MariaDB is a full drop-in replacement that behaves exactly as MySQL, but that doesn't mean that it always will, and more importantly that does not mean a developer can go through life ignorant of this change. Or not one that I would endorse hiring anyway. Sure, an entry-level junior can have no knowledge of his stack and just say ""it's a database, chill out!"" but I would fully expect a senior developer working on a MaraDB-backed application to understand that they're using MariaDB, and further at least have a cursory understanding of why MariaDB is replacing MySQL. It just goes with the expectation that they're keeping up with changes."
PHP,3drhpx,dave1010,1 point,Sun Jul 19 16:58:43 2015 UTC,"I would fully expect a senior developer working on a MaraDB-backed application to understand that they're using MariaDB, and further at least have a cursory understanding of why MariaDB is replacing MySQL. It just goes with the expectation that they're keeping up with changes.   I think I would expect them to know this, only if they were working with a MariaDB-backed application. Most servers run either a RedHat like distro or a Debian-like distro and it looks like both of those still support MySQL, and will do so for years to come. Having said that, CentOS 7 doesn't support MySQL, but then again CentOS 6's EOL is in 2020."
PHP,3drhpx,cschs,3,Sun Jul 19 17:05:45 2015 UTC,To clear things up:   PHP's ext/mysql is deprecated (I'm pretty sure it was removed from master months ago) mysql server is not deprecated PHP's mysqli and PDO are not deprecated
PHP,3drhpx,akeniscool,1 point,Sun Jul 19 18:25:37 2015 UTC,"Whoops, I meant the mysql extension. MySQL the database is of course not deprecated. Thanks for correcting that!"
PHP,3drhpx,2012-09-04,5,Mon Jul 20 02:59:15 2015 UTC,"It happens, for various reasons. Sometimes I think it's because developers want to solve complicated problems, and simple problems are boring. By coming up with a more complicated solution, they basically convince themselves that it's more appropriate (a type of confirmation bias, maybe).  How your interviewing company reacts is how you should determine if you want to work with them or not. If they basically write you off because you made some syntax errors while nervous, then you don't want to work for them anyway. If you can demonstrate good problem-solving abilities, and an understanding of the fundamentals behind any type of development work, that's much better in my book than being able to memorize the syntax of every programming language you know."
PHP,3drhpx,thefoyer,2,Sat Jul 18 21:05:25 2015 UTC,If you didn't know about $arr[] = 'foo'; then you obviously don't read other people's code enough.
PHP,3drhpx,TransFattyAcid,2,Sun Jul 19 09:55:09 2015 UTC,"Eh, I've been told that I did so well on the tests that I did better than everyone else and they still didn't hire me. So you never know."
PHP,3drhpx,WhiteVulpine,2,Sat Jul 18 20:16:09 2015 UTC,"I generally think that syntax questions are bullshit. I promise you, I can come up with a PHP syntax question that will stump most people.  But I also look to hire good developers instead of specifically targeting PHP developers. So if we're interviewing a Python person, asking then about the nuances of array_column is silly.  All in all, it sounds like you dodged a bullet and got practice interviewing, so a net win."
PHP,3drhpx,spin81,1 point,Sat Jul 18 22:17:55 2015 UTC,Parenthesis baby!   (($z) = (($x) + ($y))):
PHP,3drhpx,WhiteVulpine,1 point,Sat Jul 18 23:35:15 2015 UTC,"The interview did contain quite a few stages so there were other opportunities to impress. Not all of it was a technical test. The vote seems to be split, but from what I'm reading from the comments is that my mistakes raised some red flags that were pretty basic.  Definitely a lesson learned though. I'm still relatively early in my career so it's good time for a wake up call."
PHP,3drhpx,WhiteVulpine,1 point,Sun Jul 19 15:18:14 2015 UTC,"I generally think that syntax questions are bullshit. I promise you, I can come up with a PHP syntax question that will stump most people.   I really don't think the $arr[] = ... syntax should stump anyone. The interviewer was right to see it as a red flag IMO, even though I don't necessarily think this makes OP a bad programmer."
PHP,3drhpx,legato_gelato,2,Sun Jul 19 16:19:18 2015 UTC,"I had an interview that went like this recently. (I have 3 years enterprise level dev)   Interviewer: How many lines of code are in your projects?  Me: Including or excluding the framework? grinning  Others: giggle  Interviewer: So would you say 100 to 200?  Me: Internally think, well I don't want to work for this guy"
PHP,3drhpx,WhiteVulpine,2,Sat Jul 18 23:40:23 2015 UTC,"Yeah, not sure of the relevance of number of lines in a project. Why would they ask that?  I did actually want to work for this company though. I don't believe it was anything to do with them, I just rose some red flags in regards to some basic knowledge, that out-with an interview setting, I wouldn't have had any trouble with."
PHP,3drhpx,legato_gelato,1 point,Sun Jul 19 00:01:28 2015 UTC,"""They"" didn't ask the question. The engineer/professor who did,""The decision maker"", missed my 1st interview. That is the only thing I could think of why it mattered. I can understand what he was trying to get at though. He wanted to know the scale of my projects."
PHP,3drhpx,WhiteVulpine,2,Sun Jul 19 00:09:41 2015 UTC,"Still not sure about the reasoning here? How is it a bad thing that they wanted to know about the scale of your projects?  For instance, I'd say that it quite a big difference between working on Facebook's backend vs. working on a 1k budget WordPress plugin."
PHP,3drhpx,legato_gelato,1 point,Sun Jul 19 01:52:09 2015 UTC,"It is not a bad thing. I was caught off guard since I had around 8 different projects I was working on at any one point. I had never been asked that question before. It had also seemed like a question out of order since no prior question had even asked about projects or experience. The question was asked in this order, which might help you understand my confusion.  Question 1: Why are you interested in this position?  Question 2: How many lines of code are in your project?"
PHP,3drhpx,LessonStudio,1 point,Sun Jul 19 02:10:51 2015 UTC,"Ah okay, just thought you saw it as a bad thing. But yes, it's a bit odd to not ask you anything about what your projects are about or general experience first.  I think we do agree that asking about experience would give a better idea of scale than just lines of code. I'm not a big fan of estimating scale in terms of lines of code. It is used in some estimation techniques for project management, but it varies a lot depending on language, how generic the code is, and the ""skill"" of the programmer..  Did they have better questions later in the interview?"
PHP,3drhpx,vbaspcppguy,1 point,Sun Jul 19 02:32:31 2015 UTC,"That was the only odd ball that came at me. The questions were extremely standard for almost every interview. The other coding related questions were variable variables, database connections, get|post, etc"
PHP,3drhpx,ekiwok_,1 point,Sun Jul 19 03:15:40 2015 UTC,"The other coding related questions were variable variables   I don't work with PHP, but have done some open source stuff and some projects in the past. But I never understood the purpose of variable variables? Everything I could do with them, seemed like it could be done better without them.. Do you know the use case for them?"
PHP,3drhpx,vbaspcppguy,1 point,Sun Jul 19 15:04:31 2015 UTC,"I might have asked, ""Thousand? 100,000 or 200,000? Sorry they aren't quite that large. But some might crack 50,000."""
PHP,3drhpx,LessonStudio,2,Sun Jul 19 13:48:39 2015 UTC,I've been writing PHP and JS both for better than 15 years and I still occasionally do silly stuff like try to initialize an array in php like JS. Though in this case I now just do var a = []; or $a = []; ...since its simpler.  The worst was when I tried using a convention in my JS using jquery where any variable that was a jquery style object the variable would start with $. So   var a = 'foo'; var $b = $('.bar');       I abandoned that shit in a hurry.
PHP,3drhpx,dean_c,1 point,Sun Jul 19 11:48:23 2015 UTC,I was coding in php and JavaScript for work and Java after hours... results?  public void function($array) {     var $tmp;
PHP,3drhpx,Faryshta,1 point,Sun Jul 19 20:36:53 2015 UTC,"Oh yeah, I've mixed other languages too, it just winds up mashed up in the brain."
PHP,3drhpx,kikikol,2,Sun Jul 19 21:11:21 2015 UTC,"Don't feel bad about it at all. I have been programming C++ for many years yet I could write a test that I would fail horribly.   In pretty much all languages there are multiple ways to do something. In C++ there are pretty much three fundamental ways now to open a file.   There are PHP keywords that I basically never use I use include_once but never require_once. So a simple question for me would have been what other keyword could you use instead of include_once; I would remember include but not the require pair. I so rarely use abstraction keywords such as abstract and implements that I would not be 100% sure how to use them or any of their gotchas. For years I used the mysql way to access my database but then I switched to mysqli. Even though I have used the older one for years I pretty much completely forget its use. The same with postgres; it has been forever since I connected to a postgress DB so while I certainly knew my way around one; there must be a plethora of questions that would make me look like I barely knew what a select statement was.  memcached is what I use. I don't even really know the differences with it and memcache from an API perspective. Prior to that I used APC but now forget most of its nuances.   And keep in mind that I have been programming PHP since 5 came out.  I would much rather do an interview where they would discuss body of work than take some test where I might have to answer most of the questions, ""I would google that."" and my only expertise really being that I am smart enough to preferentially choose stackoverflow."
PHP,3drhpx,spin81,3,Sun Jul 19 13:43:06 2015 UTC,"Well, those are very basic things that you got wrong in the interview. There are a shit load of things I would get wrong (parameter order, obscure array functions that do something I'd probably iterate to do) in technical interviews, but that I could google in 5 seconds and do correctly.   This is why I hate technical interviews. Your answers (one of which was technically right), showed me that you understood how to do what the question asked, but not the syntax.   Good programmers can hop between languages, and the syntax is just sugar on top. I'd say, take note, move on. Find some company that questions your understanding of programming and problem solving, not your ability to memorize syntax."
PHP,3drhpx,kikikol,2,Sat Jul 18 19:57:13 2015 UTC,which questions you got right?
PHP,3drhpx,buckfitchesgetmoney,1 point,Sat Jul 18 19:29:00 2015 UTC,"I can't remember too many of them to be honest. Some conditional statements comparing types, using ""=="" instead of ""==="" for certain use cases i.e 4 = ""4"". Along these lines. Spotting and explaining $$dynamicVariables. This is what I remember atleast."
PHP,3drhpx,piegus,3,Sat Jul 18 19:42:55 2015 UTC,"Dynamic variables, okay, not everybody came across those or know you can invoke a variable by putting its name in a string!  Comparison operators + array syntax on the other end are truly two fundamentals of PHP. Because when you program in PHP (and almost all other languages) your entire life revolves around conditions and array manipulation!  There have been wars over those comparison operators. It divided and still divides the whole PHP community, unable to agree on the appropriate time to use either of them. But it's okay! Because here, on /r/PHP, the word is pretty much use === or die. Cast if needed, but ===. Objects are the exception, because to compare two identical objects per their properties but not their class name there is no other choice but use ==, ah!"
PHP,3drhpx,jameselliottphp,1 point,Sat Jul 18 21:35:37 2015 UTC,"Dynamic variables, okay, not everybody came across those or know you can invoke a variable by putting its name in a string!   Dynamic variables don't exist in PHP, they are called variable variables. I can see why a beginner might not know about those, but I expect someone with 6 years of experience to at least be aware of them.  Putting a variable name into a string and knowing what happens is PHP 101. If I were to interview someone who didn't know that, they would probably not get the job.  I think both == and === have their use cases. When people say ""always use ==="" my BS detector goes off because of the word ""always"", I get that in 99% of the cases it's what you want, but ""always"" is too often."
PHP,3drhpx,gratefuldaed,1 point,Sun Jul 19 16:26:09 2015 UTC,"Correct, dynamic variable isn't the proper term and couldn't really exist in PHP, I was just using the term used by OP to make sure my point was understood. ""Variable variables"" always bothered me though, they're PHP's equivalent of pointers to me.  It's always fun to show a beginner:  $a = 'test'; echo ${'a'}; $b = 'a'; echo $$b;   I've been developing in PHP since the release of PHP 3, I'm both amazed and amused about the evolution of == and === public opinion."
PHP,3drhpx,zerostyle,-18,Mon Jul 20 16:19:44 2015 UTC,Those are pretty basic too and with that level of recollection definitely wouldn't hire your ass lol
PHP,3drhpx,gratefuldaed,3,Sat Jul 18 20:07:03 2015 UTC,rude
PHP,3drhpx,WorstDeveloperEver,1 point,Sat Jul 18 20:12:03 2015 UTC,"I've failed an interview with the basic stuff. It was a few years ago now and I cannot remember. What I can remember, is failing the most basic stuff (like not remembering the word JOIN or what it does) but acing the hard stuff."
PHP,3drhpx,2012-09-04,1 point,Sat Jul 18 19:58:41 2015 UTC,Someone said I didn't know it because I didn't know globals (not superglobals). I said to pass it to a function or encapsulate it in a class and he rolled his eyes.  Really glad he didn't want to work with me in the end.
PHP,3drhpx,spin81,1 point,Sat Jul 18 22:48:23 2015 UTC,"As a newer guy, I find it really easy to mix up syntax between the dozen different languages I've been dabbling with (php, python, ruby, javascript, etc)."
PHP,3drhpx,2012-09-04,1 point,Sun Jul 19 01:59:41 2015 UTC,Print out some syntax sheets.
PHP,3drhpx,Svpernova09,2,Sun Jul 19 07:34:26 2015 UTC,"Sometimes I prefer array_push over [] syntax for clarity. For example, if I have an array_shift in the method, I'll simply use array_push for clarity so people can consider the array as a LIST at first glance.  However, I find myself relying on Collection classes more and more."
PHP,3drhpx,qazjayp,1 point,Sun Jul 19 06:36:42 2015 UTC,"I interviewed a guy on Friday who got all the technical problems right, and did a complex coding challenge, but failed in numerous ways on FizzBuzz..."
PHP,3drhpx,BOSS_OF_THE_INTERNET,2,Sun Jul 19 09:53:36 2015 UTC,"That's weird. How did he fail that? Can you elaborate? I just can't see how that would work, I'm super curious."
PHP,3drhpx,WhiteVulpine,2,Sun Jul 19 16:28:03 2015 UTC,"He failed in almost every aspect. Syntax errors, not knowing how to test for % truthiness, he spent a good 5 minutes trying to figure out what to do with the string he had made, then he had problems outputting just the numbers.   At the same time, he had a solid understanding of advanced OOP, SQL, PHP, and NodeJS. so I gave him a coding challenge to do over the weekend. That will ultimately determine his eligibility."
PHP,3drhpx,myanondev,1 point,Sun Jul 19 18:28:04 2015 UTC,My current job asked me (during a technical interview) what the difference was between{{{ $variable }}} and {{ $variable }} in relation to Blade & Laravel 4. Never choked so hard in my life.  For those that don't know: {{{ $variable }}} escapes the output where {{ $variable }} does not.  Still landed the job though...
PHP,3drhpx,alexanderpas,1 point,Mon Jul 20 16:40:50 2015 UTC,I got caught out on ternary operators once. I know and have used them many times but didn't know the term for what they were. Eg.  $var = ($x>10) ? True : false
PHP,3drhpx,myanondev,10,Sat Jul 18 21:17:39 2015 UTC,$var = ($x > 10);
PHP,3drhpx,alexanderpas,5,Sat Jul 18 23:03:34 2015 UTC,http://i.imgur.com/99B8tIu.gif
PHP,3drhpx,spin81,1 point,Sat Jul 18 23:32:32 2015 UTC,"Wow, so I finally get to tell my story here because it's totally related.  A few years back, I tried to work with a recruiting/staffing company to get me placed. The problem was that they needed you to ""take a test first"". It was an adaptive test that gets more difficult as you answer correctly and gets easier as you answer wrong (to find an equillibrium).  First of all, these types of tests are bullshit. Best practices can be easily learned and enforced at a company. What you ""failed at"" was basically not knowing how to use their own practices which is totally fine.  Anyways, I took my test and I failed. Terribly. I mean, I was like ""Wtf am I doing here as a PHP dev?"". What I failed on was curious...bitwise operators. bitwise operators are a fucking bitch. And I don't know anyone who uses them in everyday work. Like, at all. I had to use them once in my entire career and for that, I could easily look them up; however, I used them once. I worked with people that have been working with PHP for 10 years and they had used them once or twice.  Because of my terribly incorrect answers on bitwise operators, I was classified below junior developer. I eventually dropped my efforts with this company and was hired on as a senior dev elsewhere. Ain't that fucking ironic.  As far as exactly what you ""messed"" up, it could happen to anyone. I work mainly with JS so I would have tried to instantiate an array with $myArr = [] which, I believe, became possible only with PHP 5.4 or something or do exactly what you said. Array push ditto, I mean, this is totally fine.  Rather than dig deep into the language, check out the PSR standards and learn from there."
PHP,3drhpx,xmachee,1 point,Sun Jul 19 03:53:31 2015 UTC,"bitwise operators are regularly used in flags, such as with error_reporting()"
PHP,3drhpx,LessonStudio,1 point,Sun Jul 19 14:06:28 2015 UTC,"I realize that. I use it for custom permissions on the back end as well but can you use them off the top of your head without googling them? Actually, I wonder how many devs on here can."
PHP,3drhpx,Pardalean,1 point,Sun Jul 19 14:27:48 2015 UTC,"Mostly Yes   || = logical OR, | = bitwise OR && = logical AND, & = bitwise AND << n = shift left by n, >> n = shift right by n   4/6, nice score without even looking at stuff.  I would get ^ and ~ if I looked at code containing them, since those two each have a non-conflicting style"
PHP,3drhpx,Telezapinator,1 point,Sun Jul 19 14:32:52 2015 UTC,"I've been programming PHP for about 15 years now, and the only place I've ever used bitwise operators is in setting the error_reporting value. These days I just use -1, because it's the version-independent way of saying ""I want all the fucking messages"".  I know them, but that's because I dabbled in C in high school. Of course, I think bitwise operators make little sense in PHP, where you have no way of knowing what type your number is. Is it a single byte, double byte, 4 bytes, 8 bytes? Is it signed or unsigned? Who knows? It depends on the way PHP was compiled."
PHP,3drhpx,Pardalean,0,Sun Jul 19 16:32:17 2015 UTC,"It's normal because tests are an arbitrary sampling of not just your skills and experience, but composure under pressure, and dealing with the unknown. You're quite likely not a moron, and neither you're a genius. You're an average guy (or girl) who's good at their job and tries to do their best in this hard life. You'll marry another average girl (or guy) and have two average kids. At the end of your life you'll think you did well overall and have some regrets, but don't be too hard on yourself."
PHP,3drhpx,spin81,0,Sun Jul 19 00:49:32 2015 UTC,"I've had programming jobs for over 10 years. I had an interview the other day and it was the first time anyone actually asked me to write FizzBuzz. I thought it was great because I had just written a version I liked a few days before while testing Interview Zen: http://www.interviewzen.com/interview/34wCR8r  Despite the recent practice, I really bombed it. I forgot to negate the modulus and then didn't wrap them in parenthesis first (yay order of operations) and took forever to catch the problems. Luckily the interview continued and I did much better on everything else.  Also recently, I tried to assign lambdas as object properties and call them like methods. I was thinking JavaScript and PHP does not work the same way."
PHP,3drhpx,xmachee,2,Sun Jul 19 02:59:27 2015 UTC,"Don't feel bad. I maintain or produce code in PHP, Javascript, C, C++, more modern C++, and python. Sometimes when I need to find a substring in a string I simply can't remember the function for that given language or its parameters."
PHP,3drhpx,spin81,-1,Sun Jul 19 13:51:43 2015 UTC,"10 years  negate the modulus  order of operations   if ($i % 3 == 0)   10 years and you don't understand modulo?  Why would you rely on type juggling to detect when $i % 3?  You've never seen one of these vintage zebra tables?  <tr class=""<?php if ($i++ % 2 == 0): ?>even<?php else: ?>odd<?php endif ?>"">"
PHP,3drhpx,LHBM,2,Sun Jul 19 10:41:24 2015 UTC,That's a horse table.
PHP,3drhpx,LessonStudio,0,Sun Jul 19 12:19:16 2015 UTC,It identifies as a zebra.
PHP,3drhpx,Pardalean,1 point,Sun Jul 19 12:24:42 2015 UTC,"Why would you rely on type juggling to detect when $i % 3?   That's not relying on type juggling. It's relying on the fact that the negation of a truthy value yields a falsy value, and vice versa. This is a standard way of doing things in every single programming language I've ever seen, and even in some other languages such as SQL."
PHP,3drhpx,xmachee,2,Sun Jul 19 16:37:18 2015 UTC,Thank you for the validation. I eventually decided he either couldn't grasp the point or was trolling and I regretted replying either way. He got stuck on me not understanding modulus which was never true.
PHP,3drhpx,Pardalean,2,Sun Jul 19 22:04:43 2015 UTC,"I think he's missing the point.  He's got it into his head that the ! operator only works on booleans, so that doing ! ($i % 3) would incur a cast. That's as may be but I think that the performance impact is minimal there.  Also he then seems to conclude that since he thinks that the ! operator means you get a boolean, some beginner might think that the % operator yields a boolean, which to me seems like a weird conclusion to draw."
PHP,3drhpx,xmachee,0,Sun Jul 19 22:30:32 2015 UTC,"Good example of practical module usage, but doing zebra tables that way feels so uncomfortable. I'd rather use CSS with the nth-of-type(odd) selector."
PHP,3drhpx,Pardalean,1 point,Sun Jul 19 12:51:59 2015 UTC,"Actually I have been doing HTML/PHP since the dawn of version 5. I didn't know this. Thanks for adding this to my knowledge bucket. I just looked it up and realized that using css only that a person could do the FizzBuzz test. That would be a pure evil question to ask someone.  Interviewer: ""Are you familiar with FizzBuzz?""   Candidate: ""Yes, would you like me to implement it in PHP?""  Interviewer: ""Yes but given a table of numbers, fizzes, and buzzes do it in CSS.""  Candidate: begins to cry."
PHP,3drhpx,xmachee,0,Sun Jul 19 13:57:24 2015 UTC,I called it vintage zebra because it's what we used before we had those selectors.  The guy I replied to says he's been in the business for longer than 10 years and he's supposed to be familiar with them.
PHP,3drhpx,Pardalean,0,Sun Jul 19 13:02:03 2015 UTC,"The point of the story was not that I don't understand the basics, but I somehow screwed up the basics despite knowing better.  I was going for a ""code golf"" sort of result.  I wouldn't do that in a production application, so in hindsight I can see where that's not an ideal answer for an interview question.  Let's just not go too far with it: http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/"
PHP,3dtafa,glasscalendar,2,Sun Jul 19 06:21:58 2015 UTC,"Go to ##php on Freenode maybe (also as a laravel user, check #laravel there).  Also every Monday, this subreddit posts a new ""Moronic Monday"" thread where you can ask anything you want (if you can get past the thread title...)."
PHP,3dtafa,perfecthashbrowns,2,Sun Jul 19 06:23:30 2015 UTC,You're always welcome to post at /r/learnprogramming
PHP,3dtafa,JordanLeDoux,1 point,Sun Jul 19 06:33:03 2015 UTC,"The main reason that you don't see many big applications do what you were talking about is because it makes the application aware of and depend on data states themselves.  The ideal is that the data store and the application logic are state independent. They depend on each other to fulfill a request, but not to determine their state.  Usually with a DB abstraction, if you do it in objects, you fill in the object with the data and call something like a persist() method that saves.  Inside the object, it checks if it has an id. If it doesn't, it does an insert, because it can't possibly do an update statement if it doesn't have the index for it.  This is the same concept as what you are doing, but it depends on what you actually have the data to do (the id) instead of a state flag ($param === ""edit"").  As for where to learn... are you doing your own hobby work, or do you have a job somewhere doing programming?"
PHP,3dtafa,paraLogiki,1 point,Sun Jul 19 07:58:16 2015 UTC,"Thank you! I took some time to really digest this.   I think this particular issue is a little weird because I'm actually updating a pivot table for a many to many relationship. I suppose I could do a check to see if there are any existing relationships and remove them. If there aren't , then I go ahead and just create new ones.   But I'm more concerned with this === ""value"" pattern I keep repeating in other places. Any time I need a function to do two very similar things, I create a parameter and an if statement. The only reason it's a string is so its a little easier to understand (or at least that's my reasoning).   When you say it depends on the data state, do you mean the form input data? Or the param data that my controller is throwing it? I don't quite understand.   Also, this is a little of both work and personal."
PHP,3dtafa,2012-09-04,1 point,Mon Jul 20 00:04:29 2015 UTC,What about if you find the pivot row detatch first? And your method will always attach.  There might be a cleaner option though.
PHP,3dtafa,2012-09-04,1 point,Sun Jul 19 13:08:53 2015 UTC,I actually think this is the most eloquent solution. Thank you!
PHP,3dtesf,sarciszewski,2,Sun Jul 19 07:29:03 2015 UTC,"Ah, are you sure your shuffling algorithm is correct? You are choosing the random number from the whole range, instead of the current subrange. This is a standard implementation error creating a somewhat non-obvious bias, see https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Implementation_errors for some discussion."
PHP,3dtesf,nikic,1 point,Sun Jul 19 21:47:58 2015 UTC,I was unaware of this nuance. Thanks for the head's up.
PHP,3dtesf,nikic,1 point,Mon Jul 20 00:54:16 2015 UTC,"This still doesn't look quite right to me: The range for the random number does not include $i, so elements will never stay in the same position. The abort condition for the main loop $i > 1 should probably be $i >= 1 as well."
PHP,3dtesf,alexanderpas,1 point,Mon Jul 20 08:19:50 2015 UTC,"and that is why you never create or implement your own algorithm, but instead use build-in functions, as bugs in those are way more likely to be found and fixed. (and have even more respect for those that do write those build-in functions)"
PHP,3dtesf,nikic,1 point,Tue Jul 21 00:49:46 2015 UTC,"The problem here is that there is no built-in function which does this. The shuffle function, while unbiased, is also predictable. So it's not usable for purposes where predictability actually matters, the standard example being shuffling a Poker deck. If you shuffle a Poker deck using shuffle() you'll loose a lot of money, fast.  From which we conclude: We should add a random_shuffle() function which does a cryptographically secure shuffle..."
PHP,3dtcmb,mi6crazyheart,2,Sun Jul 19 06:54:31 2015 UTC,"A few thoughts:   Instead of searching, use imap_status to get number of messages; then fetch the emails. Cache emails? You can reduce the number of downloads this way."
PHP,3dtcmb,adragons,1 point,Sun Jul 19 08:28:46 2015 UTC,"Thanks for the quick reply. I think, it's better to use imap_status rather than imap_search to check for any new emails. I'll implement this one. About cache, currently we are not doing it for emails. But, is it'll be a efficient solutions ? Because, in this way, we've to cache each email copy of all user's which will be require by only those users.  Is it a good practice to store email message in DB ? How, other web email client tackle such kind of issues ?"
PHP,3dtcmb,adragons,1 point,Mon Jul 20 05:57:45 2015 UTC,"Well, caching will definitely speed it up, but as you say, it must suit your app.  Emails/Imap can change remotely; so caching in this case must be temporary and have a short TTL (like maybe a few hours?).   Caching in DB: it works well."
PHP,3dtcmb,netscape101,1 point,Mon Jul 20 06:26:50 2015 UTC,"http://blog.codinghorror.com/so-youd-like-to-send-some-email-through-code/ Good article, its about sending mail not fetching it though, but good read though."
PHP,3dstm7,the_rabid_beaver,27,Sun Jul 19 03:00:00 2015 UTC,every query
PHP,3dstm7,talkshitontheweb,9,Sun Jul 19 03:17:16 2015 UTC,/thread
PHP,3dstm7,papers_,2,Sun Jul 19 03:57:14 2015 UTC,This
PHP,3dstm7,agoldenberg,2,Sun Jul 19 05:07:17 2015 UTC,This is the correct answer. Prepared statements are the only surefire way to stop SQL injection.
PHP,3dstm7,sarciszewski,-1,Sun Jul 19 05:32:16 2015 UTC,Unless you need to:   Dynamically insert identifiers. Dynamically insert OFFSET LIMIT numbers. Restrict LIKE/REGEX input.   Let's not call it surefire way when it covers a very specific subset of scenarios (that are also covered by correct encoding).
PHP,3dstm7,sarciszewski,4,Sun Jul 19 05:44:43 2015 UTC,"I've discussed a lot of the nuances involved here. When you need these ""dynamic"" features, if you are accepting user input when you do it, you are playing with fire."
PHP,3dstm7,sarciszewski,1 point,Sun Jul 19 06:46:06 2015 UTC,"So in a nutshell if you want to code real world applications - you're playing with fire.  Because in no real app of any moderate or significant complexity you can define all your queries as static strings in advance. Some generation will occur, particularly boolean conditions, but also joins and so on.  Instead of talking about how everything that relates to query generation is playing with fire, maybe it's time as a community we put on our big boy/girl pants and start discussing how to safely generate queries when we need it. The rest is just sticking our head in sand and pretending we don't need it.  You're a security guy and ""don't do things"" is a natural PoV for that field, I get it, but it's also not realistic."
PHP,3dstm7,a_raid_in_the_wind,3,Sun Jul 19 06:49:50 2015 UTC,"You're a security guy and ""don't do things"" is a natural PoV for that field, I get it, but it's also not realistic.   You're putting words in my mouth here.   Instead of talking about how everything that relates to query generation is playing with fire, maybe it's time as a community we put on our big boy/girl pants and start discussing how to safely generate queries when we need it.   I said you were playing with fire. Let's meditate on what ""playing with fire"" means: You need to be careful so you don't get burned. I never said ""don't do it"".  Hell, the linked blog post had an entire section dedicated to how to safely handle dynamic queries (via whitelisting), and EasyDB has a public method called escapeIdentifier() for this exact purpose.  For the record: Playing with fire is okay as long as it's done responsibility. See also: Poi."
PHP,3dstm7,MindReboot,2,Sun Jul 19 07:10:31 2015 UTC,"I work in the LIMS (laboratory information management systems, so basically just database GUIs for laboratories) area and we don't have this problem at all. We can easily predefine every query that is needed and all our relationships are dynamic."
PHP,3dstm7,frozen-solid,2,Sun Jul 19 20:32:26 2015 UTC,"tl;dr It depends.  They were designed for long-running applications where you prepare a query once and then call it multiple times.  PHP is not long running, you can't reuse prepared statements between requests.  For one reason or another, preparing a statement is the only way to physically separate value encoding from the query expression1, so that's how it became a meme to always prepare in PHP. Like any programming meme, it may have some core merit, but most of it is: you'll be given blanket statements and mocked into submission.  That introduction aside, ""should they be used"" depends on who you're asking and what's your goal.   If you ask the inventors of prepared statements they'd point out PHP is a poor use case for their design. If you ask security experts, their focus isn't performance or flexibility, but limiting stupid human mistakes, so they'll tell you - use prepared statements every time. Ask me, as a pragmatic I mix both approaches.   I do this:   I always use UTF8 for my SQL connections (known properties, common charset). I prefer direct queries, where data is encoded in the last possible moment (i.e. right before the query is sent) against the relevant SQL connection. For some edge-cases where preparing is more efficient (writing large BLOB data), I use prepared statements.   Whether you use them or not, they're not a full solution against injections, as all they offer is binding values. You do a lot more in a dynamically generated SQL query:   When you need to dynamically specify identifiers, you can't bind that (injection opportunity). When you need to dynamically specify LIMIT OFFSET values, you can't bind that (unless you accidentally left P.S. emulation on in PDO). When you bind value against LIKE or REGEXP, prepared statement won't protect you against allowing arbitrary patterns in your data from user input (like % in LIKE). Any moderately complicated logic for building queries involves driving the query format itself from user input (say, building the boolean expression for WHERE from a user specified filter). Prepared statements won't help with anything here, you need to be extra careful what you allow in your query build process.     1 Some DB extensions, like PgSQL, offer separating parameters without preparing, so you don't have to prepare there."
PHP,3dstm7,frozen-solid,2,Sun Jul 19 03:33:39 2015 UTC,"While I won't disagree with anything you've said.. if someone is asking the question, it shows a level of expertise that might not be able to define the nuances of when they should be used and in that case, they should probably always use prepared statements."
PHP,3dstm7,woxorz,1 point,Sun Jul 19 03:37:53 2015 UTC,"if someone is asking the question, it shows a level of expertise that might not be able to define the nuances of when they should be used and in that case   The nuances are important, because more than once I've seen people do this...  $s = $pdo->prepare(""SELECT * FROM foo WHERE x = $x"");   ... and claim they're ""preparing"" to protect against injections.  Also, if you decide to skip the nuances and go for a short easily repeated advice, you're not teaching people what to do when they can't bind a part of their query as a value in a prepared statement (identifiers, limit/offset numbers, etc.).  So, ""always use prepared statements"" doesn't really make it easy for those who are learning, it's only making it easy for those who want to teach by the numbers."
PHP,3dstm7,woxorz,1 point,Sun Jul 19 03:45:59 2015 UTC,"Don't most databases cache statements made with prepared statements better?  Sure it helps to reuse the statement in the same run of the program, but on the db end out should be caching execution plans that it can't do as easily without prepared systems due to where clauses changing."
PHP,3dstm7,woxorz,3,Sun Jul 19 03:59:54 2015 UTC,"Everything you're talking about regards reusing the same prepared statement multiple times (and even then, there are specifics, but I won't go there as it's not relevant to PHP).  In PHP you prepare, execute, and then typically discard it, so there's no reuse. Preparing the same SQL code a second time is no longer the same prepared statement, so any caching benefits over plain queries, potential or real, are not present."
PHP,3dstm7,woxorz,2,Sun Jul 19 04:03:17 2015 UTC,"Prepared statements are less important if you have a known query that runs the same every time with no changes. For example: when pulling up a list of menu options from your database.   Select URL, description from menu where type = 'home'   Every time that query runs it'll be the same. There is no need to prepare it. There is no danger of injection. There is no user input."
PHP,3dstm7,aequasi08,2,Sun Jul 19 03:57:47 2015 UTC,"What you are saying is true, but avoiding SQL injection is not the only benefit to prepared statements. I can think of two other benefits.  Firstly, there is a performance benefit when running a prepared statement multiple times when compared to running an non-prepared statement multiple times. e.g. in a loop  This is because the RDBMS will only need to run the query optimizer once for a prepared statement as opposed to every time for a non-prepared statement.  Note that this particular benefit isn't all that important because if a programmer knows what they are doing, they can generally avoid running SQL queries in a loop by using JOINs in a single query.  Secondly, and more importantly though, prepared statements can provide nice building blocks for other programmatic abstractions. i.e. you can pass around statements instead of SQL strings"
PHP,3dstm7,disclosure5,1 point,Sun Jul 19 05:02:54 2015 UTC,"Firstly, there is a performance benefit when running a prepared statement multiple times when compared to running an non-prepared statement multiple times. e.g. in a loop   If you run a query in a loop, in most cases you can do the same work in one query.  So when your code is factored correctly, this is in reality a very rare scenario.   Secondly, and more importantly though, prepared statements can provide nice building blocks for other programmatic abstractions. i.e. you can pass around statements instead of SQL strings   You don't need the database's involvement in order to pass statements from PHP to PHP. Put that string in a query object, now you don't have to pass strings. Done."
PHP,3dstm7,amenadiel,1 point,Sun Jul 19 05:47:48 2015 UTC,"If you run a query in a loop, in most cases you can do the same work in one query.  So when your code is factored correctly, this is in reality a very rare scenario.   Which is what I just said... y'know in that fourth paragraph there.   You don't need the database's involvement in order to pass statements from PHP to PHP. Put that string in a query object, now you don't have to pass strings. Done.   I wasn't suggesting that we needed to involve the db to pass around statements - only that it is a good way to go about it.  There is a distinction between what is a prepared statement to the database and what is a prepared statement in PHP. I'll admit I kind've muddied that distinction in my response. I didn't want to get bogged down in semantics.  Assuming we are using PDO, the database would partly be involved in creating a PDOStatement object in PHP which, depending on the database, is a wrapper around a prepared statement in SQL land. Once the object is created, the db is not involved again until the statement is executed.  Yes, you can create a ""query object"" of sorts, but why do that when PDOStatement is an already good working solution? I'll admit it's not perfect, but it is sufficient in most cases."
PHP,3dstm7,CODESIGN2,1 point,Sun Jul 19 07:12:27 2015 UTC,"I wasn't suggesting that we needed to involve the db to pass around statements - only that it is a good way to go about it.   It's a good way to make an SQL call creating a resource on your RDBMS in order to pass a reference to it from PHP to PHP? It's ... good how, exactly?   Yes, you can create a ""query object"" of sorts, but why do that when PDOStatement is an already good working solution? I'll admit it's not perfect, but it is sufficient in most cases.   How about... to avoid the pointless roundtrip to the database and creating a resource there?  You know, when you do something, you usually do it for a reason. The only reason you're giving me for abusing prepared statements this way is ""I'm lazy so I'll use this never mind it's wrong for the purpose and slower""."
PHP,3dstm7,geggleto,0,Sun Jul 19 07:23:16 2015 UTC,"Dude, you need to chill out.  You are acting really butt-hurt over nothing."
PHP,3dstm7,wahh,1 point,Sun Jul 19 07:46:03 2015 UTC,"I can't possibly be ""butt-hurt"" by this discussion. I don't want someone else to be misled by your suggestions.   As living RDBMS-side objects, prepared statements are not to be used as poor man's encapsulated queries in PHP."
PHP,3dstm7,sarciszewski,0,Sun Jul 19 07:57:12 2015 UTC,"Yes, you've really swooped in and saved the day here."
PHP,3dstm7,shochdoerfer,1 point,Sun Jul 19 08:05:00 2015 UTC,"Turning your argument around into attacking someone is pretty ""chill"" too."
PHP,3dstm7,mysql101,2,Sun Jul 19 17:41:00 2015 UTC,"Which means it will be recompiled every time it's called, rather than ""prepared"" and cached."
PHP,3drrcq,anything_here,3,Sat Jul 18 20:47:36 2015 UTC,You might want to use either beanstalkd or Gearman to handle the background jobs. Then setup supervisord to launch a number of PHP workers which will do the photo upload in background
PHP,3drrcq,agopaul,4,Sun Jul 19 11:51:58 2015 UTC,"Hi, as mentioned before pthreads could benefit you here. I've coded up a example (dirty) which work and does concurrent uploads without requiring anything other than normal flysystem. I've tested it with a 2,2mb cat gif upload and all was fine and speedy.  use Aws\S3\S3Client; use League\Flysystem\AwsS3v3\AwsS3Adapter; use League\Flysystem\Filesystem;  function get_filesystem() {     $client = new S3Client($credentialsArray);     $adapter = new AwsS3Adapter($client, 'bucket-name');      return new Filesystem($adapter); }  class Upload extends Threaded {     private $from;     private $to;     public $success;     public $start;     public $end;      public function __construct($from, $to)     {         $this->from = $from;         $this->to = $to;     }      public function run()     {         // A thread needs the autoloader.         require_once __DIR__ . '/vendor/autoload.php';          // Upload + profile         $this->start = new DateTime();         $handle = fopen($this->from, 'r+');         $filesystem = get_filesystem();         $this->success = $filesystem->putStream($this->to, $handle);         $this->end = new DateTime();         fclose($handle);     } }  $pool = new Pool(8); $uploadJobs = [];  foreach (range(1,5) as $num) {     $uploadJobs[$num] = new Upload(__DIR__.'/cat.gif', '/cats/'.$num.'.gif');     $pool->submit($uploadJobs[$num]); }  $pool->shutdown();  foreach ($uploadJobs as $upload) {     var_dump($upload->success);     var_dump($upload->start);     var_dump($upload->end); }   Hope this helps to illustrate it."
PHP,3drrcq,FrenkyNet,1 point,Mon Jul 20 11:58:31 2015 UTC,Thank you for taking the time to illustrate this!
PHP,3drrcq,adragons,2,Mon Jul 20 15:43:09 2015 UTC,"reactphp could help you upload asynchronously...  You can make a PHP daemon - which I think sounds good.  If I understood correctly, sounds like you want to have a setup like so:   user sends images to app   creates thumbnail php pushes new images to a queue   background php worker   polls queue every n-seconds for new stuff uploads files remove images from queue sleep if no tasks found    But I gotta say: this doesn't sound easy for a beginner."
PHP,3drrcq,adragons,0,Sun Jul 19 09:21:20 2015 UTC,"I'm no beginner, with queues, but using them on windows systems I am. I would have gone with a queue from the start if I didn't have the concern of maintaining the queue services on the clients PC.   Not sure queues are where I want to go."
PHP,3drrcq,adragons,2,Sun Jul 19 16:26:38 2015 UTC,"Oh ok. Well, queue doesn't have to be a queue-ing service a-la-gearman; a sqlite-db would suffice I imagine.   From process picking up any new images to send to the web server it sounded like you were going to poll the filesystem for new images."
PHP,3drrcq,0bp,1 point,Sun Jul 19 17:09:08 2015 UTC,"The processing manually fired at this point, I've been somewhat hesitant to try to do long running/automated processes of any sort as I don't even know where to begin on the windows side.   Any insight on a good way to automate that? (Say I use a queue system supported by SQLite like you said, how would you propose I run the workers?)"
PHP,3drrcq,TheGingerDog,1 point,Sun Jul 19 18:17:41 2015 UTC,"I don't know the best way; and I'm sure there are other methods.  Always running approach:    run a daemon on boot (or multiple) (cli-php with set_time_limit(0)) use a service like gearman   As needed approach: * when an image is uploaded, pcntl_fork the script into a worker that dies when it runs out of images to upload"
PHP,3drrcq,TheGingerDog,1 point,Sun Jul 19 18:46:09 2015 UTC,"I'm going to look into pcntl_fork as well as running multiple daemons, I'm just concerned about keeping the daemons 'alive'."
PHP,3drrcq,CODESIGN2,2,Sun Jul 19 19:34:58 2015 UTC,"You could use Gearman non-blocking background tasks to create a queue and 1-n worker that process the queue. If you need to scale, just add more workers on the same or other machines.  I think you'd need Cygwin to run Gearman on Windows.  Alternative to Gearman could be RabbitMQ or any other messaging queue."
PHP,3drrcq,CODESIGN2,2,Sun Jul 19 10:50:55 2015 UTC,"I don't really understand how your sync is working ... but :  There are SFTP (Net_SFTP) libraries (and the ssh2 library) for PHP, which you could perhaps combine with pcntl_fork() or pthreads to have multiple uploads in parallel -- however, I don't really think you'd see any great improvement uploading in parallel if their restriction is their 'net connection.   I'd be inclined to want to introduce a local Linux samba server - which they just copy files into. That'd handle copying to the external local storage and the remote web server. Your Linux box could then handle the uploading (rsync would probably be the easiest) and if you needed to implement parallel workers you could.  </2p>"
PHP,3drrcq,CODESIGN2,0,Sun Jul 19 19:00:36 2015 UTC,"I'm with you on the linux box, client is really opposed to a 2nd machine or even a VM as they ""don't like linux"".  I'm going to look into the pcntl_fork().  The bottleneck isn't the connection, the uploads are super small thumbnails - but there's thousands of them (10k+ a day). Their previous solution was SmartFTP with like 20 connections open, I've seen it in practice and it's MUCH faster than the sequential uploading we're doing currently."
PHP,3drrcq,CODESIGN2,2,Sun Jul 19 19:33:50 2015 UTC,"Uploading many small files will always be slow - opening a tcp connection, and then the connection will take get time to be at full speed (I think: https://en.wikipedia.org/wiki/Slow-start )."
PHP,3drrcq,CODESIGN2,1 point,Mon Jul 20 06:10:44 2015 UTC,"(My experience with PHP, obviously based on this post, is zero prior to this project.)   Reality enters; that being a developer is not a simple task, and should be left to those with experience, or undertaken with those, with experience of the specific tool-set and languages you will be working with; to create a controlled environment, before undertaking major projects... There is an alternative, and that is to explain that the works are innovative and iterative, and if the client agree's to this, you should file all complaints arising from under /dev/null   The best advice anyone can offer is Only sell solutions you know you can provide!, or put in place mechanisms to remit the risk."
PHP,3drir0,velmu3k,2,Sat Jul 18 19:31:40 2015 UTC,.ovh TLD. WTF.
PHP,3dnf06,onemato,20,Fri Jul 17 18:10:44 2015 UTC,3 weeks after start date   doesn't complain doesn't sexually harass co-workers   8 weeks after start date   hasn't quit yet has at least one fuck to give
PHP,3dnf06,CodeShaman,3,Sat Jul 18 09:00:56 2015 UTC,"This is surprisingly on-point. Other than categorically doing nothing (not even making an attempt), the first few weeks are a culture test as much as anything else.  So much of this depends on the company though so it's hard to answer. Expectations will be really different in an early stage startup than an established or public company. Everywhere will have its own different set of requirements.   And I wouldn't even expect PHP knowledge on day 1 necessarily. I've hired senior people with other OOP backgrounds (typically Java) with the expectation that they could learn the new language quickly. Been in the same position myself (contract rails gig). It's never been a real issue."
PHP,3dnf06,Firehed,11,Sat Jul 18 11:14:03 2015 UTC,"That really depends on your product. I've had experience with huge products as well as small to medium one. The huge one, after 3-8 weeks, I couldn't even still understand the architecture. After one year, I was finally able to do some complex features. The small to medium one, on the other hand, I would understand the whole infrastructure in a matter of weeks and be able to contribute much faster, say in 3-8 weeks to being hired."
PHP,3dnf06,evilsnake,1 point,Fri Jul 17 20:37:13 2015 UTC,"I'd say it all depends on how much process is followed within your codebase, how idiomatic the code-base & problem solving approach is. Are there a lot of one-off scripts, is the application very problem-domain specific. How much peer to peer coding you do alongside this person as well. If you or someone else mentors this person in the codebase, build a decent sized feature, something new, and allow them to tag along throughout the process. If your codebase on the other hand is 9-10yrs old w/ lots of legacy style written php, we are talking years, I know this from experience. Globals are not your friend."
PHP,3dnf06,compubomb,1 point,Sat Jul 18 06:11:14 2015 UTC,"First week is a wash. Setting up your PC, getting accounts, learning the workflow and what projects are what. But assuming the employee only has to focus on 1 project I'd expect a shallow understanding of 1 project with a couple weeks on it for a mid level developer. The developer will be able to fix bugs, add code, but won't understand gotchas like not being able to change an existing database model because running an alter on that table in production would require 6 hours of downtime.   So at the 3 week mark I'd expect the developer to be writing/submitting code, but running into a bunch of ""you can't do that"" areas and they'll probably be most productive/comfortable being delegated a specific narrow task to work on.  Assuming they stay focused on the same project, after 8 weeks I'd expect them to know quite a bit of that project's ugliness. They should have a good understand of the flaws in the project and when(if) those flaws are going to be worked on so code that depends on it can go forward. At this point you should be able to assign broader tasks.  So couple weeks to get a shallow understanding of a single project and be able to code on it, but seniors having to correct their direction a lot. After a couple months on a single project a mid level developer should understand most of the current warts on that project(assuming it isn't a massive complex codebase). They should also be able to take general requirements and work out a solution without a lot of hand holding. They know who the people are to  go to to get more specific information(on the code or business side). They should know many of the gotchas in the project. How releases and deployment works on it. What customer concerns there are with the project and so on.  But being a mid level guy they'll still need reviews and ""how ya doing?"" checkups by the senior guys. They also probably won't fully understand the impact their changes can have towards the business and systems guys."
PHP,3dnf06,synn89,1 point,Sat Jul 18 17:18:52 2015 UTC,Do you take remote developers from a land far far away?
PHP,3dnf06,yujmnh,1 point,Sat Jul 18 18:09:20 2015 UTC,"Upon Hire   Working knowledge of PHP   3 weeks after start date   Working knowledge of Git Experience working with copmoser Knows basic things about code base and quality of tech infrastructure   8 weeks after start date   Basic Object Oriented Programming in PHP Can write tests, fix bugs   In my experience, most PHP devs don't have the art of it, and really only program in PHP. Also, you can't expect framework or OOP experience as plenty of applications out there don't use them. Base your expectations on what a mid-level developer would have had to know 3-5 years ago because you are limited by the projects you work on and companies don't keep up to date.  All that matters is that they learn quickly. How quickly the can contribute is on the company."
PHP,3dnf06,nobrandheroes,1 point,Mon Jul 20 08:13:43 2015 UTC,"I disagree, if you don't have OOP experience in 2015 you are unlikely to land a job that uses anything other than wordpress."
PHP,3dnf06,geggleto,1 point,Mon Jul 20 13:38:46 2015 UTC,"After 3 weeks the person should be able to complete a minor feature within a reasonable time.  After 8 weeks that feature they did in week 3 should have taken them ~25% less time.  After 6 months that feature they did in week 3 should have taken them about 1/2 the time, and they can now implement major features without much trouble.  After a year they should have an excellent grasp of the system and should know how to develop any requested feature and what the side effects would be."
PHP,3dnf06,geggleto,3,Mon Jul 20 13:37:12 2015 UTC,I'd say:  3 weeks after start date   can implement simple components understands infrastructure   8 weeks after start date   deep understanding of product able to work on features mostly alone
PHP,3dnf06,p1zzano,7,Fri Jul 17 18:39:07 2015 UTC,"Deep understanding usually takes me 3-6 months, but I work on really complex stuff."
PHP,3dnf06,2012-09-04,3,Sat Jul 18 02:35:51 2015 UTC,"I agree, it depends on the product and how its written. If it's a single app with on a common framework with a half dozen open source components, sure that's not a huge deal.   I'm 3 weeks into a new application that spans 4 languages, 5 different ways of distributing or queueing up work,  4 different kinds of web servers, wrappers that wrap wrappers for wrapping wrappers, dependency managers that provision other dependency managers...  It's gonna be a long road."
PHP,3dnf06,eddiemoya,2,Sat Jul 18 04:53:54 2015 UTC,"This really depends on the product. I just started a job as a Magento developer, and I don't think there's anyone in my company who's been able to gain a deep understanding of Magento in 8 weeks."
PHP,3dnf06,spin81,1 point,Sat Jul 18 13:04:12 2015 UTC,"Agreed. I would spend the first three weeks only getting used to the code base you're working with. Get a walk through, try to implement a skeleton component of some kind just so you know it's organized properly, and then go from there."
PHP,3dlxik,HeDares,38,Fri Jul 17 09:50:14 2015 UTC,I guy at my work used to leave messages like...    .  . . changes another fix fix    ...stern discipline was applied
PHP,3dlxik,KiwiThunda,15,Fri Jul 17 09:54:51 2015 UTC,Fireable offense.
PHP,3dlxik,pcopley,8,Fri Jul 17 16:29:20 2015 UTC,Not in europe.
PHP,3dlxik,pcopley,14,Fri Jul 17 19:12:37 2015 UTC,You're not allowed to fire people for being bad at their job?
PHP,3dlxik,pcopley,11,Fri Jul 17 19:28:46 2015 UTC,"I'm not an expert but basically, you have to provide help and training you cant just fire someone if they dont write good commits messages. If they are categorically just ignoring what you ask them to do then yes you can fire them but you have to be able to show you tried to teach them. But it obviously changes based on what they did writing crap code is different to lying about how good they are at writing code in an interview then it turning out they have no clue.  In Europe we don't seem to have the same ""fire"" culture that you do in the US your not constantly under threat of losing your job if you make a mistake."
PHP,3dlxik,runamok,3,Fri Jul 17 19:36:37 2015 UTC,"That makes sense. I thought it was implied you would try to correct the behavior first, but to me this seems on the same level as refusing to perform a certain function of your job (documentation) to a level where it actively harms the performance and productivity of your coworkers.  I have heard that it is very difficult to get rid of even underperforming/nonperforming employees in certain European countries, particularly Germany?"
PHP,3dlxik,pcopley,7,Fri Jul 17 19:42:15 2015 UTC,"Im from the uk so not sure on Germany laws, but it seems to me that some company's are super quick to fire people as some form of punishment even at determent to the company its self.   For instance one of my guys (im the lead dev/dev ops manager) managed to delete all the backups during the one time we really needed them. I now some company's would have fired him on the spot but why? it was an honest mistake and if we did fire him we would then have to spend a month and up to 20% of new new hires's yearly salary in hiring costs plus train them on our systems etc and we lose a good dev all because he made a mistake and some manger type has a power complex.   Even if someone is slightly under performing its often not cost effective to fire them and replace them with someone who might be equally crap or worse."
PHP,3dlxik,GreyTheory,5,Fri Jul 17 20:11:08 2015 UTC,"I remember an anecdote when a dev lost a company 100k. His boss was asked if the dev would be fired and he replied 'Of course not, we just paid 100k to train them'."
PHP,3dlxik,iDerailThings,3,Sat Jul 18 05:08:13 2015 UTC,Agreed on all counts :)
PHP,3dlxik,pcopley,2,Fri Jul 17 20:50:35 2015 UTC,"It varies between then public and private sectors. The private sector behaves more or less as you would expect - you screw up, your job is on the line.  The public sector is different. Firing people a very long bureaucratic processes with extremely slow pace. The result of this is that an underperforming or even negligent employee may take many months to terminate.  An example from an unnamed source in an unnamed public sector organisation: two employees live together (a couple). One arrives on time, the other consistently arrives late because of traffic problems. He was terminated over a year later."
PHP,3dlxik,scootstah,4,Sat Jul 18 01:32:33 2015 UTC,For not writing commit messages properly?   Are you web developer for the People's Republic Army?
PHP,3dlxik,scootstah,5,Sat Jul 18 00:48:27 2015 UTC,Where commits message you!
PHP,3dlxik,Firehed,2,Sat Jul 18 09:13:26 2015 UTC,"Sounds like what happens when hastily pushing.  Make sure your shit is working before you push it, people. Also, rebasing is nice, so that I don't have to weed through 50 commits for one feature."
PHP,3dlxik,maiorano84,3,Fri Jul 17 14:34:15 2015 UTC,"write your commit message first, keep it as a sort of overview of your work plan.   Hmm...I don't really like that. I like to make small commits to my local repo as I work through something, especially if it involves more than a couple files. It gives me an easy way to determine what I actually did when I am finished, and it gives a little bit of insurance should something go haywire, as it's pretty hard to lose work once it's actually committed to Git.  But when it comes time to push, I will refactor all of my little commits into one commit with a ticket ID and one-line summary. If the work warrants it I will also add a larger description to the commit message."
PHP,3dlxik,baileylo,4,Fri Jul 17 14:59:28 2015 UTC,"Sounds too complex tbh. Just work in a branch (committing as usual), then do a --squash merge onto master. No fussing with rewriting history, and master stays clean with one commit is one idea."
PHP,3dlxik,marvinrabbit,2,Fri Jul 17 15:37:32 2015 UTC,"I have several of these and they just wont listen, im quite sure their just doing it to annoy me at this point."
PHP,3dlxik,2012-09-04,33,Fri Jul 17 15:48:56 2015 UTC,There - Specifies Location (eg: Look over there!) Their - Specifies Possession (eg: Their commits are atrocious!) They're - Specifies State (eg: They're like a gaggle of dicks!)
PHP,3dlxik,malkusch,-8,Fri Jul 17 10:52:24 2015 UTC,Just say it out loud and you'll understand what he's saying.
PHP,3dlxik,ryan4888,7,Fri Jul 17 13:37:08 2015 UTC,"Certainly the sentence is not totally indecipherable.  However, we start to form understanding while we read.  So with the correct usage, with a simple scan of the text we can get complete comprehension by the time we reach the end.  With glaringly incorrect word usage, at the end of the line we only come to the realization that the sentence doesn't parse correctly.  A second reading only confirms that the reading of the words was correct.  Then a third time through is required while trying to subvocalize the words to glean the writer's intent.  And I'll point out the the commenter didn't offer a correction until OP demonstrated a pattern of incorrect usage in a follow up comment.  Since this was offered up without any criticism, I would classify this as constructive guidance."
PHP,3dlxik,bmwparking,2,Fri Jul 17 16:15:19 2015 UTC,"It's English, not Star Common!!"
PHP,3dlxik,mckeder,-9,Fri Jul 17 17:31:24 2015 UTC,I'm just wondering how many languages are you able to speak?
PHP,3dlxik,Pardalean,2,Fri Jul 17 17:15:39 2015 UTC,Yeah we are
PHP,3dlxik,KiwiThunda,2,Fri Jul 17 20:54:58 2015 UTC,"A colleague of mine still does this, even after I spoke to the management and brought that question up in a meeting. Nobody gives a fuck.  Next Friday is my last day at this company."
PHP,3dlxik,pushad,2,Fri Jul 17 15:21:21 2015 UTC,"We had issues with this. I became the ""git master"" and forced them to check with me before committing code. After about a week, everyone was so tired of me looking over their shoulder every time they did a commit and finally started doing it correctly."
PHP,3dlxik,steezefries,1 point,Fri Jul 17 15:37:36 2015 UTC,I tried arguing this on /r/programming once. It's my 3rd most controversial comment and I've debated a lot of controversial topics.
PHP,3dlxik,l00pee,2,Fri Jul 17 18:16:50 2015 UTC,"Yea i can't tell but i feel like there's a lot of ""contractor"" devs in reddit dev subs. I only use them for news, not advice"
PHP,3dlxik,pushad,14,Sat Jul 18 10:35:52 2015 UTC,"We've started working with a new offshore company. We've been getting lots of commit messages like; i, ii, e, dded, :wq!, chagnes, eeee.  We finally said something about it... and now we get commits like this cHANGES TO CHECKOUT, CHANGES TO nEW PAGE, UPDATE DATABASE FILE, UPDATE THEME FOLDER  Good fucking times."
PHP,3dlxik,stillalone,6,Sat Jul 18 11:27:12 2015 UTC,I would laugh so hard if I saw a :wq! haha
PHP,3dlxik,bakuretsu,2,Fri Jul 17 19:34:57 2015 UTC,"Every commit should have a work item/project number on it, and these should be small."
PHP,3dlxik,vim_vs_emacs,1 point,Fri Jul 17 22:18:20 2015 UTC,"I might force every commit message to have the words ""from"" and ""to"" in it."
PHP,3dlxik,bakuretsu,9,Sat Jul 18 00:06:54 2015 UTC,add changes to code  add changes from client to code  add files from change  do the needful to add changes from issue
PHP,3dlxik,lillesvin,14,Fri Jul 17 19:39:08 2015 UTC,from to
PHP,3dlxik,pushad,1 point,Fri Jul 17 19:46:06 2015 UTC,"Oh my god, ""the needful"" was something that I only ever saw offshore folks write. Where did it come from?!"
PHP,3dlxik,lillesvin,1 point,Fri Jul 17 20:26:37 2015 UTC,Its a remnant of the british rule in India.
PHP,3dlxik,rich97,1 point,Sat Jul 18 03:19:59 2015 UTC,What haven't the British spoiled at some point in history!
PHP,3dlxik,Tzaar91,2,Sat Jul 18 06:55:14 2015 UTC,"We use FogBugz and Kiln and if you reference a case (e.g. write ""case NNNN"") as part of a commit message in Kiln the changeset will automatically be included in the mentioned FogBugz case. Ever since we switched to Kiln (from a nasty, dirty, self-hosted SVN repo) the problem of bad and case-less commit messages has more or less solved itself. The same would obviously work with GitHub, GitLab, BitBucket, etc., as long as commit messages are scanned for references and included with the relevant issues/cases/bugs, my point is that sometimes further rules and restrictions won't help at all while somehow making it more attractive/desirable to write good commit messages (and maybe branch a little) will."
PHP,3dlxik,halfercode,3,Sat Jul 18 10:38:22 2015 UTC,Linking to an issue or the like doesn't cut it for me. I'm under the opinion that a commit message is very important. A reference is nice but the commit message should always summarize the commit. Then you should always go into more detail when it's necessary. Usually to explain the why of the commit when someone feels it's not straight forward.
PHP,3dlxik,beckerist,1 point,Fri Jul 17 21:05:37 2015 UTC,"It's not like our commit messages are now just ""case NNNN"". The commits appear as edits/comments in the case hence it's natural to write them as such. And while I agree that commit messages are important, let's not pretend that we're writing The Odyssey every time we fix a typo in a variable name."
PHP,3dlxik,halfercode,1 point,Fri Jul 17 23:05:43 2015 UTC,We used to use a self hosted svn (this is why their are no branches) and mantis bug tracker we have now moved to BitBucket git my next goal is to get them to use the built in issue tracker as that basically solves the issues.
PHP,3dlxik,TheBigB86,79,Sat Jul 18 05:28:22 2015 UTC,"There is! And it's right next to the people who use ""thiers"" when they mean ""there is"" or ""there's"".  I'm only joking of course, but your post title niggles me more than it should."
PHP,3dlxik,halfercode,23,Fri Jul 17 21:15:15 2015 UTC,"What niggles me is when people use ""thiers"" when there correcting somebody for the misuse of ""theirs""."
PHP,3dlxik,ChrisTheRazer,29,Fri Jul 17 10:18:10 2015 UTC,when there correcting   Trying to work out if you did that one deliberately.
PHP,3dlxik,noonie2k,16,Fri Jul 17 12:59:27 2015 UTC,I see what you did they're
PHP,3dlxik,davidlwatsonjr,4,Fri Jul 17 13:58:17 2015 UTC,Giggle. I like this alot!
PHP,3dlxik,WelcomeMrJoeBrown,2,Fri Jul 17 14:55:52 2015 UTC,Its a lot... Its not alot
PHP,3dlxik,ashbashwood,1 point,Fri Jul 17 15:25:07 2015 UTC,Surely it depends on whether spelling mistakes are part of the joke? :-)
PHP,3dlxik,UncleNorman,1 point,Sat Jul 18 03:24:23 2015 UTC,"It's it's, not its :)"
PHP,3dlxik,halfercode,2,Sat Jul 18 07:56:59 2015 UTC,We need to go deeper
PHP,3dlxik,LHBM,7,Sat Jul 18 10:29:07 2015 UTC,wheir?
PHP,3dlxik,mediascreen,1 point,Fri Jul 17 17:03:00 2015 UTC,"Almost as bad as when theyre using ""there"" when their obviously trying to use ""thei'r"""
PHP,3dlxik,halfercode,1 point,Fri Jul 17 18:53:51 2015 UTC,https://www.youtube.com/watch?v=TJL4Y3aGPuA
PHP,3dlxik,jord-smi,3,Fri Jul 17 13:01:46 2015 UTC,Came here for the grammar correction - was not disappointed.
PHP,3dlxik,goatanuss,3,Fri Jul 17 13:14:09 2015 UTC,"Nearly as frustrating as folks who use ""im"" for ""I'm"" and ""their"" for ""they're"". At least there's no-one in this sub that'd do that.  Imagine the toasty place in Hades we'd have to reserve for people who write like that in commit messages.  /runs off"
PHP,3dlxik,joeydendron,1 point,Fri Jul 17 14:25:25 2015 UTC,"For every apostrophe I need to switch my keyboard layout on my phone. No thanks I will stick to 'Im, theyre, youve' etc as you will easily understand it anyways.  Greetings from hell."
PHP,3dlxik,JemoeE,3,Fri Jul 17 12:28:58 2015 UTC,"That's fine, as long as you realize that the message you are sending to the reader/receiver is ""My time is more valuable than yours""."
PHP,3dlxik,Jaimz22,2,Fri Jul 17 16:39:37 2015 UTC,They should tie you to a fiery chair and read you the current minutes of the Apostrophe Protection Society on a tape loop.
PHP,3dlxik,ultio,1 point,Sat Jul 18 10:13:14 2015 UTC,You're phone doesn't autocorrect and put the apostrophe in?
PHP,3dlxik,GundamWang,1 point,Fri Jul 17 17:22:28 2015 UTC,*Their is
PHP,3dlxik,tewls,8,Fri Jul 17 23:00:00 2015 UTC,"Totally expected that Brad would do it, but Mike too? That breaks my heart."
PHP,3dlxik,cYzzie,15,Sat Jul 18 02:29:18 2015 UTC,ITT People that can't spell
PHP,3dlxik,agopaul,9,Fri Jul 17 15:10:55 2015 UTC,"For my dev team, I set up a git hook that would reject the commit if there was no message, or the message was too short (single words, 15 char..)"
PHP,3dlxik,nerfyoda,3,Fri Jul 17 14:14:22 2015 UTC,I like this idea but how do they edit it once its in their local version?
PHP,3dlxik,jwestbrook,6,Fri Jul 17 17:09:35 2015 UTC,"git commit --amend -m ""This message doesn't suck and I know how to use Google to learn about basic Git functionalities"""
PHP,3dlxik,I_program,3,Fri Jul 17 17:35:36 2015 UTC,Oh thats awesome ty
PHP,3dlxik,halfercode,0,Fri Jul 17 18:44:51 2015 UTC,"That's not a great commit message either, but that's just me. I try to have a short descriptive message as the first line (under 70 chars, I think?), second line blank, then third line onwards is a detailed message that explains why the fix was made. And if necessary, more in depth and/or low-level info on the actual fix. I don't know about other editors, but a base vim install will guide you through this via colored text hinting.  That all said, few devs have the luxury of being that descriptive with something as inconsequential as commit messages."
PHP,3dlxik,steezefries,2,Fri Jul 17 19:06:43 2015 UTC,"I've recently started using angular style commits and I love it.   <feat>adds user crud <fix>user create action now set proper flash notification   I've never even used angular before though :p  edit:  I guess I should say I use some of their style, mainly just the prefixing the message with the type of commit is really useful in my opinion."
PHP,3dlxik,I_program,3,Fri Jul 17 21:31:13 2015 UTC,"yeh ... pre commit hooks for the win, regardless of whether its svn or git :)  on some projects we have regular expression checking for a linked jira task ... if its not there, its not committed"
PHP,3dlxik,timbrouckaert,1 point,Fri Jul 17 23:49:13 2015 UTC,I also did this back in the old SVN days
PHP,3dlxik,sinkingfish,5,Fri Jul 17 23:44:29 2015 UTC,IIRC PhpStorm had a setting to auto-populate a new commit message with the last commit message used. I used to work with a guy who would push dozens of one line commits each with the same message. Drove me nuts.
PHP,3dlxik,igorpk,2,Sun Jul 19 10:08:19 2015 UTC,"this, but added 1.1, 1.2, 1.3 for each subsequent commit after the first one"
PHP,3dlxik,l00pee,5,Fri Jul 17 15:52:23 2015 UTC,"I have one person at work who does commits only once in a blue moon (like once every quarter, maybe) and even then she doesn't add messages, so we end up with massive change sets between very few commits when she FINALLY pushes to the repo. I've been tempted to have our sysop add a cron to commit her entire projects directory nightly."
PHP,3dlxik,Kratzyyy,3,Fri Jul 17 16:33:56 2015 UTC,"It's useful to push daily to a branch, so that if the developer has their laptop stolen or suffers a disk crash, only a small amount of work will be lost. This sounds like a serious business risk that needs addressing."
PHP,3dlxik,jezmck,1 point,Fri Jul 17 18:47:28 2015 UTC,Dude how does she have a job?
PHP,3dlxik,rich97,1 point,Sat Jul 18 08:06:32 2015 UTC,office politics is all I can think
PHP,3dlxik,jezmck,5,Fri Jul 17 22:21:02 2015 UTC,Reminds me of this one https://xkcd.com/1296/
PHP,3dlxik,mattindustries,4,Fri Jul 17 23:39:21 2015 UTC,Mike and Brad are bad bastards!
PHP,3dlxik,attrox_,4,Fri Jul 17 20:09:30 2015 UTC,omg I'd lose my shit...
PHP,3dlxik,mattindustries,2,Fri Jul 17 15:48:18 2015 UTC,"I have several times now. Im the one that manages deployments and sometimes make it through what little QA we have so i have to roll back until the bugs are fixed trying to figure out if i need to roll back to """" or """" or """" not fun."
PHP,3dlxik,gm85,1 point,Fri Jul 17 18:38:15 2015 UTC,Ya'll motherfuckers need some change management.
PHP,3dlxik,1r0n1c,16,Fri Jul 17 19:16:39 2015 UTC,People who use a GUI for Git? Yeah I agree.  Only kidding.
PHP,3dlxik,martinph,12,Sat Jul 18 00:08:19 2015 UTC,"I used to think that, but SourceTree is very good."
PHP,3dlxik,you_get_CMV_delta,4,Fri Jul 17 15:40:27 2015 UTC,SourceTree was half the reason i got people to agree to git migration from svn.
PHP,3dlxik,OldMiner,6,Fri Jul 17 18:35:49 2015 UTC,The Jetbrains IDE's are also excellent for day-to-day by the way.
PHP,3dlxik,Terr_,1 point,Fri Jul 17 19:14:05 2015 UTC,I'm a big fan of them too!
PHP,3dlxik,greenwizard88,1 point,Fri Jul 17 19:33:59 2015 UTC,"I used Cornerstone for svn, and now Tower for git. I embrace software that simplifies everything."
PHP,3dlxik,steezefries,2,Fri Jul 17 19:46:52 2015 UTC,No love for Tower?
PHP,3dlxik,Terr_,1 point,Sat Jul 18 05:32:10 2015 UTC,I used Tower. I used to use Cornerstone for SVN and so glad I found another aesthetically pleasing piece of software for version control.
PHP,3dlxik,AlexanderNigma,1 point,Sat Jul 18 00:36:51 2015 UTC,We converted all our development processes at work to GIT/Sourcetree back in April.  Wow I wish we did it sooner!
PHP,3dlxik,steezefries,4,Sat Jul 18 05:33:05 2015 UTC,I actually feel like it saves me time. Having the diff in plain sight always updated as you edit next to the dirty files and the log makes it simpler for me.
PHP,3dlxik,Jack126Guy,6,Fri Jul 17 19:46:22 2015 UTC,.
PHP,3dlxik,NJ247,9,Fri Jul 17 19:17:37 2015 UTC,Good point. I honestly hadn't thought about it that way.
PHP,3dlxik,AlexanderNigma,1 point,Fri Jul 17 15:09:17 2015 UTC,"Depending on your background, this is unintentionally hilarious.  It isn't a part of reddit culture, but ""message containing a single period"" is a way of indicating a somber moment of silence in some online communities."
PHP,3dlxik,blocsonic,2,Fri Jul 17 15:12:23 2015 UTC,"Sometimes this happens because you've got a ""keep changing things until it works"" developer who--for whatever reason--cannot test the feature purely in their VM, so it spills over, as they do their test/tweak loop in a shared-dev environment."
PHP,3dlxik,gram3000,8,Fri Jul 17 22:29:29 2015 UTC,"You can still leave a comment though. I'd rather 20 comments ""trying to fix XYZ"", at least you know all of those commits are going to be related."
PHP,3dlxik,thenickdude,2,Fri Jul 17 15:42:50 2015 UTC,Who doesn't test stuff locally first?
PHP,3dlxik,gram3000,1 point,Fri Jul 17 17:06:31 2015 UTC,http://imgur.com/2XzBsrT
PHP,3dlxik,gram3000,2,Fri Jul 17 22:19:45 2015 UTC,"For everyone complaining...notice how Brad had it to Feb and Mike is only touching it now in Aug?  This is a single maintainer repo. Yeah, that will happen. when you are the only one touching the code."
PHP,3dlxik,babeside,1 point,Fri Jul 17 22:37:10 2015 UTC,Well it's still silly!
PHP,3dlxik,aleste2,1 point,Fri Jul 17 19:58:21 2015 UTC,"Wow, I guess I'm ahead of the game."
PHP,3dlxik,DerThes,1 point,Fri Jul 17 22:20:12 2015 UTC,Still not a good enough excuse.  Good commit messages are not just for other people but also to remind yourself why you made specific changes at a later date.  There is potential for that user to look at a change and not remembering why they did it.
PHP,3dlxik,StorsJT,1 point,Fri Jul 17 22:26:57 2015 UTC,"Yeah. However, I've been the sole maintainer for multiple internal repos at work for years. The amount of time I've saved not writing commit messages for thousands of commits no one but I will ever see is non-negligible.  I'm also never reverted any slice of code more than 72 hours worth of commits. Literally no one [even my replacement] is going to read through 3 years of git log on any of those projects. I'd only stop skipping the commit messages if I put in my 2 weeks notice so they next guy had info on the most recent changes."
PHP,3dlxik,blaize9,2,Sat Jul 18 22:33:04 2015 UTC,http://englishplus.com/grammar/00000262.htm The more you know. :-)
PHP,3dlxik,blaize9,1 point,Mon Jul 20 14:02:34 2015 UTC,Is there any way to go back and edit the commit message?
PHP,3dlxik,l00pee,3,Fri Jul 17 16:40:54 2015 UTC,"If you do an interactive rebase you can edit the commits freely (including the commit messages). However, since this is rewriting history, the hashes of the commits will change. You have to force push them to the remote (if they had already been pushed before editing) and other developers will have to take special action to move to the new head (since it forms a distinct chain of commits to the one they're tracking)."
PHP,3dlxik,attrox_,1 point,Fri Jul 17 17:31:31 2015 UTC,Not without reverting and re-commiting
PHP,3dlxik,CODESIGN2,1 point,Fri Jul 17 21:11:42 2015 UTC,Bummer. That would be fairly handy
PHP,3dlxik,shoxty,1 point,Fri Jul 17 17:33:25 2015 UTC,Apparently im wrong see https://www.reddit.com/r/PHP/comments/3dlxik/theirs_a_special_place_in_hell_for_people_that_do/ct6uzeu
PHP,3dlxik,MintYogi,2,Fri Jul 17 18:03:51 2015 UTC,That's for the last commit only
PHP,3dlxik,i_dno_do_u,1 point,Fri Jul 17 19:07:38 2015 UTC,BROGRAMMER SMASH!
PHP,3dlxik,evilmaus,1 point,Fri Jul 17 20:56:03 2015 UTC,"At least they left the name. Were i work we use svn for one project and, years ago, people commited without any information."
PHP,3dlxik,NJ247,1 point,Fri Jul 17 17:48:35 2015 UTC,Just add a pre commit hook that requires a comment. You could even go so far and only allow the same comment x times and require a minimum comment length.
PHP,3dlxik,mamoen,1 point,Fri Jul 17 18:49:00 2015 UTC,My manager does this...FFS
PHP,3dlxik,dev1null,1 point,Fri Jul 17 19:21:56 2015 UTC,Time to find a new job.
PHP,3dlxik,dsarchy,1 point,Fri Jul 17 20:57:23 2015 UTC,BRAD AND MIKE IM GONA KILL YOU TOMORROW!
PHP,3dok6w,nickkrogers,2,Fri Jul 17 23:34:14 2015 UTC,"If you're the author of this article, you can remove the function in the snippets since it's not used. Otherwise it will only confuse the readers."
PHP,3dok6w,michel_v,1 point,Sat Jul 18 07:57:34 2015 UTC,thanks.
PHP,3dok6w,Hansaplast,-4,Sat Jul 18 17:10:10 2015 UTC,Most php installations won't allow file_get_contents on a url. And that's good. This article is kinda bad.
PHP,3dok6w,bonked_or_maybe_not,1 point,Sat Jul 18 08:25:45 2015 UTC,What is better?
PHP,3dok6w,Hansaplast,1 point,Sat Jul 18 17:10:58 2015 UTC,I guess using curl is more secure? What's the difference between the two? Or should one just not ever load files from remote servers?
PHP,3dok6w,bonked_or_maybe_not,1 point,Sat Jul 18 17:16:20 2015 UTC,"Some people are stupid enough to do:  <?php echo file_get_contents($_REQUEST['url']); ?>   If you don't see the problem there, then you shouldn't be in control of a server. /u/Hansaplast is being pedantic or paranoid, your code is fine."
PHP,3dok6w,Hansaplast,2,Sat Jul 18 17:38:56 2015 UTC,I'm paranoid 😄
PHP,3dok6w,Hansaplast,-1,Sat Jul 18 17:47:04 2015 UTC,"Please tell me how the problem is with file_get_contents and not with the programmer's choice to trust user input in this case?  Please explain how, other than preventing PHP from accessing outside content, you solve the issue in the code above?  My box, My code, My security. This isn't 2001."
PHP,3dok6w,dracony,1 point,Sat Jul 18 17:53:19 2015 UTC,"file_get_contents doesn't handle ssl well out of the box. Prior to php 5.6 certificates are not verified. You could be vulnerable to a MITM attack. To secure it you need to create a stream context (see http://phpsecurity.readthedocs.org/en/latest/Transport-Layer-Security-(HTTPS-SSL-and-TLS).html).  The original script probably won't run into issues, especially on php 5.6.  The easiest option would be to use curl, since it does everything the right way on every php version.   Edit: and to add why I'm so anal about it is that some inexperienced php developer might just copy/paste that code and use it on a shared hosting environment or an outdated php version. He/she might run into problems, I think this reflects poorly on the php community. When you write blog posts with code snippets please check for all security flaws or stick with posting it to the comment section on php.net."
PHP,3dok6w,bonked_or_maybe_not,2,Sat Jul 18 18:19:39 2015 UTC,Interesting.  Thanks for explaining. I updated the code to use curl.
PHP,3dok6w,bonked_or_maybe_not,1 point,Sun Jul 19 13:59:22 2015 UTC,Though I agree with the comment below (this is all public information already anyways). Is there a possibility that the content would be replace en route or simply intercepted using file_get_contents and old versions of php?
PHP,3dok6w,hostetcl,1 point,Sun Jul 19 14:00:33 2015 UTC,"There is a very tiny possibility. It would require a big effort, but it is possible."
PHP,3dok6w,no1youknowz,1 point,Sun Jul 19 14:10:14 2015 UTC,What exactly woukd a mtm attack do for fetching data from an etsy? Change the avatar of a crystal pendant ?
PHP,3dok6w,bonked_or_maybe_not,0,Mon Jul 20 09:46:51 2015 UTC,"Prior to php 5.6 certificates are not verified. You could be vulnerable to a MITM attack.   Only a security concern if the content you are getting is something that needs to be secured.  The local theater's movie listings? I could give two fucks if the NSA sees that.   Again, use the right tool for the right job.  Further, file_get_contents is used for metric shit ton more than just getting remote content."
PHP,3drx6v,php-developer,13,Sat Jul 18 21:40:14 2015 UTC,"A horrible mix of static and sort-of-but-not-really OO. Confusing naming - you've decided to put all the gmp handling in 'long' and bcmath in 'float'. Neither of these is really accurate as they don't follow behaviours like PHP_INT_[MIN/MAX/SIZE] / [serialize_]precision as well as will likely cause you issues if you start to use scalar type hints. No error handling (for example, on json and xml conversion methods). If you're going to OO the standard API, I wouldn't just blindly alias functions. You might as well improve error handling too (for example, exceptions where they make sense, such as on the json functions). Going by the readme documented parameters, many of these these methods are missing a lot of functionality of their standard library equivalents Why bother with the date / time functions when there's already DateTime (which you'll definitely want to be using if you ever have to deal with timezones)? There appears to be duplication between the file:: and string:: classes (xml, json, etc). There's no documentation on the readme beyond function names - differences (and aliases) should be clearly labelled You claim to have created a new 'beautified' library, but carried through many of the naming issues (abbrlowercase vs camelCase vs under_scores, for example) that many people have with the standard library The classifications are weird in some places or out right missing - no equivalents to isInt and isFloat for isObject, isString, isResource The library is not PHP 7 compatible - float and string among others are now reserved words and cannot be used as class names   I've seen much better attempts."
PHP,3drx6v,AllenJB83,5,Sat Jul 18 23:06:52 2015 UTC,"Why not to use std namespace or something similar? For example streams, files and etc can be grouped into namespace std\io And also, why snake case?"
PHP,3drx6v,fesor,3,Sat Jul 18 22:05:34 2015 UTC,"Why all static methods? I don't see how this is ""beautifying"" anything myself."
PHP,3drx6v,Disgruntled__Goat,1 point,Sat Jul 18 22:23:26 2015 UTC,"I like your idea and as /u/fesor said, namespacing would be wonderful. An autoloader would also be ideal."
PHP,3drx6v,sketchni,1 point,Sat Jul 18 22:35:33 2015 UTC,"No code comments, no exception handling for the low level functions, pretty useless."
PHP,3drx6v,dennisbirkholz,1 point,Sat Jul 18 22:36:30 2015 UTC,"It says ""an attempt to reclassify php standard library"", I doubt it's trying to do something else. It's a proof of concept."
PHP,3drx6v,dennisbirkholz,1 point,Sat Jul 18 22:46:37 2015 UTC,"Either put the functions in namespaces (fopen as open() into \php\file or similar) or create classes that use real OOP like exceptions for error handling. Putting global functions in classes is completely pointless. That beautifies nothing. And the classes are all in the global namespace, hurray!"
PHP,3drx6v,dennisbirkholz,1 point,Sat Jul 18 23:55:16 2015 UTC,"A proof-of-concept pretty much has to use classes for namespaces so it can be autoloaded.   What's foo::bar() here can be \foo\bar() in a native implementation.   Putting global functions in classes is completely pointless.    Maybe this is why PHP keeps adding functions to the global namespace then.   And the classes are all in the global namespace, hurray!   Wait, I'll blow your mind right now. All namespaces... are in global namespace too.   So, when do we get drunk. I'm free tonight."
PHP,3drx6v,tonyrq,2,Sun Jul 19 00:09:02 2015 UTC,"A proof-of-concept pretty much has to use classes for namespaces so it can be autoloaded.    But it simply proofs nothing, so worthless."
PHP,3drx6v,tonyrq,0,Sun Jul 19 13:46:57 2015 UTC,"Maybe it ""concept"" something. Or at least ""of""?"
PHP,3drx6v,ScuzzyAyanami,1 point,Sun Jul 19 14:31:39 2015 UTC,Composers autoloader is perfectly capable of autoloading a file of functions. I see no reason these functions should be in classes.
PHP,3dnfma,Veta321,21,Fri Jul 17 18:15:20 2015 UTC,"RoR and Django are both frameworks, so it's not a true equivalence in your comparison. Ruby and Python are the base languages, and neither of them were written directly for the web. Conversely, PHP's raison d'être is entirely geared toward the web. That's not to say that Ruby and Python aren't usable for the web - they're just as worthy for backing websites as C or Java, for example - it just means that you absolutely have to bring in a framework to ease the burden of HTTP. One shouldn't discount the possibility of Javascript/NodeJS, but speaking as someone who learned to program in C++/PHP, working with prototypal inheritance is a bit of a brainf***.  A more fair comparison in terms of web technology would be ZF2/SF2/Laravel vs Django vs Rails vs ExpressJS. To one degree or another, each of these frameworks tries to do as much as it can to chauffeur the creation of web applications. This often means a lot of generated code and in some cases a lot of headaches. My personal preference (after using ZF2, SF2, and Rails) is SF2.   However, I also like working with microframeworks. Being able to pull in only the components you need can result in applications that are much faster than full-stack framework apps. My personal preference there is Silex, but there are other microframeworks that benchmark better than it.  Overall, PHP has a slight advantage in that it can speak HTTP (and CGI) natively in a helpful way. You're probably still going to want a framework, but they tend to be big and slow regardless of the language (unless you go with a microframework or avoid them altogether).  When choosing a web technology such as a framework, you also have to pay consideration to the other people who will be working on the project. You have to make sure the technologies you work with are well-documented and well-tested. Having a corporate support organization backing them is also a big plus, if you're working for a company. Also, if you're part of a larger team, having a full-stack framework has more appeal because it means everyone can standardize on the same workflows and practices.  In terms of syntax, Python and Ruby do tend to be more concise. That concision can be a drawback, though, when too much magic gets involved. Also, there's the matter of familiarity. Coming from C, which would you prefer:  (0..5).each do |i|    puts ""Value is #{i}"" end   vs.  for ($i = 0; $i <= 5; $i++) {   printf(""Value is %d\n"", $i); }"
PHP,3dnfma,beryllium9,4,Fri Jul 17 19:04:22 2015 UTC,"foreach (range(0, 5) as $i) {       echo ""Value is "", $i, PHP_EOL; }"
PHP,3dnfma,theshad0w,2,Sat Jul 18 03:08:27 2015 UTC,"You're right, he compared a range loop to a simple for loop. I would have used the following examples instead:  1.upto 5 do |i| # equivalent of for (i=1;i<=5;$i++)     puts ""Value is #{i}"" end # In the example above, a callable is passed to the 'upto' method of Fixnum (int) # upto yields to that callable for every number between 1 and 5 # public function upto ($max, Callable $block)  [1,2,3].each do |i| # equivalent of foreach([1,2,3] as $i)     puts ""Value is #{i}"" end   However, a direct translation of his ruby example in PHP would be:  (new RubyRange(0,5))->each(function($i) {     echo “Value is {$i}”; });  // Given the following definition: class RubyRange {     public function __construct($start, $end, $increments=1){ /* assignment here */ }     public function each(Callable $block) {         for ($i = $this->start;$i<=$this->end;$i+=$this->increments) {             $block($i);         }     } }   It might seem pedantic, but I think it's relevant to show the subtle differences which you need to be accustomed to when switching to such a conceptually different language. This is strange when you're used to C/C++/C#/Java and it's not the case when transitioning to PHP.  Edit: Fixed code formatting"
PHP,3dnfma,Pardalean,2,Sat Jul 18 11:05:27 2015 UTC,"it's relevant to show the subtle differences which you need to be accustomed to when switching to such a conceptually different language.   Absolutely! In fact, it's subtleties like this that I was referring to when I mentioned magic.  Do you know offhand if the ruby range loop has magical loop index variables? Twig (the PHP templating language) does in some of its loops - super handy for front-end work, but if you don't know they're there, you get sidetracked by creating them yourself. I suppose that example is halfway between magic and sugar. Like a cupcake wizard."
PHP,3dnfma,beryllium9,2,Sun Jul 19 03:42:17 2015 UTC,"array_map(function($i){     echo ""Value is $i""; },range(0,5))"
PHP,3dnfma,slifin,1 point,Sat Jul 18 23:58:36 2015 UTC,"I don't think you got the point of my example. It was meant to show that in ruby the range is actually an object, and each is a method on its class which takes a lambda and yields to it. Array and Fixnum(int) are also objects (everything is) and they have methods such as upto and each to replace for and foreach loops."
PHP,3dnfma,Pardalean,0,Sun Jul 19 06:58:47 2015 UTC,"This is very helpful indeed!   Given python and ruby rely on frameworks, what would be more analogous to php, Perl?  To give a more concrete example, if you were writing your own reddit what technology would you use?"
PHP,3dnfma,charlesbukowksi,2,Fri Jul 17 20:05:44 2015 UTC,"Well, those are two unrelated questions. I don't know that it's even possible to identify another language that's analogous to PHP in this respect (do other languages have CGI helpers that automatically analyze the incoming request and prepare it in the environment out of the box, without requiring an extra module? I don't know.)  For your second question, I've hand-written a forum in PHP before. I'm currently working on bring it up to date with best practices using Silex and Twig and PHPUnit and various other libraries. I wouldn't go a different technological direction right off the bat on a fresh web application, because it's impossible to predict what difficulties it might cause when you don't know much about it.  I prefer to dabble in new technologies with small side projects until I'm confident enough to employ them in larger initiatives. I'm currently working on this approach with NodeJS."
PHP,3dnfma,beryllium9,1 point,Fri Jul 17 20:37:02 2015 UTC,"Cool, really appreciate your candor."
PHP,3dnfma,charlesbukowksi,0,Fri Jul 17 21:51:39 2015 UTC,"You don't have to use a framework to make webservices with Python (and I'm sure the same with Ruby, but I have zero experience with it). Here's a post from Armin where he explores implementing WSGI with nothing outside the stdlib.  However, even a bare WSGI framework like werkzeug makes life so much easier.  The same can be said about PHP, though. You don't need a framework, but it makes your life easier."
PHP,3dnfma,kurashu89,5,Sat Jul 18 14:05:28 2015 UTC,"Its such a tricky question without knowing what you eventually want to be. I am going to guess based on your ""if you were going to create reddit from scratch what would you use"" question that you want to move into full-stack web-development and not just code back-end APIs or embedded device code.   To be a full-stack developer i would definitely learn PHP first, but with some caveats. The world of web development for larger systems is slowly changing and so is the role of PHP. Soon, the entire front-end will he html,css,javascript using AJAX calls to talk to back-end REST APIs. So PHP will not be used to output html any more - it will be used purely to implement the back-end APIs and business logic, back-end processing, database, persistent storage etc.    Some thoughts on what to learn:   learn the basics of PHP 5.3+ including the OOP model learn a light PHP framework (Silex, Slim) for API work how to consume and output JSON in php how to implement a REST interface and pros/cons (look online for examples) how to integrate back-end libraries and external interfaces (how to use curl, how to process credit cards, how to load data (files, http, etc.) learn the database interface using PDO (understand pros/cons of pooled connections and scaling isues with how we write data to the db and why we need a write Q for large apps) understand memcache and the difference using mysql vs postgres vs Oracle (its all very similar) understand issues and workarounds with sessions understand how to scale apps using replicated slave databases, clusters, load balancers, multiple http servers etc. maybe using container or VMs understand composer, test driven development, continuous integration   Theres a bit more than just PHP there, but I dont see when you will have time to learn Python for a while. After you have the PHP back-end down you will still need to learn the front-end stack (html, css, javascript, js framework/plugins like jquery, angular, test tools like jsunit, gulp and grunt, sass or less, how to minify your JS and http calls etc.)    To answer how i would implement Reddit, I would create a single page app in html/js calling a PHP API back-end which did all database/business functions.  Its all very simple when you have learned all the stuff listed above."
PHP,3dnfma,technical_guy,2,Sat Jul 18 09:19:05 2015 UTC,"There's a lot of good advice in this response.  However, the one part I'd ask you to clarify a bit more is this statement:   To answer how i would implement Reddit, I would create a single page app in html/js calling a PHP API back-end which did all database/business functions.   The problem, as I see it, with the single page app approach for a site like Reddit – which relies on search engines to bring in a decent amount of its traffic – is that you can only create ""real"" URLs (ones that don't use hash tags) for users who are viewing your site with latest-generation browsers that support the HTML5 history API. And, of course, you'll be creating those non-hashtag URLs with javascript, so you run the risk of many search indexing bots not working well with your site.  So, unless I'm missing something, you'll have to create an entire parallel architecture on the server side to filter requests from search engine bots and users that don't have the latest browsers, processing them on an entirely different backend to generate the requested pages on the server instead of the client.  I'm not saying this can't be done. But it's a non-trivial detail you can't leave out if you want your site to benefit from search engine-generated traffic.  Or am I missing something?"
PHP,3dnfma,bereddy,1 point,Sat Jul 18 13:40:13 2015 UTC,"My oh my, is there any books you'd recommend for getting started with all this?  I was planning to start with this:  http://www.amazon.com/dp/1491949465/ref=cm_sw_su_dp  I have read most of the reference on CSS and HTML already, so the above would mostly be for PHP/MySQL/JS.    Your intuition that I'd be interested in fullstack development is right.  I'd like a working knowledge of the whole process of making a webapp in startup fashion."
PHP,3dnfma,charlesbukowksi,3,Sun Jul 19 03:49:36 2015 UTC,"Python is pretty much the ideal language to learn. IMO, Django is far superior to anything PHP offers.   Python is also quickly becoming the defacto language for systems programming, such as daemons and scripts... something PHP is awful at. Python is installed by default on all major Linux distributions where as PHP is not.   Python is also a much simpler language with an incredible and mature ecosystem. PHP is kind of a mess, though it's gotten so much better.   You're asking this question in a PHP subreddit so of course you're going to get PHP bias responses. You should ask this in /r/programming or /r/webdev to see how PHP is looked at by all."
PHP,3dnfma,mervman,1 point,Sat Jul 18 18:22:59 2015 UTC,This is a good point.
PHP,3dnfma,charlesbukowksi,7,Sun Jul 19 04:39:32 2015 UTC,I started dabbling in PHP after doing enterprise .NET because PHP is super easy and cheap to host and the documentation is excellent.
PHP,3dnfma,utotwel,1 point,Sat Jul 18 04:27:53 2015 UTC,Largely the same reasons coming from a desktop development background and at the time Python wasn't so enticing for the web.
PHP,3dnfma,_ben_lowery,2,Sat Jul 18 19:12:03 2015 UTC,"I don't know how PHP compares to some of the other languages you're looking at, but it's worth mentioning that PHP apps are very stable.  They don't crash or leak memory easily. If you're planning on building a site that will get a lot of traffic and involve a lot of code, this is important."
PHP,3dnfma,bereddy,1 point,Sat Jul 18 16:38:22 2015 UTC,"Since PHP was designed as a template engine its much easier to get simple, dynamic sites up and running with no framework at all.  On most servers just take any .html page, change the extension to .php, and start mixing in php code.  The same is not true for Python where anything you want to do web-related is going to require implementing a template engine of some kind and a bunch of other packages to get the same results - which inevitably sends you into the arms of Django, Flask, or Pyramid.  Python has mod_python which acts a lot like mod_php does with Apache, but that approach has been largely abandoned in favor of WSGI.  So now if you want to write web apps in Python you have to write a WSGI-compatible application that can handle your requests and output a response that a server like Apache can use, or you implement your own server, again pushing you towards using something like Django so you aren't writing everything from scratch.  Now there's nothing necessarily wrong with this approach, but compared to PHP its just more complicated.  Depending on the size and complexity of the applications you want to build, you're probably looking at using a framework either way.  My opinion is that PHP will make things much easier on you in the short-term."
PHP,3dnfma,kodiashi,3,Fri Jul 17 21:16:54 2015 UTC,"On most servers just take any .html page, change the extension to .php, and start mixing in php code.   Yeah, you can but don't. That's not the way that modern PHP applications are made. You need to use proper architecture if you want to build a decent application in any language. Mixing business logic into views is a great way to end up with a mess."
PHP,3dnfma,dead-fish,3,Fri Jul 17 23:53:29 2015 UTC,"For applications no, but there are plenty of simple use-cases where PHP can be used to display a handful of dynamic pages with no need for a framework.  Just illustrating a simple example of something PHP can do that Python can't."
PHP,3dnfma,kodiashi,1 point,Sat Jul 18 01:11:30 2015 UTC,If you were making a site like facebook would you use PHP or something else?
PHP,3dnfma,charlesbukowksi,4,Fri Jul 17 21:56:24 2015 UTC,"Not that you're asking me, but I'll answer, as well.   For Facebook I'd use PHP for the front-end (the part calling backend services and building HTML pages out of their responses), but unlike what Facebook does, I'd go into heterogenous language-neutral services much earlier.  I feel this is what the people at Facebook would have wanted too (and are doing right now to some degree with their social graph APIs), but once you have a mass of PHP code deeply entangled with your business logic it's hard to change.Currently they have services in various languages (C++, Java, Erlang, etc.), but their reliance on PHP for aspects of their business logic remains strong.  I think PHP is unbeatable for the web front-end layer (controllers, templates) and for light logic. It's also great at integrating with other services (via HTTP, TCP, protocols like Thrift etc.) so it's a good player as a component of a larger ecosystem.  I'd use Python for glue logic that doesn't involve the web (light daemons etc.) and I'd probably not use Ruby for anything. I'm not much of a fan (no strong feelings against it, but I feel no aspect of it stands out for any reason that'd make me consider it)."
PHP,3dnfma,charlesbukowksi,1 point,Fri Jul 17 23:27:33 2015 UTC,really appreciate this insight.  is there anything you'd recommend reading that would help prevent me from making the same mistake as FB?
PHP,3dnfma,kodiashi,1 point,Sat Jul 18 00:22:25 2015 UTC,"Read about the Netflix architecture, why it's so resilient and how they test it (chaos monkey).  Read about the memo Jeff Bezos sent to all employees that all communication should happen through service APIs: http://jesusgilhernandez.com/2012/10/18/jeff-bezos-mandate-amazon-and-web-services/  Read about Thrift and why Facebook came up with it.  In general, read about best practices in creating service oriented architectures aka ""microservices"" (stay away from: people who claim service orientation requires heavy middleware and verbose protocols like SOAP; also stay away from crazy people who say a microservice is up to 100 lines of code or other such nonsense).  If you have time, read about the Actor model and how Erlang works (Erlang processes = actors) and how it's used to coordinate operation between services written in other languages in a distributed environment."
PHP,3dnfma,charlesbukowksi,3,Sat Jul 18 02:52:42 2015 UTC,"I'd stay with PHP.  I work in the advertising space and I've seen sites built in everything (RoR,PHP,Django,ColdFusion,Java,DNN) you name it.  Dev time on PHP is almost always the fastest and cheapest of the lot, we can deploy damn-near anywhere, and if you handle object and database caching right, the sites are almost unsinkable."
PHP,3dnfma,kodiashi,1 point,Fri Jul 17 22:29:17 2015 UTC,super interesting.   so why do you think people use all those frameworks?  just the easier learning curves?
PHP,3dnfma,bereddy,1 point,Fri Jul 17 22:35:06 2015 UTC,"A lot of it probably just comes from the school a person attended and the tools or languages that their CS program used.  If you are in a large corporate or university environment, you are more likely to see Java or Microsoft, because the organization has already made a big investment in their own servers and hardware.  IT managers love having a big corporation to blame or call when something goes wrong"
PHP,3dnfma,velmu3k,1 point,Fri Jul 17 23:39:24 2015 UTC,"If you read about why Facebook has the stack it currently has, including its continue reliance on PHP (in one form or another), you get the sense that the legacy of having started with PHP is one important part of why they're still using it.  However, the Facebook folks also seem to really like the rapid development you can do with PHP in comparison, in particular, to compiled languages. You can change a line or two of code and almost immediately test the change. This aspect of the language comes up over and over again in discussions of PHP at Facebook."
PHP,3dnfma,DSchalla,1 point,Sat Jul 18 16:35:43 2015 UTC,"PHP may have it's faults, but it's still very popular and has gone through something of a renaissance in the late years. It's also worth noting that PHP has the most popular tools for web publishing (WordPress, Drupal, WikiPedia). Also the packet management, etc. have taken it to the next level. Read more: https://www.symfony.fi/entry/php-and-symfony-structure-stability-and-flexibility  But as far as I think Ruby or Python are not the #1 new language to switch to. I would go ahead and start learning JavaScript or maybe even Hack (which is a lot like PHP). Both of these have aspects important for modern web development. JavaScript can be ran on the server (with Node.js) as well as on the client (browser). More about the future of JavaScript here: http://drupal.ovh/javascript-in-the-enterprise  Currently Hack is quite a niche language, but it's close companion (also from Facebook), React.js is becoming a staple of web developers in a way to develop interface components. By combining these technologies as XHP-JS, Hack is now able to generate front end components (JavaScript) from the backend. Read more about XHP-JS here: http://hhvm.ovh/entry/xhp-js-building-efficient-user-interface-components-with-hack-re"
PHP,3dnfma,DSchalla,0,Sat Jul 18 20:38:01 2015 UTC,"Running a web frontend is not an extremely demanding task most of the times so it doesn't matter what you really use for many small to medium projects.  PHP gives you a wide range of web front-end related frameworks and libraries at the expense of less or no ""general purpose"" libraries (say building GUI apps and what not).  Python gives a wide spectrum of general purpose packages, but with regards to the web, the choices are relatively constrained. Django is not a marvel of engineering, it's about the same level of quality and design as Laravel.  Ruby gives you Rails and that's it. So you should be drinking a lot of Kool-Aid every day or you'll quickly start questioning your choices.1   I'd be 50/50 for PHP and Python depending on your larger goals, but Ruby is a bit of a dead end.  Also the object system of Python & Ruby aren't really suitable for big projects. Nominal type semantics with interfaces and typehints really help make sense of large codebases in PHP. For good or bad (for good because it kinda works fine; bad because at some point you're really better off with Java or similar, but many projects keep ploughing through with PHP).   And now with PHP7, PHP is further increasing its performance distance relative to Ruby and Python.    1 And now you know why the RoR community is how it is. Poor folks."
PHP,3dnfma,beryllium9,1 point,Fri Jul 17 20:14:38 2015 UTC,"...Sinatra for Ruby also exists. And its not uncommon.  Personally I think that many PHP frameworks are just waste of time, in some way. Don't get me wrong, they are wonderful pieces of technology and I totally appreciate the work of the maintainers, but after trying quite a few frameworks the most could do the same and did it roughly in the same way. So it might also have advantages that in the Ruby community most people focus on Rails for big web applications, since their tooling e.g. is better than anything I've seen so far in the PHP world."
PHP,3dnfma,DSchalla,3,Fri Jul 17 20:45:14 2015 UTC,"All right, I'm curious, what kind of tooling do you consider important, and lacking outside RoR?"
PHP,3dlgsd,wiesson,48,Fri Jul 17 05:58:18 2015 UTC,"The null coalesce operator ( ?? ) also works as a shortcut for a common use case: a conditional attribution that checks if a value is set before using it. In PHP 5, you would usually do something like this:  $a = isset($b) ? $b : ""default"";  With the null coalesce operator in PHP 7, we can simply use:  $a = $b ?? ""default"";   oh my god yes. I like this."
PHP,3dlgsd,kenlubin,4,Fri Jul 17 07:14:37 2015 UTC,"It's about damn time!  I use the long one all the time, and it's just so verbose for what it's supposed to do.  echo (isset($foobar) ? $foobar : 'nothing);   It gets old quick.  I'm pumped."
PHP,3dlgsd,enkrypt0r,2,Fri Jul 17 13:37:56 2015 UTC,You can use this for now:  echo $foobar ?: 'nothing';
PHP,3dlgsd,cichli,1 point,Fri Jul 17 23:06:13 2015 UTC,"Reason why this is not nearly as good is that this will throw a notice level error. It does a test for truthiness, which is very different from isset (variable being set and being different from null)."
PHP,3dlgsd,valdus,1 point,Mon Jul 20 10:43:30 2015 UTC,"Which is exactly why many people's personal utility function files include something along the lines of  function isset_default(&$var, $default = null) {   if (!isset($var)) {     return $default;   }   return $var; }"
PHP,3dlgsd,enkrypt0r,1 point,Sat Jul 18 03:57:18 2015 UTC,"I've done this in the past, but it's still clunkier than I'd like.  Definitely an improvement, though!  A short function name helps, but I can't think of a nice, descriptive one off the top of my head."
PHP,3dlgsd,valdus,1 point,Sat Jul 18 13:40:03 2015 UTC,"When it was strictly procedural, I had all my functions prefixed with v_, so that particular function was v_isset(). Short enough.  My current iteration, when I use it, is part of a static class where I tried to have more descriptive names rather than brief, but the names were still fairly short - Util::checkVar() and Util::checkSetVar().  /** ...  * @param mixed           $var          Variable to test  * @param mixed           $defaultValue Value to return if $var is not set or fails $testFunction test  * @param string|callable $typeOrFunction Function or 'function_name' to test variable with. Must take one parameter  *                                      ($var) and return a boolean or something that evaluates as true/false.  *  * @return mixed  */ static function checkVar(&$var, $defaultValue = false, $typeOrFunction = null) { ... }  /* Similar function, but would SET the variable if it didn't exist or failed the given test. */ static function checkSetVar(&$var, $defaultValue, $testFunction = null) { ... }   The latter allowed for quickly and safely checking, retrieving, and defaulting all the GET/POST variables. Some frameworks now include similar functionality (such as Yii2's Yii::$app->request->get() functions):  Util::checkSetVar($_GET['index'], 0, 'is_numeric'); Util::checkSetVar($_GET['sort'], 1, 'is_numeric'); Util::checkSetVar($_GET['sortby'], 'name', function($var) { $var = strtolower($var); return (($var == 'name') or ($var == 'date') or ($var == 'total')); });   Can post my code if anyone is really interested, but I doubt it's any better than what's in the wild already."
PHP,3dlgsd,valdus,1 point,Sat Jul 18 16:21:26 2015 UTC,"While this is a commonly used way to do it, it's still insufficient because it changes the variable: passing a non-set variable by reference sets it to null.  // $foo is not set $bar = isset_default($foo, 42); // $foo is now set, $foo === null   This is particularly important for arrays:  // $foo[1] is not set $bar = isset_default($foo[1], 42); // $foo[1] is now set, $foo[1] === null   Running an iterator (such as a simple foreach) on this array will get you one more item than you would probably expect, with a value of null."
PHP,3dlgsd,palparepa,1 point,Mon Jul 20 10:49:40 2015 UTC,"Actually, that limitation is exactly the reason my later version is meant to be used in exactly in that manner. You don't use it to check that a variable is/isn't empty, you use it to validate it's contents. If contents don't match your requirements, it gets set to what you specified.  See the other comment in the same thread.  But there are still far better ways of doing it, especially in most frameworks. This was a pre-framework solution, still used sometimes when I don't want to use a framework or find it too clumsy."
PHP,3dlgsd,0xJRS,1 point,Mon Jul 20 12:44:33 2015 UTC,"But that's my point, you can't use it to quickly assign to variable A the value of variable B or a default without setting B if it isn't yet; which is what the new addition to the language we're talking about ( ?? ) will allow us to do.  In the example you answered too,   echo (isset($foobar) ? $foobar : 'nothing);   He isn't validating the content of $foobar. In fact for all you know the content of $foobar is holy and should not be altered at any cost.  I too use a similar replacement (it's probably something everyone wrote in their first week once the realized they wrote the same isset every 3 lines), but it is not a proper replacement/alternative to a proper solution like the one coming."
PHP,3dlgsd,dev1null,3,Mon Jul 20 16:12:04 2015 UTC,Wouldn't you get a warning if $b were to be undefined? I guess the ?? operator is special in that regard.
PHP,3dlgsd,SurgioClemente,6,Fri Jul 17 12:30:53 2015 UTC,It's special.
PHP,3dlgsd,faultydesign,1 point,Fri Jul 17 13:25:11 2015 UTC,"If you were looking for something to let you know but still default to ""default"" i'd just do this.  $a = $b ?? ""default""; if ( !$b ) {      log(""something""); }"
PHP,3dlgsd,prewk,-6,Fri Jul 17 17:58:41 2015 UTC,"Should've just gone with the Javascript version which makes a lot more sense $a = $b || ""default"";"
PHP,3dlgsd,h2ooooooo,12,Fri Jul 17 10:06:11 2015 UTC,"makes a lot more sense $a = $b || ""default"";   To me I see || and think logical OR and think I'll get a bool  https://wiki.php.net/rfc/isset_ternary if you want to look at discussion, they followed C# it appears"
PHP,3dlgsd,brunty,14,Fri Jul 17 10:42:11 2015 UTC,"javascript  makes sense   i lold   $a = $b || ""default"";   is $a an object or a bool? sense says bool, javascript says object"
PHP,3dlgsd,NeuroXc,3,Fri Jul 17 11:19:06 2015 UTC,"Well, both PHP and Javascript are dynamically typed with different quirky ""truthys"" and ""falsys"", so your complaint could just as easily apply to PHP."
PHP,3dlgsd,Firehed,1 point,Fri Jul 17 12:21:47 2015 UTC,"it's the same as   if ($b) {     $a = $b; } else {     $a = ""default""; }   So $a will be $b if $b is truthy, but the string default if it's falsy. Empty strings, 0 and undefined values are all falsy."
PHP,3dlgsd,jsanc623,2,Fri Jul 17 12:17:20 2015 UTC,$a = $b ?: 'default';
PHP,3dlgsd,0xJRS,3,Fri Jul 17 14:17:38 2015 UTC,"Except PHP already uses this for logical OR. If you run this code in PHP 5.x, $a will always equal true (because ""default"" is truthy)."
PHP,3dlgsd,fred_emmott,1 point,Fri Jul 17 12:02:10 2015 UTC,"You can already do this, but you lose out on the isset check. It's great for logic in models and what have you, but bad for input validation. A lot of existing code would break if the semantics of || were changed."
PHP,3dlgsd,mysql101,1 point,Fri Jul 17 11:25:55 2015 UTC,"Python has a similar:   a = b or ""default"""
PHP,3dlgsd,no1youknowz,1 point,Fri Jul 17 11:37:24 2015 UTC,$a = true; $b = $a || false; echo $b;    Output: 1
PHP,3dlgsd,--frymaster--,6,Fri Jul 17 18:00:27 2015 UTC,"TL;DR: 100% is conservative. It can be much more than that on Wordpress.  HHVM has a somewhat more thorough benchmark (not just testing a single page) (see http://hhvm.com/blog/9293/lockdown-results-and-hhvm-performance and https://github.com/hhvm/oss-performance).  With a more realistic load (PRs welcome to improve any of our tests), we actually see PHP7 as having a larger improvement on wordpress - closer to 200%! PHP7 is a huge step forward compared to PHP5. See the second chart in the HHVM blog post, or http://dl.hhvm.com/resources/lockdown-data/batch-run-results.csv for the summarized numbers.  Disclaimer: I wrote HHVM's benchmark suite and generated the results mentioned above."
PHP,3dlgsd,teuna,4,Fri Jul 17 16:26:20 2015 UTC,Hmmm wonder how long till rhel gets it. I guess sometime around 2020.
PHP,3dlgsd,no1youknowz,3,Fri Jul 17 11:36:23 2015 UTC,"There is no reason not to run PHP 7 on CentOS 7.   I'm running HHVM on there.  So if you wanted to run PHP 7 on CentOS 7, all you need to do is learn how to compile it, put it into an RPM, put it on COPR for others to enjoy.  Done. :)"
PHP,3dlgsd,disclosure5,7,Fri Jul 17 14:43:03 2015 UTC,"there's an old saying: ""nobody ever got fired for buying ibm"".   basically, it means that if you made a decision that deviates from the most conservative and something goes wrong, you shoulder the blame. in modern hosting, redhat is kinda like ibm. if you use the stock rhel install and don't soup it up with custom this and homerolled that then, when something tanks you can say ""don't look at me, this is the industry-standard rhel! not my fault"".   for this reason, sysadmins and devops at big organizations where there's a long accountability chain (usually headed by a guy who can't figure out outlook) tend towards standardized solutions. if you roll into a place like that with some custom rpms fresh from the internet, you will get a lot of resistance from your peers and suspicion from your supervisors.  does it suck? yes. is it the reality of the situation? also yes."
PHP,3dlgsd,mysql101,1 point,Fri Jul 17 16:37:08 2015 UTC,"There are some real serious health issues associated with this. Fifteen years ago I though it will change with time, it didn't."
PHP,3dlgsd,shady_mcgee,-2,Fri Jul 17 23:15:20 2015 UTC,"This is why I don't work for corporations and I setup my own shop.  I couldnt care less about some noob in a management position where he cannot find his butt with both hands let alone know what versions of software should be installed or shouldnt be.  Put it this way, Etsy, Facebook, Wikipedia are all running HHVM.  Software that aren't really in some distros and are running it fine.  If they can, then anyone can. PERIOD.    Packaging RPMs is trivial.  Taking charge of a repo and having your own ""certified"" packages is again trivial.  If there is a will there is a way, believe me.  If you want to start crying about ""nobody ever got fired for buying ibm"".  Good for you.  Don't cry to me that RHEL will push PHP 7 in 2050.  I just don't care."
PHP,3dlgsd,NeoThermic,2,Sat Jul 18 00:33:17 2015 UTC,"Etsy, Facebook, Wikipedia    And these are specific organisations that large enterprises, and particularly Government organisations want absolutely nothing to do with.  If it happens that you couldn't care about that.. good for you, doesn't mean no one is allowed to care about it."
PHP,3dlgsd,chuyskywalker,1 point,Sat Jul 18 01:07:17 2015 UTC,That's wishful thinking in a corporation with thousands of developers.   Production supports goals are not the same as developments.   They also won't support anything that doesn't come with the latest stable release with support from the vendor.
PHP,3dlgsd,no1youknowz,1 point,Fri Jul 17 15:37:30 2015 UTC,"I'd say 2018. They seem about 3 years behind. I think rhel 7 users 5.3.  Either way, I've never had trouble with adding the latest version repos.  I'm curious what the upgrade path will look like for php7. Hopefully I won't need to change too much of my existing code."
PHP,3dlgsd,McGlockenshire,3,Fri Jul 17 11:44:06 2015 UTC,"I think rhel 7 users 5.3.   Hmm:  [root@machine ~]# yum info php-common.x86_64 Available Packages Name        : php-common Arch        : x86_64 Version     : 5.4.16 Release     : 36.el7_1 Size        : 563 k Repo        : updates/7/x86_64  [root@machine ~]# cat /etc/*release* CentOS Linux release 7.1.1503 (Core)   That said, anyone using CentOS should just use the webtatic repo for PHP."
PHP,3dlgsd,shady_mcgee,3,Fri Jul 17 11:53:26 2015 UTC,Pretty sure EPEL or IUS comes with php56u
PHP,3dlgsd,NeoThermic,2,Fri Jul 17 13:16:22 2015 UTC,IUS is an awesome repo.  I have run binaries from them for years in a 24/7 ad server type scenario where millions of impressions are daily.  +1 for them.
PHP,3dlgsd,mysql101,4,Fri Jul 17 14:44:02 2015 UTC,Consider Remi's repo as well. Remi is the PHP maintainer for Fedora and is active on internals.
PHP,3dlgsd,NeuroXc,1 point,Fri Jul 17 14:18:46 2015 UTC,"5.4.16 is onl about 2 years old.  Better than what I expected for RedHat, actually"
PHP,3dlgsd,mysql101,1 point,Fri Jul 17 13:34:42 2015 UTC,"The version number is a bit of a misnomer, as they backport the sec patches into that version (hence release 36). I would wager this is most likely to be the most recent version of 5.4 patch wise. But again, if you want newer than 5.4, choose a decent custom repo."
PHP,3dlgsd,NeuroXc,1 point,Fri Jul 17 13:42:25 2015 UTC,"I've been making sure I get no depreciated warnings in any of my apps, so I don't think it will be a big deal.   Do you know if the latest version repo still gets full support?"
PHP,3dlgsd,no1youknowz,1 point,Fri Jul 17 11:48:06 2015 UTC,People ask me why I use Gentoo on a production server. I tell them this.
PHP,3dlgsd,audiokat,2,Fri Jul 17 12:08:19 2015 UTC,Major corporation... we're lucky we even have RHEL. =)
PHP,3dlgsd,innerspirit,1 point,Fri Jul 17 12:09:23 2015 UTC,"Yes, the company I work for uses CentOS for everything. Most of our boxes are still on 5.3. I convinced them to create 2 new servers with 5.5 from Remi's repo, only because our new Laravel apps require PHP 5.5."
PHP,3dlgsd,innerspirit,1 point,Fri Jul 17 12:13:09 2015 UTC,Switch to IUS.  I run a mission critical must not go down ever server with 10s of millions of requests.  Unfortunately it's legacy and will be phased out soon.  I use IUS exclusively.  I once used REMI and then had a hard crash with mysql and lost a lot of data.  Just FYI.
PHP,3dlgsd,innerspirit,9,Fri Jul 17 21:38:37 2015 UTC,"it will certainly run faster, how much faster still depends more on the DB than how fast PHP can dish output. Wordpress kicks off a lot of queries out of the box."
PHP,3dlgsd,NeuroXc,3,Fri Jul 17 07:04:34 2015 UTC,"This is obviously true. Wordpress is maybe not the best example, but I'm looking forward to test php7 :)"
PHP,3dlgsd,kikikol,2,Fri Jul 17 08:15:38 2015 UTC,"PHP code is complex enough that it really matters how fast PHP can dish output.  Which do you think is faster:    MySQL serving a few cached queries from RAM. PHP loading 60 classes and running a gigantic bootstrap on every request.   I intentionally did say ""loading 60 classes"" and not ""parsing 60 files of PHP"", I do assume opcache is present. It's still work."
PHP,3dlgsd,disclosure5,0,Fri Jul 17 15:54:16 2015 UTC,"Although a large part of the slowness of using mysql is in the socket/connection to the db and the latency and overhead involved, regardless of where the query results come from."
PHP,3dlgsd,scootstah,1 point,Fri Jul 17 17:33:24 2015 UTC,"Sockets aren't that slow. The initial connection handshake is slower, but you can improve this via pooling.  Also sockets add lag to a particular request, but they don't decrease your throughput significantly. Waiting for socket I/O blocks a thread, but you have more threads, and they're using the CPU at that time."
PHP,3dlgsd,nikic,0,Fri Jul 17 17:43:22 2015 UTC,"I agree with what you said, although it doesn't seem to contradict what I said or implied? Sockets are slower than compiled vm code, generally speaking."
PHP,3dlgsd,aaronjorbin,0,Fri Jul 17 17:51:28 2015 UTC,"Sockets are slower than compiled vm code, generally speaking.   Thing is... that statement is nonsense. Socket IO adds lag to a given request, but doesn't generally reduce throughput (your requests per second).  The bottleneck for a VM is, in a nutshell, the CPU, and sockets don't compete for CPU with your VM, so talking about which is ""slower"" is silly.  In other words, if you get 1000 request per seconds, and have sufficient concurrency, I can put sleep(1) in your code and you'd still get 1000 rps."
PHP,3dlgsd,McGlockenshire,0,Fri Jul 17 17:54:24 2015 UTC,"Well you are making it into a silly discussion. We are still talking about PHP and MySQL here right? Getting data from MySQL does require CPU time, transfer time, ram access, converting from MySQL data structures to PHP ones, etc. Even with a single query, this is slower than vm code."
PHP,3dlgsd,Disgruntled__Goat,1 point,Fri Jul 17 18:14:27 2015 UTC,"Although this is partially true, a properly configured DB shouldn't be the bottleneck for a Wordpress application until you start scaling into large numbers of posts/users/comments."
PHP,3dlgsd,McGlockenshire,2,Fri Jul 17 18:22:21 2015 UTC,"Wordpress by itself is not that bad, even with a ton of posts. But add some badly written yet popular SEO plugin and tag clouds and what not and you can reach 100+ queries of varied complexity to display the home page for a bonus of 2-3 seconds (or 10-20 seconds on godaddy) more load time."
PHP,3dlgsd,abugee1029,1 point,Fri Jul 17 19:56:29 2015 UTC,Get back to me when you inherit a landing page that runs 1800 queries. This is my hell..
PHP,3dlgsd,valdus,4,Fri Jul 17 19:59:44 2015 UTC,WordPress works on PHP7?  Whoa. Would have hated to be the guy that made that happen.
PHP,3dlgsd,Drarok,12,Fri Jul 17 12:06:05 2015 UTC,I don't think WordPress even required any fixes. WP was one of the main performance testing codebases during development and I don't remember it to not work at any point.
PHP,3dlgsd,Tov3rNaaR,5,Fri Jul 17 15:32:21 2015 UTC,"Hi, I'm that guy.    It wasn't a lot of work. The only real issue that needed to be fixed (thus far) was getting rid of PHP4 style constructor deprecation notices.  I'll continue to test against PHP7, especially the closer it gets to a release. The WordPress automated php tests are currently run against PHP7 (and have been for a few months now), but we won't have them actually fail the build until PHP7 is released."
PHP,3dnkx7,paraLogiki,7,Fri Jul 17 18:54:43 2015 UTC,"You just needed  return (string)$this->number;   On the final else.  <?php class FizzBuzz {   public function __construct($number) {     $this->number = $number;   }   public function __toString() {     if ($this->number % 3 == 0 && $this->number % 5 == 0) {       return 'FizzBuzz';     } elseif ( $this->number % 3 == 0 ) {       return 'Fizz';     } elseif ( $this->number % 5 == 0 ) {       return 'Buzz';     } else {       return (string)$this->number;     }   } }   Or you needed:  $this->assertEquals('1', (int) $fizzbuzz); $this->assertEquals('101', (int) $fizzbuzz);   Depending on what they provided. Did they provide the Test and said make the class, or the class and make the Test?  Given, you're using the __toString(), it more likely they gave you the Test Class and had to write the FizzBuzz class, right?  Anyway, the output from phpunit was enough to clue in pretty quickly:  1) FizzBuzzTest::testInputOne Method FizzBuzz::__toString() must return a string value  2) FizzBuzzTest::testInputOneHundredAndOne Method FizzBuzz::__toString() must return a string value  This is one of those gotcha's in PHP, automatic casting, and looks like that's probably what they wanted to see if you knew about. Although in this case nothing is being automatically casted, but the princple loosely applies."
PHP,3dn7mo,celtric,2,Fri Jul 17 17:16:14 2015 UTC,"You're more likely to find good packages country-by-country.  Each country does postal codes differently, and some don't even have postal codes.  Worse, some don't even have things that would be considered regional subdivisions."
PHP,3dn7mo,McGlockenshire,1 point,Fri Jul 17 17:46:24 2015 UTC,"We have found postal code validators and datasets with whole postal codes for every region, but we are struggling to find patterns like the ones in the example even looking one country at a time :("
PHP,3dn7mo,2012-09-04,1 point,Fri Jul 17 19:02:03 2015 UTC,"In Colombia, only a few cities, like the capital Bogota, have postal codes at all. And those were just started roughly two years ago and no one knows their's [right now it's 4 big zones for a city with more people than NYC and twice the area of Los Angeles].   In the Bahamas, they don't even have street numbers! You'll see literal addresses that look like ""Blue house next to the pink house on East Bay Drive."""
PHP,3dn7mo,0x18,2,Sat Jul 18 22:08:15 2015 UTC,http://www.geopostcodes.com/
PHP,3dn7mo,bojanz,1 point,Fri Jul 17 17:49:26 2015 UTC,"Thank you for the link. I've been browsing around, but unfortunately they don't offer the data we need (postal code patterns to match to specific country subdivisions) :("
PHP,3dmxle,redsnowmac,2,Fri Jul 17 16:00:15 2015 UTC,"Some of the examples I see feel very CodeIgniter-ish.  I'm not sure I understand what is going on with $this->load, for example.  Why not use clearer dependency injection?"
PHP,3diuex,snobby_penguin,1 point,Thu Jul 16 16:56:11 2015 UTC,"Something I've always wondered... what exactly is the point of the tilde operator on version numbers? ~1.2 is equivalent to >=1.2 <2.0.0, so why not just use 1.* ?"
PHP,3diuex,Disgruntled__Goat,8,Fri Jul 17 11:42:49 2015 UTC,Because you don't want version 1.1
PHP,3diuex,ciaranmcnulty,2,Fri Jul 17 12:45:56 2015 UTC,"~1.2 is not the same as 1.* because the latter will install versions below 1.2, whereas ~1.2 will install anything above or equal to 1.2. ~1.0 and 1.* would be the same though."
PHP,3diuex,Colonel-Rosa,1 point,Fri Jul 17 12:10:45 2015 UTC,"In what situation will it install versions below 1.2? If the project is at or above 1.2 composer will install that version, not 1.1."
PHP,3diuex,Disgruntled__Goat,2,Fri Jul 17 13:39:32 2015 UTC,"It can install 1.1 if you have another dependency which wants 1.1.*, then Composer would look at your 1.* and conclude ""this guy wouldn't mind 1.1, so problem solved"" and you get 1.1.  Don't get ""smart"" with your version specifications. Set it exactly to the range you need it to be.  Also this one time I had to go back in time and save Sarah Connor and got 1.0.1 at the worst possible moment. Learn from my mistakes."
PHP,3diuex,Disgruntled__Goat,1 point,Fri Jul 17 15:39:56 2015 UTC,OK fair enough. Still seems like an edge case... and it's only shorthand for >=1.2 <2.0 which is arguably easier to understand.
PHP,3diuex,Anahkiasen,2,Fri Jul 17 17:32:54 2015 UTC,"~1.2 is also easy to understand. It means ""compatible with 1.2"".  1.2.0 is compatible with 1.2. 1.2.3 is compatible with 1.2. 1.3.4 is compatible with 1.2. 1.8.9 is compatible with 1.2. 2.0.0 is not. 1.1.0 is also not.  This is why semver is useful, because ""compatible with 1.2"" is a very specific and very commonly used version range.  In terms of real world usage you are using three patterns in semver:  X.Y.Z - When your usage is highly specific, highly reliant on undocumented features, or in a highly sensitive project. X.Y.* - Typical for production use of larger projects. ~X.Y - Typical for smaller projects (most of projects) and prototypes.    If you think about it, anything else would be odd or rare. So it helps to have common cases be short."
PHP,3dhqaf,MikhailVink,2,Thu Jul 16 10:59:25 2015 UTC,Ya'll need to get a non default WordPress theme (from 2010) for your blog. ;)
PHP,3dhqaf,reinink,1 point,Thu Jul 16 20:03:20 2015 UTC,Content is king.
PHP,3dgs56,dataf3l,19,Thu Jul 16 03:45:33 2015 UTC,"If good projects were as easily accessible as odesk they'd equally quickly become a race to the bottom. Your best bet is going to be networking, I'd recommend getting to know and reaching out to developers (or better yet, agencies) and trying to help with their overflow."
PHP,3dgs56,Matt0864,4,Thu Jul 16 06:56:58 2015 UTC,"This is a good point, but it also begs the question, ""What is a good project?""  You can probably find a cheap overseas team willing to take on any project for $10 per hour, or less. I can almost promise you that their code will be swiss cheese to even the most inexperienced of script kiddies. (I've cleaned up after them before. You want to see a myriad ways to make a PHP website vulnerable to Local File Inclusion attacks? Hire one of these teams.)  A good project to those teams is ""the client is willing to pay very little and is unconcerned with the consequences of hiring amateurs."" What is a good project to you?  A good client isn't interested in the cheapest solution. They're concerned with ""fast"" and ROI. Mostly ROI."
PHP,3dgs56,sarciszewski,2,Thu Jul 16 12:25:12 2015 UTC,"make a good website, learn some SEO and let them find you ... i never bother to use platforms as i know i will be ending up with the cheapest person usually, not the best.  instead i usually use google to find freelancers in my area where i know that they can come meet me easily."
PHP,3dgs56,cYzzie,3,Thu Jul 16 07:59:13 2015 UTC,"Do you have a blog or website advertising your services? I am in the process of writing my own, happy to give tips and thoughts. If you are willing to share a link (either here or PM), happy to review it."
PHP,3dgs56,halfercode,3,Thu Jul 16 10:55:59 2015 UTC,"This may be an unpopular anecdote... but I've done well with elance and such. I'm just very straight forward, and I make sure to take a close look at the ""buyer's"" job history - find people who HAVE worked with the $10/hr crowd. Then sell them on why you're better.  Also, make sure your work is 10x better than that of the people bidding 10x less than you. Most clients there laughed or never responded to my rates/bids... but those that did have been very happy and continue to bring me projects.  The good clients are there, you need to learn how to filter them and get in with them."
PHP,3dgs56,anything_here,1 point,Thu Jul 16 13:57:59 2015 UTC,"People in this thread have an odd lack of understanding of consulting. If you are getting $10/hour jobs as a consultant you are either worth $10/hour or are accepting 10/hour. Either way, it is about you, not the client."
PHP,3dgs56,Tiquortoo,2,Tue Jul 21 12:13:03 2015 UTC,I use peopleperhour.com
PHP,3dgs56,calumk,1 point,Thu Jul 16 10:47:20 2015 UTC,"I'm trying to work out the pricing model of PPH. Does it take a cut of earnings, like Upwork?  (Just had a browse of the available projects - Lordy, it's a mess. Hopelessly unrealistic budgets coupled with woefully inadequate specifications.)"
PHP,3dgs56,halfercode,4,Thu Jul 16 23:52:12 2015 UTC,"But yeah, if you are a PHP coder and ever need a job, just look me up! I can interface you with great positions currently in Washington, DC, Houston, Detroit, Austin, Dallas, San Francisco, Los Angeles, and NYC and those are just the people I've talked to this week. These are all 6-figure, relocation-paid jobs, for the most part. I'm living in the Bahamas now, and going to go back to Bogota in 2 months. I have no desire to relocate for a job anymore."
PHP,3dgs56,2012-09-04,2,Thu Jul 16 12:05:33 2015 UTC,"Sorry to hear your experiences have been so miserable.  If you ever hear from a client that desperately needs application security and/or cryptography expertise, please feel free to send them to Paragon Initiative. We have a lot of spare bandwidth at the moment which I'm currently using to work on ideas to improve PHP 7.1."
PHP,3dgs56,sarciszewski,3,Thu Jul 16 12:23:01 2015 UTC,"This is a great way of doing things, thanks!"
PHP,3dgs56,ahartzog,1 point,Thu Jul 16 12:40:30 2015 UTC,Have you ever considered creating a massive network of reliable developers and outsourcing/passing on the work? Almost a kind of php agency. With your skills I'm sure you could even set it up to run itself automatically.
PHP,3dgs56,owenr88,1 point,Thu Jul 16 13:40:09 2015 UTC,Doesn't work if no one signs up.
PHP,3dgs56,2012-09-04,2,Thu Jul 16 16:03:41 2015 UTC,/r/forhire has PHP gigs from time to time
PHP,3dgs56,gram3000,2,Thu Jul 16 18:24:57 2015 UTC,That seems to be a mixed bag though.
PHP,3dgs56,loveduckie,2,Thu Jul 16 09:06:08 2015 UTC,That's true. Certainly not PHP specific but I've managed to get a couple of good beer money jobs out of there in the past
PHP,3dgs56,gram3000,1 point,Thu Jul 16 10:11:56 2015 UTC,"elance is great, not everyone picks cheap indians, they are well know for bad quality"
PHP,3dgs56,thebrainless,1 point,Thu Jul 16 14:36:30 2015 UTC,http://hnhiring.me/
PHP,3dgs56,commercial-hippie,1 point,Thu Jul 16 16:44:31 2015 UTC,"In my experience, you shouldn't win ""the race to the bottom"" on oDesk, Elance etc. It's enough to complete few simple jobs with lowest price, get fine reviews and then increase your rate. A local community is another good way, but it requires some communication skills."
PHP,3dgs56,Promios,1 point,Thu Jul 16 23:09:47 2015 UTC,Created /r/phpgigs/   You can post your resume there
PHP,3dibat,Garethp,3,Thu Jul 16 14:32:09 2015 UTC,"Oh man, the timing on this. I've been working with EWS over the past 2 months and have been working with the original ""jamesiarmes/php-ews"" library for the past 4-5 weeks with frustration over the incompleteness and 5.2 style of code. If this was just a bit earlier it would have made things a bit easier for me, haha. But alas...  At any rate, thanks for this great work and thank you so much for sharing it!"
PHP,3dibat,Rican7,3,Thu Jul 16 15:46:13 2015 UTC,"I understand your pain. 3 weeks ago I got tasked with having to build something to connect our application to ews, and made the same discovery you did, that there was nothing worthwhile out there to use.  Obviously I forked off of James, but made some major improvements. Under the hood though, its running mostly the same. If you're still developing your thing, it may turn out to be easier to use my library than you think, and get the advantages. If you want to go down that path, but run in to some moderation issues, let me know and I'll see if I can build some in"
PHP,3dibat,Rican7,3,Thu Jul 16 15:53:35 2015 UTC,"Yea, so you get it, haha.  Thanks, I appreciate it! I might take you up on that. :P"
PHP,3di0xt,dvdpearson2,15,Thu Jul 16 13:01:41 2015 UTC,"Option to telecommute some days A decent number of colleagues with same/greater level of experience/skill Interesting problems to solve Nature of work - I don't want to just be stamping out CMS implementations every day Solid process Commitment to code/architecture quality, not just volume/profit/speed/visual design (this is usually only an issue at ""creative"" oriented agencies) Mac or Linux workstations   And then I have a blacklist of things I won't work with as a primary tool/platform:   Wordpress CodeIgniter Kohana Drupal (this is open to change, I have not had time to look at 7 yet, and I hear things have gotten a lot better) Dojo"
PHP,3di0xt,prodigitalson,5,Thu Jul 16 14:21:22 2015 UTC,"Totally agree with this guy. Well, except the WordPress part. I'm a big fan but that's personal preference. I would put Magento in there.  Anyway, what alot of those lead back to is that I am valued as a person and a developer. Many places it just boils down to the company not valuing development. Not seeing it as an investment in the company. The analogy I always use is a train. At alot of places developers are the caboose yet they are still blamed for any crashes. Client was late getting you comps and also changed a bunch of features? Tough shit. We still need to launch on the previous deadline. And if you miss that deadline it's your fault. Never mind the long list of mistakes that took place before it even hit my desk.  Oh, one thing not mentioned was leaving me alone to work. There's no for me too attend meetings eight hours a week. Exceptions happen and it becomes more common the further along in your career you are  but if I'm hired to code I need uninterrupted time to code.  Two very nice-to-haves would be big dual screens and free snacks/soda/drinks/whatever."
PHP,3di0xt,MyWorkAccountThisIs,2,Thu Jul 16 14:41:57 2015 UTC,Sounds like my work! It really is bliss to be treated like a real human.
PHP,3di0xt,littletinyumbrellas,1 point,Thu Jul 16 17:52:18 2015 UTC,Thanks alot!
PHP,3di0xt,MyWorkAccountThisIs,1 point,Thu Jul 16 14:42:00 2015 UTC,*a lot
PHP,3di0xt,bga9,1 point,Thu Jul 16 14:47:35 2015 UTC,I know what I said.
PHP,3di0xt,MyWorkAccountThisIs,1 point,Thu Jul 16 16:53:59 2015 UTC,You're  misinformed
PHP,3di0xt,bga9,1 point,Thu Jul 16 19:35:57 2015 UTC,Your mom's misinformed.
PHP,3di0xt,MyWorkAccountThisIs,1 point,Thu Jul 16 21:01:38 2015 UTC,alot
PHP,3di0xt,bga9,1 point,Thu Jul 16 21:43:02 2015 UTC,"Thanks for sharing! Dual screens in 2015 is a must, since I'm currently using 3 screens for better work performance."
PHP,3di0xt,MyWorkAccountThisIs,1 point,Thu Jul 16 23:55:34 2015 UTC,"It used to bother me if a company wouldn't get me the peripherals I wanted. Nothing crazy but I did prefer an ergonomic keyboard - for example. Like $50 any day of the week. I was shut down at several companies. Now, I just bring in whatever I want because having the thing is more important. Currently using my own keyboard, mouse, chair, and cinema display. But I've also grown past simple accessories. I don't expect the company I work for to pop for a $100+ keyboard or mouse. Though it would be nice.  So if some job was great otherwise except no second monitor I would just bring in my own. Life's too short (or we spend too much time at work) to not have good tools."
PHP,3di0xt,webdeverper,2,Thu Jul 16 17:14:33 2015 UTC,"I always use my own peripherals too, I find it so weird the people who day after day use the same company supplied 2 button wired optical mouse.   Well monitor I never had to buy, that should be on the company.  The way I see it, I can just bring the peripherals with me if I ever leave."
PHP,3di0xt,HeDares,1 point,Thu Jul 16 19:35:28 2015 UTC,I invested in a good mouse keyboard and mouse mat for work a while back when i move from company it goes with me then i never have to wait for them to sort it and i get exactly what i want.
PHP,3di0xt,2012-09-04,2,Fri Jul 17 02:10:53 2015 UTC,It's a tax write off. Any company not willing to do this is really stupid.
PHP,3di0xt,HeDares,1 point,Fri Jul 17 21:13:02 2015 UTC,"Yep! If the company you're looking to work for doesn't provide you any good materials, this proves they don't really want you to perform, my 2 cents."
PHP,3di0xt,MyWorkAccountThisIs,1 point,Fri Jul 17 01:40:41 2015 UTC,The main issue i have have with company's that use WordPress a lot is that it tends to be a symptom of a greater issue with their development practices.
PHP,3di0xt,HeDares,1 point,Fri Jul 17 12:55:09 2015 UTC,"To each their own. I enjoy it. Developers seem to be the only people that don't like it and it's usually for academic reasons (aka: not OO/modern/inconsistent). It runs great, easy for end users to use, and has a silly amount of customization. Even as a programmer I can't deny how quickly I can get something up and running."
PHP,3di0xt,MyWorkAccountThisIs,1 point,Fri Jul 17 21:08:58 2015 UTC,"That's because invariably its the developer that has to clean up the mess that gets left behind when it eventually gets hacked sure its quick to install and cheap but your not taking into account the lost time and revenue from dealing with its many security flaws.  Also it does not run great at all, its so much slower than almost any other lightweight cms on the market and thats before you start adding plugins."
PHP,3di0xt,ihugyou,1 point,Fri Jul 17 21:50:31 2015 UTC,"I don't know what type of experience you've had but that's not WP at all. You can't blame the CMS because some bad devs muck it up. Out of the box it passes most industry security checks. And plugins don't slow it down. Bad plugins, maybe. But not by default. What you don't seem to like is WP in the hands of bad developers - which is hardly WP's fault."
PHP,3di0xt,prodigitalson,1 point,Fri Jul 17 21:56:39 2015 UTC,"I'm sorry, but you don't choose to not work with Magento. Magento decides if you're worthy."
PHP,3di0xt,_tenken,5,Sat Jul 18 17:39:35 2015 UTC,"I totally forgot the same/greater level colleague point. In fact, I think this point for me is required since I don't want to work with someone who pulls me down and doesn't suggest new ideas or technologies. Thanks for the reply !"
PHP,3di0xt,prodigitalson,2,Sun Jul 19 16:16:46 2015 UTC,"I'm all about mentoring other developers... But I also want ""peers"" and mentors for myself :-) Also this isn't strictly about roles/titles like Senior/Junior Developer because often times there are people below you on the org chart you can learn a lot from especially if its an organization where there is a lot of specialization."
PHP,3di0xt,mattsah,1 point,Thu Jul 16 17:11:38 2015 UTC,You're totally right. Sometime the best people you could learn from is bellow you in any organisation.
PHP,3di0xt,SkyRak3r,1 point,Thu Jul 16 17:23:07 2015 UTC,"Wow great post! Thanks for sharing!  Well, I can't more agree on your points. I also need to be involved in the projects I am working on. This motivates me to be at my better and to provide a great solution. And about feedbacks, you're totally right. The best feedbacks I ever had were from my senior teammates.  Thanks a lot !"
PHP,3di0xt,baileylo,1 point,Fri Jul 17 12:53:02 2015 UTC,you mean drupal 8 (i hope) :D
PHP,3di0xt,2012-09-04,1 point,Thu Jul 16 20:03:55 2015 UTC,Both actually. I have not looked at Drupal in probably about 3 - 5 years. I'm sure there have been improvements which is why I am open to taking another look. But without having had the time or inclination to do that it remains on the list.
PHP,3dhhvc,dracony,5,Thu Jul 16 08:55:13 2015 UTC,After a quick skim through it looks really good. I've never used PHPixie before but the docs make it look quite quick to get started.  Possible improvements:   Add how to use this with PHP's built in server (php -S) Add how to create (integration) tests (if the framework provides a standard) Add some links from class names to either the class in github or further docs. Eg Request Add a space after // comments (subjective)
PHP,3dhhvc,dave1010,2,Thu Jul 16 11:41:17 2015 UTC,The space after // also bothered me but I though it wasn't important enough to mention =)
PHP,3dhhvc,phpgeek,1 point,Thu Jul 16 11:48:24 2015 UTC,Thanks will do =).   The tests are one of the things I thought were to straightforward to write in the doc about. They are preconfigured to run from both /tests and /bundles/app/tests/ folders.  Linking to classesis actually an amazing idea! Will definitely do that!
PHP,3dhhvc,sketchni,1 point,Thu Jul 16 11:47:10 2015 UTC,I've never used PHPixie before but I'll take a look through the docs and let you know
PHP,3dhhvc,sketchni,1 point,Thu Jul 16 11:41:50 2015 UTC,Thanks!
PHP,3dhbsq,magn3tik,3,Thu Jul 16 07:25:47 2015 UTC,"Powerful tool, horrendous name."
PHP,3dhbsq,dbbk,1 point,Thu Jul 16 15:34:26 2015 UTC,Better than calling it Moist. ;)
PHP,3di63n,rocketpastsix,3,Thu Jul 16 13:49:16 2015 UTC,"You'll want to join #phpmentoring on Freenode and stick around. Ask questions. Let people get to know you. The mentoring relationship is usually pretty personal, so people will want to know you're what they want in an apprentice before they seriously take you on.  Being an apprentice requires far more from you than from the mentor. You have to do most of the legwork."
PHP,3di63n,frozenfire,2,Fri Jul 17 16:22:03 2015 UTC,"Always two they were, a master and a mentee."
PHP,3di63n,geggleto,1 point,Thu Jul 16 14:16:37 2015 UTC,this mentee needs a master.
PHP,3di63n,geggleto,1 point,Thu Jul 16 14:19:37 2015 UTC,"I can be your master, AMA.  I'm not gonna kill ya. I'm just gonna hurt ya, really, really bad."
PHP,3di63n,irphunky,1 point,Thu Jul 16 14:37:28 2015 UTC,Can't tell if you are serious or not
PHP,3di63n,charlesbukowksi,2,Thu Jul 16 14:47:42 2015 UTC,I'm serious: AMA.   The rest was a Joker reference.
PHP,3di63n,potherca,1 point,Thu Jul 16 17:24:13 2015 UTC,"idk, but if you use IRC constantly I could possibly be of some help"
PHP,3di63n,throwaway7n3xp0,1 point,Thu Jul 16 15:43:51 2015 UTC,I'm in that room now. What's your nick?
PHP,3di63n,throwaway7n3xp0,1 point,Thu Jul 16 15:52:29 2015 UTC,geggleto on freenode in ##php or #slimphp
PHP,3di63n,Nicoon,1 point,Thu Jul 16 16:47:33 2015 UTC,"That sucks, always directed people who wanted to learn here as it seemed to be very active.  Trying hanginng out in #php on freenode and some of the relate channels, usually people that idle are fairly open and friendly just don't expect them to do your job for you ;)  Sure there must be a slack alternative too but i'm not really a user of that so :("
PHP,3dkkti,thebardingreen,2,Fri Jul 17 00:50:10 2015 UTC,You might have better luck asking on stackoverflow.com or /r/PHPhelp - This subreddit tends to be discussion oriented.
PHP,3ddr84,sarciszewski,10,Wed Jul 15 14:00:02 2015 UTC,Thanks for taking the time!
PHP,3ddr84,Xanza,22,Wed Jul 15 14:27:13 2015 UTC,"(Previous thread mysteriously got deleted.)  It's not really a secret that there are a lot of insecure code snippets in high-scoring answers to popular questions on Stack Overflow. I've complained about this before. Right now the burden is on you, the developer, to be able to discern secure solutions from insecure solutions. And I don't think that's fair.  Rarely, if ever, asked questions:  Why should we trust your opinion?  I'm an application security consultant and experienced security researcher. If you're using a popular PHP framework or CMS, odds are that you've benefited from my efforts without even knowing it. I'm also working on some ambitious projects (which will hopefully be ready in time for PHP 7.1) that will make it very easy to develop secure applications.  More recently, I've performed two code audits for cryptography applications (one in PHP, the other in C#). I have a lot of specialized knowledge and experience in the field of application security. I've also been a PHP programmer for 13 years.  Why StackOverflow?  Lots of people go there for answers to programming questions. Some even copy and paste solutions into their code. (Please don't be one of them. I've seen more weak RNG bugs in production than I care to think about.)  Since StackOverflow is a very popular and visible source for programming wisdom, improving the quality of the information there should diffuse to the rest of the PHP community.  Can we ask general questions?  Sparingly, yes. I'm mostly interested in cleaning up sources of bad programming advice and reducing the incidence of security weaknesses.  If anyone needs help with a specific problem for their business, please consider hiring me as a consultant instead of asking me to work for free. :)  Why did you make this offer? / What do you get out of this?  If I have to admit but one weakness, it would be that I'm terrible at identifying the original source of bad security advice. I'd like to stop these problems at their source and make the Internet more secure. Telling one client after another to fix the same bug gets to be very tedious and soul-crushing.  If you point me to a question or answer I haven't encountered before, and it contains bad advice, I'll be able to fix it. Or provide an alternative answer in line with security best practices. Everybody wins.  The most I'll get out of this is the satisfaction of raising the good:bad advice ratio and discouraging tomorrow's developers from repeating mistakes or adopting bad habits, and maybe material for future blog posts.  What if you don't know whether or not it's secure?  I'll say so, and then research the issue until I know if it is or not.  I don't trust you. I'd rather check with ircmaxell/enygma/padraicb/et al.  That's fine. Skepticism is healthy.  On most issues, however, they're probably going to reaffirm my advice. And this is my open offer, not theirs. It wouldn't be fair for me to volunteer other peoples' time.  How can we ask you?   By email: scott@paragonie.com By Twitter: @voodooKobra By IRC: I'm voodooKobra on freenode (I idle in #phpc and #php.security) Or, I suppose, you could leave a comment here.   What's the catch?  The scope is, aside from the rare general question, limited to StackOverflow questions and answers.  Will you audit an obscure library for me for free?  No. That wouldn't be fair to Paragon Initiative's clients."
PHP,3ddr84,terpfear,2,Wed Jul 15 14:06:21 2015 UTC,"Thanks for taking the time to do this! I am the author of this SO answer: http://stackoverflow.com/questions/1846202/php-how-to-generate-a-random-unique-alphanumeric-string/13733588#13733588  (Not the accepted answer, but it is the most up-voted) I have no real background in crypto and wanted your thoughts. I will make any edits you suggest and try to make sure it is up to your standards. The meat of the code is taken from a comment on the php doc of openssl_random_pseudo_bytes and it looks legit to me. I just want to make sure I am not putting bad code out into the world and making your life harder."
PHP,3ddr84,captain_obvious_here,3,Wed Jul 15 21:11:05 2015 UTC,"My laptop is dead at the moment so I apologize for the brevity of my response but http://stackoverflow.com/a/31284266/2224584 is how I tell people to generate random strings.  See also  https://github.com/paragonie/random_compat/blob/master/ERRATA.md for the preference order of PHP 5 CSPRNG strategies.  Your answer isn't bad. I'm concerned about possible timing leaks with bin2hex and hexdec, as well as any operations that work with floats, but I don't think there is much that can be practically exploited today. The random_int and random_bytes backport project uses bitwise operators to avoid working with floats or cache timing side-channels with hex decoding or changing base to decimal.  The random_compat project is deliberately engineered to be as secure as possible and is the result of many contributors far more brilliant than myself. I don't demand everyone spend as much time or research on their own solution.  If someone uses your solution, they are much better off than the accepted solution. If I saw your code in production during a security assessment, I'd probably move on."
PHP,3ddr84,captain_obvious_here,1 point,Wed Jul 15 21:32:37 2015 UTC,I'd rather check with ircmaxell   I wish my sarcasm detector wasn't broken :)  Edit: Added smiley.
PHP,3ddr84,captain_obvious_here,11,Wed Jul 15 14:29:49 2015 UTC,"I don't understand the intent of your comment. /u/ircmaxell has a lot of good answers on StackOverflow.  He's been mistaken about minutia (e.g. H(M || K) is not vulnerable to length-extension attacks, but collisions are possible) but always quickly corrected it when someone pointed discrepancies out, and he doesn't repeat mistakes. That counts for more than simply being correct all the time."
PHP,3ddr84,captain_obvious_here,1 point,Wed Jul 15 14:55:34 2015 UTC,"I genuinely thought you were being sarcastic on the text I quoted.  I wouldn't think about contacting ircmaxell for security-related stuff, and it never stroke me that he could be really good at it. Good for him if he is, though."
PHP,3ddr84,captain_obvious_here,3,Wed Jul 15 15:36:17 2015 UTC,http://blog.ircmaxell.com/2014/11/its-all-about-time.html
PHP,3ddr84,ICreatedSomeClones,2,Wed Jul 15 15:36:52 2015 UTC,This was actually in interesting read !
PHP,3ddr84,agmarkis,2,Thu Jul 16 07:13:46 2015 UTC,"I wouldn't think about contacting ircmaxell for security-related stuff, and it never stroke me that he could be really good at it. Good for him if he is, though.   I'm vaguely curious what did you think about ircmaxell before you were told he's good at security."
PHP,3ddr84,Disgruntled__Goat,-1,Wed Jul 15 18:26:22 2015 UTC,"Not a big fan of him and the other PHP ""big people"", because their views and opinions are not helpful to me my business. To quote a friend of mine : they're the PHP ""MVPs"" (Most Vocal Politics).  I have absolutely nothing against the guy, and he's probably good at what he does. But I am mostly interested in pragmatic stuff coming from pragmatic people."
PHP,3ddr84,Disgruntled__Goat,2,Thu Jul 16 07:10:02 2015 UTC,"Not a big fan of him and the other PHP ""big people"", because their views and opinions are not helpful to me my business.   Your comment reminded me of the people that troll /u/philsturgeon simply because he's very visible in the community.   I have absolutely nothing against the guy, and he's probably good at what he does.   Do you know what /u/ircmaxell even does?   But I am mostly interested in pragmatic stuff coming from pragmatic people.   That's fine, but...   I wouldn't think about contacting ircmaxell for security-related stuff, and it never stroke me that he could be really good at it.   ...considering he's the author of password_hash() and password_verify() (PHP 5.5+ or password_compat), I don't think your assessment of him is fair. He spends a lot of time focusing on helping people learn and making it easier for people to do build safe, reliable, and correct software. What's more pragmatic than that?"
PHP,3ddr84,rand486,1 point,Thu Jul 16 10:45:44 2015 UTC,"Once again, I have nothing against the guy. Or against Phil Sturgeon, or anyone else in the PHP community. But I don't care much about them, or what they advocate. The reason why I don't care is I have a solid knowledge of programming in general, of PHP in particular, and a stong enough experience to handle my projects in a successful way, and to make my customers happy.  I'm interested in the tools, not in the people who build the tools. It doesn't mean that I don't like them...just that I don't care about them. There's no criticism in that, at all ! I gladly admit code quality when I see it, no matter who the author is. But I avoid fanboyism, and people who feed it, as much as I can."
PHP,3ddr84,BilldaCat10,1 point,Thu Jul 16 13:25:14 2015 UTC,"I'm interested in the tools, not in the people who build the tools.   Okay, thanks for clarifying your position.   But I avoid fanboyism, and people who feed it, as much as I can.   Agreed 100% on that notion, but I also add that counter-fanboyism (a.k.a. drama directed against individuals) is just as harmful as fanboyism."
PHP,3ddr84,BilldaCat10,8,Thu Jul 16 13:29:06 2015 UTC,Really you should edit the answer or post your own that answers it in a secure way.
PHP,3ddr84,webdevborninthe90s,9,Wed Jul 15 14:31:07 2015 UTC,"Right. That's what I'm going to do:   If I have to admit but one weakness, it would be that I'm terrible at identifying the original source of bad security advice. I'd like to stop these problems at their source and make the Internet more secure. Telling one client after another to fix the same bug gets to be very tedious and soul-crushing.   This is how the process will go:   Someone points out a question/answer on SO. I'll read it and tell them if it's good/bad. If it's good, full stop. I'll comment on the issue and suggest an improvement to the author. If the author is absent or unwilling to edit their answer, if possible, I'll provide an alternative answer. Otherwise, I'll bug the SO moderators in Room 11."
PHP,3ddr84,webdevborninthe90s,5,Wed Jul 15 14:35:09 2015 UTC,"Sounds like a good process to me. I'll add you on twitter, but might even get in on IRC again."
PHP,3ddr84,prodigyx,4,Wed Jul 15 16:05:39 2015 UTC,"Skip steps 3-5 and edit the actual answers on Stack Overflow. The problem with adding separate answers is they have a tendency to get buried, especially if the top answer is selected as best.  If you don't have enough rep you can still edit and it will be reviewed and should be accepted no problem.  Also you may have already done this, but you can order the questions by votes. Those are the most likely to be appearing in Google search."
PHP,3ddr84,evertrooftop,3,Wed Jul 15 18:51:21 2015 UTC,"I have enough rep to ninja edit other peoples' answers, but the SO moderators discourage this."
PHP,3ddr84,trekkie80,1 point,Wed Jul 15 19:10:29 2015 UTC,Really? I've never seen anything suggesting this. The whole Stack Overflow system is set up specifically so answers can be edited and improved.  Unless they're talking about completely rewriting answers? If you did need to do that then maybe a separate answer would be better.
PHP,3ddr84,azidblazer,1 point,Fri Jul 17 12:48:08 2015 UTC,"Usually fixing the vulnerabilities in someone's answer requires rewriting it significantly enough to ""change the intent"" of the original answer."
PHP,3ddr84,azidblazer,7,Fri Jul 17 13:11:58 2015 UTC,"Did you lose a bet or something?  EDIT: I don't mean this in a disrespectful way, but you're taking on a big job here. People will abuse your offer, I hope you realize. If not, you soon will."
PHP,3ddr84,azidblazer,7,Wed Jul 15 17:05:00 2015 UTC,"Did you lose a bet or something?   No, I don't gamble or place bets.   I don't mean this in a disrespectful way, but you're taking on a big job here.   I like to think it's one that I'm well suited for.   People will abuse your offer, I hope you realize. If not, you soon will.   Sure, some will try, at which point the ball will be in my court for deciding whether or not I let them.  Personally, I would rather have a few people try to abuse this offer than have everyone disregard it, because while I will incur the cost of any abuse I'm unable to detect and mitigate, the other extreme is that nothing changes."
PHP,3ddr84,cj5,5,Wed Jul 15 18:03:02 2015 UTC,"Honestly, this raised an interesting thought for me. I think from now on, I'm going to keep the source of code snippets in the comments, so I can trace it back from now on.  I'd never thought of documenting it before, but it seems like a good idea for down the road, especially for ""Why did I do it this way?"" situations later."
PHP,3ddr84,__constructor,3,Wed Jul 15 20:36:33 2015 UTC,"As someone who was just about to go down this road (googling stack overflow), what is the best way of generating random numbers that aren't predictable?"
PHP,3ddr84,cj5,2,Wed Jul 15 20:58:09 2015 UTC,"In PHP 7, random_int() and random_bytes().  In PHP 5, ircmaxell/RandomLib is good. So is Sodium::randombytes_uniform() if you install libsodium. We're still working on random_compat (backport PHP 7 CSPRNG functions in PHP5); once it's stable that will be my recommendation.  Our blog has a recent blog post on this subject: https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php"
PHP,3ddr84,cj5,2,Wed Jul 15 21:37:13 2015 UTC,Thank you!  Much appreciated.
PHP,3dhoz6,webmanio,1 point,Thu Jul 16 10:40:14 2015 UTC,Pretty much any router can do this. Try https://github.com/dannyvankooten/AltoRouter#getting-started if you want something tiny that explains the setup well in their docs
PHP,3dhoz6,adamn90,0,Thu Jul 16 11:42:06 2015 UTC,"""Handling basepath"" = $router->get($basepath . '/the-route/', $handler);"
PHP,3dey1u,lunchmeat317,12,Wed Jul 15 19:11:03 2015 UTC,"http://www.phptherightway.com/ is a damn good summary, so I wouldn't be too quick to dismiss it - it's basically got every good practice thing in there.  Newer versions of PHP have expanded on the OO side of things dramatically, so that alone makes it a different landscape to how it was.  It's worth noting that Wordpress is not a good example, and is still stuck as it aims to be compatible with a wide range of older versions of PHP due to it's target audience."
PHP,3dey1u,physics4life,3,Wed Jul 15 19:34:35 2015 UTC,"PHP-FIG has a bunch of great standards on how PHP should work these days. Composer not handles packages and autoloading your project (see: PSR-0, PSR-4). A lot of people are using LEMP (NGiNX + PHP-FPM) and there's things like the HHVM out now. Things seem like they are just getting more sane and security."
PHP,3dey1u,dvorakkidd,3,Wed Jul 15 21:07:27 2015 UTC,"I have been developing in PHP for last 5 years and not before that, so what I have learnt might be what you are looking for. Just on top of my head.  Pitfalls: magic quotes? never heard of it. but these:  $a = 'B'; $output = ($a == 'A' ? 'a' : $a == 'B' ? 'b' : $a == 'C' ? 'c' : 'd'); // $output is 'c'  0 == '0' // true null == 0 // true null == '0' // false   Language features:   I don't know PHP which is not OO. PDO to talk to database PHP trait to solve multiple inheritance. $arrayShortHand = []; $this->accessArrayAsItIsReturned()[3]; (new Foo)->callMethodAsClassIsInstantiated(); Generator function Constant expression Variadic function   Community standards:   Composer package management PSR-0, PSR-1, PSR-2, PSR-4, PSR-7 A lot of developers start adopting SOLID principles   Frameworks, like Laravel, Symfony, CakePHP which comes with nice features like ORM (Eloquent, Doctrine, CakeORM), template (Blade, Twig), Dependency Injection, Service Locator, etc.  I believe LAMP is still popular even though Nginx has been widely used as well. Also MongoDB and Redis."
PHP,3dey1u,wisoot,7,Thu Jul 16 01:10:39 2015 UTC,===
PHP,3dey1u,AcousticDan,1 point,Thu Jul 16 02:17:41 2015 UTC,"How about multithreading? Afaik its not possible, keeping php out from high concurrenct apps. Unicode support is still lacking."
PHP,3dey1u,gkunno,2,Fri Jul 17 10:17:04 2015 UTC,"PHP still benefits from the multi-threading of the web server in front of it, or from something like FPM. You can handle many simultaneous requests."
PHP,3dey1u,00DEADBEEF,2,Fri Jul 17 12:36:45 2015 UTC,"Here's a pretty comprehensive list of changes. It's called a ""changelog"". :P"
PHP,3dey1u,bga9,3,Wed Jul 15 22:30:40 2015 UTC,"Changes to the language itself is only a small part of what has changed in PHP in the last five years though.  I think composer, packagist, PHPUnit, Symfony2, Laravel, PHP-FIG or even PHPStorm have more to do with ""how PHP has changed"" than PHP itself."
PHP,3dey1u,BlueScreenJunky,2,Thu Jul 16 09:03:01 2015 UTC,"Yeah, I know. I was just being a smart-ass."
PHP,3dey1u,bga9,1 point,Thu Jul 16 16:52:02 2015 UTC,"Hah, I knew someone was going to do this."
PHP,3dey1u,phlogisticfugu,1 point,Thu Jul 16 16:53:43 2015 UTC,"The biggest part of the ecosystem to change is the ease with which you can incorporate external libraries via namespaces and composer and the fig standards.  This then gave rise to lots of high quality libraries, which because they were easy to use, got more users and thus more contributors.  For example, to talk to a sql database there's doctrine.  For making and mocking http requests there is guzzle.  Etc etc.  The server environment has changed too.  With most folks using nginx/php-fpm instead of apache/modphp.  And mariadb replacing mysql.  And continuous deployment, docker, etc."
PHP,3dey1u,DCoder1337,1 point,Thu Jul 16 06:26:21 2015 UTC,"Do you plan to build projects from scratch or write addons for existing systems (WordPress, Drupal, Magento, etc.)? In the former case, listen to everyone else and read through http://www.phptherightway.com/ . In the latter case, you're not missing much, some projects are making moves in the right direction (Drupal 8), but the majority still sucks because of backward compatibility (WordPress) or outright twattery (OpenCart).  Do yourself a favour and get a decent IDE, such as PHPStorm (from the same people who brought you Resharper). One of my colleagues was using Sublime Text and it was painful to watch.  For continuous delivery, we use ThoughtWorks Go at work, and it's really improving our process. For local development, there's Vagrant and Ansible/Puppet/something similar, it's a timesaver for teams when you can launch a new VM with a precise copy of the production environment (same versions of Linux, Apache/nginx, MySQL/pgSQL, PHP, etc.) with one click."
PHP,3dey1u,NeuroXc,1 point,Wed Jul 15 20:04:52 2015 UTC,"Hahahh, outright twattery! That put a smile on my face. I'm not yet sure what projects I'll be handling. It's depressing how far behind everything Wordpress is, though - I'm surprised that Wordpress.com has been able to run a server-side rendering farm on this technology for so long."
PHP,3dey1u,shivenigma,-1,Thu Jul 16 16:56:10 2015 UTC,"Sublime Text can be a great IDE if you have the right plugins installed (and know how to use them). Just saying. There's also a learning curve to it (just like any IDE). If it was painful to watch him use it, then he probably isn't using it right."
PHP,3dey1u,lordofworms,4,Wed Jul 15 20:35:28 2015 UTC,I love both sublime and phpstorm for both their strengths and weaknesses. But no matter how many plugins you use with sublime It'll not compete with phpstorm.
PHP,3dey1u,malkusch,4,Thu Jul 16 06:30:55 2015 UTC,It's not an IDE no matter how many plugins you throw at it.
PHP,3ddg2g,webdeverper,17,Wed Jul 15 12:12:09 2015 UTC,"We (Facebook) use it in production. A few things to consider before doing the same:   if you're serving static resources from the same domain, you might want nginx or similar in front of it still (nginx|apache) =[http]=> (hhvm|php) gives your code different headers/pseudo-headers than (nginx|apache) =[fastcgi]=> (hhvm|php). For example, as far as hhvm|php is concerned, the source IP will always be the IP address of your source webserver for that reason, you'd probably want to modify your code to look for X-Forwarded-For: or similar (and make sure your webserver sets it appropriately). There's some extra complications here: you need to make sure you only do this if the 'real' source IP is trusted, and only pay attention to the last-hop forwarded-for. fastcgi has the benefit of much more community experience around it   I use proxygen for my personal stuff: the main reason for this is that it is so much easier to debug issues than with FastCGI, both configuration and intermittent issues. Being able to use 'curl' to talk to your backend webserver and 'tcpdump -A' to monitor the communication between your frontend and backend webservers makes troubleshooting much less painful."
PHP,3ddg2g,fred_emmott,1 point,Wed Jul 15 17:12:22 2015 UTC,"Thanks for the insight! I was thinking about using it for micro services; non public facing, mostly hitting it on a direct IP to serve up JSON. I like the idea and simplicity of running a service in user mode (port > 1024) for easy deployment -- does not require sudo for example."
PHP,3ddg2g,linux1975,1 point,Wed Jul 15 20:28:07 2015 UTC,is their a quick how to for trying out hhvm/proxygen.  Been looking around for a bit.  just getting  404's .  I think my server.ini is good and the error log is empty.
PHP,3ddg2g,linux1975,1 point,Thu Jul 16 16:10:32 2015 UTC,nevermind - figured it out.  looks like i was using server.ini when i should have been setting options in php.ini
PHP,3ddg2g,amenadiel,3,Thu Jul 16 16:20:37 2015 UTC,"From the introduction post, I can tell proxygen is ready for production. The real question is... is your project ready for proxygen?  It seems to me it isn't a drop-in replacement for nginx, so you're seriously planning to roll it out to production you might have several hours ahead to figure out all the pieces.  In my case, nginx acts as a single entry point for a dozen of vhosts, each of them available under http and https, which in turn communicate to either one or more of 10 backends (4 php-fpm pools, 1 hhvm for wordpress, 3 node apps, websocket and secure websocket)  So I'm not going to dive into proxygen, because I know myself and it would inevitabily mean I'd spend the next weeks figuring out how to migrate. It's addictive."
PHP,3ddg2g,Firehed,2,Thu Jul 16 12:48:26 2015 UTC,"Based on their introduction post, I'd say yes, but I have no firsthand experience with it."
PHP,3ddg2g,sekjun9878,2,Wed Jul 15 15:31:24 2015 UTC,I doubt that it would be ready for production unless it has been documented extensively somewhere. FPM is the pretty standard way to go anyway.
PHP,3ddg2g,jgrubb,4,Wed Jul 15 13:15:57 2015 UTC,FPM and HHVM are mutually exclusive concepts unless I'm missing something.
PHP,3ddg2g,brandonwamboldt,1 point,Wed Jul 15 14:03:25 2015 UTC,I assume /u/sekjun9878 meant FastCGI not specifically FPM which isn't available for HHVM.
PHP,3ddg2g,sekjun9878,1 point,Wed Jul 15 18:56:40 2015 UTC,"Gah, yes that's what I meant. PaaS have spoiled me :P"
PHP,3ddg2g,fred_emmott,2,Thu Jul 16 14:37:52 2015 UTC,"True, but it sounds like facebook itself uses it in production for trillions of requests... Though probably not exactly in this form."
PHP,3ddg2g,expert02,5,Wed Jul 15 15:56:24 2015 UTC,"Our internal server is a tiny (<100 lines, including comments and includes) subclass of the open source server: all it does is set up integration with FB's internal monitoring/logging systems. We don't replace or add any other functionality."
PHP,3ddg2g,nikic,-9,Wed Jul 15 17:22:27 2015 UTC,"I've been using php's built in server for a few months on a small production. Not too bad. I'm on Windows and refuse to use IIS (hate their management interface). Nothing else was working quickly for me - lighttpd, nginx, etc. Finally settled on a separate PHP-server for each domain with a reverse proxy running on port 80 (to redirect to each process based on the domain). Performance is the best I've had so far. Only real problem is it doesn't support simultaneous connections, and isn't multi-threaded or multi-process on windows. And I have to have a scheduled task to restart all the processes every few hours or they stop responding.  -edit- Of course I get downvotes. /r/php is practically a cult, or a circlejerk. If you're not running the latest stable version on an LTS linux distro with OOP, you're apparently a moron."
PHP,3ddg2g,expert02,3,Wed Jul 15 21:44:03 2015 UTC,"This is a very, very bad idea.  It's not just a question of performance, it's also a question of security. The built-in server is neither designed nor reviewed for public-facing usage."
PHP,3ddg2g,gearvOsh,-7,Wed Jul 15 21:56:44 2015 UTC,"It's a small business website that doesn't do any sort of e-commerce and doesn't have sensitive information. And in order for someone to actually hack into PHP, they would first need to take the time to find vulnerabilities.  tl;dr It's not a ""very, very bad idea"" just because you don't like it."
PHP,3ddg2g,expert02,1 point,Wed Jul 15 23:10:39 2015 UTC,Just pay for a small linux box and be done with it. There's literally no reason for this setup to exist.
PHP,3ddg2g,gearvOsh,-7,Wed Jul 15 22:13:10 2015 UTC,"Oh yeah, because I want an extra server hanging around, with all the costs involved in that."
PHP,3ddd3d,funkyfly,4,Wed Jul 15 11:36:37 2015 UTC,Not necessarily just for a php programmer but I love this blog post by a guy I met at a web developer meetup. http://ngerakines.me/2013/06/02/how-i-interview/
PHP,3ddd3d,pitchinnate,2,Wed Jul 15 13:40:28 2015 UTC,This is what I was looking for. Thank you!
PHP,3ddd3d,chiisana,2,Wed Jul 15 19:43:44 2015 UTC,I particularly like the way the areas were divided and examples provided. I will be adopting some of these in my interviews. Thanks!
PHP,3ddd3d,Division_By_Zer0,4,Wed Jul 15 22:37:35 2015 UTC,This website: http://sijinjoseph.com/programmer-competency-matrix/ is awesome framework to structure your questions. Take a look.
PHP,3ddd3d,kevintweber,4,Wed Jul 15 13:25:11 2015 UTC,"The competency matrix is out of date.  Please beware!  Two examples:   Source code version control: Git is the standard today, but is only just mentioned in level 3. Framework: level 3 is ""author of framework"".  Considering the multitude of VERY HIGH QUALITY PHP frameworks, you are a fool to try to implement your own.  If someone at my company recommended ""Hey! Let's build our own framework."", they would be fired."
PHP,3ddd3d,EquationTAKEN,2,Wed Jul 15 16:32:58 2015 UTC,Say I'm finding myself at Level1-2 on most of those. Are there any good resources for learning the level2-3 stuff?
PHP,3ddd3d,halfercode,4,Wed Jul 15 16:41:54 2015 UTC,"Yep, we look for traits <giggle>.   Does the candidate participate in F/OSS, speak at UGs, blog, or help on tech fora? Do they have a public code profile e.g. GitHub? Set a programming problem and either ask the candidate to solve it in their free time, or ask them in an interview how they would solve it. E.g. solving word-search grids with a supplied dictionary. Are they aware of the wider ecosystem e.g. Composer, Packagist, etc? Ask them why they are a programmer and what they like about it (are they passionate?) How do they keep up to date with changes in technology?"
PHP,3ddd3d,bga9,3,Wed Jul 15 12:19:08 2015 UTC,"For a senior level interview, questions that only show you that they can program (fzbz) are great. However, just because someone can solve a problem doesn't mean they're capable of proper software design. But for a sr level dev, it should be pretty clear during the phone screen if their worth bringing in for a face-to-face interview.   Here is an example of something I've asked: (paraphrased and shortened version): you need to send and retrieve data from several different vendors. Each vendor expects and send the data in a different format (json,xml) and uses a different method (soap,rest) Create an uml diagram of the structures you would use to design this type of system."
PHP,3ddd3d,amenadiel,2,Wed Jul 15 15:21:17 2015 UTC,"Ask a commercial guy to define an imaginary app describing only what the end user will see. They always come up with silly requirements..  Then ask the candidate to sketch a diagram about how would he arrange the infrastructure. Even for someone who isn't an expert in the subject he should at least be able to mention a load balancer, web server, app server, database.  Inside the app itself, ask for more detail about the tools or libraries he would use.    Some of them would say ""You can do everything with Laravel""  some others would say : ""I'd program the whole thing"" others will say: ""I'd use silex as a router, doctrine as orm, smarty for templates, monolog for logs, swiftmailer...""   I like the last one more but it depends on what you're looking for. For some positions you just need someone who knows what library does what and only needs some glue code.  Ask him about methodologies.    How would he arrange version control how to manage hotfixes, releases, feature integration in a team of 8 developers Will everyone push to master?  Will every dev clone the repo and push to their master then open a PR against central repo? or will there be one repo and every developer creates a branch while a feature is coded?  How would he ensure quality code when 8 devs have open PRs? Will be manually review them?   How will he keep the team aligned towards a common goal? Will he hold daily meetings? Will they be connected to a chat? Will they use a dashboard to visualize pending tasks, deadlines, bug reports?   About every answer given to the previous questions, what answers would have been different if they were asked two years ago? what about five years ago?  Given the stack keeps changing, what would he do to keep himself and the app up to date with latest best practices?"
PHP,3ddd3d,mahelious,3,Thu Jul 16 13:06:39 2015 UTC,FizzBuzz
PHP,3ddd3d,blocsonic,2,Wed Jul 15 12:29:36 2015 UTC,"I'm a self-taught programmer and as such, never worked in a professional capacity. I never heard of this. Thanks. I looked it up and I'm quite sure that I can solve it."
PHP,3ddd3d,blocsonic,1 point,Wed Jul 15 13:27:56 2015 UTC,"Not sure if this is a good solution, but it seems like a decent one to me. Fun exercise.  class FizzBuzz {         private function isFizz($num)     {         return ($num % 3 == 0) ? true : false;     }      private function isBuzz($num)     {         return ($num % 5 == 0) ? true : false;     }      private function isFizzBuzz($num)     {         return ($this->isFizz($num) && $this->isBuzz($num)) ? true : false;     }      private function print_number($num) {         $output = $num;         if($this->isFizzBuzz($num)) {             $output = 'FizzBuzz';         } else {             if($this->isFizz($num)) {                 $output = 'Fizz';             }             if($this->isBuzz($num)) {                 $output = 'Buzz';             }         }          echo $output.""<br>"";     }         public function solve()     {         $minCount = 1;         $maxCount = 100;         for($i = $minCount; $i <= 100; $i++) {             $this->print_number($i);         }      } }  $fizzBuzz = new FizzBuzz(); $fizzBuzz->solve();"
PHP,3ddd3d,dadamssg,5,Wed Jul 15 13:48:43 2015 UTC,private function isFizz($num) {     return $num % 3 == 0; }  private function isBuzz($num) {     return $num % 5 == 0; }  private function isFizzBuzz($num) {     return $this->isFizz($num) && $this->isBuzz($num); }   ;) My attempt.
PHP,3ddd3d,blocsonic,2,Wed Jul 15 13:58:06 2015 UTC,"RE: your solution... it's not supposed to output the number if it is Fizz, Buzz or FizzBuzz.  ""Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”.""   http://c2.com/cgi/wiki?FizzBuzzTest"
PHP,3ddd3d,dadamssg,2,Wed Jul 15 14:19:02 2015 UTC,"doh! gotcha, didnt' read it too carefully. Fixed it."
PHP,3ddd3d,blocsonic,0,Wed Jul 15 14:39:40 2015 UTC,:-) I prefer the parentheses to keep things clear.
PHP,3ddd3d,dadamssg,3,Wed Jul 15 13:59:56 2015 UTC,not a fan of 'elseif' either?
PHP,3ddd3d,blocsonic,1 point,Wed Jul 15 14:04:06 2015 UTC,"Yeah, elseif could definitely work. It would be a bit cleaner, too."
PHP,3ddd3d,chiisana,4,Wed Jul 15 14:10:00 2015 UTC,"Why:  ($num % 3 == 0) ? true : false;   Instead of just:  ($num % 3 === 0)  ?  Isn't the ternary just going to get a boolean true or false, and then casted into true or false again?"
PHP,3ddd3d,blocsonic,1 point,Wed Jul 15 14:38:52 2015 UTC,Good point!
PHP,3ddd3d,mahelious,3,Wed Jul 15 17:20:05 2015 UTC,"This solution seemed ... funny to me, so I threw your class into a small script and ran it  $testRounds = 10; $fzbz = new FizzBuzz(); $at = microtime(true); for ($i=0; $i < $testRounds; ++$i) {   for ($j=0; $j < 100; ++$j) {     $fzbz->solve($j);   }   echo ""  Completed Round $i\n""; } $bt = microtime(true); echo 'Completed ', $testRounds, ' rounds in ', ($bt - $at), 's.';   Ran it through wamps commandline, and got the following result   Completed 10 rounds in 11.434819936752s.   It's taking a little over a second to FizzBuzz 1-100.  That is ... not good.  See if you can get a round to complete under a second. (FWIW I took a minute to writeup a solution that completes a round in just over 0.01 seconds, I bet you can beat that)"
PHP,3ddd3d,blocsonic,2,Wed Jul 15 14:50:15 2015 UTC,"Yup, this taught me a bit about efficiency. Thanks to your and other's responses, I've come to the conclusion that something like this makes more sense as a simple function. My latest version including a speed test.   Completed 10 rounds in 0.00061416625976562s   function fizzBuzz() {     for($i = 1; $i <= 100; $i++) {         $output = """";         if($i % 3 === 0) {             $output .= 'Fizz';         }         if($i % 5 === 0) {             $output .= 'Buzz';         }          echo ($output ?: $i).""<br>"";     } }  $testRounds = 10; $at = microtime(true); for ($i=0; $i < $testRounds; ++$i) {     fizzBuzz();     echo ""  Completed Round $i<br>""; } $bt = microtime(true); echo 'Completed ', $testRounds, ' rounds in ', ($bt - $at), 's.';"
PHP,3ddd3d,blocsonic,1 point,Wed Jul 15 17:49:20 2015 UTC,"Must be your dev environment. On mine I got the following:   Completed 10 rounds in 0.4422287940979s   Definitely not 0.01, of course, but far from 11.434819936752s  However, since you were able to rewrite it to perform so quickly, I'm curious. I'll have to look at it again, when I have a moment. I dig this challenge!"
PHP,3ddd3d,mahelious,2,Wed Jul 15 17:25:56 2015 UTC,$minCount = 1;    $maxCount = 100;    for($i = $minCount; $i <= 100; $i++) {    Why aren't you using $maxCount?
PHP,3ddd3d,blocsonic,4,Wed Jul 15 13:57:39 2015 UTC,"Honestly though, now that I think about it, those variables are useless. I should have just hardcoded the $minCount value in the for loop. It's not reused anywhere."
PHP,3ddd3d,blocsonic,1 point,Wed Jul 15 14:02:58 2015 UTC,Ha ha.... nice one. I meant to.
PHP,3ddd3d,crambler,1 point,Wed Jul 15 13:58:55 2015 UTC,"Ok, this one is the standard one. We give that one to the candidates already, among some more serious tasks.  But thanks anyway!"
PHP,3ddd3d,mahelious,1 point,Wed Jul 15 13:54:45 2015 UTC,"Tell me how I suck! Newbie. (thanks I had never heard of this)  <?     $minNum = 1;     $maxNum = 100;     function isThree ($num) {         if ($num % 3 == 0) {             return True;          }         else             return False;     }     function isFive ($num) {         if ($num % 5 == 0) {             return True;         }         else {             return False;         }     }      for ($i = $minNum; $i <= $maxNum; $i++) {         if (isThree($i) && isFive($i)) {             echo ""FizzBuzz<br>"";         }         elseif (isThree($i)) {             echo ""Fizz<br>"";         }         elseif (isFive($i)) {             echo ""Buzz<br>"";         }         else {             echo $i.""<br>"";         }     } ?>"
PHP,3ddd3d,crambler,2,Wed Jul 15 14:23:31 2015 UTC,"<?php $minNum = 1; $maxNum = 100; function isThree ($num) {     if ($num % 3 == 0) {         return True;      }     else         return False; } function isFive ($num) {     if ($num % 5 == 0) {         return True;     }     else {         return False;     } }  $at = microtime(true); for ($x = 0; $x < 10; ++$x) {     for ($i = $minNum; $i <= $maxNum; $i++) {         if (isThree($i) && isFive($i)) {             echo ""FizzBuzz<br>"";         }         elseif (isThree($i)) {             echo ""Fizz<br>"";         }         elseif (isFive($i)) {             echo ""Buzz<br>"";         }         else {             echo $i.""<br>"";         }     } } echo ""\nCompleted 10 rounds in "", (microtime(true)-$at), ""s.\n"";    Result: Completed 10 rounds in 0.15900897979736s.   It's not a bad solution, but I will point out that isThree should just return ($num % 3 === 0). The result of a boolean operator is implicitly bool.  edit - another thought, the point of optimization is to reduce raw operations. with a simple program like this it's easy to focus in on where operations are being generated, in this case isThree and isFive. Ideally FizzBuzz should check $i against %3 and %5 exactly once each. If you want to improve the program, try reducing the number of calls to isThree and isFive"
PHP,3ddd3d,rawfan,1 point,Wed Jul 15 14:58:40 2015 UTC,THANK YOU!  edit: your edit is extremely helpful. thank you.
PHP,3ddd3d,crambler,0,Wed Jul 15 16:46:58 2015 UTC,Well for starters you could use something like this  function isThree ($num) {     return $num % 3 === 0;     }
PHP,3ddd3d,mahelious,1 point,Wed Jul 15 16:01:56 2015 UTC,the one other post already pointed this out.
PHP,3ddd3d,lukeholder,3,Wed Jul 15 16:47:17 2015 UTC,"Funny you say that because just about a year ago I did ask a candidate for a senior dev position to solve FizzBuzz.  He spent thirty minutes attempting the solution and failed.  FizzBuzz isn't some parlor trick, it's a simple problem that quickly weeds out those who can't. And any prima-Donna who thinks they're too good for a standard interview question isn't worth hiring."
PHP,3ddd3d,sanbikinoraion,3,Wed Jul 15 12:53:27 2015 UTC,FizzBuzz is just a test to see if you know the modulus operator.
PHP,3ddd3d,mahelious,6,Wed Jul 15 13:00:11 2015 UTC,"You don't have to know %, you can use floor. If you can't work out how to figure out whether a number is divisible by two then you don't deserve the job either."
PHP,3ddd3d,kamenjan,4,Wed Jul 15 13:45:47 2015 UTC,"and loops, and basic program structure."
PHP,3ddd3d,richardathome,1 point,Wed Jul 15 14:15:09 2015 UTC,"It is not a standard interview question. And if you really have to go down that road, I see more potential in asking a candidate to solve it in a recursive manner - it doesn't make a lot of sense, but it opens up a interesting conversation that should shed a lot more light on candidates general programming knowledge and problem solving capabilities."
PHP,3ddd3d,naroga,2,Wed Jul 15 13:59:15 2015 UTC,Ask them what was the last computer/tech book they read. Then ask them what computer book had the biggest impact on them as a professional developer.  Experienced devs are usually not happy having to perform 'parlour trick' coding challenges. It's not reflective of the type of job they have been training to do.
PHP,3ddd3d,richardathome,7,Wed Jul 15 13:15:26 2015 UTC,"Ask them what was the last computer/tech book they read. Then ask them what computer book had the biggest impact on them as a professional developer.   Awful questions IMHO. Most experienced PHP devs I know haven't read a single book per se, they learn by doing, watching other people's code, reading blogs, reddit, attending conferences and working with opensource. Of course, this is anecdotal, but I'd guess it reflects on most young (30-) experienced devs.  I, myself, haven't read a proper computer/tech book per se in a very long time (10+ years), and I don't consider myself outdated in any way. I'm always working with opensource, I have a 100+ private repositories in my personal Atlassian Stash/Bitbucket and I've worked in some pretty big projects."
PHP,3ddd3d,sanbikinoraion,2,Wed Jul 15 12:20:30 2015 UTC,"By ""book"", I meant any form of written text. It's the fact they are reading and learning that's important. It's also a great jumping off point to find out what the prospective dev finds interesting."
PHP,3ddd3d,mahelious,3,Wed Jul 15 13:43:54 2015 UTC,"Experienced devs are usually not happy having to perform 'parlour trick' coding challenges   On the other hand, experienced devs can actually solve them. Bad programmers will simply flounder. You must do a coding test, even if it's extremely simple, to weed the wheat from the chaff."
PHP,3ddd3d,Garethp,4,Wed Jul 15 15:11:33 2015 UTC,"There's a difference between coding tests and parlor tricks. Yes, a coding test is mandatory, but it doesn't have to be ""swap the values of two variables without an intermediary"" or ""Find the largest prime factor of 600851475143"". Those don't prove ability to code, they just stress out a candidate who hasn't solved that particular problem before. I don't see that /u/richardathome is dismissing coding tests, just parlor tricks. Which is sound advice."
PHP,3ddd3d,Garethp,1 point,Wed Jul 15 14:13:26 2015 UTC,"One of the tasks I had to do for my job (using floobits for pair programming) was to build a Rock Paper Scissors Lizard Spock command line game and write unit tests with it.  I think it was a good test. Let's the employer see what tools the candidate would use to start with (I used Symfony Console and Console Helpers myself), how they think in so far as structures and how they go about testing.  One of the other questions I had was echoing from 100 to 0 inside a for($i=0; $i<100; $i++) loop. I thought it was easy, gave it 5 seconds thought before banging it out, but I was told it helped weed out some who took a few minutes trying.  Basically my suggestion would be just to give a simple enough task that could be approaches in 100 different ways, say to just have fun and play with things they've been wanting to for a while to complete it. It'll show you what areas they're interested in and how they think, if they're given free reign.  But that's my opinion"
PHP,3ddd3d,babeside,1 point,Wed Jul 15 15:09:43 2015 UTC,"I think writing a simple game is a good idea. It can be a good way to check fundamentals, like OOP, SOLID, Unit Testing, Design Patterns."
PHP,3ddd3d,jwcobb13,1 point,Wed Jul 15 13:29:28 2015 UTC,It helps that it's a simple variation on a game everyone knows the rules to.
PHP,3ddd3d,militantcookie,1 point,Wed Jul 15 19:55:16 2015 UTC,"My advice would be to code some basic application from scratch and think things through. Take your time, maybe even scratch it and start over and take another run at it. It is a really good way to refresh your memory on some concepts you may not have even thought about in a while."
PHP,3ddd3d,sanbikinoraion,1 point,Wed Jul 15 20:03:35 2015 UTC,"I'd probably give them some common and not so common PHP errors and ask them how to fix. Then I'd give them a block of code with an error in it and ask them to find the error. (debugging experience is real experience)  If they pass all that, I might send them home with instructions to build something very simple that requires a PHP class, an index.php file and some styling with very specific instructions and to email me a link within 3 days. (proves they know how to use hosting/FTP and that they can build something simple including a UI with HTML, CSS, and JavaScript in a time crunch).  Examples: Login/Registration/Forgot Password screen that displays a Hello [Name] after login, A texting program that sends out a text by email to common carriers (e.g. T-Mobile, AT&T, or Verizon in the USA).  Or if it's not a high-paying position, but they still need experience, I might ask them to walk me through the planning stage of building such a thing in a short period of time."
PHP,3ddd3d,kyriakos,0,Wed Jul 15 19:04:03 2015 UTC,ask them if they have any personal projects they worked on. if they don't have anything then they should automatically be rejected. its unimaginable for a passionate programmer not to have ever sat down to implement one of his/her ideas even if it was never launched.
PHP,3ddd3d,doenietzomoeilijk,3,Wed Jul 15 14:16:55 2015 UTC,"Eh, I leave the programming at work, thanks. Maybe 10 years ago when I was fresh out of uni."
PHP,3ddd3d,voku1987,1 point,Wed Jul 15 13:04:04 2015 UTC,"I've been coding PHP for 12 years, I still have the urge to create my own stuff, I think it's part of being a developer. If I expected to try out every new technology that comes out in a corporate environment I'd still be stuck in PHP 3."
PHP,3ddd3d,doenietzomoeilijk,1 point,Wed Jul 15 14:16:20 2015 UTC,"That's not everybody's situation, though. Some people work outside ""Enterprise"" and get to scratch their itch in the boss' time."
PHP,3ddd3d,mrargh,1 point,Wed Jul 15 16:56:09 2015 UTC,"""Back-End Developer Interview Questions"": MVC, ORM, HTTP, Network etc.   https://github.com/tvandame/back-end-developer-interview-questions/blob/master/README.md"
PHP,3dfqq5,voter101,2,Wed Jul 15 22:34:36 2015 UTC,I use angular + php.. I think its based on personal preference and the project's need.
PHP,3dfqq5,shivenigma,2,Thu Jul 16 06:45:18 2015 UTC,"That's a strange question, React.JS is a client-side JS view rendering component and PHP is a server language. They're for all practical purposes completely independent from each other.  Might as well ask if pizza is popular in the PHP community (answer: kind of)."
PHP,3dfqq5,gearvOsh,2,Wed Jul 15 22:44:43 2015 UTC,"You are right, that's quite a strange question considering the fact React (or even JS) is in different place of app stack. However I noticed that developers from some technologies tends to use other solutions for front-end as well. Like Rails developers uses Turbolinks (ouch...) or Ember.js.  Some Wordpress developers I know, uses only jQuery and they are happy building huge plugins with it.  That's the reason of my post here. ;)"
PHP,3dfqq5,travisfont,8,Wed Jul 15 22:53:55 2015 UTC,"However I noticed that developers from some technologies tends to use other solutions for front-end as well. Like Rails developers uses Turbolinks (ouch...) or Ember.js.   That's because the Rails community is much more culture-driven than PHP. They use solutions based on what various people in the community recommend, completely irrelevant to Rails as a technology. It is more like a religion, and I'm not saying that to dismiss them, but it's what it is. People listen very carefully to DHH and there are a lot of strong opinions about what's ""good"" and what's ""bad"", what's ""cool"" and what's ""uncool"".  The PHP community is very different. First, it's much larger and much more heterogenous. No one gives a damn what Rasmus (the creator of PHP) says, and its users are driven in their choices entirely by their goals:    I have PHP on my server, so I use PHP.  I want to do X, so I'll get the first PHP library that does X.   There are pockets of opinionated religiousness here and there around some of the PHP frameworks, a suitable example would be Laravel. So it'd make sense to ask what Laravel users typically use for their client-side solutions, that might yield a cohesive answer, but not PHP users as a whole. PHP users, collectively, use everything they can get their hands on."
PHP,3dfqq5,phpdevster,1 point,Wed Jul 15 23:02:19 2015 UTC,"This question is too open-ended. It really depends on the company and the developer(s).  Regardless, we use React + PHP for most of our projects."
PHP,3dfqq5,aequasi08,1 point,Wed Jul 15 23:22:42 2015 UTC,"Definitely personal preference! Whatever stack flows good for the project needs, and if by happens the server-side language is also PHP :-p then it is what it is."
PHP,3dfqq5,lordofworms,-1,Thu Jul 16 22:46:11 2015 UTC,"React just doesn't do enough to be useful for anything more than a replacement for some jQuery IMO.   The instant you have a complicated app where changes in one React component needs to affect changes in another React component, GLHF to you. Need to bubble all changes up to a common parent just to trickle them back down through a sequence of props to the target child. It's tedious, cumbersome, and becomes rigid very quickly.  This is why Flux exists, but Flux is... weird.  Using React for anything other than performance-demanding apps that NEED a virtual dom, is the wrong choice. And even then, you get a lot of performance out of things like Angular or Vue as compared to DOM queries, and with those frameworks you get a slightly broader scope of features than just a UI layer (Vue is less robust than Angular, but still has more features than React).  I've worked with Vue a bit and I've found its component scoping and property passing to be a bit difficult to reason about. Could be I just need more experience, or the documentation lacks examples.  I've head the fewest headaches from Angular even though I'm not really a fan of it.  I dislike pretty much the entire JS framework landscape right now, but Angular has treated me the best thus far, so that's my preference.  Just need Taylor to build Laravel.js and save us from the madness of half-baked UI libraries, terrible documentation, and wonky conventions that is the current JS framework landscape."
PHP,3dfqq5,abugee1029,1 point,Thu Jul 16 04:26:03 2015 UTC,"I honestly can't say i agree with much of your first 3 paragraphs (didnt really read the rest). If you build your React app with Flux (basically an event dispatcher) from the begining, its pretty simple, and not very cumbersome at all."
PHP,3dfqq5,domis86,1 point,Thu Jul 16 07:34:16 2015 UTC,"Just need Taylor to build Laravel.js and save us from the madness of half-baked UI libraries.   Holy shit, man, you're so confused, it's sad beyond belief. Can't you just... contain all this to yourself but you gotta come here and spill it all over the subreddit and make me feel bad for you? Be more considerate next time."
PHP,3dfqq5,lordofworms,1 point,Thu Jul 16 20:56:34 2015 UTC,"Slightly unrelated but I might step in here and suggest you checkout Ember. In terms of having all the stuff, it is pretty much there with batteries included. You get components, a router which provides a mechanism for rehydrating state from the current URI, templates which are kept entirely separate from everything (unlike React's obsession with munging logic and templates together), and a data layer which normalises communication with an API and provides you with a really nice interface for getting your data into your app (no more $.ajax).  Ember has taken a lot of the good from React and included it recently. Their new rendering engine uses the same virtual dom approach and is on par with react for speed. They are currently in the throws of migrating away from 2 way binding everywhere to a preference for ""actions up, data down"".  Add to that all the tooling, large community, massive ecosystem of plugins and addons... it's pretty much the nearest to ""laravel for js"" going at the moment.  Cross component communication is problematic I think mostly because components attempt to be isolated in their own worlds for maximum reusability. Typically the solution is for them to share some common object which they can both act upon. Component A updates object (passed as an attribute), and Component B reflects that object change in it's own template. Something like:  {{component-a shared=object}} {{component-b shared=object}}   component-a can call methods on shared, and component-b will be notified about them. Can you not do something like that in react?"
PHP,3dcd4u,bereddy,6,Wed Jul 15 04:10:05 2015 UTC,You should wait for /u/ircmaxell/'s router. He's going to post that third blog post any moment now.
PHP,3dcd4u,Boneasaurus,4,Wed Jul 15 13:49:59 2015 UTC,"It doesn't matter what you choose, or rather you should choose and integrate so it doesn't matter what you choose (make your router replaceable).   Make sure the router lets you create your controllers and doesn't perform magic like calling specific methods on a controller (this should be implemented at the controller level, which can read parameter ""action"" and call a same named method based on it). Avoid routers that tightly mix route matching with: handler creation, dependency injection, handler dispatching.  FastRoute in this case is a good example because it just takes any value for the ""handler"" input and returns it on match. What you do with it is entirely up to you then.   tl;dr It's routing. It's not supposed to be exciting and have thousands of features. It's supposed to be boring, fast, replaceable and it shouldn't dictate your app architecture."
PHP,3dcd4u,mythix_dnb,5,Wed Jul 15 13:44:19 2015 UTC,Could you post the routers you've been looking at?
PHP,3dcd4u,mythix_dnb,2,Wed Jul 15 05:36:33 2015 UTC,"Sure.  I'm still early in the process, so there are just a few on the list. But ones FastRoute (and the related PHRoute and Route), Aura.Router, and TreeRoute. I also thought I might use the router from the Nette framework, since much of its functionality is provided by components that can be used independently. However, it looks like the router may not be able to be used as an independent component.  In general, I'm looking for a router that will be fast. That's important because the target application has a lot of routes. So, while I might look at routers from frameworks such as Symfony2, Laravel, or Yii2, my gut tells me that performance issues will lead me to be better off working with something that's not part of a framework."
PHP,3dcd4u,Disgruntled__Goat,5,Wed Jul 15 08:21:42 2015 UTC,"FYI: Symfony components are very decoupled. They are not ""part of the framework"" but all components put together make up the ""full stack framework"" aka the standard edition.  This is shown by the multitude of projects that reuse the symfony components, you can view which large projects use which components in the documentation, for instance for the routing: http://symfony.com/components/Routing  Some widely known projects that are using symfony components are: Laravel (many components), drupal 8 (mostly http foundation components), composer (mostly Console component), silex, ..."
PHP,3dcd4u,ethanpil,1 point,Wed Jul 15 10:40:49 2015 UTC,"Thanks for the reply. I was aware that many of Symfony's components are decoupled, which is why I intended to look at the router.  But it's a useful reminder for others to mention the decoupling explicitly.  I'm sure I'll look at the Symfony router. It's just that, given what I've heard about Symfony performance in general, I'm not optimistic that it's going to be a good fit with my needs.  There is a comparison here of the performance of FastRoute, Symfony's router, and the Aura router (v2). It suggests that the Symfony and Aura routers perform about equally, but FastRoute is more than an order of magnitude faster."
PHP,3dcd4u,bwen_egavas,3,Wed Jul 15 11:23:21 2015 UTC,"Benchmarks are good, but they never tell the whole story of course. For instance FastRouter only just recently got support for optional parameters in the routes, this would be a blocker for me. But since they now support it, I would love to see some more benchmarks with this feature actually used in the tested routes.  And if such a basic feature was already missing, I would imagine some more advanced features are also missing. So I'll be watching this post for a good soul who wants to put together a feature comparison :)"
PHP,3dcd4u,amenadiel,2,Wed Jul 15 12:16:18 2015 UTC,"The main difference would be the API.  In some routers you call different functions like ->get() or ->post(), in some it's just one function like ->add('GET', ...), and in some you just pass in an array of routes like ->addRoutes(['/path'=>'Controller'])  Some routers (like CodeIgniter) don't distinguish between GET/POST requests, though I'd argue this is bad practice.  Different routers give back different data too. FastRoute gives back an associative array using the named keys from your route, e.g. from /path/{id:[0-9]} you get ['id'=>1]. Others just give you a standard array with the parameters.    Also just to add, all the various routers that were posted here in the past few months are in fact slower than FastRoute when the route definitions were cached (as they should be). I made my own tree-router which is faster than all of them but haven't got around to publishing it."
PHP,3dcd4u,bwen_egavas,1 point,Wed Jul 15 12:13:19 2015 UTC,Thanks.  Look forward to seeing that router of yours whenever you get around to publishing it.
PHP,3dcd4u,jb567,2,Wed Jul 15 19:21:28 2015 UTC,You can stick with the Base component of Fat Free Framework http://fatfreeframework.com/home which is tiny and very powerful.  http://fatfreeframework.com/routing-engine
PHP,3davle,fesor,3,Tue Jul 14 21:12:16 2015 UTC,Papper means paper in Swedish.  Fyi.
PHP,3davle,cubsink,3,Tue Jul 14 23:05:20 2015 UTC,any documentation ?
PHP,3davle,militantcookie,1 point,Wed Jul 15 13:05:24 2015 UTC,I not an author of this library. Anyway see examples directory.
PHP,3dd2po,mariuz,1 point,Wed Jul 15 09:13:36 2015 UTC,"I think for PHP the word ""extension"" should be reserved for binary extensions (typically C source code), cause this gets confusing very fast otherwise."
PHP,3dcj10,bjarkebjarke,2,Wed Jul 15 05:05:21 2015 UTC,"First of all you want to move index.php down into a public or webroot folder and point your webroot at that, rather than have it in the top level next to everything else.  Then you can have a top level folder for the bootstrap source and use grunt / gulp / whatever to build the files into the relevant locations in public/assets  PS CodeIgniter is no fun."
PHP,3dcj10,mbthegreat,0,Wed Jul 15 10:04:41 2015 UTC,"PS CodeIgniter is no fun.   Can you recommend a more.. ""fun"" ;) framework to integrate bootstrap into?"
PHP,3dcj10,mbthegreat,1 point,Wed Jul 15 10:07:44 2015 UTC,"Depends on your project but most the major php frameworks are better than CodeIgniter, it really shows its age.  Not familiar with Python at all I'm afraid so can't say what will be most familiar to you coming from Flash / Django, but personally I like Laravel and Symfony. There's also a few 'micro frameworks' if you don't need all the features, checkout Lumen (Laravel), Slim, Silex (Symfony).   Laravel is pretty straightforward, Symfony has a bit more of a curve. Will you be using an ORM?"
PHP,3dcj10,mbthegreat,1 point,Wed Jul 15 10:29:40 2015 UTC,I need something straightforward that I can get up and running soon. But I'm having a problem with gettiing an environment running on linux :/.  ORM?
PHP,3dcj10,inversechi,2,Wed Jul 15 10:44:28 2015 UTC,"ORM: Object Relation Mapper, for easing database integration. Laravel has an active record ORM (like Ruby on Rails), Symfony has a data mapper ORM which is a bit different.  To add to u/n0xie 's point there is also https://puphpet.com/ for easy php vagrant provisioning"
PHP,3dcj10,n0xie,1 point,Wed Jul 15 12:59:49 2015 UTC,puphpet makes configuring PHP boxes easy! I'd recommend this route. Look into getting vagrant setup on your OS and go down this route! Will isolate your development environment  to a virtual machine :)
PHP,3dcj10,Adduc,1 point,Wed Jul 15 20:47:05 2015 UTC,Just get a VM running using http://phansible.com/
PHP,3dcj10,mbthegreat,1 point,Wed Jul 15 12:25:03 2015 UTC,"If I may be more specific: With Flask/Django, you set in a virtual environment to install dependencies. Do you do this with PHP also? If not, how else? And how would you localhost it? Django/Flask has that integrated into it; With PHP, I guess you should use XAMPP or something? But at the very core, how do I set up the environment properly?"
PHP,3dcj10,silentk446,2,Wed Jul 15 11:05:56 2015 UTC,"If you're looking into dependency management for an application, look into Composer. It's become the de facto standard for defining PHP package dependencies."
PHP,3dcj10,silentk446,1 point,Wed Jul 15 13:27:26 2015 UTC,I'm not quite sure what you mean but you're probably looking for Vagrant.
PHP,3d8ete,bagwaa,11,Tue Jul 14 08:53:56 2015 UTC,"I hate it when people write stuff about it not being for the money, because a lot of employers just love to grab onto that narrative.  They will miss all the stuff about mastery and self fulfillment and get the take home message that money doesn't motivate people, so let's keep experimenting with the lowest possible wages that people will tolerate.  The result is that a handful of people negotiate really well for themselves and most people can only get a wage increase by switching jobs.  There is nothing wrong with doing it for the money."
PHP,3d8ete,dgran73,9,Tue Jul 14 17:14:16 2015 UTC,Don't forget about all the chicks!
PHP,3d8ete,occsceo,1 point,Tue Jul 14 17:07:05 2015 UTC,"LOLOLOL - yeah those don't come until you get bought for 7 figure sums, then your geekiness is somehow sexy"
PHP,3d8ete,clickclickboo,14,Thu Jul 16 18:12:17 2015 UTC,"I definitely feel the same way regarding mastering something. Most days I'll feel like ""why am I being paid?"" Then I realise its because what I know to be insignificant (301 redirects, reinstalling a corrupted plugin, bit of CSS and JS, some PHP) is actually black magic to an outsider.  Everyone in my office will comment from time and time again how wizard-like I am. I try to ignore all of it though simply because I know how little I in fact know."
PHP,3d8ete,Thatonefreeman,10,Tue Jul 14 10:44:31 2015 UTC,Wait... You know about... 301 redirects?
PHP,3d8ete,jwmoz,1 point,Tue Jul 14 18:57:41 2015 UTC,I only got so far as 201s.
PHP,3d8ete,tom808,5,Tue Jul 14 22:51:41 2015 UTC,"I'm sure you are decent at your job and because you are interesting in technology and reading tech articles like this that assures me that you are.  It probably doesn't make it easy if you work with ""non-techie"" people. In my office (I'm a junior btw) everyone is better than me. Even the directors of the company are ex-developers and have written some of the code which I change on a day to day basis.  Believe me in my environment you never lose the incentive to want to learn more."
PHP,3d8ete,mikedelfino,5,Tue Jul 14 16:00:33 2015 UTC,I wonder whether people on other professions also blog about this.
PHP,3d8ete,orlybg,5,Tue Jul 14 12:23:17 2015 UTC,"Don't know about that. But I remember during college my accountant friends always asked why my engineer friends and I gather with our CPU's, huge CRT screens, router/hub, beers and snacks just to fool around with a new linux distro or a programming hackaton. And they didn't saw themselves having all nighters practicing their balance sheets and income statements."
PHP,3d8ete,bmwparking,5,Tue Jul 14 14:30:10 2015 UTC,"Programming is not accounting. It has a creative element, and a practical element, so it's closer to, say, carpentry.1 Like creating a beautiful cupboard for fun. Not unheard of.  1 Technically there's creative element in accounting too. Managing the financing of a medium to large company has a lot of interesting decisions to make and people do read and research this stuff for fun during their free time too. But in the simple case it's a very mechanical task."
PHP,3d8ete,orlybg,4,Tue Jul 14 16:56:04 2015 UTC,I've actually listened to a good TED talk on the subject and ever since I've been thinking about motivation hence this post strikes close to home. The talk in question: https://www.ted.com/talks/dan_ariely_what_makes_us_feel_good_about_our_work?language=en  Worth listening.
PHP,3d8ete,militantcookie,1 point,Tue Jul 14 15:14:05 2015 UTC,"Definitely, thanks!"
PHP,3d8ete,elebrin,2,Tue Jul 14 17:54:37 2015 UTC,if you have responsibilities in life then its about the money. at the end of the day there's better ways to spend your time than sitting in front of a screen.
PHP,3d8ete,albertobenz,1 point,Wed Jul 15 13:01:45 2015 UTC,"I know I value different things than other people. I value learning new things: new languages, new ways to use old languages. New skills, just in general. On some level I always feel like an idiot because I'm always doing things I just got started on recently. That process of discovery and making new connections is really rewarding though.  My primary motivation, however, is money. If I had enough income from a source that did not require labor I would never build another website ever again. I'd never take a call from a client. I'd never edit another poorly worded about page. I chose this line of work because it constantly changes and I can learn new things every day. Even when the projects don't change that much, I can do them in different ways. I take work entirely based on which projects will make me the most money for the timeframe it will take me to do them."
PHP,3d96aw,Hywan,2,Tue Jul 14 14:02:46 2015 UTC,https://github.com/fruux/sabre-katana
PHP,3d8tge,snsmurf,3,Tue Jul 14 12:03:26 2015 UTC,"Both approaches are valid, so the choice will depend on many smaller details which we can't guess from this description.  ""Products"" doesn't have to be one table. You can have 1:1 relation with the ""traits"" of a product in other tables and join them for queries. This would mean when you update, you don't duplicate all fields, but only those in the changed trait. By observing which fields change most, and how they group logically, you can factor your schema accordingly.  Say you can have one table for versioned pricing & discounts, one table for versioned descriptions and photos etc. Then your product table becomes:  Products: id, pricingId, descriptionId, quantity. I've put quantity on the main table because you might want to NOT version that particular field, it'll change all the time and there's no particular value in storing old values (unless there is - only your boss knows).  Then a product becomes a collection of trait ids at the time of making the order, which is a lot more compact to store in your orders ""data"" field.  So as you see, you have control: what to version, what not to version and which part to duplicate.   Ultimately it also depends on your architectural design. Orders can be seen as a separate service so in this case saving item snapshots independent of the Products table may be preferable so Products can change more easily without complex outside dependencies."
PHP,3d8tge,jose_zap,1 point,Tue Jul 14 12:14:11 2015 UTC,"Really the products table only contains the title, description, brand id, tax id and that's it. Pricing is all handled via the variants, our clients are going to want to potentially off the Large Red Version of Product X at a different price to the Small Blue version of Product X.  For me, I feel, one of the main issues comes with the Custom Fields plugin as that's the only code out of all of it so far that's in place already as we've used it on other sites. And it's just not been setup to handle a revision ""is_deleted"" type option. It's a plugin we've developed to allow us to set behaviors on models and allow those models then access to custom fields. E.G. a blog post could have custom fields, and we as the developers can setup the custom fields attached to blog posts so the client can then login to their side and see all the fields they can enter that we've just setup."
PHP,3d8tge,seratne,1 point,Tue Jul 14 13:48:06 2015 UTC,"And it's just not been setup to handle a revision ""is_deleted"" type option.   In a versioned product/variant table, to delete a product you create a ""product event"" with that product id, with is_deleted set to 1, so you don't need a plugin to handle it. It's up to application logic to handle it. CRUD-wise you can always map it somehow.  It feels like the issue is you don't have a well differentiated domain layer where you can encapsulate how deletion happens, and you're trying to approximate it by writing plugins for your data access layer, which is really limiting. The only way to have a proper domain API... is to write it. No DAL plugin can perfectly map to your app logic.  Consider isolating your domain logic in a clean API whose implementation you can change at will without exposing its inner CRUD-ness."
PHP,3d8tge,bojanz,1 point,Tue Jul 14 14:04:39 2015 UTC,Have you tried the audit log plugin for CakePHP? https://github.com/jippi/cakephp-audit-log/tree/2.x
PHP,3d8tge,bojanz,1 point,Tue Jul 14 12:37:06 2015 UTC,Not sure that would solve our problems as it would just mean we'd have to have some extra links setup for any old orders to link to that audit table as well as / or instead of the products table.
PHP,3d8tge,n0xie,1 point,Tue Jul 14 13:39:10 2015 UTC,"This is above my level, I'm just starting to get into db design/management. But, maybe that's a good thing to give a simpler look at it. I would add two fields: First would be a bool for ""current"", and the other would be ""revision"". When looking for new products you would filter by if current, and then when saving the order save the revision with it."
PHP,3d6p48,jvwatzman,5,Mon Jul 13 23:12:47 2015 UTC,I moved back to a vanilla PHP-FPM setup last week from HHVM.  I knew that HHVM 3.8.0 was coming but I kept finding little unexpected incompatibilities such as when trying to upgrade Laravel to 5.1 - the latest version of Guzzle (used by AWS v3 SDK) requires some cURL constants which aren't present in HHVM 3.7 or earlier and for love nor money I couldn't work out the correct bitwise value to set them manually. I understand these are now set though in HHVM 3.8.  It's also nice to have a working Xdebug setup and reliable Postgre extension again.
PHP,3d6p48,alex_bilbie,3,Tue Jul 14 07:24:16 2015 UTC,"It's a tough spot, since I've definitely run into minor incompatibilities more than a few times. The flip side is that they're always quite quick to resolve issues as they come in. e.g. a couple days ago I found that an SplFixedArray::fromArray() could take minutes to run on larger datasets, but the issue was fixed hours after opening: https://github.com/facebook/hhvm/issues/5671#issuecomment-120741410  Of course, if I'm running in production, the time to get an individual fix doesn't matter so much as the time to put that fix into the next release, and then package that for my distro, then I need to run the upgraded HHVM on staging for a couple days to look for any regressions that my test suite didn't catch.  I like HHVM quite a bit, but with PHP7 on the way (which I still don't think is nearly as performant in practice, it does pick a lot of the low-hanging fruit to push the zend engine from suicidally-horrible to pretty good), performance isn't enough to use HHVM. Hack and builtin XHP are the two main draws for me. XHP's easily the best, least-kludgy server side templating I've ever used; these days, if I'm not using XHP server-side, my response is usually just json_encode($response) so ReactJS can handle it client-side. Hack I like since nothing I write has to be 100% hack; I can stick my strict business-logic and async file read/writing into some <?hh files."
PHP,3d6p48,jkoudys,3,Tue Jul 14 18:07:22 2015 UTC,Don't forget async/await. Hack + async/await + xhp. Killer features.
PHP,3d6p48,metanat,1 point,Tue Jul 14 19:08:42 2015 UTC,"They definitely play nicely together. Sites seldom render 100% of their content all at once on the client-side, and instead concurrently load elements from multiple data sources, so having a big XML tree that's updated on responses is wonderful.  I think in theory, you were supposed to be able to use DOMDocument to build and manage a response like that, and update it with the responses from concurrently executing stream_select, curl_multi_select, and async mysqli. You could then apply an xslt, which would have multiple templates, similar to how xhp elements work. While I think the academics got the theory right on that one, the implementation tends to be absolutely horrible (often absurdly strict about using correct but strangely undocumented syntax for things that barely matter). I think I probably spent about 100 hours trying to get PHP + nonblocking stream/curl/mysqli + DOMDocument w/ XSLT all working together, because I could see how awesome it would be if they did, before eventually discovering Hack + await + XHP.  I will say that it wasn't a waste of time. The approach to templating you learn writing good XSLT is very transferable to XHP (and React). The big thing you practice is approaching templating from a compositional standpoint, much like how good XHP element classes are written. Probably the most common Bad Code I read are templates that are rife with control logic. Big nests of for loops from if/else and switches, checking and setting variables in various spots that take an hour to unravel, while spitting out HTML elements here and there with no rhyme or reason. WordPress is a prime example of this run amok."
PHP,3d6p48,jkoudys,1 point,Wed Jul 15 05:12:29 2015 UTC,"I completely agree with everything you said, and appreciate you writing it out. Using a declarative component abstraction with composition is a really great step forward. I think it helps reduce (at eliminate in case) a class of bugs that templates languages are rife with."
PHP,3d6p48,metanat,1 point,Wed Jul 15 05:47:29 2015 UTC,Shameless plug: I released a JS+Hack library and some documentation last week that ties them together more thoroughly :)  https://code.facebook.com/posts/858739974205250
PHP,3d6p48,fred_emmott,3,Wed Jul 15 17:28:58 2015 UTC,"So did I. The small but incremental memory usage (leak?) was getting annoying. Then the ""Failed to initialize central HHBC repository"" error was the last straw.  I'll just wait until PHP 7"
PHP,3d6azv,piegus,34,Mon Jul 13 21:27:15 2015 UTC,You are not using it on OSX Yosemite with JDK 1.8 by any chance? There is a issue with the performance using that combination:  https://youtrack.jetbrains.com/issue/IDEA-138687
PHP,3d6azv,Tomdarkness,-2,Mon Jul 13 22:36:10 2015 UTC,This right here.
PHP,3d6azv,FriendlyWebGuy,12,Mon Jul 13 23:01:43 2015 UTC,"Like your friend, I've not noticed any speed difference either. Business as usual for me :/"
PHP,3d6azv,wubblewobble,2,Mon Jul 13 21:34:32 2015 UTC,"Yeah, me too.  Seems to be working fine.  I'm on a Surface Pro 3, i5, 8Gb ram, Win 8.1."
PHP,3d6azv,CaptainIncredible,8,Tue Jul 14 03:10:19 2015 UTC,"Only problem with PHPStorm 9 I noticed is somehow it switched all my projects from utf-8 to win-1252 encoding. Seriously, wtf JetBrains? Why?"
PHP,3d6azv,SparePartsHere,5,Tue Jul 14 07:04:15 2015 UTC,I had the same issue!!
PHP,3d6azv,ScuzzyAyanami,6,Tue Jul 14 11:50:02 2015 UTC,I've been seeing huge pauses when commenting out blocks of Javascript
PHP,3d6azv,Jaimz22,5,Mon Jul 13 21:59:03 2015 UTC,"I've actually noticed that it starts up faster!  make sure you're running the 64bit executable, not the 32bit  http://i.imgur.com/JeNM9gO.png"
PHP,3d6azv,Jaimz22,4,Mon Jul 13 22:01:01 2015 UTC,Well i have been. But it consume 50% of my cpu
PHP,3d6azv,Jaimz22,4,Mon Jul 13 22:28:53 2015 UTC,I'd start to question your JDK installation if I were you.
PHP,3d6azv,Circlical,1 point,Tue Jul 14 01:00:57 2015 UTC,"Ok i reinstalled it. I got JDK 8u51. On my Windows 7. I aslo wanted to set my specs: Win 7, Core i3, 8 gb ram. SSD disk"
PHP,3d6azv,singlecoilpickup,1 point,Tue Jul 14 21:08:27 2015 UTC,"See. I use an i7 with 16gb of ram. There's a major disconnect there between our experience, I'm sure."
PHP,3d6azv,samandiriel,5,Tue Jul 14 23:34:39 2015 UTC,"Despite being on Yosemite, I resorted to using the 'standard' build (the fonts on the Yosemite build were horrendous on my Retina MBP).  I did modify the memory allocation though.  Go into  Applications, Right click PHPStorm, Show Package Contents, then navigate to Contents/Bin and edit 'phpstorm.vmoptions'.  Change your values to raise RAM limits:  -Xms512m -Xmx1024m -XX:MaxPermSize=450m -XX:ReservedCodeCacheSize=325m -XX:+UseCompressedOops   Immediate speed boost for me."
PHP,3d6azv,amga_,4,Tue Jul 14 14:43:59 2015 UTC,"Yeah, I haven't noticed any difference in performance."
PHP,3d6azv,fleshintogear,3,Mon Jul 13 21:35:55 2015 UTC,Nothing observable on my end.  You can always go back to a previous version no problem - I do it every so often when support asks me to use a test version.  Just dump the old version's java and config files into the installed directory and off you go.
PHP,3d6azv,codercaleb,3,Mon Jul 13 23:08:14 2015 UTC,"I had this problem running it in a virtual machine, but saw a significant bump after provisioning more memory."
PHP,3d6azv,codercaleb,2,Mon Jul 13 23:26:35 2015 UTC,Here is working great.
PHP,3d6azv,cYzzie,2,Tue Jul 14 00:15:36 2015 UTC,It's a hell of a lot faster for me.
PHP,3d6azv,psihius,2,Tue Jul 14 01:18:03 2015 UTC,The only issues I'm having are with PHPStorm recognizing Twig and the Exception class. I'm not wholly convinced that this isn't a composer autoload issue.
PHP,3d6azv,rydan,3,Tue Jul 14 02:15:33 2015 UTC,Wasn't an issue with Composer autoloading at all. Turned out it was an issue with the program cache: http://stackoverflow.com/questions/14727557/phpstorm-code-completion-doesnt-show-core-classes-extensions
PHP,3d6azv,againor,2,Tue Jul 14 02:26:57 2015 UTC,fine here on  whispers: windows 7
PHP,3d6azv,Arkounay,2,Tue Jul 14 10:55:18 2015 UTC,"If anything, it started to use all 4 cores for project indexing and inspections in 64 bit version for me - I've suddenly have a reason now to upgrade to 6/8 core CPU...  So, it's quite a bit faster for me compared to PHPStrom 8..."
PHP,3d6azv,xtrategist,2,Tue Jul 14 20:16:19 2015 UTC,Is PHPStorm 9 actually usable with HiDpi on Ubuntu?  I find it impossible to see anything on PHPStorm 8.
PHP,3d6azv,Spinal83,1 point,Thu Jul 16 11:47:33 2015 UTC,Not really seeing any performance issues for me.
PHP,3d6azv,dvdpearson2,1 point,Tue Jul 14 01:40:58 2015 UTC,Haven't seen any performance issues but I had to rollback to phpstorm 8 because phpstorm 9 doesn't save shortcuts that uses special characters for now  edit : and editing javascript often crashed it
PHP,3d6azv,dsarchy,1 point,Tue Jul 14 05:38:48 2015 UTC,Is your project directory also a vagrant folder?  That is running slow for me with 9.  Other projects seem fine.
PHP,3d6azv,amazzy,1 point,Tue Jul 14 06:40:56 2015 UTC,Nope
PHP,3d6azv,mbthegreat,1 point,Tue Jul 14 17:28:52 2015 UTC,"I've been running the EAP since it first came out, I don't notice any speed difference with PhpStorm 8.  I'm using it on Windows 10 x64 FWIW"
PHP,3d6azv,I_l_hanuka,1 point,Tue Jul 14 06:46:33 2015 UTC,I'm using it on Mac OS X 10.10 and I didn't notice any performance issue. Tell us your configuration.
PHP,3d6azv,webdeverper,1 point,Tue Jul 14 12:43:25 2015 UTC,I had a problem with 8 on Yosemite but no issues with 9. Have you tried removing any plugins that you are not using?
PHP,3d6azv,drawm08,1 point,Tue Jul 14 12:54:08 2015 UTC,Yes i have. The worst is cpu levels. Always at 50 %
PHP,3d6azv,I_l_hanuka,1 point,Tue Jul 14 15:57:50 2015 UTC,"No performance changes here, granted I have an i7 with 32 gb memory with an SSD but, I'd say you have something wrong with JDK for sure."
PHP,3d6azv,drawm08,1 point,Tue Jul 14 15:57:10 2015 UTC,"I went for the version with bundled Java (OSX 10.10) and it seems a little faster. There are some files on my project that it has always totally chugged on though, can't work out why (not big files)"
PHP,3d4emr,kseniadobreva,16,Mon Jul 13 12:57:15 2015 UTC,"Feel-good quote of the week:   Anyway, my work on PHP is very much about boosting performance. And here PHP has left Python and Ruby far behind. So… Critics are criticizing, while we’re working."
PHP,3d4emr,avindra,5,Tue Jul 14 01:30:33 2015 UTC,"Also, I can mention some future features that look interesting and accomplishable – annotations (they are called attributes in several languages), cooperative multitasking, asynchronous functions as well.    Super excited for multitasking and asynchronous. I wonder if it would land in 7.1 or 8..."
PHP,3d4emr,rich97,2,Tue Jul 14 05:19:59 2015 UTC,As long as the make annotations an actual thing and not meta data comments then I'm very excited for that too.
PHP,3d4emr,bwoebi,2,Tue Jul 14 08:52:46 2015 UTC,"What can PHP really implement here? Just provide the primitive and make them readable through reflection and that's it. Typical uses for annotations (as seen in say, Java) would have a significant effect on performance in an interpreted environment. There's a reason why pseudo-annotations are compiled in advance in most PHP projects that have them."
PHP,3d4emr,eduardor2k,1 point,Tue Jul 14 13:18:24 2015 UTC,Definitely not in 7.1. I hardly can believe that would be achieved in only a year. (saying that from a core dev pov)
PHP,3d4emr,bwoebi,2,Tue Jul 14 09:01:40 2015 UTC,hhvm already supports async
PHP,3d4kcx,Bravat,42,Mon Jul 13 13:52:03 2015 UTC,"Hi Bravat,  I'm the part of that ""Satan"" creature you've referred to :)  Overall it ready as leagular process of learning. You've got used to a set of patterns and it's hard to adapt when things are achieved differently.   Noone's forcing you using all the features provided by Yii. It's your choice as developer. If you love doing everything from scratch, you're free to do so. For example, it's easy to throw out everything about Yii's clientside and just use something like Grunt if you feel better using it https://github.com/samdark/yii2-cookbook/blob/master/book/structure-asset-processing-with-grunt.md Using tables makes perfect sense to display tabular data, isn't it? Using DIV-s to emulate tables isn't. Grids are mainly for putting together admin panels. Frontend is usually custom. Any suggestions on how to improve docs? Or... any particular issues with docs? Yii 2.0 is a bit more efficient runtime. Not as layered/abstracted as Laravel, Symfony etc. because each component was designed for practical purposes and not for ""let's imagine we'll swap this implementation with something totally not related"" so more friendly to people who love straightforward things. What else... Yii traditionally has long LTS periods. For 1.x it's 7 years already and people are asking for more. Also there's a huge friendly community willing to help novices. Yii definitely has problem with current website (it's mainly focused on 1.1 still). We're on it."
PHP,3d4kcx,sam_dark,7,Mon Jul 13 14:34:38 2015 UTC,Overall it ready as leagular process of learning.   ... wat.
PHP,3d4kcx,slowbrohime,11,Mon Jul 13 15:28:47 2015 UTC,"You know, leagular."
PHP,3d4kcx,sam_dark,9,Mon Jul 13 15:36:07 2015 UTC,"Nice typo :) Regular, of course."
PHP,3d4kcx,ratbastid,3,Mon Jul 13 17:25:12 2015 UTC,Legular.
PHP,3d4kcx,ciaranmcnulty,1 point,Mon Jul 13 18:41:44 2015 UTC,It's a perfectly cromulent word
PHP,3d4kcx,rtfmpls,5,Wed Jul 15 15:22:29 2015 UTC,Sam Dark... weren't you the second guy after qiang to join the Yii team?  Yii has given me (and a few of my friends) jobs for the past 5 years. You guys do a great job. There's so much thought put in all the components... it's like you're doing my job for me sometimes :-D.  If any of you guys wanna come to Vienna (AT) and need a place to crash and beer.... It's on me :-)
PHP,3d4kcx,sam_dark,2,Mon Jul 13 21:42:19 2015 UTC,"No, I wasn't second guy joined: http://www.yiiframework.com/about/  Thanks for beer offer :)"
PHP,3d4kcx,Pardalean,2,Tue Jul 14 06:38:30 2015 UTC,"Yii 2.0 is a bit more efficient runtime. Not as layered/abstracted as Laravel, Symfony etc. because each component was designed for practical purposes and not for ""let's imagine we'll swap this implementation with something totally not related""   The term you're looking for is ""tightly coupled"". Let's keep it real and not praise spaghetti as ""efficient"" and ""YAGNI"". Either you don't understand the idea of loosely coupled reusable components, or you're purposely sugar-coating bad practice. Either way, this claim is unfounded at best.  I don't disagree with your other points."
PHP,3d4kcx,sam_dark,5,Tue Jul 14 07:47:58 2015 UTC,"Hello Sam :),  Pleasant surprise :). I didn't expect someone from Yii himself. The best suggestion I can give you is to take a look at CodeIgniter docs - for me they are pure perfection. Every function is explained in great details, with one or more example of usage.  Using tables for tabular data is logical, but in this project I don't need tables, since this is custom made template. I need ability to manipulate HTML as action takes place (there are lot of clicking and radio buttons and checkboxes), and everywhere I asked, the answer was you should used GridView for this (it is great thing to use, unless you need to make a specific look).  Query class is great, but I am used to create custom queries (I learned MySQL before coming to the backend world).  Sorry for calling your ""child"" product of the Satan, but as I said, at this moment I am not fun person to be with :/."
PHP,3d4kcx,NavarrB,10,Mon Jul 13 14:56:56 2015 UTC,"CodeIgniter is much smaller in terms of features. That's one of the main reasons its docs were a bit easier to write and are easier to grasp. If you'll take a look at Yii API docs, almost every class has an example. We're adding more examples to the guide as well. If you can point to any particular places where example is absolutely necessary, I'll add it.  As Yii developer I can say that you don't have to use GridView for everything. It's not a silver bullet. If it's easier to do thing w/o something, just do it w/o that something."
PHP,3d4kcx,fesor,1 point,Mon Jul 13 17:26:45 2015 UTC,"I personally really like Yii, and people suggested GridView so you couldn't have to duplicate functionality. You can easily style tables or rewrite it yourself"
PHP,3d4kcx,bga9,3,Mon Jul 13 21:43:26 2015 UTC,"I'm the part of that ""Satan"" creature   Congrats with new monument of Yii2"
PHP,3d4kcx,_barterlabs,3,Mon Jul 13 15:03:01 2015 UTC,I don't know why you're getting down-voted because that was the funniest reply to a reply I've seen today.
PHP,3d4kcx,Pardalean,12,Tue Jul 14 03:13:39 2015 UTC,"Satan has an entire line of products. Bluetooth headsets, congressmen, people who chew with their mouths open. I hear he's working on the ""next Facebook."""
PHP,3d4kcx,sam_dark,3,Mon Jul 13 14:19:28 2015 UTC,"he's working on the ""next Facebook.""   What's wrong with his current Facebook?"
PHP,3d4kcx,jmwpc,6,Tue Jul 14 10:38:22 2015 UTC,Not evil enough :)
PHP,3d4kcx,glasscalendar,2,Tue Jul 14 11:04:09 2015 UTC,Bluetooth headsets   So many unused BT headsets at home. Even supposed 'good' brands like Plantronics.
PHP,3d4kcx,slowbrohime,2,Mon Jul 13 16:41:22 2015 UTC,"Can we please hijack this discussion into a Bluetooth headset discussion please? I mean, there's got to be a pair that isn't shit. I've literally gone to Amazon and went straight to the most 5 stars and keep going down the list. Please. Help"
PHP,3d4kcx,jujubean67,16,Tue Jul 14 02:15:25 2015 UTC,"I love Yii. I think that, really, you could replace Yii in your post with almost any other framework and say about the same things, coming from someone who doesn't know that framework.  I would agree, though, that the documentation (as far as how-tos) is a little sparse for Yii2, but they do offer a complete API documentation that breaks down each class."
PHP,3d4kcx,Faryshta,7,Mon Jul 13 15:35:39 2015 UTC,"I've used Yii v1 extensively (haven't used v2 at all, but it seems really simlar) and honestly it's HTML builders were a godsend when you wanted complex CRUD features quickly. Its GridView was extremely powerful and very flexible.  I guess what I'm trying to say is that Yii is great for a particular usecase and if you have different needs then it's simply not for you. IMO if you're not using these features you're not really using the framework for its intended purpose."
PHP,3d4kcx,tgomc,5,Mon Jul 13 18:23:18 2015 UTC,"If you don't like GridView (which I only use for the administrator, never for the end user) you can use ListView or define your own widgets (which is what I do for the end user).  The learning curve for Yii2 is tremendous because it uses a pattern and architecture for everything so simple things like relational data seem very hard to achieve at first. I promise after you do it successfully once or twice you will do it seemlessly, like if all the data were just being generated like magic.  What parts of the docs you don't like? What would you expect to see when you browse the docs?"
PHP,3d4kcx,sam_dark,9,Mon Jul 13 18:33:52 2015 UTC,"GridView (from what I saw, this is most used library in the view) is absolute horror - I like to have full control over the HTML and JS, and the more I work and more experience I gather, plain HTML and JS (not generated by framework) are more and more my first choice.    You are free to do that. Plus, you could extend GridView and override the render methods to get exact what you need.   And tables. Really?   Like samdark said, it makes perfect sense for tabular data.   Documentation is there, but it is far from good. The sources on internet regarding this framework are scarce, and often they just link to the documentation and more then often they don't help you.    I found the documentation acceptable, only read what was documented within the source code, only googled when I needed 3rd party libraries.   Why would someone in the right mind use Yii2 if he have choices as Laravel, Symphony, Slim...? Or I am missing something?   I have worked with Yii1 for the past 3 years and built numerous projects from big to small, and Yii2 comes as a breath of fresh air. I like the extensibility and the extend of which you can configure this framework from the ground up.   Sorry for the this rambling, but I have to blow some steam (because of this hellish framework I am not very pleasant to talk with at the moment, and none of my friends are programmers :D )     It would be great if you would post specific technical issues you've had and I'll be more than happy to throw in some ideas.     Peace."
PHP,3d4kcx,sam_dark,2,Mon Jul 13 16:01:24 2015 UTC,Yup. That would be very helpful indeed.
PHP,3d4kcx,psihius,1 point,Mon Jul 13 17:28:09 2015 UTC,"I had to blow some steam, so the rant was without any logic and connection. Generally, I pissed about everything and nothing in particular, and it was a product of short deadline. From the comments, I can see that I am missing a lot of things and that I should learn the framework in greater details. Which I will when I catch some free time."
PHP,3d4kcx,sam_dark,2,Tue Jul 14 11:07:43 2015 UTC,"Well, it happens :) Better to blow some steam than to keep it inside."
PHP,3d4kcx,tgomc,1 point,Wed Jul 15 07:21:57 2015 UTC,"It will pass. Just stick with it, just don't use parts that really don't fit your needs. There is a learning hump, for me it was at about 3rd to 4th week, after I've finally got the general grasp on how things go and adapted to the docs (and started to read them carefully), I just steamrolled the hell out of the project I was doing on it. From that time forward I've build and re-written a god damn behemoth of a project with such an ease, that I never had much trouble. Just remember this thing: Yii has a superb object model. Like legendary stuff. Override what you need, make/replace with our components, start using Gii and write your own generators (adapt what community has to offer), check community packages. Soon, you probably going to change your mind :) It's not perfect or suits any type of project, but API's, CRUD's, administration panels and custom frontend is what this framework was built for. It's a great tool if job is right for it. Just know when not to force the usage of the built in stuff."
PHP,3d4kcx,sam_dark,1 point,Tue Jul 14 19:47:46 2015 UTC,Quick question :D - how can I run a single (older) migration?
PHP,3d4kcx,lucas_maximus83,1 point,Tue Jul 14 11:11:44 2015 UTC,"You currently can not. It's kinda against migration nature and purpose. If you'll explain why you need it, I'll add the ability to framework."
PHP,3d4kcx,psihius,1 point,Wed Jul 15 07:20:15 2015 UTC,"Until I have stable alpha I tend to go and redo migrations where it is needed (the db will be changed accordingly). In this case I had to add a new field to the table and to populate it (I had to connect countries with according continent).  I had to rewrite country migration, and I wanted to run just that migration (drop table, create it and populate)."
PHP,3d4kcx,webdeverper,1 point,Wed Jul 15 13:03:31 2015 UTC,"What about creating a new migration where you alter the table, adding the needed column? Then populate it with a method that imports the dump."
PHP,3d4kcx,mbriedis,1 point,Wed Jul 15 15:05:58 2015 UTC,"It won't work if there's more than one developer on a project and we don't really want to support one man band style of development since if the project goes success, more people will come and you'll loose time correcting your workflow.  Overall, if migration went to repo and it can be executed, don't touch it, create new migration. If migration went to repo and it can't be executed, fix it."
PHP,3d4kcx,webdeverper,1 point,Wed Jul 15 17:52:27 2015 UTC,"For some reason modern developers have had the mantra of ""tables are bad"" to the point where they don't use them for tabular data. I seen unordered lists abused to fit the same purpose."
PHP,3d4kcx,xlxAciDxlx,1 point,Tue Jul 14 18:25:16 2015 UTC,"Just wait when they need to render a 100 row table with 10-15 columns, with lots of color-coded entries, links, opening popups and other stuff. At that point people usually start to realize, that rendering 1500 divs is not fun even of a good machine (and usually the support has some pretty lame notebook or cheap office PC). Tables are for tabular data, period."
PHP,3d4kcx,datorndata,3,Tue Jul 14 20:02:04 2015 UTC,"I'm with you there. I actually can't comment on Yii 2 since I have not used it, but I have to use Yii 1.x at my job (been here for over 1 year using it) and I hate it. I would not trust anything coming from the Yii team. Although I have a feeling most of the pain comes from how this company is using the framework, maybe not the framework itself. But I feel like if you try to code like Yii does in your application you're barking up the wrong tree (e.g. using Static functions everywhere which becomes a nightmare when you want to write unit tests).   I think even the simple pattern of Book::model()->findByPk(...) is horribly wrong because now you have a static function Object::model() that you need to create a middleman hack in your unit test environment in order to mock it. And NO, I don't want to connect to any database (memory or otherwise) in my unit tests.  Another problem, using a cache (e.g. memcache) on top of the database opens a database connection even if it is not used. So if memcache can support 1000 requests per second and MySQL can only support 100 requests per second, then your bottleneck becomes MySQL because it opens a new connection for every request anyway. There's a workaround for this but you have to use custom caching before even going to the framework.  Edit: P.S. I'm a Symfony 2 fan :p I don't think I have seen even one static function call in Symfony yet, and everything is customizable, mockable, well designed, and cleanly coded. I even prefer the bracket positioning and whitespace formatting of Symfony over Yii. Here's an actual code snippet of CActiveRecord:  public function __get($name) {     if(isset($this->_attributes[$name]))         return $this->_attributes[$name];     elseif(isset($this->getMetaData()->columns[$name]))         return null;     elseif(isset($this->_related[$name]))         return $this->_related[$name];     elseif(isset($this->getMetaData()->relations[$name]))         return $this->getRelated($name);     else         return parent::__get($name); }   And my personal favorite (I'm not kidding, this is in the actual source code):  protected function sortData($directions) {     if(empty($directions))         return;     $args=array();     $dummy=array();     foreach($directions as $name=>$descending)     {         $column=array();         $fields_array=preg_split('/\.+/',$name,-1,PREG_SPLIT_NO_EMPTY);         foreach($this->rawData as $index=>$data)             $column[$index]=$this->getSortingFieldValue($data, $fields_array);         $args[]=&$column;         $dummy[]=&$column;         unset($column);         $direction=$descending ? SORT_DESC : SORT_ASC;         $args[]=&$direction;         $dummy[]=&$direction;         unset($direction);     }     $args[]=&$this->rawData;     call_user_func_array('array_multisort', $args); }"
PHP,3d4kcx,tcmccarthy,1 point,Tue Jul 14 13:49:13 2015 UTC,"NO, I don't want to connect to any database (memory or otherwise) in my unit tests.   Oh man, the feels! I tried to test and mock something too, but, got nowhere. http://www.yiiframework.com/forum/index.php/topic/64710-activerecord-mocking-with-mockery/ What's you secret ""middleman hack"" you're talking about? I NEED IT!!!"
PHP,3d4kcx,agounaris,2,Wed Jul 15 13:37:28 2015 UTC,"It's not pretty, but the ""middleman model mock"" revolves around a bunch of nasty hacks. First, have all of your model classes extend a base model class of your making, which in turn extends from Yii's CActiveRecord. Next, your ModelBase class has a trait called something like UnitTestableModel. Create this trait in your prod code but also create another version of the trait in your unit test world code. force include the unit test world trait at the top of your unit test bootstrap so the Yii autoloader never loads the prod version. Now you have an injection point to override the static functions of CActiveRecord in your unit test world. In the prod version of the trait, you simply create passthru functions that call the parent::method($arg); (unless you want to add on functionality).  In the unit test trait you can override the public static function model() to return a mocked model of your choice. so you can have something like   $myMockedUser = createMock(...); User::modelWillReturn($myMockedUser); $result = $myObjectUnderTest->doThing($input); // this is calling a real method   Then when the real doThing function calls  User::model()->findByPk($x)   your unit test trait model() function is called first. You can do get_class() to get the model name (in this case ""User"") and have it return a cached value which you set with User::modelWillReturn(); You're basically building a unit test framework around Yii, so it's a lot of work and I never said it was clean.  Edit: the alternative is to never use the Yii static calls like User::model() to get the singletons, instead create a Container class that you can more easily override in unit test world. Like this:  $container->User()->findByPk();   the CapsCamelCased function call of the $container object actually invokes User::model() but can be more easily overridden in a PHPUnit mocked object world."
PHP,3d4kcx,sam_dark,2,Wed Jul 15 20:41:14 2015 UTC,"I think people will use it because of preference and general knowledge of it. Not to mention, there's plenty of programs and IDEs that have built-in function documentation that make using (almost) any library/framework a breeze."
PHP,3d4kcx,stack_tracey,2,Mon Jul 13 14:27:09 2015 UTC,"Not sure what you're talking about, maybe you're just frustrated. The best thing about Yii2 is that it doesn't force you to do anything, you can opt out of nearly any feature or convention to use your own custom solution."
PHP,3d4kcx,imafighter,2,Mon Jul 13 16:21:21 2015 UTC,"I went from Laravel to Yii and then back to Laravel as I moved through jobs. Each has their own forte. We used Yii to power the proprietary CMS and API for a 14-vertical web environment -- you could do that with Laravel too but Yii is really really modular which made it easier to mix and match the things we needed for each individual site. Using Laravel has been great for putting together a layout system for rapid prototyping projects so they all look the same. It's not this massive framework that takes forever to set up, but it would require more from a developer to use it build a robust CMS and API. Not each framework has the same audience or application."
PHP,3d4kcx,mbriedis,1 point,Tue Jul 14 03:40:21 2015 UTC,My only issue with yii is the quality of 3rd party modules....nothing else. For small to medium scale projects is just fine!
PHP,3d4kcx,brzzzah,2,Mon Jul 13 20:23:07 2015 UTC,"Yep. That was always the issue with 1.x. 2.0 is significantly better in this regard.  btw., large scale projects built with Yii are OK as well."
PHP,3d4kcx,sam_dark,1 point,Mon Jul 13 21:00:35 2015 UTC,"I think that people use Yii2 or Symphony (or even Zend) when they need ORM, secure auth, migrations, etc... from the box. That's like a Django in Python - almost monolithic, huge framework. Laravel more looks like RoR. CodeIgniter looks like Sinatra and Flask. CodeIgniter gives you a huge headroom to use 3rd party libraries or a framework fork.  Using raw queries on pretty simple selects in 2015 - NO."
PHP,3d4kcx,brzzzah,1 point,Tue Jul 14 00:26:02 2015 UTC,"We've adopted Yii2 around January 2015. It definitely has some gotchas but once you get familiar with the framework, it's nothing short of amazing. The architecture is extremely flexible. Behaviors, events, class overrides, they're all pretty great. There are two areas that we did struggle with: the routing rules aren't very well documented with examples, also the REST API lacks examples. The Yii2 team is always working hard and releasing new features regularly. Also, joins are hard to reason about when working with ActiveRecord."
PHP,3d4kmh,jkoudys,2,Mon Jul 13 13:54:34 2015 UTC,!
PHP,3d4kmh,oh_the_places,2,Mon Jul 13 19:38:55 2015 UTC,Now that's just beautiful!
PHP,3d4kmh,ArthurOnCode,1 point,Mon Jul 13 22:27:36 2015 UTC,"Just don't benchmark it against PHP arrays, because then it gets ugly."
PHP,3d4kmh,jose_zap,0,Tue Jul 14 13:06:23 2015 UTC,"Until PHP7, that is - most of the slower execution time is from <PHP7 having absurdly high overhead to execute a callback. Something like array_map or usort has lower level optimizations around the callback, but on PHP7 that's nowhere near the benefit it once was.  e.g. I just checked simple string-concat callback in an array of md5-strings from 0 to 200,000 on my laptop -- same data as an array in array_map vs ImmArray::map(), and they're pretty close, though array_map is a little quicker 9/10 times. However, the fixedarray as the return shows a significantly smaller footprint in memory_get_usage() (22MB array vs 17MB SplFixedArray in this example)  ImmArray::map() 0.028700113296509s, mem: 17219992B array_map() 0.02934193611145s, mem: 22191608B   There are probably ways that that can go even lower, e.g. by storing the map as simply an iterator with the function, but I don't do that mainly because it would inject side-effects.  edit: whoops, copied + pasted the wrong results. Actual memory usage is still quite a bit lower, but not that much lower.  edit2: note that the memory difference is on PHP7, which improves memory usage on arrays quite a bit. Here's the comparison on PHP5.6:  ImmArray::map() 0.60441112518311s, mem: 30409272 array_map() 0.53786706924438s, mem: 66429880   You'll have that memory difference whether you're pushing to a new array in a foreach() or not. More than twice as big in PHP5.6."
PHP,3d4kmh,jose_zap,1 point,Tue Jul 14 14:35:54 2015 UTC,"You shouldn't compare it with array_map though, but a foreach($array as ..) because most situations don't require a callback, while the immutable library does.  I'm not saying performance is everything, I use immutables in my work as well, but just caveat emptor for those thinking they can replace all their arrays with that."
PHP,3d4kmh,assertchris,1 point,Tue Jul 14 14:45:38 2015 UTC,"Yeah absolutely. Not every project should be mapping immutables or following a functional-programming paradigm at all. Keeping things procedural will always be advantageous because of the inescapable abstraction penalty. Where this paradigm really shines is when you write something that may technically use more clock-cycles, but the total execution time is lower (or at least feels lower). Procedural can get really clunky when dealing with concurrency, but FP is amazing when you can pass immutables off to async functions (e.g. a curl_multi_exec loop).  This lib is basically a compilation of the basic methods I found myself constantly re-implementing every time I wanted to use an SplFixedArray, so I'd say not to think of it so much as an alternative array, but as a more practical SplFixedArray.  Overall I'd say there's 3 main use cases where I'd recommend this over procedural:   Building templates. Good templating should be compositional and completely remove any control logic (for, if, else, switch all over the place makes for some terrible spaghetti). React.js is an excellent javascript library, and templating works very well there when you're essentially just filter() and map()ping all your raw data into a nice, human-readable component. XSLT is another good example -- it's acadaemically very sound, but alas suffers from terrible implementations. The big takeaway from them is that building a template composed of smaller templates keeps things much cleaner that if/elseing all over the place. Bigger datasets (to a point; at >500,000 items you're probably better off considering why you need so many data and if your DB/service can just return less in the first place). SplFixedArray has some impressive savings vs array, especially for larger arrays. Functional Programming, especially anything with concurrent operations. Concurrency is pretty unpopular in PHP, but I think a lot of that is because the engine performs so poorly on callbacks. Going the parallelism route with pthreads is a good way to drive your sysadmin insane, too."
PHP,3d4kmh,assertchris,1 point,Tue Jul 14 15:04:48 2015 UTC,"I'm not objecting to anything you said and immutables definitely have benefits in some areas, but some minor remarks:   There's nothing inherently more ""spaghetti"" about for loops, and we could perform functional operations on arrays:  $bars = []; foreach ($foos as $foo) $bars[] = $foo * 2;   $bars = array_map($foos, function ($i) { return $i * 2; });  $bars = $foos->map(function ($i) { return $i * 2; }); PHP7 optimizes list arrays so we won't need SplFixedArray for this purpose soon. There's no reason to use parallelism in PHP. If you want performance you can get more out of a single Java thread than 16 PHP threads.   We have to also consider arrays in PHP are passed by value, which makes them a lot more ""functional"" than, say, arrays in JS (which are passed by reference)."
PHP,3d4kmh,dvk0,1 point,Tue Jul 14 16:10:24 2015 UTC,"1 - I was referring to mapping a template via a for loop, not building your initial array. e.g. you can render a template like $foo->map(function($el) { return '<li><a>' . $el->getBar() . '</a><span>' . $el->getBaz()  . '</span>'; });. This is similar to xslt:apply-templates. Obviously you can render the same HTML in either approach. It's a difference in taking a compositional approach to the template, which lets you swap out different functions to represent your data as different 'components' (to use the ReactJS term).  e.g. I have a big set of functions to define various components which I can re-use, like echo $users->map($userList)->join(''); could say ""<ul><li>Alan Turing</li><li>Ada Lovelace</li></ul>"", but echo $users->map($userFirstNames)->join(', '); might say ""Alan, Ada"".  2 - Sort of - my example was on PHP7. You still save quite a bit on an SplFixedArray, because you're defining the size upfront, and requiring a more expensive operation to resize. The list array is still closer to a vector. PHP5.6 is obviously a way, way bigger savings, but it's still significant in PHP7.  3 - I'm referring to concurrency, not parallelism. This isn't so you can run 16 PHP threads -- you'd still be running a single thread (or one per request), but you can make external requests that can run concurrently until you actually need the data. This is a good lib that's basically re-implemented js promises to do that: https://github.com/reactphp/promise  One example is syncing some scheduled event to multiple remote services, e.g. EventBrite, Meetup, Facebook, etc. It doesn't make sense to sync Eventbrite, wait for a response, then sync Meetup, so they need to run concurrently. Additionally, the syncing begins at the start of the request, and my own server can continue processing the request doing anything else it needs done in the meantime. We also have callbacks that need to execute at the end. Immutables are handy for that, since we often have to pass the same set of data mapped differently for the different services, and execute a callback at the end once it's returned. PHP comes with curl_multi, which lets us do exactly that.  Here I am starting a curl request in the background: https://github.com/jkoudys/janeswalk-web/blob/master/libraries/MirrorWalk/MirrorWalk.php#L70  then it runs some blocking code at the end of the request that waits for each response, and processes their callback in the order they come in: https://github.com/jkoudys/janeswalk-web/blob/master/libraries/MirrorWalk/MirrorWalk.php#L101"
PHP,3d84bq,gamma032,3,Tue Jul 14 06:37:21 2015 UTC,"Pastebin the file.  If it's in PHP, it should be pretty obvious what it's doing."
PHP,3d84bq,mattsah,1 point,Tue Jul 14 06:53:39 2015 UTC,It seems to be coming from nearly all of the .php files on the site - pick a random one?
PHP,3d84bq,mattsah,6,Tue Jul 14 06:56:06 2015 UTC,"Sure, not anything that gives away secret details or some insane proprietary code, but if you have a relatively useless file that seems to get flagged, just pastebin the source and we can take a look.  Sorry it took so long to respond, apparently people don't like me around here as my subreddit Karma is -4."
PHP,3d84bq,webdeverper,2,Tue Jul 14 07:03:42 2015 UTC,"Have some upcodes, kind sir!"
PHP,3d84bq,mattsah,1 point,Wed Jul 15 03:04:20 2015 UTC,"Heh, thanks, and reciprocated as much as I know how."
PHP,3d84bq,Terreurhaas,1 point,Wed Jul 15 03:10:32 2015 UTC,"Oh, sorry. I showed it to my boss since I wasn't to keep on downloading it and he said it was infected for sure. I think he pulled down the site and is going to try and fix it tomorrow. Thanks for your help though :)"
PHP,3d84bq,Terreurhaas,1 point,Wed Jul 15 11:24:17 2015 UTC,"Backdoors are too easy to create, and can be secured against on the server itsself. I would run it in a sandboxed server if I where you. Test against all backdoors and report the results. - or maybe that's his plan all along."
PHP,3d5huy,drmyersii,2,Mon Jul 13 18:04:25 2015 UTC,Looks good. I`ll read more about it.
PHP,3d5huy,BubuX,2,Mon Jul 13 18:21:06 2015 UTC,You'll have a much easier time provisioning with puppet than bash.  Check out: PuPHPet
PHP,3d5huy,Pardalean,1 point,Mon Jul 13 18:44:29 2015 UTC,"I've been meaning to look into a new provisioner, but bash is what I know best for now. I will check it out though. Thanks!"
PHP,3d5huy,Pardalean,2,Mon Jul 13 19:54:19 2015 UTC,"I'm going to clarify this, since my comment might be a bit misleading:  Puppet is a provisioner. Puphpet, the project I linked, is a tool meant to generate Vagrant+Puppet configurations for PHP development. It's a great way to get started with vagrant and puppet, as a PHP developer."
PHP,3d5huy,singlecoilpickup,1 point,Mon Jul 13 20:20:27 2015 UTC,Oh! I feel dumb now... I just read it as puppet and didn't click the link. Sorry about that! I appreciate the clarification.
PHP,3d5huy,haydenk1337,2,Tue Jul 14 16:11:23 2015 UTC,"If you want to learn a provisioner and keep your life easy, go with Ansible instead of Puppet."
PHP,3d5huy,singlecoilpickup,1 point,Mon Jul 13 21:37:05 2015 UTC,Ansible or Saltstack. I am more familiar with Saltstack personally but they are both better than Puppet.
PHP,3d5huy,haydenk1337,1 point,Tue Jul 14 15:19:22 2015 UTC,"I haven't worked with Saltstack. I've heard it's good, but I sort of went full bore into Ansible and never looked back at Puppet again."
PHP,3d7le1,lugeli89,2,Tue Jul 14 03:30:12 2015 UTC,That'd be a welcome change in my book
PHP,3d7le1,capo64,2,Tue Jul 14 04:19:48 2015 UTC,This RFC has been posted here 9 days ago
PHP,3d7le1,bensor74,1 point,Tue Jul 14 19:18:19 2015 UTC,It looks like the RFC hasn't been touched since November. Has there been any recent activity pushing it forward? Would it be a potential candidate for PHP 7.1?
PHP,3d53pd,ehansen,3,Mon Jul 13 16:24:01 2015 UTC,"You can pass XDebug and PhpStorm configuration via environment variables in CLI like so:  XDEBUG_CONFIG=""remote_host=10.0.2.2"" PHP_IDE_CONFIG=""serverName=Your Server Name in PhpStorm"" php bin/console   You also have to map your project http://i.imgur.com/W5TxJyY.png (in this case the ""serverName"" is localhost, first input field). Once you map your project (which I assume you did since your XDebug works from browser) you're good to go."
PHP,3d53pd,GrayFox89,1 point,Mon Jul 13 17:55:04 2015 UTC,Is there a way to set a break point w/o having the code remotely on my computer (i.e.: remote editing)?  If not then hey.  I think that's the biggest hiccup I have now that you provided that.
PHP,3d53pd,GrayFox89,1 point,Mon Jul 13 17:56:48 2015 UTC,"Not sure if I understood you completely, but if you want someone to set a breakpoint on the remote machine (and for it to connect to your machine when it hits a breakpoint) they need to know what line they want to set a breakpoint on.  If that is the case and if they can edit the code remotely, they can call the function xdebug_break();on the line they want to set a breakpoint on, and then execute the code - it will connect to your machine. Example:  xdebug_break(); $foo->bar();   You can achieve pretty much anything with XDebug since it uses a documented protocol"
PHP,3d53pd,jtreminio,1 point,Tue Jul 14 20:07:35 2015 UTC,Add to your php.ini:  [XDEBUG] xdebug.remote_port=9000 xdebug.default_enable=1 xdebug.remote_connect_back=1 xdebug.remote_handler=dbgp xdebug.remote_enable=1 xdebug.remote_autostart=0 zend_extension=/usr/lib/php5/20131226/xdebug.so   Change zend_extension to location of your file.  Set this up: https://www.jetbrains.com/phpstorm/marklets/  Make sure your firewall isn't blocking the ports.
PHP,3d53pd,webdeverper,1 point,Mon Jul 13 17:32:09 2015 UTC,"The problem though is I'm not doing this through the browser, I need to be able to debug CLI scripts that don't get processed through HTTP."
PHP,3d3whm,auoehtnso,2,Mon Jul 13 09:03:53 2015 UTC,A tool like Behat (or another Cucumber variant) is designed to run tests based on English sentences - it might be a good fit for you.
PHP,3d3whm,ciaranmcnulty,1 point,Mon Jul 13 13:34:47 2015 UTC,"PHPDocumentor may be useful here, or massive overkill. If the comments are docblocks in the test files, it should be reasonably straightforward to use reflection to pull them out and then dump them into a text file somewhere. If they're inline... it's doable with the tokenizer but you really don't want to go there."
PHP,3d3whm,Firehed,1 point,Mon Jul 13 10:16:30 2015 UTC,"Have a look at Behat or maybe PhpSpec.   From your description Behat (story driven behaviour testing) is what you want. You start with a feature (a formalized story) and generate the test by that. It depends on how you implement it, but the features can be used to describe human interaction and would be a good candidate to be stored in TestLink.  In Behat 2  (Behat 3 is the current version, which I have not looked into yet) Each line of the feature is matched against regular expressions, which determine the method to call and the parameters.  We ultimately decided against Behat because those defining and those writing the tests were the same people."
PHP,3d3whm,emperorkrulos,1 point,Mon Jul 13 13:40:38 2015 UTC,Codeception allows you to write integration/acceptance/browser tests in a very readable way such that there's a command that will output the human-readable steps taken to accomplish the test.
PHP,3d3s6b,jeslopcru,1 point,Mon Jul 13 08:00:25 2015 UTC,"This looks pretty nice, I'll definitely check it out further. Most of the php Varnish libraries I've seen so far have been messy to say the least."
PHP,3d3s6b,singlecoilpickup,1 point,Mon Jul 13 21:39:56 2015 UTC,"Looks nice, thanks!"
PHP,3d16cd,florideWeakensUrWill,15,Sun Jul 12 17:45:55 2015 UTC,"Because it's a php-based config, you'll want to add it to your opcache blacklist. But having it in PHP is no more or less secure than say yaml, xml or an ini."
PHP,3d16cd,bga9,9,Sun Jul 12 18:28:36 2015 UTC,"Except if put in the web root (which it shouldn't be, but people do it anyway), where the other file types will expose the database information, while the PHP will be parsed and nothing will be output."
PHP,3d16cd,fiskfisk,37,Sun Jul 12 20:32:21 2015 UTC,"Noone has considered the actual username you've listed.  Your PHP application shouldn't, in general, require the root password. It would be much better off with a dedicated account."
PHP,3d16cd,disclosure5,7,Mon Jul 13 00:38:21 2015 UTC,"Exactly, the user you are using to connect from your web application should be a dedicated user and should only have permissions to access a single database.   And you should give it only the permissions to perform a number of operations (SELECT, INSERT, UPDATE and maybe a few more you might need).   If that user does not have to change DB schemas, no reason to give him the right to do so."
PHP,3d16cd,YugoReventlov,3,Mon Jul 13 08:25:30 2015 UTC,"Once again, this is where Wordpress sets a bad precedent. It's the first exposure to development people have, and the install guide says ""here's how to get SQL setup properly: Grant everything""."
PHP,3d16cd,disclosure5,1 point,Mon Jul 13 09:14:32 2015 UTC,"I thought Wordpress' installer would create a database + user (with only permissions to that database) specifically for that wordpress instance?  Unless you're talking about manual installation with their guide, that I have no idea about."
PHP,3d16cd,ThrowinAwayTheDay,1 point,Mon Jul 13 15:28:17 2015 UTC,The guide is essentially for people who probably are making a blog to start their writing career or something not use it as their framework.
PHP,3d16cd,sieabah,1 point,Wed Jul 15 04:14:47 2015 UTC,"Yep, every new application, create a new DB user, and ideally only write record permissions, not write tables. Obviously even better is having separate database instances for each application but that's not necessarily realistic / ideal for every situation."
PHP,3d16cd,ivosaurus,1 point,Mon Jul 13 13:16:07 2015 UTC,"Also, the root user has reserved connection slots.  So, if the MySQL server has no connections available and all of connections are using root, then the root user isn't able to log in to diagnose the issue."
PHP,3d16cd,Zal81,11,Mon Jul 13 16:11:39 2015 UTC,"Most PHP sites and frameworks do this - including Wordpress and therefore the millions of sites that it powers. So yes, it's safe as long as your PHP installation doesn't fail. Chances are if your config file is hacked, the hacker would probably have root access to your server anyway and would therefore be able to access your MySQL database from the filesystem, which is unencrypted by default AFAIK.  However, please try not to use the eval() function - if this was exploited then the DB_* constants would be obtainable. Also, make sure to prevent SQL injection :)"
PHP,3d16cd,Jamesinatr,8,Sun Jul 12 20:47:36 2015 UTC,"it's safe as long as your PHP installation doesn't fail   That is quite a big boundary condition to consider. Any change in the webserver's configuration that causes it to reset to defaults (typo in config-file, effed server update, you name it) could cause the server to serve the files as plaintext. Happens daily to thousands of servers around the world.  People still do this ... but that does not mean that it's safe by a long shot.  Couple of ways to lessen chances of being caught naked:   blacklist the config-file from being served; usually this is the first thing that breaks, but it's better than nothing store the config-file outside of your server's http-root; the ""actual"" php-files are still able to include it, but it will not be served to the clients even by accident limit the database user's privileges; if it only needs to insert and select, the user does not need privileges to update or delete, even less to create/drop table or other schema objects. The less privileges you need to give to the user, the better... this way, even if someone was to get access to the database, they still would only be able to do the things the app does don't have admin interfaces to the site/app with the same user credentials as normal users connect with (more than one user can have privileges on the same schema - take advantage of that) don't invent your own security mechanisms; use tried and tested stuff, standard crypto libraries etc. ... if you try reinventing the wheel, it easy easy to make one with wrong number of corners. Security by obscurity does not work as well as some people think - and generally is not secure at all.   Edit: list formatting fixed :-p"
PHP,3d16cd,CleverestEU,2,Sun Jul 12 23:41:42 2015 UTC,Just because Wordpress does something doesn't mean that something is probably secure: http://www.cvedetails.com/vulnerability-list/vendor_id-2337/product_id-4096/
PHP,3d16cd,Nebu,1 point,Mon Jul 13 04:37:30 2015 UTC,WordPress is probably the worst example to use in php as good programming practice...  Symfony used a yml file to represent their configuration... Laravel too.  Other ways are to use something like ansible to build it into your env var as you spin up your server.
PHP,3d16cd,random314,39,Mon Jul 13 10:29:17 2015 UTC,"It's pretty much the standard way of doing things so I personally see no problem with it, even though some people will suggest further actions (and I suppose it can't hurt to take further measures).  But if someone is able to read your config.php source code, then chances are your MySQL password is of little value because the someone has already gained significant access to your server.  The only advice I would give is to put the config.php file outside of your public web directory so if PHP stops parsing files for some reason, it can't be accessed from the web."
PHP,3d16cd,frazzlet,10,Sun Jul 12 18:50:38 2015 UTC,"As many have mentioned, it's easy to accidentally give out your database password by checking your source into version control. An added layer of security is prohibiting access to the user from a host other than the webserver. Even if someone manages to get your database password, they won't be able to connect unless they also compromise your webserver."
PHP,3d16cd,bpopp,10,Sun Jul 12 22:56:17 2015 UTC,"Also, always keep sensitive config stuff like passwords in a file that's ignored by your source control.  Get in the habit, and there won't be as many accidents."
PHP,3d16cd,cincodenada,8,Sun Jul 12 23:01:31 2015 UTC,"For example, in Laravel you can put it in the .env file(s) and ignore them.  http://laravel.com/docs/master#environment-configuration"
PHP,3d16cd,AceHarding,3,Mon Jul 13 00:07:16 2015 UTC,Or dotenv library if you don't wish to use a framework
PHP,3d16cd,synapticplastic,2,Mon Jul 13 04:31:46 2015 UTC,Just added that to a client's framework. It is incredibly easy to use - just takes minutes to integrate. Would strongly recommend.
PHP,3d16cd,judgej2,2,Mon Jul 13 08:14:17 2015 UTC,This is true and VERY VERY IMPORTANT. MySQL in default does not permit users to connect remotely unless config to do so.
PHP,3d16cd,moogeek,0,Mon Jul 13 05:25:41 2015 UTC,But you shouldn't run MySQL on the same server as your webserver.  Keep them separate.
PHP,3d16cd,rydan,1 point,Mon Jul 13 09:52:30 2015 UTC,Cluster servers you mean? Does this implementation also applies in small scale database systems?
PHP,3d16cd,moogeek,3,Mon Jul 13 11:56:17 2015 UTC,"But if someone is able to read your config.php source code, then chances are your MySQL password is of little value because the someone has already gained significant access to your server.   Not really.  There was a bug two (?) years ago where you just needed to add a certain GET parameter and you could read the PHP source of any PHP file that was running either a certain version of PHP or Apache.  Also your webadmin can very easily mess up Apache to serve your PHP files as ordinary text.  It can and does happen."
PHP,3d16cd,rydan,2,Mon Jul 13 09:51:37 2015 UTC,"Also your webadmin can very easily mess up Apache to serve your PHP files as ordinary text. It can and does happen.   IMO it is therefore a good idea is too have the bulk of the PHP code outside the webroot, without only some trivial PHP files inside the webroot which include the real source code. Specifically the PHP file containing passwords should not be under the webroot."
PHP,3d16cd,Thue,3,Mon Jul 13 10:14:39 2015 UTC,"You're fine as long as you don't commit that file to a VCS. Once it's committed it's going to be in the commit history forever (effectively) so anyone who ever gets access to your repository will be able to get that password. Even with a private repository this still opens another attack vector in that if anyone's account who has access to that repository is compromised then your database should be considered compromised.  So make sure that file is in your .gitignore or equivalent file, set it manually on each system (or with a secured provisioner), and make sure the permissions on the file are locked down."
PHP,3d16cd,trappar,2,Sun Jul 12 20:54:33 2015 UTC,"And if you have commited it to source control already; this tool is just what you need. Source: recent experience.  Edit: For Git repos, at least."
PHP,3d16cd,hamstu,8,Sun Jul 12 21:54:31 2015 UTC,"Once it is visible and public, even for a minute, I'd just change the password."
PHP,3d16cd,EvanEdwards,3,Sun Jul 12 22:56:47 2015 UTC,Very good point. In my case I hadn't yet publicized the repository anywhere.
PHP,3d16cd,hamstu,2,Sun Jul 12 23:15:49 2015 UTC,"There are bots that scan continuously for passwords and certificates, so assume it compromised in two seconds."
PHP,3d16cd,judgej2,1 point,Mon Jul 13 08:16:58 2015 UTC,"That's pretty much what I mean.  If it's up, it's assumed gone."
PHP,3d16cd,EvanEdwards,2,Mon Jul 13 08:54:16 2015 UTC,"That's honestly overkill if all you need is to remove a file like this. That tool, IIRC, is mainly useful if you want to clear out big files > X size."
PHP,3d16cd,seiyria,2,Sun Jul 12 22:32:20 2015 UTC,"Well if you're like me you had a password committed for some time so it had to be expunged from the entire commit history. That tool made it really easy... But yeah it's not absolutely necessary, you can do it manually too."
PHP,3d16cd,hamstu,7,Sun Jul 12 23:14:42 2015 UTC,Just change the damn password!
PHP,3d16cd,Disgruntled__Goat,-2,Mon Jul 13 00:51:27 2015 UTC,https://i.imgur.com/Zjwo4.jpg
PHP,3d16cd,hamstu,3,Mon Jul 13 01:56:18 2015 UTC,"If you had the password committed for some time, consider it already exposed, and just create a new password. You can leave the old password there or delete it, it doesn't matter, because the old password should not reveal any information about what the new password is."
PHP,3d16cd,Nebu,0,Mon Jul 13 04:39:43 2015 UTC,"For stuff like this I usually add the file with empty/dummy values and then run git update-index --assume-unchanged filename.extension to ignore any further changes to the file.   Typically, you want these files to be with the full project as they're pretty integral to it functioning, so ignoring them from the repo isn't a great idea."
PHP,3d16cd,CharmedDesigns,6,Sun Jul 12 22:20:51 2015 UTC,Ummmmm in case you aren't just using root as an example you should never use root in a production environment. If there is an exploitable query somewhere you may have just given up access to your entire mysql server to someone remote and that would not be good.
PHP,3d16cd,orlandodad,3,Sun Jul 12 23:05:37 2015 UTC,"it is a common practise, but it also helps if:  - the file is not cached  - the file is publically accessible  - database is not publically accessible"
PHP,3d16cd,oracle1124,3,Mon Jul 13 01:55:21 2015 UTC,"Typical practice is to put it outside of webroot, gitignore the file so it's not in your repo, and create a config.template.php containing placeholders so devs can see what settings there are for your application."
PHP,3d16cd,webdeverper,2,Sun Jul 12 21:11:55 2015 UTC,This might be an interesting read for you: http://12factor.net/config
PHP,3d16cd,jonathandart,2,Mon Jul 13 01:36:18 2015 UTC,"Many better practices, even Facebook has hosted their PHP as plaintext, and I've seen enough vulnerabilities in PHP code that let you read files from outside of the webroot to not trust putting it in a file somewhere else.  There are tools for the job, such as https://www.vaultproject.io/"
PHP,3d16cd,salmonmoose,1 point,Mon Jul 13 04:05:49 2015 UTC,"Thanks for the link. I didn't know that project. Really interesting for logins for other services.  Too bad that you'd need a virtual private server, which many people don't have.  However I don't care if somebody has my db password, because they couldn't really do much with it. The problem is that when somebody has write access or an other way to run php on servers then they automatically have the db password and can run commands on the database.  They will also be able to ask the vault about passwords... Ok, It might be a bit more difficult for them tough."
PHP,3d16cd,obou,1 point,Mon Jul 13 08:52:37 2015 UTC,"Yeah, I suppose, but at $5 a month I kind of forget people still use managed hosting."
PHP,3d16cd,salmonmoose,2,Mon Jul 13 09:13:48 2015 UTC,"I use environment variables for this type of stuff. For added security we have different credentials for our different environments (local, dev, stage and prod) so in each environment we set nginx/apache-level environment variables  You can set environment variables at the user level in the ~/.bashrc file     export MYSQL_HOST=the server name     export MYSQL_USER=mysql user name     export MYSQL_PASS=mysql password     export MYSQL_PORT=3306  But these will only be available to the currently logged in user, which is probably not the user the apache or nginx runs under.  You can set them in apache using the following  <VirtualHost hostname:80>     ...     SetEnv VARIABLE_NAME variable_value     ... </VirtualHost>   Or if you're running nginx you'll want to add the following to your .php location block  fastcgi_param MYSQL_HOST    ""localhost""; fastcgi_param MYSQL_USER  ""root""; fastcgi_param MYSQL_PASS    ""password""; fastcgi_param MYSQL_PORT  ""3306"";   then  define ('DB_USERNAME', getenv(""MYSQL_USER"")); define ('DB_PASSWORD',getenv(""MYSQL_PASS"")); define ('DB_HOST', getenv(""MYSQL_HOST"")); define('DB_NAME', 'foodDB');   Now you don't have to add conditionals to be able to deploy your config and you can safely commit the file to a public repo or put it anywhere and it contains no sensitive information.   Finally, you want to never, ever, ever, provide root credentials to any application. You should set up a general applications user with limited permissions (Usually INSERT, UPDATE, DELETE, SELECT for my prod environments) or if your application needs more (e.g. wordpress or any cms) you would create a username for the application and then give it the perms it needs for only the schema(s) it needs them on   (e.g. GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, INDEX, CREATE VIEW, SHOW VIEW to 'wp_user'@'%')   This is the practice I enforce in my department.  You can set an environment variable in apache doing something similar to below"
PHP,3d16cd,tcmccarthy,1 point,Tue Jul 14 03:45:33 2015 UTC,I like to put things like credentials in a separate config file that's read in and then referenced.  No need to worry about checking in to VCS then ( well unless you check in a config w/ creds).  Seems less likely though than making a code change and forgetting to scrub the source.  Can also make things easier when switching environments between qa/production.  Whether creds are in the source or a config file I'd say your biggest risk is doing some kind of var dump output.  Then you're screwed regardless.  To help mitigate risk try to lock down host accessibility on the db level grants if possible.
PHP,3d16cd,msiekkinen,1 point,Mon Jul 13 00:44:02 2015 UTC,"You could possibly use https://github.com/defuse/php-encryption, then generate yourself a rsa key, store that in possibly something like a protected folder, then fetch the key, and make sure to only store your password encrypted, then decrypt it with yoru key, which you never put in your code-base."
PHP,3d16cd,compubomb,2,Mon Jul 13 02:43:47 2015 UTC,"How would that work in production? I mean the key has to come from somewhere when the app is running.... I mean if the server can decrypt the php, an attacker who has write-access on the server can write php who is able to decrypt the config anyway.   I'm really curious. I guess you could do codesigning and then it would be safe, but there is no support for that from hosters or the php developers."
PHP,3d16cd,obou,1 point,Mon Jul 13 08:29:59 2015 UTC,"So putting password in cleartext is generally if you can avoid it a nono. The more steps you create that cause whoever it is trying to hack or extrapolate information from your application, the more work they have to do, the harder it becomes for them to execute. So sometimes simple obfuscation is enough to stop potential attackers, especially when they have direct access to the machine. Also consult https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet owasp is the standardization used for most pen-test companies."
PHP,3d16cd,compubomb,1 point,Mon Jul 13 08:51:13 2015 UTC,"This looks like a WordPress project unless I'm mistaken?  Back when I used to use WordPress, I tried to think of a way to get all these definitions out of the wp-config.php and into a file I could ignore with version control, and here's what I came up with  By no means a silver bullet, but if it helps you or anyone then great."
PHP,3d16cd,blamekaneda,1 point,Mon Jul 13 08:32:45 2015 UTC,"It's a necessary evil. you can't really do anything about it. I think FTP Access to the server is more dangerous. If the attacker gets write access, he'd be able to write to the DB regardless using php functions.   Don't run phpmyadmin on your server without additional security (htapasswd password prompt with a different passwort than the db user). Only give the db user access to the database of the app Don't allow remote access to the db for the user (meaning only the webserver can connect with the mysql server) Don't reuse passwords elsewhere. Don't add the config file to the repository"
PHP,3d16cd,obou,1 point,Mon Jul 13 08:39:14 2015 UTC,"Best to represent all your sensitive data and configurations as yml, out a language agnostic format and put that in git ignore. This way not only are they isolated, you can easily mock them for unit test and also share then amongst other languages."
PHP,3d16cd,random314,1 point,Mon Jul 13 10:22:42 2015 UTC,"Storing it in a PHP file is not bad in and of itself, but then you need to make sure you're not committing that php file to version control. Your sensitive credentials shouldn't live in a code repo."
PHP,3d16cd,singlecoilpickup,1 point,Mon Jul 13 21:38:26 2015 UTC,"I wouldn't do this at all.   Try to build your app so that you have an entry point (index.php) living somewhere where the webserver can access it (the public directory, htdocs, whatever it is called). Assets like css, images and js should also be there. All the code, though, should be one level below this directory. So someone, who somehow gains access to everything the webserver can see, won't be able to see your code. The structure could look like this:  +/var/www/       +-htdocs/       | +-css/       | +-js/       | +-index.php       +-MyApp/         +-controllers/         +-config/         | +-database.php         +-vendor/  A config.php like this is fine, as long as it's not included in your version control. Better use something like DotEnv. Generally, you might be able to achieve your goal faster by using a micro framework like Silex or Lumen."
PHP,3d16cd,rawfan,-1,Wed Jul 15 17:14:51 2015 UTC,"If it is in source control, then anyone can see it that has access to your source. If your server is compromised, anyone who looks at the file can have it (this is less of a concern as, if they have access to your server, you have other problems as well).  What I typically do is leave it blank and then pull in an environment variable. That way, the code functions the same from dev to stage to production and all I need to do is feed in different environment variables. This also makes it easier to put into configuration management or containerization systems (docker, ansible, etc).  Edit: How are you hosting the server? If it is a shared host then you REALLY want to consider moving to something a little more secure, such as Digital Ocean. PM me if you want a referral code for some free credits."
PHP,3d16cd,losingthefight,1 point,Sun Jul 12 17:51:17 2015 UTC,"You're always at risk when you store passwords in plain text. But if you need to, you should be using .env files instead. This should help."
PHP,3d16cd,Xanza,14,Sun Jul 12 18:36:37 2015 UTC,"Yeeeeeah, no. This is a security anti-pattern pioneered by Ruby on Rails. At least the file system has permissions. The environment is much more readable (and writable too, although it doesn't sound like the project you linked would make that a huge issue since it just puts the file in a superglobal)  That being said, if anyone has direct access to your server and therefore can get at this stuff, you're hosed either way. Truly secure methods are deeply impractical unless your project has massive scale (read: lots of on-call engineers that can input their key shard into the crypto server)"
PHP,3d16cd,Firehed,2,Sun Jul 12 19:19:19 2015 UTC,It's exactly the same as using config.php except you get a helper class that can enforce some requirements and other minor benefits.
PHP,3d16cd,movzx,1 point,Mon Jul 13 00:07:45 2015 UTC,Well no because you can actually better test your system with mock env configuration and to share your configurations with other language... I think putting all of your configuration in a .php file is an anti pattern in a high level way of looking at things.
PHP,3d16cd,random314,1 point,Mon Jul 13 10:37:41 2015 UTC,"It's easy enough to remedy that issue.  if (file_exists('config.override.php')) {     require 'config.override.php'; }   That said, I'm still a big fan of phpdotenv."
PHP,3d16cd,movzx,1 point,Mon Jul 13 16:58:34 2015 UTC,"phpdotenv keeps config values out of source control, and makes it easier to have different settings on different environments. That's its purpose, and is a great pattern for doing that."
PHP,3d16cd,judgej2,1 point,Mon Jul 13 08:27:52 2015 UTC,"Any form of pulling or storing passwords is moderately insecure. However, when compared to using version control and putting plain text passwords in a PHP file, or using .env, .env subjectively is going to be the more secure of the two options as git will not automatically stage .env files. I never said anything about parsing .env being secure in and of itself."
PHP,3d16cd,Xanza,1 point,Sun Jul 12 19:50:51 2015 UTC,"Yes, committing passwords to source control is stupid no matter what format you're using."
PHP,3d16cd,Firehed,1 point,Sun Jul 12 23:14:23 2015 UTC,Weeell yes.  It keeps your database credentials out of your revision control software.
PHP,3d16cd,AceBacker,3,Sun Jul 12 21:50:01 2015 UTC,"You're being downvoted but this is the better solution. Firehed assumed you were referring to the shell env or the Apache env. phptdotenv is no different than using yaml, ini, etc except you get an easy to use wrapper that lets you use default php functions to pull values."
PHP,3d16cd,movzx,3,Mon Jul 13 00:06:57 2015 UTC,"If you have shell you can read the environment of a process even if you can't read the PHP files in it due to lack of permissions. So, environment can be less secure, go figure."
PHP,3d16cd,Xanza,0,Sun Jul 12 19:14:52 2015 UTC,"If you have shell access it's still no less secure than storing passwords in plain text, with added advantage of being left out of repositories by default."
PHP,3d16cd,flipjargendy,-1,Sun Jul 12 19:30:24 2015 UTC,"Didn't read comments... If it is out there in public_html, then put an if statement in, at the top, that won't allow the file to be accessed directly (google search for more info)."
PHP,3d16cd,CharmedDesigns,3,Sun Jul 12 20:41:37 2015 UTC,"Even if the file is accessed directly, so long as the server parses it as PHP it won't output anything either way.   If your server is conked, there's a chance it won't be parsed as PHP and will output as plain text, but if this is the case then an if statement will do nothing to help. To avoid that issue, the file can simply be placed above/outside the web accessible root directory - though whether you have the permissions to do that will usually depend on how much you actually control the server itself."
PHP,3d16cd,DJDarkViper,-2,Sun Jul 12 22:15:58 2015 UTC,"As long as your php files cannot be retrieved in plain text in any way (ftp, wrong mime type, or God forbid an exploit) then te server will never let anyone just retrieve the in rendered version all willie nilly. Otherwise there'd be like a hundred different ways to do this differently.  That said if your still concerned and you have every right to be, look into something like IonCube, which will obfuscate your php code in a way that only ion cube can re-read   We used it at another company. I hated it but it definitely worked for its purposes"
PHP,3d16cd,DJDarkViper,1 point,Sun Jul 12 20:21:30 2015 UTC,"im curious to know why this was down voted. Guy wants to make sure that in no way can his password be uncovered if stored in a php file, and Ion Cube is designed for this exact purpose: securing away source code from prying eyes."
PHP,3d16cd,shif,1 point,Tue Jul 14 16:06:59 2015 UTC,"this is no more secure than storing it in plain text if the decryption key is on the same machine, an env file with the correct permissions should be more than enough"
PHP,3d16cd,Ob101010,-6,Sun Jul 12 18:31:07 2015 UTC,Shouldnt you salt your passwords?
PHP,3d16cd,Crashthatch,2,Sun Jul 12 18:49:32 2015 UTC,"Salting and hashing is for when you are the gatekeeper, and you are validating passwords sent by users.  In this case, OP is sending the password to the database, and needs to send it in plaintext, so it needs to be stored unhashed (and so, unsalted- the purpose of salting is to make hashes harder to break)."
PHP,3d2gyx,Danack,3,Mon Jul 13 00:10:10 2015 UTC,"Is it possible to use Zend or Doctrine Hydrators without actually using Doctrine or Zend? i.e. I want to be be able to use it to just 'hydrate' a load of data into objects, and that data won't be coming from a DB.  And if so can someone point to a project that does it so I can see what is needed to set it up?"
PHP,3d2gyx,Rican7,3,Mon Jul 13 12:31:08 2015 UTC,"Modern ORM libraries follow the DRP law (pronounced ""derp""), ""Dozen Responsibilities Principle"". They come fused together and talking about separating them is blasphemy."
PHP,3d2gyx,OzzyGiritli,1 point,Tue Jul 14 02:27:42 2015 UTC,"I really don't mean to ""pimp-out"" my own projects or anything, but it seems like you've described the intention of the creation of my project: Incoming."
PHP,3d2gyx,1nssein,1 point,Mon Jul 13 19:44:38 2015 UTC,"Thing with your library, you list features like ""filter complex input"" and so on, yet your examples don't show any of that. IMHO you should have an example where you validate, say, a simple realistic form from start to end and hydrate it to an object."
PHP,3d2gyx,htfo,2,Tue Jul 14 02:35:50 2015 UTC,I would like to release more public packages. What are some packages that do not exist or would do with a complete rewrite that I can get my hands into?
PHP,3d2gyx,nikic,1 point,Mon Jul 13 13:08:00 2015 UTC,"I setup a VM with PHP 7 to try out some of my applications this weekend, but I just realized that APCu isn't available yet (from what I can see, nobody has even started porting it over).  Most of my applications run on a single server, and thus heavily rely on APCu. What does everyone else use? Setting up Redis / Memcache seems overkill.  Edit: All my symfony projects also rely on APCu (doctrine query / metadata cache, etc)."
PHP,3d2gyx,1nssein,6,Mon Jul 13 07:03:56 2015 UTC,"Most of my applications run on a single server, and thus heavily rely on APCu. What does everyone else use?    Nothing. PHP 7 just hit beta, and moreover it shouldn't be used for production apps. For testing to make sure your app works in PHP 7, performance (at least the type of performance that APCu can help with) shouldn't be a concern and your app should have a swappable caching solution that accepts a ""no cache"" backend.  But APCu is maintained by krakjoe who is very active in PHP development and he generally moves quickly: I wouldn't bet against APCu being the first userland single-server cache to be available for PHP 7. It's really unlikely it's going to be another ""APC on PHP 5.4/5.5"" situation that necessitates jumping ship to something else."
PHP,3d2gyx,dlegatt,5,Mon Jul 13 08:46:07 2015 UTC,"/u/krakjoe has been doing a lot of PHP 7 porting work for his extensions recently, so there's a good chance he'll get around to APCu sometime soon as well :)"
PHP,3d2gyx,naroga,1 point,Mon Jul 13 11:56:26 2015 UTC,"The cache implementations are easy swappable, and I have changed it to a file system cache for now. I was just trying to get a realistic benchmark between the beta and production servers. Will wait for APCu."
PHP,3d2gyx,dlegatt,1 point,Mon Jul 13 17:13:08 2015 UTC,"I installed FOSUserBundle in my app and had to enable the translator in app/config/config.yml to get the button and field labels to work correctly. Now when I look at my pages in debug mode, i can see missing translator messages everywhere. Will this be a problem in production, or can I just ignore it? This app is an internal tool and will never need to be internationalized."
PHP,3d2gyx,naroga,1 point,Mon Jul 13 11:07:05 2015 UTC,"You have to check your 'locale' under parameters.yml and make sure that's your translator fallback. If it's not working in app_dev.php, it won't work in production. What did you configure at parameters.yml?  If you can't get (or just doesn't want to get) your translator working, just override FOSUserBundle templates and draw your buttons manually."
PHP,3d2gyx,dlegatt,1 point,Mon Jul 13 13:27:00 2015 UTC,"My locale is set fine and the translations for FOSUserBundle are working fine as well.  The problem I'm having is I didn't write translations for all of my other forms and in the profiler, I get alerts about missing messages.  I just want to know if this will cause any issues with performance or if this is something I can ignore."
PHP,3d2gyx,Jonny_Axehandle,1 point,Mon Jul 13 13:37:10 2015 UTC,"Are you using a language not supported by FOSUserBundle? I'm from Brazil, all I have to do is configure my locale to 'pt_BR' and it loads the full translation from the package, it supports most languages and shows no warnings from the translation package. Now, if you are not loading a native  translation file, I'd advice you to copy the remaining messages from another language just to suppress the warnings. I'm not sure you can specify a bundle to ignore the warnings."
PHP,3d2gyx,wesrice,1 point,Mon Jul 13 13:50:12 2015 UTC,"Translations from FOS User bundle work just fine, that is not the issue.  I have other pages with forms on them, completely unrelated to FOS User bundle, that are complaining about missing messages."
PHP,3d2gyx,Jonny_Axehandle,1 point,Mon Jul 13 13:58:11 2015 UTC,My employer currently uses shared hosting with FTP for all of our app hosting/publishing needs. I want to convince them to use PaaS. Can someone recommend a PaaS solution that's so damn easy a child could use it? I'm not dealing with experts here ;_;
PHP,3d2gyx,_GoGopher,1 point,Mon Jul 13 13:27:38 2015 UTC,"You're assuming that ""so easy a child could use it"" is your employer's top concern. And I seriously doubt it, unless your employer personally admins all your servers and feels overwhelmed by FTP. Why do you want to use PaaS? You don't need PaaS in order not to use FTP."
PHP,3d2gyx,Disgruntled__Goat,1 point,Mon Jul 13 14:09:48 2015 UTC,"Give https://serverpilot.io/ + https://www.digitalocean.com/ a look. I think it will give your employer the comfort of a GUI that they can understand, while allowing you to configure servers as needed."
PHP,3d2gyx,_GoGopher,1 point,Tue Jul 14 14:43:16 2015 UTC,Excellent! This is exactly what I needed!
PHP,3d2gyx,pmjones,1 point,Tue Jul 14 14:48:10 2015 UTC,Are there any common practices on how to get rid of helpers with static functions? I'm refactoring an old procedural project with PHP 5.2 that is using the static Utils class.
PHP,3d2gyx,puahaiduc,3,Mon Jul 13 19:11:47 2015 UTC,"Why do you need to get rid of them? Just make sure each of the methods is doing a ""static-y"" thing and not depending on state. In other words, if the method always returns the same result with the same parameters regardless of when/where it is called, it's probably fine.  For the rest, it's hard to give advice without examples. Try and find things within your code that should be objects and extract them appropriately."
PHP,3d2gyx,_GoGopher,2,Mon Jul 13 22:01:17 2015 UTC,"Thank you for your answer!  It is somebody's overnight project written in the pure procedural style, it was written for demonstration purposes only but instead became one of the core parts of the system. Now I was asked to move it to Yii2 framework and add expand it with adding some big features. I just wanted to make the code easier to understand.  For example, one of those helpers contains functions for 1) making curl query; 2) doing something with user profile (by making curl queries); 3) doing something with user profile by database SQL queries (I moved them to the model); 3) strange custom _strtolower function (seem to fix some utf8 converting bug with standard php function); 4) getting session identifier by user identifier (curl again).   Now after reading your comment I think that moving user-related things to the user model will mostly do it, while I can just leave curl and _strtolower here in the helper."
PHP,3d2gyx,SaltTM,3,Tue Jul 14 08:36:15 2015 UTC,"This is a great question; I don't think I address it in my book on Modernizing Legacy Applications in PHP, so here's an off-the-cuff idea on how to approach it:   Use your project-wide search facility to find all instances of a particular static method being called. Pick only one static method to work with at first; we want to work in baby steps here. Keep a list of the pages/scripts/files/etc that use that static method; call it Foo::bar() for the example here. Go back to the originating class (Foo), and remove the static keyword from the bar() method. Now you've broken all the code that calls what used to be a static method. Go back to your list of places that use that static method. Create an instantiation of the class ($foo = new Foo();), and convert all uses of Foo::bar() to $foo->bar(). Spot check each change of that one method, commit it, push it, notify QA. Go on to the next static method in that class and repeat the process, then go on to the next class of static methods and work one method at a time.   Obviously this will be easier if you have unit tests or characterization tests that you can run to check for breaks.  This assumes that the method does not refer to static properties as well; if it does, you have a somewhat bigger problem.  Let me know if that works for you!"
PHP,3d0584,SaraMG,5,Sun Jul 12 10:50:56 2015 UTC,"Some years ago, I was hired to work on an existing large code base which saw pretty heavy usage.  After some time studying the code, I determined that it invoked eval() at least 200 times per request.  Probably more, but the logic tree was fairly broad, and I didn't instrument it all the way out.  Long story short, six months and one complete rewrite later, we turned off half our servers, and the users got noticeably faster results.  No, none of those uses of eval were legitimate or helpful in any way.  All they did was make the product slow and insecure."
PHP,3d0584,SpiffyJr,66,Mon Jul 13 23:23:03 2015 UTC,I like to eval query params so that any user can extend my code.
PHP,3d0584,Sarcasm_Oblivious,36,Sun Jul 12 12:49:00 2015 UTC,That's one of the most stupid things you can do. Why would you allow users to run their own code on your server without any form of escaping? Do you realize what a huge security risk that is?
PHP,3d0584,sekjun9878,23,Sun Jul 12 15:44:10 2015 UTC,Username is relevant if anyone missed it
PHP,3d0584,NatNoBrains,8,Sun Jul 12 15:46:15 2015 UTC,Was about to downvote...
PHP,3d0584,sonofashoe,1 point,Sun Jul 12 16:11:41 2015 UTC,Still not a particularly helpful reply.
PHP,3d0584,Pardalean,1 point,Sun Jul 12 17:43:45 2015 UTC,It warns those who are oblivious to sarcasm.
PHP,3d0584,immibis,3,Mon Jul 13 15:02:11 2015 UTC,Why would you allow users to run their own code on your server without any form of escaping?   Good point. I only allow my users to run fully escaped code on my server.
PHP,3d0584,BoringCode,5,Mon Jul 13 09:19:27 2015 UTC,"I realize this is a case of Poe's Law, but he is pretty obviously being sarcastic."
PHP,3d0584,sekjun9878,4,Sun Jul 12 15:59:57 2015 UTC,"> ""I like to eval query params""  > extremism  Yep"
PHP,3d0584,meadsteve,1 point,Sun Jul 12 16:00:57 2015 UTC,what kind of monster are you? This is a security hole. You should only eval variables names $DONT_HAXZORS me. That way your users know to only use the extension points for good.
PHP,3d0584,sarciszewski,1 point,Sun Jul 12 16:25:09 2015 UTC,This was the funniest thing I've read in a while. Well done.
PHP,3d0584,ionutbajescu,1 point,Sun Jul 12 18:37:13 2015 UTC,"We just found the real ""open"" source."
PHP,3d0584,kosinix,3,Sun Jul 12 22:23:19 2015 UTC,For API documentation with code examples. When you need to show and run the code at the same time.
PHP,3d0584,talkshitontheweb,7,Mon Jul 13 10:33:07 2015 UTC,Used to use it for math based input e.g. (5+3*(3-1)) or with variables by replacing variables with their number counterparts first.
PHP,3d0584,malkusch,24,Mon Jul 13 04:44:38 2015 UTC,Used to use it for math based input e.g. (5+3*(3-1))   Could you please give a URL where you are using such a script? I'd like to try it.
PHP,3d0584,xsanisty,18,Sun Jul 12 14:25:23 2015 UTC,ಠ_ಠ
PHP,3d0584,jared555,5,Sun Jul 12 14:27:20 2015 UTC,Used to use it for math based input e.g. (5+3*(3-1)) or with variables by replacing variables with their number counterparts first.   I see what will you do there
PHP,3d0584,gratefuldaed,3,Sun Jul 12 14:29:03 2015 UTC,I can see it not ending horrifically with proper verification/sanitation but I still wouldn't want to try it.
PHP,3d0584,rmas,-1,Sun Jul 12 15:02:09 2015 UTC,Use tokenization
PHP,3d0584,milki_,2,Mon Jul 13 03:23:59 2015 UTC,"A long time ago, I used to have a templating system that did something like:  <?php  class Template {     private $vars = [];     private $template;     public function __construct($tpl) { $this->template = $tpl; }     public function offsetSet($key, $value) { $this->vars[$key] = $value; }      public function __toString() {         // Do some bad regex conversion of twig/smarty-ish to PHP          // Extract the scope vars to local variables         extract($this->vars);          // I forget the exact ordering of this, but it used to allow nested         // Templates as well by putting stuff back in the buffer         ob_clean();         eval($this->template);         $tpl = ob_get_clean();         return $tpl;     } }   Eventually I 'upgraded' to including the template directly, still pretty bad. Felt rather clever building a poor-man's Smarty in a single class though :-)"
PHP,3d0584,freebytes,5,Mon Jul 13 17:11:07 2015 UTC,"Firstly eval() is really nothing more than include() without files. So of course various templating tasks naturally lend itself to it. As usual, context is important, but eval occasionally simplifies or adds robustness even.   The most common use case are expression evaluations of course. While sure you can write a micro tokenizer and a wee recursion to calculate things, a simple preg_replace(""~^[\d\-+*/%]+$~e"" is often enough. (Now you do actually need eval since /e got canned [still for valid reasons, IMO]. A recursive ?Regexp for whitelisting some math funcs is a bit more work. But it's still less than the 30-50 lines of manual iteration or a S-Y transform.) Same goes for the typical dot.notation.ini-style extractors with double loops and reference-y array collecting. After writing the 10th variation you should really ask yourself if a simple regex rewrite and eval wouldn't fit the bill rather. (Such ini-files practically amount to code anyway, despite the configuration file look and feel.) Development-time templating. Now not as relevant or fascinating. But for instance I use macros like ->query(SQL@(SELECT :$cols FROM tbl WHERE x=$x AND y IN (?$y) OR so)) for e.g. autoparameterization. Which just happens to be #defined as inline eval rewriting callback.   Anyway, looking at Python examples or typical JavaScript uses help to overcome some of the stigma, or recognize realistic patterns. (Btw, ""Xyz is evil"" are often very well-intentioned noob memes. It's just that such shallow advise doesn't really educate about the when's and why's. And intermediate coders rarely unlearn the indifference.)"
PHP,3d0584,jared555,7,Mon Jul 13 10:27:29 2015 UTC,"I would prefer people to continue using ""Xyz is evil"" when talking to newbies.  When the time comes for eval to make itself useful (when they are more experienced), those individuals will hopefully have reached a point where they can more carefully evaluate the risks."
PHP,3d0584,freebytes,2,Sun Jul 12 15:54:41 2015 UTC,Sort of like 'goto is evil' with languages that support it.  Occasionally it makes code drastically simpler/easier to read but it is rare enough that by the time you actually need it you probably already know all the reasons not to normally use it.
PHP,3d0584,malkusch,3,Sun Jul 12 17:18:53 2015 UTC,"I remember switching from GWBASIC to QBASIC, and the person showing it off to me explained that GOTO is not used anymore.  I was baffled.  I said, ""How do you write a program without using GOTO at all!?""  Even though I had used the same techniques in little games I made in GWBASIC, I had never considered the concept of completely doing away with line numbers."
PHP,3d0584,knezmilos13,3,Mon Jul 13 03:33:17 2015 UTC,"Generating mocks, stubs, proxies   This is actually something everybody of us is doing, given us is the set of PHPUnit's getMock() users."
PHP,3d0584,Danack,3,Mon Jul 13 12:48:42 2015 UTC,"I'm, of course, not claiming exclusivity on any of those. Since it's hidden in a library, many don't realize eval() is what makes mocks in PHP possible. So I thought I'd include it."
PHP,3d0584,redeemer_pl,5,Sun Jul 12 11:45:26 2015 UTC,"I have nothing to contribute to this discussion, but I am interested to learn more. I know of eval(), but never had reason to use it. If you have some additional links on this topic, I would like to check them out."
PHP,3d0584,erp-expert,2,Sun Jul 12 11:54:54 2015 UTC,"I can't think of links, but if you have any questions, I can try to answer."
PHP,3d0584,ower95,3,Sun Jul 12 12:30:40 2015 UTC,"Optimizing complex computations by creating a specialized function based on runtime-known conditions (best used for long-running processes and not within request-response context).   It's not just to make code faster, you can use it to make stuff easier to read.  I have a library (that I'm not going to share for other reasons that just the eval) where it allows you to query Yaml by SQL like syntax.  i.e. it allows you to do:  $queryBuilder->where('fooFieldName like 'bar%'"");   by converting it to a preg_match and evaling the code. Being able to write code in a 'DSL' that is easier to maintain than the actual functions needed to implement can be very nice."
PHP,3d0584,sarciszewski,2,Sun Jul 12 13:27:36 2015 UTC,Interesting point. Essentially runtime macros.
PHP,3d0584,sarciszewski,2,Sun Jul 12 14:37:50 2015 UTC,Exploiting
PHP,3d0584,YugoReventlov,1 point,Sun Jul 12 14:41:35 2015 UTC,Long long back when I used to use Drupal 4 (stopped using this product for many years) it was using eval for PHP blocks.  Not sure if they still follow the same but I guess that was not harmful.
PHP,3d0584,SaraMG,1 point,Sun Jul 12 12:47:15 2015 UTC,"About a week ago, I saw interesting use of eval in this video: https://youtu.be/8WUcfUU_r4g?t=5m23s  I think that what he said would be applicable in PHP too."
PHP,3d0584,sarciszewski,0,Tue Jul 14 09:03:15 2015 UTC,"You can use it to build an SPL autoloader that reads from Memcached rather than the filesystem. (On a cache-miss, read from the filesystem of course.)"
PHP,3d0584,invisibo,3,Tue Jul 14 10:34:21 2015 UTC,"Neat idea. But you're still parsing the code from memcache. Opcode caching is essentially what you describe, but it caches opcodes (parsed code) to avoid the extra work."
PHP,3d0584,invisibo,2,Sun Jul 12 22:11:08 2015 UTC,Well. There goes the only use case I could think of. :P
PHP,3d0584,d2xdy2,2,Sun Jul 12 23:12:06 2015 UTC,Well that's cause I listed all use cases up there so I can look smart :P Sorry.  But it's still a neat idea. In general I think people don't use autoloaders creatively enough. No one says one has just to load files there. So many crazy stuff we can do in an autoloader (and for good reasons too).
PHP,3d0584,noydoc,1 point,Sun Jul 12 23:36:11 2015 UTC,"I'm of the belief that if you call it the ""autoloader"" it should do nothing but autoload.  If you need magic to appear somewhere in your code, make sure you include a ""magicgenerator"". This will help developers who inherit your work to not go crazy because of all the autoloader magic."
PHP,3d0584,_RPM,1 point,Sun Jul 12 23:46:38 2015 UTC,"Java has a similar concept called ClassLoader, and people do actually use it for a lot more than finding .class files on disk. To quote Java's documentation:   The class ClassLoader is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a ""class file"" of that name from a file system.   Emphasis mine. typically loading files, but not only. Maps  ""Loading"" in both cases refers to loading classes in the PHP runtime, not for loading PHP source from disk. Nothing in the autoload() interface suggests you need to use a file, or it'd have an interface more like:  function autoloader($class) { return $phpFilePathname; }   When you need to compile a non-PHP file to PHP (templates, configuration, meta files, DSL files etc.) you can go for a dedicated mechanism where you explicitly load it, but I think that's both more effort and a wasted opportunity to just use a class and see it happen automatically through the loader.  It's not that scary and confusing if used wisely, though I'm sure one can overdo it. Say, it's not confusing when you double-click a file in your OS and the default app opens it. It's also not confusing that your server doesn't interpret PHP code in foo.txt but it does in foo.php. You can do the same sort of type discrimination and link it to a compiler for autoload()."
PHP,3d0584,SanderMarechal,1 point,Mon Jul 13 08:50:11 2015 UTC,This comment just gave me a seizure.
PHP,3d0584,SanderMarechal,0,Mon Jul 13 11:44:32 2015 UTC,:(
PHP,3d0584,freebytes,1 point,Mon Jul 13 23:07:23 2015 UTC,"There's an eval that crunches a big portion of my work's webapp. It's used in conjunction with an autoloader where classes get instantiated out of thin air. The developer that wrote it left a year before I got there. No clue how he came up with that one, but it's pretty clever."
PHP,3d0584,phpisdead,2,Mon Jul 13 23:12:09 2015 UTC,"What kind of needs do those classes fulfill? I have a similar system, which compiles classes on demand from the autoloader (either from non-PHP sources, or parametrically), and curious to hear how people use this. Mine saves the files, but that's a detail."
PHP,3d0584,sarciszewski,1 point,Sun Jul 12 14:46:07 2015 UTC,It's used as a database ORM for the backend.
PHP,3d2s8b,overcloseness,2,Mon Jul 13 01:48:07 2015 UTC,PHP Academy. Many projects here from start to finish. They just posted an eight-part series on building a basic CMS.
PHP,3d2s8b,aromas,1 point,Mon Jul 13 06:41:47 2015 UTC,Brilliant!! Thanks so much
PHP,3d2s8b,blaize9,2,Mon Jul 13 06:58:32 2015 UTC,"I heard some good things about lynda.com's  PHP with MySQL Essential Training & PHP for Web Designers These are step by step videos that should help you a lot with the process.  The ones I linked to you are for beginners, but if you plan to go more in-depth with PHP most of their PHP videos are for intermediate users.   Edit: I took a look at the codeproject link you posted and the explanation/thought process is not really there, try to look around for videos or step by step interactive process and not ""posts""."
PHP,3d21bp,techblogin,2,Sun Jul 12 21:59:43 2015 UTC,"Always glad to see more  Yii stuff in /r/php.  Scenarios are very powerful, I use a similar system for validation between roles, my base api controller will prefix the scenario with ""admin"".  So an admin can update a field on a record that a normal user cant, all while using the same api endpoint.  Also scenarios where in Yii 1 as well http://www.yiiframework.com/wiki/266/understanding-scenarios/ and I make heavy use of them in a Yii1 app I maintain.   Edit: I know its kinda dead but you should cross post this to /r/yii"
PHP,3d1mo5,Alphapixels,6,Sun Jul 12 19:59:15 2015 UTC,Another framework that has no comments or docblocks. What's up with that?
PHP,3d1mo5,bga9,1 point,Sun Jul 12 20:03:43 2015 UTC,"I do give you that point. I checked out their source and they definitely need to document it. However, the code you make with the framework is pretty darn elegant. Also, for a new framework, the docs are pretty amazing. I've tried other frameworks like Fuel and never got to use them because of the really lacking documentation. Fuel was a pretty huge mess with the lack of tutorials available... Most are from 2011."
PHP,3d1mo5,relyon,2,Sun Jul 12 20:06:43 2015 UTC,"So we're talking about a framework which has one central database (can't add a second one that I see), and it uses phrases like ""no more awkward sql"". Pretty much speaks for itself.   I mean, I'm sure it's great for little sites and so on. But... yeah."
PHP,3d1mo5,mrjking,1 point,Mon Jul 13 00:10:16 2015 UTC,"It does have more database systems, while installing the scaffolding it does ask which one you want. I don't remember which ones they were though."
PHP,3d1mo5,GundamWang,2,Mon Jul 13 00:23:23 2015 UTC,"My point is having multiple databases in the same app.  If it asks which ""one"" to use, then you need to pick one to use at a time."
PHP,3d1mo5,sekjun9878,0,Mon Jul 13 00:27:53 2015 UTC,"Ah, in that case I really don't know since I just started using it today to build some playground apps."
PHP,3d1mo5,ciaranmcnulty,2,Mon Jul 13 00:30:30 2015 UTC,"Not to be an ass, but:  1) Why should I use this instead of i.e. Laravel or Symfony? 2) The documentation is bad. Just look at the Routing-part.  Am I the only one or is Alphapixels just trying to self-promote his framework by claiming it's awesome from a ""different perspective""?"
PHP,3d1mo5,chris_a6software,2,Sun Jul 12 20:32:39 2015 UTC,"I wouldn't say the documentation is bad, at least it's there, I know plenty of projects that just say ""Documentation: See source code."". It doesn't have as much examples as I would like, but at least the search works and it seems logically broken apart (Search doesn't even work in Doctrine).   It's always nice to have alternatives, this looks like a nice alternative to Laravel."
PHP,3d1mo5,creatiff,0,Sun Jul 12 23:16:11 2015 UTC,I don't own a framework. I have nothing to do with it. I just literally started using it.  https://github.com/Alphapixels https://github.com/Rhyre https://github.com/Mxious
PHP,3d1mo5,rafamds,1 point,Sun Jul 12 20:45:42 2015 UTC,"I don't know. It's about personal preference, and I saw this and liked it, seems new which means it could be innovative and add good ideas someday. The documentation is better than some frameworks that have been years at the same thing, and have shit docs. At least I like it. Setup is pretty straightforward. I'm coming from a CI background to modernize my habits, and I hated Laravel's file structure, found this and liked it."
PHP,3d1mo5,Pardalean,1 point,Sun Jul 12 20:49:35 2015 UTC,"Number 1 is a bad reason in general to adopt a new framework. At least have a reason why you like it. And failing that, a list of what it has that existing frameworks don't.  I suppose you did give two minor reasons. Except I'm not sure what wasn't straightforward enough with either Laravel or Symfony installation. You can install Laravel with literally one line in your CLI. That, and both of their file structures are pretty typical of MVC frameworks. Documentation for both could certainly be better, but it's not terrible, and based on how many people use both and my own experiences, the documentation is good enough to build production quality products.  edit: Also, the fact that someone is downvoted for asking questions that every developer would ask is really suspicious."
PHP,3d1mo5,datorndata,1 point,Sun Jul 12 23:09:15 2015 UTC,"I downvoted because of this bit: ""Am I the only one or is Alphapixels just trying to self-promote his framework by claiming it's awesome from a ""different perspective""?"" No, I am not affiliated to whoever made this framework. And I only mentioned Lara in file structure, not in installation nor docs. I love Laravel. I just don't like how the framework logic is all mixed with app logic.  And are you telling me personal preference is a bad reason to adopt a framework? If so, ditch your current framework if you have one and code in the one you dislike most, please.  I just liked this framework, thought it didn't have much exposure, and said ""hey, this is cool, let me share this with the php community"". If sharing knowledge is wrong, tell me about it.  I'm an avid Fuel user. Took some time to learn, but it's worth it."
PHP,3cycu8,alexohno,13,Sat Jul 11 22:04:57 2015 UTC,Modern PHP.
PHP,3cycu8,Personality2of5,1 point,Sat Jul 11 23:06:33 2015 UTC,"This book is fantastic. OP, go with this. Don't let your codebase become a sprawling mess of php scripts."
PHP,3cycu8,Mike724,1 point,Sun Jul 12 05:26:39 2015 UTC,"I don't think that the Modern PHP is a good book to start with PHP, maybe, check for the documentation or some getting started articles (try to get the most recently that you found), after it, get some books about project and design patterns such as Modern PHP."
PHP,3cycu8,devsdmf,6,Sun Jul 12 15:32:18 2015 UTC,"PHP Objects, Patterns, and Practice"
PHP,3cycu8,AnarchistPrick,2,Sat Jul 11 22:31:44 2015 UTC,I've read many PHP books and this is far and away the best.
PHP,3cycu8,jrcii,3,Sat Jul 11 23:55:39 2015 UTC,"Two great books have already been mentioned.   Modern PHP PHP Objects, Patterns, and Practices   I've got them both on my bookshelf and I learned quite a lot from them, particularly the Modern PHP book due to it being quite short and to the point, you can pick up a lot of useful things from it in a short timeframe.  The other one is more beefy and verbose, it has a lot of examples and theory packed in there, It's not a book I have read all the way through yet, but what I have read, is very useful stuff, it does a good job explaining how to work with objects effectively, design patterns and the like.  I read through Modern PHP in one sitting, and its very easy-reading in its writing style, it's more ""personal"" and feels like the author (Josh Lockhart) is speaking directly to you, which I appreciate in a book."
PHP,3cycu8,TheHelgeSverre,1 point,Sun Jul 12 14:43:59 2015 UTC,PHP Beyond the Web - but I may be biased.
PHP,3cxwo4,OzzyGiritli,3,Sat Jul 11 19:41:19 2015 UTC,code coloring in github README
PHP,3cxwo4,darkhorn,3,Sat Jul 11 20:32:28 2015 UTC,"Thank you, I have added php syntax highlighting to the readme file :)"
PHP,3cxwo4,Zhmoopz,2,Sat Jul 11 20:37:08 2015 UTC,"This is interesting, although I find the idea of instantiating contracts a bit confusing semantically, ie: new AccountContract() vs new Account()."
PHP,3cxwo4,panzerborn,2,Sat Jul 11 21:45:22 2015 UTC,I would assume the classes are named that way to distinguish between which one is the class using the trait. Thats what i understood from the readme. A normal usecase wpuld probably be the non contracted class being an abstract and the contract class named semantically.
PHP,3cxwo4,johnathanmdell,1 point,Sun Jul 12 00:26:38 2015 UTC,Pretty much this. Ideally the contracted class would be used in place of the original class so it would be named semantically. However another use case would be to inject it in place of existing semantically named classes so adding Contract at the end would also make sense.
PHP,3cxwo4,not-much,2,Mon Jul 13 10:50:09 2015 UTC,"Good job, keep it up."
PHP,3cxwo4,haveacigaro,1 point,Sun Jul 12 13:30:46 2015 UTC,"Thank you, I will do my best :)"
PHP,3cxwo4,haveacigaro,2,Mon Jul 13 10:46:15 2015 UTC,"Very good job, but let me ask a question.  Isn't the call to the enforce method a little bit redundant? Is it there because of some reason or you just didn't find a way to avoid it?"
PHP,3cxwo4,pitiless,1 point,Sun Jul 12 20:19:10 2015 UTC,"Ideally the enforce method wouldn't need to exist but it has to be there. You can define many requires and ensures within a method. At which point do you execute the contracts? At the last ensures? if so how do you tell that it is the last ensures. what happens when there are no ensures and only requires? or the other way round?  Enforce is the only way to tie everything together and create a single point of execution which returns the original method's result, hence you always return the result of $this->enforce();"
PHP,3cxwo4,teuna,2,Mon Jul 13 10:45:56 2015 UTC,"Maybe I'm being dense, but in:  $trace = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT, 2 + !!$isClone);   Why are you doing the double negative on isClone?"
PHP,3cxwo4,mikedelfino,5,Sat Jul 11 22:42:43 2015 UTC,"He's casting to boolean, then it gets cast to int 0 or 1, so the expression result is 2 or 3 depending on $isClone.  Pretty normal code if you ask me. All my code is like this. All my code."
PHP,3cxwo4,mikedelfino,1 point,Sat Jul 11 22:49:17 2015 UTC,"I figured that was probably it, but why would that be preferable over just (bool) $isClone? Just shorthand?"
PHP,3cxwo4,panzerborn,6,Sat Jul 11 23:01:36 2015 UTC,It's a shorthand... to cool.   (⌐■_■)
PHP,3cxzyc,joshdifabio,3,Sat Jul 11 20:10:14 2015 UTC,What use case is there for this?
PHP,3cxzyc,physics4life,2,Sat Jul 11 21:20:12 2015 UTC,"Thanks for asking :)  Imagine your application defines some kind of contract, for example a module contract, which has many implementations. One approach to locating these implementations would be to reference them directly in your application's bootstrap. Another approach would be to specify some configuration in the 'extra' part of the composer.json files belonging to your module implementations, and parse that configuration from your application.  composer.json belonging to a package containing a module implementation:  ""name"": ""myco/my-module"", ""extra"": {     ""module-paths"": {         ""MyModule"": """" // path to the module from the package root     } }   composer.json belonging to a package containing two more module implementations:  ""name"": ""myco/suite-of-modules"", ""extra"": {     ""module-paths"": {         ""OtherModule"": ""module"", // path to one module         ""AnotherModule"": ""module2"" // path to another module     } }   Application code for locating module implementations:  $moduleDirPaths = [];     $relativeModulePaths = ComposerUtils\package_configs(['extra', 'module-paths']); foreach ($modulePaths as $packageName => $_relativeModulePaths) {     $package = ComposerUtils\package($packageName);     foreach ($_relativeModulePaths as $moduleName => $relativePath) {         $moduleDirPaths[$moduleName] = $package->getPath($relativePath);     } }  return $moduleDirPaths;   Any kind of application config could be specified in packages this way.  Another use case for Composer Utils might be to help you work out why some downstream package is being included in your project.  $requires = ComposerUtils\package_configs(['require', 'some/package']); // some/package is required by the following two packages assert($requires === [     'some/package1' => '~1.0',     'some/package2' => '~1.1', ]);"
PHP,3cxzyc,steven19782012,1 point,Sat Jul 11 21:53:06 2015 UTC,Wouldn't it be easier to just put the config somewhere else?
PHP,3cw3bp,sam_dark,5,Sat Jul 11 06:58:14 2015 UTC,I didn't know Yii does manual file resolution like a PHP4 framework. Reminds of Code Igniter.
PHP,3cw3bp,dracony,1 point,Sat Jul 11 15:05:30 2015 UTC,"It is not ""manual"" =)))  Manual would be if it asked you to provide a file path to each class it needs in a small popup =)"
PHP,3cu9o8,theodorejb,27,Fri Jul 10 20:48:45 2015 UTC,"For people who grabbed the code from the /r/PHP post on Tuesday: please note that several commits went in after that post and the release was re-tagged, so you'll want to grab the code and build it anew.  This is why we tell people to wait for the actual announcement. :)"
PHP,3cu9o8,LawnGnome,5,Sat Jul 11 00:02:00 2015 UTC,"Yes ... basically we discovered, once again, that finally is a major PITA and we have to revert our new liveliness-analysis pass that was supposed to fix edge-case memory leaks during exception handling."
PHP,3cu9o8,nikic,8,Sat Jul 11 11:59:33 2015 UTC,Whoever put together the Homebrew packages already - Thank You.  edit: I've been on this site for 6 years now?
PHP,3cu9o8,jgrubb,2,Sat Jul 11 02:32:35 2015 UTC,happy bday
PHP,3cu9o8,radialmonster,2,Sat Jul 11 04:00:40 2015 UTC,wow declarations. fatal errors are exceptions. i like this.
PHP,3cx9g5,dracony,3,Sat Jul 11 16:19:23 2015 UTC,You should really post a writeup on the README on the structure and overall architecture. I browsed around a bit and  I really don't know what I'm looking at.
PHP,3cx9g5,gimmethrowaway,1 point,Sat Jul 11 20:16:31 2015 UTC,"I will write one =)  Try starting from this place, which acts as as ort of controller: https://github.com/PHPixie/Demo-Todo/blob/master/bundles/app/src/Project/App/HTTPProcessors/Tracker/Project.php"
PHP,3cx9g5,Xanza,2,Sat Jul 11 20:29:44 2015 UTC,"This is a simple Todo example implemented in PHPixie v3. The important part you shuld be intesrested the most in i the /bundles/app folder.  I'll gladly answer any questions you might have =) Keep in mind though that this is just the ""default bundle"" approach. There are multiple ways you couldd structure your project so the architecture is entirely up to you =)"
PHP,3csgv5,AllenJB83,4,Fri Jul 10 12:13:39 2015 UTC,We use Sentry (https://getsentry.com/). It's open source so you can host it yourself but you can also pay for a hosted version.
PHP,3csgv5,Tomdarkness,1 point,Fri Jul 10 14:25:06 2015 UTC,This. Sentry is a great product.
PHP,3csgv5,gearvOsh,2,Fri Jul 10 18:08:09 2015 UTC,"You could go for a chatops solution, sending errors to (for example) Slack.com using Monolog. Works wonders in our small startup!   Edit: proper markup."
PHP,3csgv5,BasHdlB,1 point,Fri Jul 10 20:12:07 2015 UTC,"We want to implement this solution too, stream all errors directly to a chat channel. What are the gotchas?"
PHP,3csgv5,Revisor007,2,Fri Jul 10 22:41:23 2015 UTC,"Right now, as far as we can tell, none. Except of course if their site goes down and because of that your own site will be slow to load because PHP is not multi-threaded. However, we think it's fair to assume that their uptime will be much better than ours.   If this is a real issue than maybe you should build some safeties into your code, but currently it really works like a charm for us. In the end, if you want to be really sure, testing will give you the only metrics you should go by.   So, assume they can fail, program for that, and you will be okay."
PHP,3csgv5,BasHdlB,1 point,Sat Jul 11 01:03:58 2015 UTC,"You're looking for something like https://airbrake.io/  Some hosted VCS services offer exception catching/tracking solutions too, such as codebasehq.com  A quick Google reveals an open source alternative, however I would ask, why is it that you think your own hosted error handling service would be more reliable than a third party who specialises in it?"
PHP,3csgv5,adamn90,1 point,Fri Jul 10 13:25:31 2015 UTC,"Graylog seems a nice solution for that. It's open source and it has alerting built in https://www.graylog.org/  If you have some money to spend, then maybe using Loggly (https://www.loggly.com/) would be simpler"
PHP,3csgv5,agopaul,1 point,Fri Jul 10 14:32:00 2015 UTC,Can't you just setup Kibana + Logstash? A nice example here. https://www.digitalocean.com/community/tutorials/how-to-use-logstash-and-kibana-to-centralize-logs-on-centos-6
PHP,3csgv5,napolux,1 point,Fri Jul 10 14:35:15 2015 UTC,"I use Monolog + handlers depending on the context.  For production environment these handlers include Newrelic, and newrelic in turn might be configured to send me alerts for more than X app errors in a timeframe as well as other conditions such as CPU usage, free space on HDD, etc. The alerts might come through email, hipchat, slack and others.  For dev environment I'm using PHP-Console handler, which sends errors and debug messages to the browser's console.   Every environment also has a Streamhandler appending data to the application's php error log. This way I have one place to check for application errors as well as errors from php-fpm. Some times, like when you forget to update your composer dependencies, the error will happen before the app has time to instance Monolog, so no matter what handler you use, you'll end up checking for the php error log sooner or later. You can have this log checked in an online dashboard like the ones mentioned in these comments. I'm also used LogEntries for this purpose."
PHP,3csgv5,amenadiel,1 point,Sat Jul 11 21:33:30 2015 UTC,Elasticsearch
PHP,3csc7x,LeoG7,12,Fri Jul 10 11:16:37 2015 UTC,"You can use Symfony's Translator component outside of a Symfony project. It supports all of the formats you need - YAML, XLIFF (XML) and JSON. Those files can be committed to version control."
PHP,3csc7x,rmas,1 point,Fri Jul 10 14:38:51 2015 UTC,thx will check it out
PHP,3csc7x,emperorkrulos,3,Fri Jul 10 15:02:43 2015 UTC,"What are you trying to achieve?   I'm not sure, but maybe xliff is what you're looking for?"
PHP,3csc7x,autowikibot,1 point,Fri Jul 10 13:17:58 2015 UTC,"XLIFF:       Unrecognized parameters: 'amp;ved', 'amp;usg', 'amp;sig2'  XLIFF (XML Localisation Interchange File Format) is an XML-based format created to standardize the way localizable data are passed between tools during a localization process. XLIFF was standardized by OASIS in 2002. Its current specification is v2.0  released on 2014-08-05.  The specification is aimed at the localization industry. It specifies elements and attributes to store content extracted from various original file formats and its corresponding translation.     Relevant: Open Language Tools | Computer-assisted translation | Service-Oriented Localisation Architecture Solution | Translate Toolkit   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
PHP,3csc7x,Disgruntled__Goat,1 point,Fri Jul 10 13:18:43 2015 UTC,"I want to translate the content of my system and I need a software for that to which I export my content like say a message and have a translator login and translate and then I push the message back to my system via xml, let me know if you need more info"
PHP,3csc7x,recursivelymade,3,Fri Jul 10 14:13:51 2015 UTC,You might find Transifex suits your needs. It's SaaS but I think they have an API.
PHP,3csc7x,prodigitalson,2,Fri Jul 10 16:09:53 2015 UTC,I'd use Pootle to manage the content. Make sure the content is base in XLIFF and you can export/import pretty easily.
PHP,3csc7x,prodigitalson,1 point,Fri Jul 10 20:24:46 2015 UTC,"Do you mean literal language translations, or are you talking about data transformation?"
PHP,3csg8j,_query,2,Fri Jul 10 12:06:22 2015 UTC,Do you have any input on why to use this over existing solutions such as https://github.com/myclabs/php-enum  Related note: I really hope this happens with 7.1
PHP,3csg8j,adamn90,1 point,Fri Jul 10 13:28:06 2015 UTC,"Do you have any input on why to use this over existing solutions such as https://github.com/myclabs/php-enum   It's very similar but using magic methods is causing problems in large code bases. So not providing magic methods is a better solution when you need it. For smaller projects myclabs/php-enum works great, I guess! :)   Related note: I really hope this happens with 7.1   Me too :) This would be very awesome."
PHP,3csg8j,mnapoli,2,Fri Jul 10 13:59:38 2015 UTC,You can write the methods too (to avoid going through the magic methods). The magic methods are only meant as a simpler alternative but aren't mandatory (per the readme).
PHP,3cro4e,new2100,3,Fri Jul 10 05:49:25 2015 UTC,https://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2) You can distribute derivative and sell it as long as you include instructions to get the original and disclose the list of your modifications.
PHP,3cro4e,Meroje,2,Fri Jul 10 06:07:46 2015 UTC,Thanks.. It was really simple & precise
PHP,3cro4e,mattsah,1 point,Fri Jul 10 06:42:56 2015 UTC,"The MPL2.0 describes itself as copyleft, generally this means that you cannot sublicense.  It sounds roughly similar to the LGPL in that you can combine it, but the code itself which you've modified would need to be released, modifiable, etc to any party you distribute to for them to do with what they please."
PHP,3cro4e,mattsah,1 point,Fri Jul 10 06:09:34 2015 UTC,Thanks So I am fine if I rename the product and sell it with a new name
PHP,3cro4e,gripejones,2,Fri Jul 10 06:20:42 2015 UTC,"You'll probably want to take a look at the link that Meroje provided, it's a much better summary.  But yes, in short, you can, but you're still obligated to provide the original.  It also appears, based on that link that you can indeed sublicense... now I'm not even sure why they call it copyleft."
PHP,3cro4e,mattsah,1 point,Fri Jul 10 06:31:11 2015 UTC,"Looks like the sub-licenses (secondary licenses?) are limited:     1.12. “Secondary License” means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.    But it also says this:    3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).    So I don't know.. f***ing legal speak."
PHP,3cp2qp,nlscrub,7,Thu Jul 9 17:07:02 2015 UTC,For CSS: https://google.github.io/styleguide/htmlcssguide.xml For Javascript: http://google.github.io/styleguide/javascriptguide.xml
PHP,3cp2qp,bga9,8,Thu Jul 9 17:27:27 2015 UTC,"I use these too, but I keep indentations at 4 spaces instead of 2, because it's annoying to have multiple indentation standards on a project."
PHP,3cp2qp,spacechimp,5,Thu Jul 9 17:52:53 2015 UTC,Same. I definitely prefer 4 spaces anyway.
PHP,3cp2qp,bga9,2,Thu Jul 9 20:14:38 2015 UTC,I'll use tabs.
PHP,3cp2qp,darkhorn,1 point,Fri Jul 10 15:41:14 2015 UTC,This is great thanks! I'll be sure to check those out.
PHP,3cp2qp,maxgee,1 point,Thu Jul 9 17:43:09 2015 UTC,How about SQL?
PHP,3cp2qp,akeniscool,6,Thu Jul 9 21:44:10 2015 UTC,We adapted AirBNB's JS styleguide and modified certain parts for our own tastes.
PHP,3cp2qp,NeuroXc,3,Thu Jul 9 19:29:23 2015 UTC,ESLint with all default rules except strict for Javascript. SCSS-Lint's default ruleset for Sass.  I'm not sure what the rulesets themselves are called (or if they even have a standardized name).
PHP,3cp2qp,teuna,6,Thu Jul 9 18:02:25 2015 UTC,you guys do realize coding style is the oldest holy war for us programmers right?
PHP,3cp2qp,cYzzie,14,Thu Jul 9 19:55:33 2015 UTC,"only if you use tabs, if you use spaces like every sane being, then there is no war."
PHP,3cp2qp,crimsonkissaki,1 point,Thu Jul 9 22:40:48 2015 UTC,Smite the heathen blasphemer!  Your momma puts the opening curly brace on the next line!  :)
PHP,3cp2qp,cYzzie,3,Fri Jul 10 07:19:29 2015 UTC,"IF ('do you mean' == $what )  {  }  i also hate that argument order, i think some cience guy once tried to convince me its better in that order ... i cant remember why anymore ... but i still hate it even if it would be better, variables first!"
PHP,3cp2qp,DoListening,2,Fri Jul 10 07:52:01 2015 UTC,"It's a necessity in Java, where you compare strings with .equals, and since any String in Java can be null, changing the order to ""literal"".equals(variable) protects you from NullPointerExceptions. It's extremely dumb, but that's the way things are. I don't see any point to it in PHP, and it reads far less natural (human beings think like ""if this car is red"", not ""if red is the color of this car"", ugh...)."
PHP,3cp2qp,cYzzie,1 point,Fri Jul 10 09:45:40 2015 UTC,i think that explains a lot as the specific person i was talking about most likely had a java background
PHP,3cp2qp,travisfont,2,Fri Jul 10 10:50:17 2015 UTC,In simple terms; it's like writing a sentence. Define the subject (if possible) before the rest of the sentence so the reader knows what the content is about. The ($subject) is (==) 'good to go'.
PHP,3cp2qp,Numeriseur,1 point,Sun Jul 12 11:21:18 2015 UTC,It's a protection against misspelling too (if you forget one '='). if ($var = true) work but not if (true = $var).  An interesting article about the linux kernel and an error of this type : https://freedom-to-tinker.com/blog/felten/the-linux-backdoor-attempt-of-2003/  https://en.wikipedia.org/wiki/Yoda_conditions
PHP,3cp2qp,cYzzie,1 point,Fri Jul 10 12:21:24 2015 UTC,"i can relate th misspelling thing,   this sometimes used to happen to me before i started using === by default And then its a pain to debug sometimes"
PHP,3cp2qp,crimsonkissaki,1 point,Fri Jul 10 15:00:38 2015 UTC,"IF ('do you mean' == $what )   The ""=="" is making me twitch XD"
PHP,3cp2qp,jWalwyn,2,Fri Jul 10 15:23:56 2015 UTC,"It's not coding style it's coding standards. Your style may differ, but you should adhere to your teams standard"
PHP,3cp2qp,Tiquortoo,1 point,Thu Jul 9 22:16:33 2015 UTC,"Which is why we stopped the holy war and just follow the PSRs.  If it isn't covered there then we just vote on other existing published, well traveled guidelines, and if its not yet covered we just outlawed argument and let people have their own style in the areas not covered by existing well done recommendations.  The end result is that in new languages we follow general conventions from other languages and eventually come up with a style that works.  The body of language syntax that is existing is far larger than anything new. Syntax in JavaScript differed in a small percentage of areas from Java and from PHP. Focus on high value consensus, not the edges."
PHP,3cp2qp,Meroje,2,Thu Jul 9 23:06:57 2015 UTC,"Feross/standard for js, my css is a mess, can't name stuff"
PHP,3cp2qp,Glutnix,1 point,Thu Jul 9 17:32:48 2015 UTC,I like @mdo's codeguide.co for HTML and CSS.
PHP,3cp2qp,Disgruntled__Goat,0,Fri Jul 10 09:04:35 2015 UTC,"There is almost nothing that can be defined in a PSR-2 equivalent for CSS. You have 3 rules:   Indentation (you may as well follow PSR-2). Whether to put all properties on one line or use multi-line (multi-line is usually preferred). How to order the properties.   However, there are a few options for better naming and structure (equivalent to PSR-0 or PSR-1). The most popular is BEM - Block Element Modifier. See https://css-tricks.com/bem-101/"
PHP,3cnufr,dracony,17,Thu Jul 9 10:31:25 2015 UTC,"Who needs another blog? How brave are you? Build a real estate website.   You've got your auth, CRUD, relationships, image uploading/resizing, geocoding via Google, auto PDF fliers and an iCalendar output of inspection times.   It's the sort of thing you can just keep adding to until you've got a fully-fledged real estate CRM. Then sell it and make some bank."
PHP,3cnufr,sudormrf-,1 point,Thu Jul 9 11:01:57 2015 UTC,"Add a MLS/RETS feed integration and you can sell it for a really decent money. That said - maintenance of a feed like that is a bitch, so you might want to ship it a service instead."
PHP,3cnufr,noizz,9,Thu Jul 9 14:08:21 2015 UTC,Inventory systems are a nice change of pace. Add products. Manage stock levels and descriptions. You can even lift an api for external systems to integrate with it.
PHP,3cnufr,lordofworms,1 point,Thu Jul 9 11:38:28 2015 UTC,"Hm. I hadn't actually considered doing this before. To be curious, do you know of a decent, cheap USB barcode scanner? It's not a piece of tech I've considered before so I'm not even sure what I'd look for. There's one I saw on Amazon for 1.99 but the next lowest one is like $15, so I'm a little leary of it."
PHP,3cnufr,kurashu89,1 point,Thu Jul 9 15:27:35 2015 UTC,"Assuming you have a mobile phone, make an app that interfaces with your Inventory system.  You can add and remove items based on that app scanning the barcode with the camera and then making restful queries to your system.  It's much slower (image processing), but it'd get the work done."
PHP,3cnufr,knigitz,1 point,Thu Jul 9 17:42:48 2015 UTC,Hm. I hadn't considered that angle. Time to ponder more.
PHP,3cnufr,kurashu89,1 point,Thu Jul 9 17:59:52 2015 UTC,$15 is good.  Anything that you can program to do returns or w/e would work.
PHP,3cnufr,tsolosmi,1 point,Thu Jul 9 17:44:45 2015 UTC,"Depends on your use. When I was working IT in retail my boss bought cheap scanners despite my recommendation. It was a complete POS. Barely scanned at 1 inch, but if its just for you to play then sure - go cheap."
PHP,3cnufr,gripejones,1 point,Fri Jul 10 17:00:31 2015 UTC,"Well the purpose is to showcase the components of the framework, not my personal programming skill. So I'm looking for something that covers a lot of things ( like database, templating, APIs, etc) while not really being complex"
PHP,3cnufr,lordofworms,2,Thu Jul 9 12:14:14 2015 UTC,"I get that. An inventory management system is easy to conceptually reason about but sophisticated enough to have the kinds of problems your framework may be able to solve (db interaction, users, acl, blah blah blah)."
PHP,3cnufr,asmodeanreborn,1 point,Thu Jul 9 12:30:04 2015 UTC,"Inventory management can get insanely complicated once you start introducing locations, cost tracking, and run rates/projections as well."
PHP,3cnufr,lordofworms,1 point,Fri Jul 10 03:28:33 2015 UTC,"Sure. But for the sake of building an example app for a framework, you can ignore a large number of these features, and just pick and chose the parts which allow you to show off what your framework can do. Framework example apps are RARELY feature complete."
PHP,3cnufr,tsolosmi,-3,Fri Jul 10 06:07:41 2015 UTC,"Blah blah blah speaks experience.  I'm not joking.  I can tell from just one sentence at the amount of experience behind it.  I catch my self with the ""seen it all before"" attitude as well recently."
PHP,3cnufr,lordofworms,2,Thu Jul 9 17:43:44 2015 UTC,"what? I was just not going to write out all the things he could possibly write. perhaps ""etc"" would have been better.."
PHP,3cnufr,GotoSander,4,Thu Jul 9 21:11:42 2015 UTC,"A event's website featuring multiple halls,speakers, and presentations would be a nice example for a framework."
PHP,3cnufr,adrianmiu,3,Thu Jul 9 12:26:50 2015 UTC,"IMHO, a CRUD-like sample would do it:   a datagrid with pagination and filtering to demonstrate how easy it is to query the database  edit screens to demonstrate how easy it is to validate, filter and process user input progressive enhancement using javascript to demonstrate how the framework lets you include and wire external resources"
PHP,3cnufr,harikt,1 point,Thu Jul 9 13:42:16 2015 UTC,I agree with adrianmiu.  A few more points I like to cover are    relationships in database authentication and authorization ( if it have ) How can we reuse the same module later ( so that the css / images etc are shared ) via a composer install.
PHP,3cnufr,Firehed,2,Fri Jul 10 04:51:40 2015 UTC,Well... what are you trying to demonstrate?
PHP,3cnufr,mrspoogemonstar,1 point,Thu Jul 9 11:04:58 2015 UTC,A framework
PHP,3cnufr,mrspoogemonstar,2,Thu Jul 9 11:12:59 2015 UTC,How much real-world experience do you have?
PHP,3cnufr,ABlueCloud,1 point,Thu Jul 9 11:44:23 2015 UTC,Quite a lot =)
PHP,3cnufr,AtroxMavenia,1 point,Thu Jul 9 12:12:50 2015 UTC,"My point is, you should probably pick something you can isolate from your real-world experience, and use that as an example case. Easier than contriving something out of thin air."
PHP,3cnufr,lordofworms,1 point,Thu Jul 9 13:26:44 2015 UTC,That's not quantifiable.
PHP,3cnufr,AtroxMavenia,1 point,Thu Jul 9 13:14:12 2015 UTC,"Are you trying to demonstrate your ability to develop a framework of to use a framework? I don't think there's a ""gold standard"" demo application in any language, including JavaScript. Is this for your portfolio? Something you can show clients as proof of your ability? Or are you just looking or an exercise?"
PHP,3cnufr,omniuni,3,Thu Jul 9 11:33:12 2015 UTC,He's a framework author. He's just about to release a new version. I assume he wants a demo app for his docs.
PHP,3cnufr,meandthebean,1 point,Thu Jul 9 11:37:22 2015 UTC,"Ah. Well, creating some smallish apps of varying purposes wouldn't be so bad either. Demonstrate some flexibility as well as more powerful aspects of the framework, depending upon what those aspects are."
PHP,3cnufr,xiongchiamiov,2,Thu Jul 9 11:43:50 2015 UTC,"A good To-do app, especially with scheduling, reminders, user accounts, and note sharing is a perfectly good option."
PHP,3cnufr,stayclassytally,2,Thu Jul 9 14:48:47 2015 UTC,"I would argue to stick with a blog. I don't think some of the things people are suggesting aren't going to illustrate your framework very well.   If you use a blog as an example you don't need to explain what a blog does or common blog code conventions. Everyone knows posts and comments, not everyone understands the needs of real estate or inventory systems.  Those might make good personal learning projects, but for something designed to illustrate the framework to the public, stick with the blog."
PHP,3cqey4,rotaercz,2,Thu Jul 9 23:05:25 2015 UTC,"fam hasn't been updated since 2008, I would probably not use that. Depending on how many files you need to monitor and how frequently you need the polling to occur, you could do a simple stat() on them (using clearstatcache() after a run) and record their last modified time and if it's different do the minify."
PHP,3cqey4,erig,1 point,Fri Jul 10 06:53:49 2015 UTC,Good to know thanks!
PHP,3cqey4,dennisbirkholz,2,Fri Jul 10 12:32:11 2015 UTC,"If you have a linux server, use inotify: http://php.net/manual/en/book.inotify.php"
PHP,3cqey4,blimblim,1 point,Fri Jul 10 19:15:33 2015 UTC,Thanks!
PHP,3cpgfh,GandalfTheHobbit,3,Thu Jul 9 18:48:19 2015 UTC,"Use curl, then parse"
PHP,3cpgfh,cidzor,1 point,Thu Jul 9 19:00:22 2015 UTC,"I forgot to mention, I'm very new to PHP, so I'll need a little more than that"
PHP,3cpgfh,cidzor,2,Thu Jul 9 19:01:49 2015 UTC,"There's a way to get raw HTML source code using cURL (http://php.net/manual/en/curl.examples-basic.php). After that, all you need to do is parse it- that is, look for specific spans or divs which encapsulate your data.  Check to see if there's API by Google that already does this for you first.  This is how I've always done it. There may be a better way, if someone would like to share it."
PHP,3cpgfh,BlueScreenJunky,2,Thu Jul 9 19:09:40 2015 UTC,"I've been doing quite a bit of website crawling at work, so it's certainly possible. Here's my advice :   Avoid resorting to a web crawler. It's a bad idea since it will inevitably break when the website is updated. Make sure you can't get the information from a real API (something that uses XML or JSON and has some kind of documentation so you know it won't change without prior notice), and only use a web crawler if you really have to. it's certainly fancier to use Domdocument, but usually a good regular expression will work just fine. If you just need to get a publicly accessible page, cURL will be perfect (you could even use file_get_contents()). But if you need anything more (authentication, cookies...) use Guzzle, it will make it much easier."
PHP,3cpgfh,DomiStyle,1 point,Thu Jul 9 21:24:17 2015 UTC,Is there a reason why you are not using Wolfram Alpha API? I am pretty sure Google also gets their info from there.
PHP,3cq6ob,rafamds,3,Thu Jul 9 22:00:37 2015 UTC,AN inventory manager
PHP,3cq6ob,JoeyD473,1 point,Fri Jul 10 14:20:01 2015 UTC,Would you use a framework for this? If so which one?
PHP,3cq6ob,YewNork,2,Wed Jul 15 14:42:28 2015 UTC,"Well you said this is a side/learning project. If you want to learn about a specific framework then use a framework. Most of the big frameworks (Laravel, Zend, Symphany, slim etc.) all have their pros and cons. Maybe you want to learn/practice something where a framework might be a hindrance. If that's the case don't use a framework"
PHP,3cq6ob,JoeyD473,1 point,Thu Jul 16 14:22:39 2015 UTC,"I'm not OP, but thanks :)"
PHP,3cq6ob,YewNork,2,Thu Jul 16 15:07:02 2015 UTC,Write tool for story mapping like storiesonboard.com but in classic fashion. Without master stories and with ability to extend flow from any user story. If you'll put it to github i could then take a part and contribute.
PHP,3cq6ob,fesor,1 point,Fri Jul 10 07:02:13 2015 UTC,"That looks interesting, I will check it"
PHP,3cof8u,ckdarby,1 point,Thu Jul 9 14:12:33 2015 UTC,Did these benchmarks have opcache enabled on the PHP 5.x builds? I would have expected a large speed increase between 5.4 and 5.5 when opcache became enabled by default.
PHP,3cof8u,NeuroXc,1 point,Thu Jul 9 14:49:19 2015 UTC,Benchmarking PHP 5.4 without apc opcache wouldn't be very serious.
PHP,3cof8u,mnapoli,1 point,Thu Jul 9 15:25:01 2015 UTC,"PHP 7 is 2x faster than 5.6 running Drupal 8, and 3x faster than 5.4 (with APC opcache), according to some benchmarks I've been running on the Raspberry Pi model 2: https://github.com/geerlingguy/drupal-pi/wiki"
PHP,3cn5kb,bereddy,7,Thu Jul 9 05:05:45 2015 UTC,"opcache has been built into PHP as a module since I want to say 5.5 and enabled by default, so chances are that any benchmark you see will have it enabled."
PHP,3cn5kb,vbaspcppguy,1 point,Thu Jul 9 05:51:58 2015 UTC,"Is that true that it's enabled by default in most of the common distributions of 5.5+?  It's not in the distribution of 5.6 I've been using for testing on CentOS 6.6 (IUS). In fact, the module isn't even included in the base distribution of 5.6, although it can be installed separately.  I believe this also is true for 5.6 for CentOS 7 from IUS.  I realize these things are influenced by how the managers of repositories choose to structure their offerings. But I don't think what I've experienced is some sort of edge case, so I'd question the ""enabled by default"" characterization."
PHP,3cn5kb,mukki182,1 point,Thu Jul 9 16:03:03 2015 UTC,i'm 99% sure it is enabled by default in the dotdeb.org packages.
PHP,3cn5kb,vbaspcppguy,1 point,Thu Jul 9 18:29:02 2015 UTC,I'm pretty sure it's compiled into the executable or at least included by default in Ubuntu.
PHP,3cn5kb,Tiquortoo,1 point,Thu Jul 9 22:29:50 2015 UTC,It's part of the default in 5.6 but needs to be enabled.
PHP,3cn5kb,fesor,14,Fri Jul 10 01:05:04 2015 UTC,"HHVM is compiled to machine code.   It isn't compiled to machine codes, it uses JIT to generate machine codes from opcodes dynamicly, which gives you possibility to optimize it in runtime. For example PHP (at least for now) just execute static chunk of machine codes per opcode, since it uses simple virtual machine without JIT.   You should understand that there is two phases:   parsing PHP files to opcodes executing opcodes   Since PHP7 moved to AST-based parser, it gives additional performance boost, but parsing PHP files on every request is still a bad idea. OPCache handles this by saving compiled opcache in shared memory.  But what makes PHP7 a lot faster than 5.x branch is that they rewrote all infrastructure, that used in virtual machine. Not VM itself, only underlying data structures and so on. This allows PHP to work with memory in more efficient way.  Overall performance boost will be the same in benchmarks with and without opcache. Just since parsing in PHP7 is just a bit faster, and all profit gives you execution of opcodes using new data structures for values and new VM's infrastructure."
PHP,3cn5kb,no1youknowz,2,Thu Jul 9 06:30:59 2015 UTC,"It isn't compiled to machine codes   Taken from http://hhvm.com/blog/6323/the-journey-of-a-thousand-bytecodes.  "" This article will attempt to take the reader through the HHVM compilation process from PHP-script to x86 machine code, one step at a time."""
PHP,3cn5kb,ircmaxell,6,Thu Jul 9 13:40:37 2015 UTC,"It isn't compiled to machine codes, it uses JIT to generate machine codes from opcodes dynamicly   I think OP means it's not compiled to machine code ahead of time. It's compiled from opcodes at runtime. It's a subtle difference, but a significant one."
PHP,3cn5kb,ircmaxell,2,Thu Jul 9 14:40:41 2015 UTC,"That's correct. I really didn't want to get into the whole issue of when the compilation to machine code takes place, but I guess the way I phrased it can be viewed as an oversimplification in some quarters."
PHP,3cn5kb,ircmaxell,6,Thu Jul 9 16:06:27 2015 UTC,"First, I'm having trouble understanding how PHP 7 without any opcode caching could possibly perform on par with HHVM, given that HHVM is compiled to machine code.   As with any program, to improve performance you need to look at where the bottle neck is. And in PHP, it wasn't nthe CPU. It was memory.  So php7 is a refactor to make it use less memory and make the memory usage it does use far more efficient.  Compiling to machine code isn't some magic sauce that makes everything better. Like all programs that benefit will depend on what the program does. Hhvm will blow the doors off php7 in microbenchmarks that are nothing more than simple math done in a tight loop. Because that's highly cu intensive.  But most code isn't like that. Most code calls functions and moves around a lot. Things that aren't cheap in a jitted codebase (for a few reasons)..."
PHP,3cn5kb,SirMuttley,1 point,Thu Jul 9 11:57:23 2015 UTC,"Thanks for this additional information. I will say, though, that I have mixed feelings about the fact that most of the benchmarks comparing PHP 7 and HHVM may have been done with opcode caching turned on in PHP 7. I suspect the caching is having a non-trivial impact on PHP 7's performance in those benchmarks, not least because most benchmarks, due to their repetitive nature, tend to exaggerate the benefit of caching. I've seen plenty of tests showing, for example, that opcode caching can double or even quadruple PHP performance in benchmarks.  On the other hand -- and this is why my feelings on the subject are mixed -- if opcode caching is standard in most PHP production environments where performance is important, then having it turned on in the benchmarks is not such a bad idea.  It just means that, if they want to reflect real-life comparisons, the benchmarks need to be designed in a way that they don't overemphasize the impact of opcode caching."
PHP,3cn5kb,bwoebi,2,Thu Jul 9 16:26:38 2015 UTC,"Turn off opcode caching, and PHP7 will destroy HHVM in many real-world tests. That's because HHVM has a built-in opcode cache as well. So if you disable it for one, you'd have to re-start the other to make it make sense.  And the reason is would destroy HHVM, is because the compilation process that HHVM uses is fairly slow. The first part of the code execution is run like PHP (on a VM), then as it learns it starts compiling code. Except that compilation cost is not free (in fact, it's relatively expensive, which is why HHVM only does small parts of hot code at a time).   If you were to remove the ability to cache this compilation cost over multiple requests, HHVM's performance advantage would completely disappear except in extremely trivial CPU-bound benchmarks (mandelbrot/etc).  Instead, put both on even ground. And that means enabling opcache for PHP7 (since you can't really disable it in HHVM without simply restarting the process on every request).   I suspect the caching is having a non-trivial impact on PHP 7's performance in those benchmarks, not least because most benchmarks, due to their repetitive nature, tend to exaggerate the benefit of caching.   If you're not running with an opcache hitrate of over 99%, you're doing something wrong. It means either you're not able to give opcache enough ram, or your changing files too often. Both a signs you're doing something wrong, and not detriments of caching in theory."
PHP,3cnsip,stepbacksniper,7,Thu Jul 9 10:04:27 2015 UTC,http://csv.thephpleague.com/ is pretty good
PHP,3cnsip,MichaelKing01,1 point,Thu Jul 9 10:21:52 2015 UTC,Cool thanks! Will check it out :)
PHP,3cnsip,Ethis,1 point,Thu Jul 9 10:28:15 2015 UTC,"Yes, use this library!  Saves the hassle of writing your own CSV parser.  http://pastie.org/10281750 - This was my own CSV parser that I wrote a few years ago and still being used in various projects."
PHP,3cnsip,phpdevster,1 point,Thu Jul 9 11:28:22 2015 UTC,"Yep, love this library."
PHP,3cnsip,Spinal83,3,Thu Jul 9 15:13:43 2015 UTC,PHPExcel does CSV and more. I've had good experiences with it.
PHP,3cnsip,dvdpearson2,1 point,Thu Jul 9 11:02:09 2015 UTC,"If you're exporting a CSV for a client and the client needs to re-import it in a Excel file (for any report reasons)... you should definitely use PHPExcel, that is, as far as I know, the best PHP Excel library."
PHP,3cpf0v,SchopenhauersSon,4,Thu Jul 9 18:36:42 2015 UTC,"I was using tcpdf then mpdf for years, and then I discovered wkhtmltopdf and it changed my life. If you can exec() then you will enjoy super fast operation, no more memory/process time outs, and overall easier and better PDFs...  Check out http://wkhtmltopdf.org/ ... binaries for most platforms...  Here is an example of some code I used...  //Setup file parameters $cwd = getcwd(); $htmlfile = $cwd.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.date('Y-m-d-h-m-s').'.html'; $pdffile = $cwd.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.date('Y-m-d-h-m-s').'.pdf';  //Fat Free Framework code that generates a valid html file and writes to disk        $html = \Template::instance()->render('pdf/order.html'); $f3->write($htmlfile, $html);  //Convert HTML to PDF  exec('""C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe"" '.$htmlfile.' '.$pdffile);  //Output the file to browser            header('Content-Type: application/pdf'); header('Content-Length: ' . filesize($pdffile)); readfile($pdffile);  //Delete the junk and bye!    unlink($htmlfile); unlink($pdffile);  die();"
PHP,3cpf0v,ethanpil,2,Fri Jul 10 01:46:44 2015 UTC,You could look at tcpdf that might do what you need.
PHP,3cpf0v,jaym5s,1 point,Thu Jul 9 18:37:47 2015 UTC,"As /u/jaym5s said, look at tcpdf. Its an older library but works well. There is a port of it on composer but I never used that version of it but it appears to work exactly like the older non composer version. There are other PDF libraries on Composer but i never used any of them  After pulling the data when you are writing to the pdf loop through the data and count it and after however much data you put into a single row on the pdf go to the next row and restart the count"
PHP,3cpf0v,JoeyD473,1 point,Thu Jul 9 20:03:03 2015 UTC,"I use TCPDF at work, it works fine and does the job. But you will need some starting time though."
PHP,3cpf0v,stepbacksniper,1 point,Fri Jul 10 07:33:46 2015 UTC,"Thank you all for your help, you're all really great. I'll definitely look into TCPDF, since this is the consensus."
PHP,3cjkxk,_davidd_,12,Wed Jul 8 12:26:21 2015 UTC,"Dear JetBrains: stop using the ""copy/paste"" flash app on your license-generation page. Some of us don't have Flash, yo. Using ""document.getElementById('pre2343').innerText"" to get my license key is kind of annoying. Just let me copy the dang ol' text!"
PHP,3cjkxk,postmodest,7,Wed Jul 8 17:53:30 2015 UTC,"Sadly, flash has the only 100% reliable cross-platform clipboard API out there. There are HTML5 alternatives, but none with the wide compatibility range as flash :("
PHP,3cjkxk,callcifer,5,Wed Jul 8 20:12:30 2015 UTC,It's obviously not 100% reliable because some people (like me and /u/postmodest) have it disabled/not installed
PHP,3cjkxk,SrDigbyChickenCeaser,1 point,Thu Jul 9 08:04:27 2015 UTC,"Considering little over 25% of browsers fully support the clipboard API (source), which number do you think is higher?   People who can't use an HTML5 implementation People who chose to have flash disabled/not installed   I think the choice is clear."
PHP,3cjkxk,callcifer,2,Thu Jul 9 08:32:45 2015 UTC,"I didn't argue that it wasn't the best choice, I just said it's not a hundred percent reliable"
PHP,3cjkxk,SrDigbyChickenCeaser,1 point,Thu Jul 9 09:51:42 2015 UTC,Why don't you log in using your account?
PHP,3cjkxk,AcousticDan,2,Fri Jul 10 02:00:44 2015 UTC,"Sadly, flash has the only 100% reliable cross-platform clipboard API out there.   Surprisingly, 100% of the people in PhpStorm's target segment should know how to copy text in their chosen browser on their own. Just give us a readonly (not disabled... wonder why these two are so often mistaken for one another;) textarea with the code (and remove the ""click to copy""-hint) and we become happy campers :D"
PHP,3cjkxk,CleverestEU,1 point,Fri Jul 10 06:17:59 2015 UTC,"But realistically, anyone using phpstorm has an html5 capable browser."
PHP,3cjkxk,AmazingToilet,3,Thu Jul 9 06:07:18 2015 UTC,"HTML5 capable != clipboard capable. IE, Firefox and Safari have only partial support for it and Chrome only gained full support in the very latest version (43). More info here."
PHP,3cjkxk,callcifer,1 point,Thu Jul 9 06:53:08 2015 UTC,Agreed. Simply selecting all text with an onclick event would be sufficient.
PHP,3cjkxk,fucking_leverpostej,7,Mon Jul 13 15:27:08 2015 UTC,Remote edit here I come!
PHP,3cjkxk,mbsurfer,75,Wed Jul 8 12:49:22 2015 UTC,"I don't always test my code, but when I do, I do it in production."
PHP,3cjkxk,phpfatalerror,26,Wed Jul 8 14:11:30 2015 UTC,I was recently reminded that some clients still use ftp and no version control and not only are totally fine with you editing live files on their servers but actually seem to have taken great pains to prevent you from working any other way.
PHP,3cjkxk,jgrubb,8,Wed Jul 8 15:27:42 2015 UTC,"My current workplace edits the files remotely. I find it dirty, started implementing Git and my manager got mad, but said I can do it this way, even though no one else will follow. :("
PHP,3cjkxk,CheckeredMichael,4,Wed Jul 8 21:11:30 2015 UTC,I am so sorry.
PHP,3cjkxk,cronofdoom,1 point,Thu Jul 9 02:45:55 2015 UTC,"It's like managers hold you back in your development learning, by not allowing you to use new tech in your job. We're the same here."
PHP,3cjkxk,m0okz,1 point,Thu Jul 9 06:58:13 2015 UTC,"Yeah they see it as ""Well it's been working fine since we started, so we ain't changing it now"". While all the developers are begging for a change. :p  EDIT: Trouble is, most of the developers have started not giving two shits as they move over to app development and leave the crippled sites behind for me to handle..."
PHP,3cjkxk,CheckeredMichael,1 point,Thu Jul 9 07:58:10 2015 UTC,"I'd say that either you're not adequately making a business case for why you should try this new tool, or your boss is just one of those people you don't want to work for.  Either situation is one that you can change."
PHP,3cjkxk,jgrubb,1 point,Thu Jul 9 13:24:51 2015 UTC,How in 2015 do people still do shit like this? How often do people not stomp on each others code? How many people are working on the code? How do you work on two features at once? The mind boggles...   It is NOT hard to have a code repo with branches and a simple deploy script. Your manager should be fired. Keep fighting the good fight and frankly start looking for a better place to work.
PHP,3cjkxk,runamok,2,Thu Jul 9 16:56:02 2015 UTC,"Yeah it's a terrible way to work and we have actually overwritten each other's work before.  Also tried explaining those exact points which you have mentioned, but they still won't budge on the matter. I have now found a new job where I know I will be happier. :)"
PHP,3cjkxk,CheckeredMichael,1 point,Wed Jul 15 08:34:02 2015 UTC,We have a staging server where everything is edited remotely thru sftp. Then we log into a home brew Web app that pushes to production by committing and pushing to a git repo.  Or at least that's what we will have in the next few weeks. Right now it's just the staging server then a different app that copies the files to the prod server.
PHP,3cjkxk,cosmicsans,2,Thu Jul 9 02:04:27 2015 UTC,"Actually this is very useful if you are running a local Vagrant, you can run it in production, without literally running it on production. My Vagrant boxes mimic production settings, so by using the remote interpreters and running PHPUnit/Behat/PhantomJS on them, it is effectively like running it on the production server. That way you aren't using anything installed on your machine to test, so you're leveraging the same exact interpreter from the same OS as the server."
PHP,3cjkxk,fleshintogear,4,Wed Jul 8 17:19:11 2015 UTC,"You know it's been possible to run in a copy of prod since the dawn of the virtual machine, right? All of these tools make it easier, sure, but it's not like we were all just randomly guessing until Vagrant came along."
PHP,3cjkxk,Firehed,3,Wed Jul 8 21:11:08 2015 UTC,"If you're running Vagrant, just use a shared folder.  There's no need for remote edit in that situation."
PHP,3cjkxk,JimDabell,1 point,Wed Jul 8 20:10:30 2015 UTC,For some reason I thought he said remote debug.
PHP,3cjkxk,fleshintogear,1 point,Wed Jul 8 20:31:58 2015 UTC,"If you're working on Windows and your Vagrant runs Linux, shared folders (at least in VirtualBox) are neutered - they lose their case sensitivity and you can't chmod. Not an option I would recommend."
PHP,3cjkxk,DCoder1337,2,Thu Jul 9 07:35:21 2015 UTC,Live users always make the best beta testers
PHP,3cjkxk,shoeman22,3,Wed Jul 8 21:54:38 2015 UTC,Just crowd-sourcing our QA...
PHP,3cjkxk,phpfatalerror,11,Thu Jul 9 01:50:25 2015 UTC,"Finally a performance improvement release.  (trolling, but I'm using phpStorm for years and it get slower and slower with time...)"
PHP,3cjkxk,damienalexandre,2,Wed Jul 8 12:58:52 2015 UTC,"(trolling, but I'm using phpStorm for years and it get slower and slower with time...)   That tends to make sense seeings it gets more advanced and resource intensive features with every release."
PHP,3cjkxk,scootstah,1 point,Wed Jul 8 13:44:58 2015 UTC,"Try to upgrade to the latest JDK, and test if Oracle or OpenJDK work better. I've had a self-made build with infinality font rendering in the JDK, and it was horribly slow. Just an idea."
PHP,3cjkxk,Hoek,1 point,Wed Jul 8 22:45:44 2015 UTC,Yeah it is getting painfully slow...
PHP,3cjkxk,juliebert,13,Thu Jul 9 03:10:56 2015 UTC,Not interested: when's PHPStorm 10 EAP coming? :D
PHP,3cjkxk,ocramius,7,Wed Jul 8 12:41:02 2015 UTC,"So you are interested, you just don't want to buy a license. ;) Perfectly fine IMO. I made the rule for myself, that as soon as a tool make me money, I'll give some of that to the author. Looking at your flair, I guess you could just get the free OSS dev license."
PHP,3cjkxk,rawfan,7,Wed Jul 8 13:59:42 2015 UTC,"Nah, same thing here and I have a license. Just easier to upgrade from an EAP to another EAP than EAP > full release. I'm that lazy."
PHP,3cjkxk,Anahkiasen,1 point,Wed Jul 8 15:04:40 2015 UTC,Just easier to upgrade from an EAP to another EAP than EAP > full release.    How so? I just drop it in a new directory and update my symlink. Zero effort required.
PHP,3cjkxk,scootstah,7,Wed Jul 8 15:30:04 2015 UTC,"I HAVE TO UPDATE MY DOCK SHORTCUT. IT TAKES LIKE 10 SECONDS OK. No more seriously I'm usually always riding the latest EAP so there isn't much in the 9 release that I don't already have, so I prefer to wait for the next EAP when there are actual changes."
PHP,3cjkxk,Anahkiasen,3,Wed Jul 8 15:43:54 2015 UTC,"you just don't want to buy a license. ;)   Tbh, I have a license (and an OSS license) ;-)  I'm really just interested in ""what's next"""
PHP,3cjkxk,ocramius,2,Wed Jul 8 23:45:45 2015 UTC,"I don't have much to contribute to this discussion, but I kind of felt compelled to reply that I do actually pay for my license and I am really satisfied. I will totally renew my license again next year. The only thing Im confused about is that PhpStorm continues to tell me there's an update (EAP) available even when I click that I am not interested.. Not sure what I am doing wrong. I should probably get on the EAP, but Id rather wait for some kind of stable release since I am busy with other shi* to have time to wrestle with my IDE. (If some dev is reading this im on the latest OSX and have had this issue for 6+ months)"
PHP,3cjkxk,redditorjay,2,Wed Jul 8 19:02:11 2015 UTC,"Please check your settings in ""Settings->Appearance & Behavior->System Settings->Updates"". There should be ""New Major Version Releases"" channel chosen."
PHP,3cjkxk,maxal88,1 point,Thu Jul 9 09:35:16 2015 UTC,Just checking in as another licensed user who prefers the EAP version...
PHP,3cjkxk,YellowSharkMT,-8,Thu Jul 9 02:05:52 2015 UTC,edit: posted crazy question with no relevance to this post on StackOverflow: http://stackoverflow.com/questions/31306147/is-there-a-doctrine-rollback-event-i-e-do-stuff-to-entities-on-a-changelist-wh
PHP,3cjkxk,nombre_usuario,3,Wed Jul 8 17:59:21 2015 UTC,Stackoverflow please :-)
PHP,3cjkxk,ocramius,1 point,Wed Jul 8 23:47:29 2015 UTC,sure thing! should have thought of it. Here it is: http://stackoverflow.com/questions/31306147/is-there-a-doctrine-rollback-event-i-e-do-stuff-to-entities-on-a-changelist-wh
PHP,3cjkxk,nombre_usuario,1 point,Thu Jul 9 00:28:38 2015 UTC,what the fuck?
PHP,3cjkxk,fleshintogear,2,Wed Jul 8 20:32:49 2015 UTC,"lol, did you noticed to whom he was replying to?"
PHP,3cjkxk,sudent,2,Wed Jul 8 20:39:39 2015 UTC,I deserve every fucking downvote because it's 100% not relevant to this post but I didn't even know he was on reddit and I kinda got carried away with my current Doctrine conundrum
PHP,3cjkxk,nombre_usuario,2,Wed Jul 8 20:53:53 2015 UTC,Why don't you send it to him in a PM and then delete the comment.
PHP,3cjkxk,CheckeredMichael,1 point,Wed Jul 8 21:15:20 2015 UTC,"posted it to stackoverflow which is even better, as per his suggestion. I have no common sense : p"
PHP,3cjkxk,nombre_usuario,5,Thu Jul 9 00:30:22 2015 UTC,Does PhpStorm still not have support for multiple projects? That is what's keeping me on Netbeans right now.
PHP,3cjkxk,theninjasquad,19,Wed Jul 8 14:12:33 2015 UTC,Thats what keeps you on Netbeans? Wow.
PHP,3cjkxk,fleshintogear,15,Wed Jul 8 17:19:46 2015 UTC,i can open multiple project windows
PHP,3cjkxk,mukki182,9,Wed Jul 8 14:16:06 2015 UTC,"As a former netbeans user, I used to think I needed that feature as well, but after giving phpstorm a proper try, I fell in love with it. I don't really need to have that many projects open at the same time and when I do, having them open in different windows is actually pretty intuitive after a while."
PHP,3cjkxk,riimu,3,Wed Jul 8 15:12:29 2015 UTC,"That is good to know, thanks for your feedback! I'll have to give it a try again. Our dev environment is setup in a way that I need to have multiple projects on the go, so being able to switch between them easily is important."
PHP,3cjkxk,theninjasquad,3,Wed Jul 8 15:23:24 2015 UTC,"You can also setup multiple roots in the ""directories"" setting."
PHP,3cjkxk,asdflair,1 point,Wed Jul 8 15:44:22 2015 UTC,"Is there a way to debug code between projects? With NB we can.  I have a PS license, and I like a lot its SF2 plugin, it's awesome, but there are a lot of small things that made me more confident with NB. Well, I try again, now version 9, and there are a lot of small things that I like a lot. I want an IDE that mix the good things of booth :)  Yes, I know, I'm not so hipster ;-)"
PHP,3cjkxk,corretge,9,Thu Jul 9 10:01:15 2015 UTC,I prefere the one window per project approach. Makes everything so much more clearer.
PHP,3cjkxk,leipsfur,2,Wed Jul 8 14:29:05 2015 UTC,Ok. But other people don't. Hence all the people requesting it.
PHP,3cjkxk,dont_ban_me_please,1 point,Wed Jul 8 22:44:44 2015 UTC,Serious question: What's the advantage? I haven't seen any advantage to having multiple projects in one frame.   Everyone says they need it because they work on so many projects at the same time but that's the situation where the PHPStorm approach glances IMO. With XFCE I can even distribute different projects through different desktops. It's just marvelous!
PHP,3cjkxk,leipsfur,1 point,Thu Jul 9 06:15:54 2015 UTC,I re-use my old code all the time.  I need the ability to quickly open other projects in the same window and pull some code from them.
PHP,3cjkxk,dont_ban_me_please,1 point,Fri Jul 10 02:23:43 2015 UTC,"Why does it have to be the same window? I'm using PHPStorm and I'm working on two, sometimes even 3 projects at the same time, without any problem."
PHP,3cjkxk,PatrickBauer89,2,Fri Jul 10 10:40:30 2015 UTC,I prefer one window per project too. :)
PHP,3cjkxk,freebit,1 point,Wed Jul 8 15:55:15 2015 UTC,Please vote for https://youtrack.jetbrains.com/issue/WI-15187
PHP,3cjkxk,maxal88,4,Wed Jul 8 15:22:23 2015 UTC,I meant that I am not missing that feature
PHP,3cjkxk,leipsfur,3,Wed Jul 8 15:39:47 2015 UTC,Create one project and then add multiple directories to it.  Settings > Project > Directories
PHP,3cjkxk,gimmethrowaway,1 point,Wed Jul 8 18:01:57 2015 UTC,Create one project and then add multiple directories to it.  Settings > Project > Directories
PHP,3cjkxk,gimmethrowaway,1 point,Wed Jul 8 18:03:32 2015 UTC,"What you want are ""Modules"", try it."
PHP,3cjkxk,Hoek,2,Wed Jul 8 22:48:55 2015 UTC,Is Java 6 still needed? I only have that installed for PhpStorm..
PHP,3cjkxk,PannekoekDoos,6,Wed Jul 8 13:04:32 2015 UTC,On MacOSX 10.10+ you may use our build with custom JDK: https://www.jetbrains.com/phpstorm/download/download_thanks.jsp?os=ws-jdk18 For this build you don't need Java 6.
PHP,3cjkxk,maxal88,2,Wed Jul 8 13:08:17 2015 UTC,I just updated from 8 to this bundle. I'm seeing a performance difference right away.
PHP,3cjkxk,mrstejdm,1 point,Wed Jul 8 14:12:43 2015 UTC,That could be the case. Please vote for https://youtrack.jetbrains.com/issue/IDEA-138687
PHP,3cjkxk,maxal88,2,Wed Jul 8 15:20:38 2015 UTC,"Is there a firm answer on ""When will the custom JDK display fonts as well as the Apple 1.6 JDK did on non-retina displays?"""
PHP,3cjkxk,postmodest,1 point,Wed Jul 8 17:55:05 2015 UTC,We're working on this so the PhpStorm 9 should look better than PhpStorm 8.  On the other hand the work is still in progress and unfortunately I can't give any estimates yet.
PHP,3cjkxk,maxal88,2,Wed Jul 8 17:59:17 2015 UTC,"One thing I've noticed is that the Oracle JDK doesn't seem to be color-managed (i.e.: on high-gamut screens, the colors aren't remapped to their proper displayed values). I realize that Apple and Java are now Mortal Enemies thanks to Android, but if there's any way as ""a big Java ISV"" to put pressure on Oracle [is anyone big enough to put pressure on Oracle?!], hopefully this can all be fixed."
PHP,3cjkxk,postmodest,1 point,Wed Jul 8 23:41:53 2015 UTC,Could you please check that Help->Find Action->type Registry->force.default.lcd.rendering.settings is enabled using bundled JDK?
PHP,3cjkxk,maxal88,1 point,Thu Jul 9 10:09:19 2015 UTC,"500-1400% cpu usage while indexing, brutal. And very sluggish afterwords."
PHP,3cjkxk,jwho82,4,Wed Jul 8 16:21:02 2015 UTC,High cpu load on indexing is ok because we're trying to finish it asap. It doesn't make sense to limit it to one core and let you wait 5-10x times longer.  The sluggishness afterwords is a real issue. Do you use version with custom JDK for Yosemite?
PHP,3cjkxk,maxal88,2,Wed Jul 8 16:23:38 2015 UTC,That was with the bundled one. I'm now using the normal version and it seems to be working better.  I know I had similar problems when I played around with the EAP's a few months ago
PHP,3cjkxk,jwho82,3,Wed Jul 8 16:31:17 2015 UTC,Please vote for https://youtrack.jetbrains.com/issue/IDEA-138687
PHP,3cjkxk,maxal88,2,Wed Jul 8 16:36:28 2015 UTC,"Seems to work with Java 8. Although, they have version with a custom version of Java that includes patches with issues with the IDE. I'd use that (for Yosemite and beyond)."
PHP,3cjkxk,guice666,1 point,Wed Jul 8 16:49:15 2015 UTC,Nice. So you don't have Java 6 installed?  I cleaned up my system(uninstalled) from Java(6 and 8)  and trying the bundled version now.
PHP,3cjkxk,PannekoekDoos,2,Wed Jul 8 17:16:46 2015 UTC,Correct. I have Java8 installed. I removed 6 a while back when 8.x became stable(-ish) on Java 8.
PHP,3cjkxk,guice666,2,Wed Jul 8 17:39:24 2015 UTC,"I use Sublime Text 3, a few plugins and Gulp for my frontend development. Getting into the backend - how worthwhile is this once I'm more full stack?"
PHP,3cjkxk,ClutchHunter,9,Wed Jul 8 18:27:38 2015 UTC,"Integrated debugging, static analysis, jumping to functions and real function definition help, composer support... I don't see how anyone uses a plain text editor any more. They're so slow and practically useless compared to The Storm. And I used to be a HUGE TextMate proponent and plugin author.  Suck it up. Eat the time necessary to get over the learning curve and then bask in the glory of The Storm. I'm pretty sure that by the time version 15 comes out it'll just write my code for me.  Update: almost forgot the revision control conflict resolution system. We've seen oddities after updates (i.e.: you have to create a new command line launcher after every major version update) but overall it is very solid. No 3rd party git app needed.  Update 2: and the ability to integrate with outside tools is nice too. I wrote a route analyzer at work so that devs can paste a url in to a pop-up and The Storm will open the appropriate controller for them. Saves a ton of time digging through routes..."
PHP,3cjkxk,Gipetto,2,Wed Jul 8 18:56:34 2015 UTC,bask in the glory of The Storm
PHP,3cjkxk,TheMightyMoses,1 point,Thu Jul 9 02:57:23 2015 UTC,"I wish PHPStorm had the code scroller sidebar thing that sublime has, I miss that."
PHP,3cjkxk,monk_e_boy,6,Wed Jul 8 19:00:29 2015 UTC,"I never understood the appeal of that, personally. Between being able to jump to methods/members (Command-click or Command-B) and search by method name (option-shift-O) I've been smitten.  Also, Command-Shift-A to search available application actions and execute them is the bomb.  Sorry, don't know the windows equivalent keyboard shortcuts..."
PHP,3cjkxk,Gipetto,3,Wed Jul 8 19:26:33 2015 UTC,"Yeah... it sounds stupid, but I have a more visual memory. If I remember some bit of code was inside a loop and some 'if's then I can glance at the sidebar to see where that shape appears. Didn't know I liked it till it was gone."
PHP,3cjkxk,monk_e_boy,3,Wed Jul 8 21:26:46 2015 UTC,Doesn't sound stupid at all. And its good that there's a plugin for it too!
PHP,3cjkxk,Gipetto,8,Wed Jul 8 22:06:44 2015 UTC,IIRC theres a plugin for it.  edit: https://plugins.jetbrains.com/plugin/7275
PHP,3cjkxk,aequasi08,2,Wed Jul 8 19:16:39 2015 UTC,There is a plugin for that.
PHP,3cjkxk,fleshintogear,2,Wed Jul 8 20:33:40 2015 UTC,CodeGlance.
PHP,3cjkxk,AcousticDan,2,Thu Jul 9 04:46:29 2015 UTC,Buttons and fonts are super tiny for high DPI devices like the Surface Pro 3.  I'm also having problems with the remote interpreter finiding the php.ini file on my Vagrant box.
PHP,3cjkxk,theantichris,3,Wed Jul 8 14:39:19 2015 UTC,Please file issues at: https://youtrack.jetbrains.com/issues/WI
PHP,3cjkxk,maxal88,2,Wed Jul 8 15:21:32 2015 UTC,It's great but i'm still with my Netbeans. Not the best but it's free.  I use Netbeans for Java projects aswell. Not as good as IntelliJ but it's free.
PHP,3cjkxk,aleste2,3,Wed Jul 8 15:55:57 2015 UTC,"Not the best but it's free.   That's the only factor for Netbeans over this, imo. However, if you ever find a way to get a license for PHPStorm (work? Freelance write-off?), it's hella worth it."
PHP,3cjkxk,guice666,13,Wed Jul 8 16:51:48 2015 UTC,"$99, less than a day of work, no big deal. It is totally worth it."
PHP,3cjkxk,fleshintogear,1 point,Wed Jul 8 17:20:10 2015 UTC,Not in my shitty country.
PHP,3cjkxk,aleste2,-1,Thu Jul 9 11:17:29 2015 UTC,I found a torrent with an working key generator for IntelliJ and PhpStorm. But it's not fair so i sill use Netbeans.
PHP,3cjkxk,aleste2,1 point,Thu Jul 9 11:19:13 2015 UTC,What about subpixel font smoothing on Oracle's JVM? Or do I still have to use the old Apple JVM? i can't work without subpixel smoothing.
PHP,3cjkxk,jerrro,3,Wed Jul 8 18:39:17 2015 UTC,Try the version with SDK 1.8 bundled. It fixes the fonthandeling. Its just below the download button: https://www.jetbrains.com/phpstorm/download/
PHP,3cjkxk,amsylum,2,Wed Jul 8 23:20:31 2015 UTC,Did you try like http://superuser.com/a/623596  ?
PHP,3cjkxk,_tenken,2,Wed Jul 8 20:54:56 2015 UTC,Please use version with bundled JDK and check that in Help->Find Action->type Registry->force.default.lcd.rendering.settings is enabled
PHP,3cjkxk,maxal88,1 point,Thu Jul 9 10:12:58 2015 UTC,"Thanks, this fixed the problem for me!"
PHP,3cjkxk,sequethin,1 point,Thu Jul 9 14:14:00 2015 UTC,Guys any one of you know how can I have code completions like so:   i have selected variable i.e. $variable   When i select it i want to become   $nameToBeset = isset($variable) ? $variable : null;   How I can achieve this???
PHP,3cjkxk,piegus,3,Wed Jul 8 21:46:39 2015 UTC,"Tried something out just quickly:   Preferences (CMD + ,) -> Editor -> Live Templates Click the + to add a new Live Template set the abbreviation to isset or something paste this into template text $NAME$ = isset($SELECTION$) ? $SELECTION$ : null;$END$ Define it in the PHP context.   Then in your editor select $variable, and use CMD + ALT + T (surround with shortcut) and type i for your isset template. It will place your cursor on $NAME$ to fill in, and hitting tab will finish inserting the template and move the cursor to the end.  This is only really useful if the $variable you're selecting is an array key like $variable['key'] that may not be set.. otherwise $variable = $variable ?: 'default value'; can be done without the condition.  $SELECTION$ and $END are special live template variables. See https://www.jetbrains.com/idea/help/live-template-variables.html."
PHP,3cjkxk,archer89,1 point,Wed Jul 8 22:17:08 2015 UTC,omg ! Thank You!  guys... what custom love templates do You have?? can you share?
PHP,3cjkxk,piegus,2,Wed Jul 8 22:19:08 2015 UTC,"Just the default ones, pubf and prif are the 2 I use most.."
PHP,3cjkxk,archer89,1 point,Wed Jul 8 22:26:33 2015 UTC,Sounds like you're asking about Live Templates.
PHP,3cjkxk,ebonwumon,1 point,Wed Jul 8 21:59:18 2015 UTC,"I haven't tried the final release yet, but the EAP seemed to not work with CLI debugging on Mac 10.10 which is a real pain. It sends the correct paths when debugging a web app, but it sends IDE host paths when you try to debug CLI."
PHP,3cjkxk,nashkara,1 point,Thu Jul 9 01:39:09 2015 UTC,Feel free to file an issue at https://youtrack.jetbrains.com/issues/WI . Very likely it's a configuration issue because I haven't seen any similar reports.
PHP,3cjkxk,maxal88,1 point,Thu Jul 9 10:16:23 2015 UTC,"I tried to file a report before, but it seamed to not be working at the time. I'll try again."
PHP,3cjkxk,nashkara,1 point,Thu Jul 9 12:27:20 2015 UTC,"Anyone else having issues with code reformatting? This worked flawlessy in 8.0.3, but when I try to use it with 9 nothing happens. I have double-checked my code style (imported my settings from previous version, but checked anyway).  If I do ctrl + alt + L or ctrl + alt + shift + L to bring up the dialog, neither do anything. The second command brings up the dialog but when I choose ""selected text"" the dialog closes and nothing happens.  Just wondering if anyone else is experiencing this issue. Maybe I'll submit a ticket. This is in PHP, by the way; I haven't tried in other languages."
PHP,3cjkxk,300ConfirmedGorillas,1 point,Thu Jul 9 02:15:45 2015 UTC,Please submit an issue at https://youtrack.jetbrains.com/issues/WI we haven't received any similar reports.
PHP,3cjkxk,maxal88,1 point,Thu Jul 9 10:17:02 2015 UTC,Working for me on my macbook.
PHP,3cjkxk,AcousticDan,1 point,Thu Jul 9 19:30:14 2015 UTC,It's awesome!
PHP,3cjkxk,pubple,1 point,Thu Jul 9 02:24:09 2015 UTC,Today I learned that my license worked with all versions released during the time my license ends.  I always thought when a new version number releases I couldn't upgrade.  Since I've always been used to licenses that only applied to the version I purchased and any minor/bug fixes makes this is pretty awesome since I can just upgrade to the next major version :D
PHP,3cjkxk,SaltTM,1 point,Thu Jul 9 03:23:10 2015 UTC,"This version breaks my shortcuts :(  In french keyboards above the tab keys there's a ""²"" (don't ask me why it's there) and usually I use ctrl + ² to open the console. If I set it via settings it works, but everytime I restart PHPStorm 9 I have an error message that says ""Cannot parse first-keystroke 'control null' and it removes it :("
PHP,3cjkxk,Arkounay,2,Thu Jul 9 06:00:23 2015 UTC,Cannot parse first-keystroke 'control null'   Please vote for https://youtrack.jetbrains.com/issue/IDEA-140851
PHP,3cjkxk,maxal88,1 point,Thu Jul 9 10:18:34 2015 UTC,"I honestly don't like PhpStorm because it doesn't separate HTML from PHP like PHPDesigner does, I would maybe start to use it if they added that."
PHP,3cjkxk,mothh9,1 point,Thu Jul 9 14:42:42 2015 UTC,"Could you elaborate what you mean? I can't think of a way how the IDE can separate HTML from PHP, if the developer mixes both."
PHP,3cjkxk,PatrickBauer89,1 point,Fri Jul 10 10:42:11 2015 UTC,"Like this, I am editing HTML now and PHP is grayed out:  http://i.gyazo.com/85e4334d592a42005160eb27d032a91e.png  Now I am editing PHP and HTML is grayed out:  http://i.gyazo.com/470c13622a9764b57f5555fc2fa1c7d7.png"
PHP,3cjkxk,mothh9,1 point,Fri Jul 10 16:49:36 2015 UTC,"I see. But PHPStorm can do this too. May even be a new feature in 9, because I didn't see it before."
PHP,3cjkxk,PatrickBauer89,1 point,Fri Jul 10 16:57:50 2015 UTC,So PHPStorm 9 does this as well by default?
PHP,3cjkxk,mothh9,1 point,Fri Jul 10 18:24:13 2015 UTC,"I took another look at it and its a bit different. What it does, is coloring HTML Code and PHP Code different. How different is configurable, but it wont change it, depending on your current selection."
PHP,3cjkxk,PatrickBauer89,1 point,Fri Jul 10 19:21:50 2015 UTC,"I like it, it gives a nice overview."
PHP,3cjkxk,mothh9,1 point,Fri Jul 10 21:30:19 2015 UTC,"Acutally I'm sorry for you, if you still have to work with PHP which is embedded into HTML files and vice versa :P It may be a neat feature, but modern PHP development already strictly seperates PHP from HTML so I dont think its something that many developers would like to see."
PHP,3cjkxk,PatrickBauer89,1 point,Fri Jul 10 22:31:15 2015 UTC,How else are you going to display anything out of PHP?
PHP,3cjkxk,mothh9,1 point,Sat Jul 11 01:34:34 2015 UTC,"Its called MVC. You have (roughly) 3 parts in your application: The Model, the View and the Controller (MVC). Take a look at eg Laravel: http://laravel.com/docs/5.1/controllers#basic-controllers The source code you see is the controller (the showProfile method). It loads a User from the Model (User::findOrFail) and gives it over to a view. The view then is a pure template, like: http://laravel.com/docs/5.1/views#basic-usage  That means, you strictly seperate PHP Code and Template files, for clean and readable code. And yes, the view is still HTML with inserted PHP Codes, but thats normally replaced with a Template Engine like Smarty, Blade, Twig etc (http://laravel.com/docs/5.1/blade)"
PHP,3cjkxk,PatrickBauer89,1 point,Sat Jul 11 09:14:36 2015 UTC,"Anyone using it on Ubuntu? I tried it but the font size (in the menus, the windows, etc..) is too large. I'm using the previous versions for years and didn't have such a problem."
PHP,3cjkxk,angdejan,-3,Sat Jul 11 11:25:10 2015 UTC,Still no new icon? The current one looks so out of place on Yosemite.
PHP,3cjkxk,porkslow,5,Wed Jul 8 16:19:12 2015 UTC,"ya, because i buy apps for their icons -- not their functionality."
PHP,3cjkxk,_tenken,4,Wed Jul 8 20:56:25 2015 UTC,They changed the splash screen ...
PHP,3cjkxk,guice666,-1,Wed Jul 8 16:52:12 2015 UTC,"It's a shame you're downvoted. It's a pretty darn minor thing, but the icon is dated. JetBrains use a more modern logo throughout their site but the icon still remains unchanged. They changed WebStorm's not long ago..."
PHP,3cjkxk,frazzlet,-11,Wed Jul 8 17:48:02 2015 UTC,"could an experienced Vim and PhpStorm user explain to me (a veteran Vim user) what am I missing out on by not using PhpStorm?  (disclaimer: nothing will ever change my mind, you'd have to pry Vim from my cold dead hands, but i'm still genuinely interested in the benefits an IDE like PhpStorm)"
PHP,3cjkxk,jaebigdong,17,Wed Jul 8 19:54:16 2015 UTC,nothing will ever change my mind   then why bother?
PHP,3cjkxk,fleshintogear,4,Wed Jul 8 20:34:11 2015 UTC,Humble brag
PHP,3cjkxk,KiwiThunda,3,Wed Jul 8 21:25:18 2015 UTC,"Absolutely everything. Just go look at the feature list. Integration, code help, code formatting, code navigation, etc. Vim is a text editor. PhpStorm is an IDE. Yes, you can add functionality to Vim but you'll never get close to the save level of functionality. It's also personal. It's also having more options. My workflow will change after I find a new feature of PhpStorm. Alot of ""I didn't know I was missing that."" when you really start to dig into it.  Try the EAP. It's fully featured with a 30 day license. And go into it with a ""how can I make this work for me"" attitude instead of ""why isn't this vim"". I do know they have a keybinding preset for Vim users. And a few plugins."
PHP,3cjkxk,MyWorkAccountThisIs,2,Wed Jul 8 21:47:56 2015 UTC,"Mostly a modern UI that has functionality discoverable by experimentation, not reams of documentation."
PHP,3cjkxk,Tiquortoo,0,Thu Jul 9 00:12:18 2015 UTC,Ok so you are using vim. I used vim before phpstorm. I find that phpstorm is more capable and time efficient.
PHP,3cla9l,TheSkilletHead,20,Wed Jul 8 20:06:08 2015 UTC,"It's not even possible to do everything a modern RDBMS is capable of with an ORM, and I'll never understand why people act so shocked and appalled that ORM X is missing feature Y from RDBMS flavor Z (or even just from standard SQL).  ORM is not a SQL alternative.  They are not mutually exclusive choices, and you don't pick between the two.  You will have to drop down to SQL itself when using any ORM in any application of significant enough complexity.  Having said that, Doctrine is a very solid ORM (arguably the best PHP has to offer)."
PHP,3cla9l,drrck2403,3,Wed Jul 8 23:40:21 2015 UTC,"It's not even possible to do everything a modern RDBMS is capable of with an ORM, and I'll never understand why people act so shocked and appalled that ORM X is missing feature Y from RDBMS flavor Z (or even just from standard SQL).   Because people go into it with the wrong mindset. People think it is an alternative to standard SQL. ORM's are best used for rapid development, where you're not super concerned about performance and just want to get something prototyped or roughed out. They're excellent for that.  They are not excellent at replacing standard SQL. They're much slower, don't always make the best decisions, etc. It's common practice to go back and replace some of your heavy ORM stuff with regular queries."
PHP,3cla9l,scootstah,1 point,Thu Jul 9 14:58:51 2015 UTC,"Keep in mind the majority of the situations are developer's fault, not ORM's. I managed to deploy a 12k req/s application using Doctrine ORM without headaches. I feel this is pretty much extreme, agreed, but it helped the team to create the application faster and then handle with specific bottlenecks using ORM features, such as second level cache, result caching and query optimizations."
PHP,3cla9l,guilhermeblanco,1 point,Thu Jul 9 18:25:58 2015 UTC,"True, but ORM's like Doctrine are really greedy out of the box. Doctrine can be tuned quite well, and it makes good use of caching. Also they don't always make the most efficient decisions on JOIN's and things like that. I've found it doing weird shit before and had to kick it in the ass.  EDIT: Hope I'm not coming off as an ORM hater. I work heavily with Symfony2 and Doctrine2. I'm actually a big fan!"
PHP,3cla9l,scootstah,1 point,Thu Jul 9 18:32:40 2015 UTC,Limitations of ORMs have nothing to do with with queries per second. They are limited in SQL and data interaction expressiveness. Sounds like you handled it well though. Build the basic app stuff fast and then break out of the ORM when needed.
PHP,3cla9l,Tiquortoo,1 point,Fri Jul 10 01:12:42 2015 UTC,"You are absolutely right, and it was my fault to not provide all the details. I managed to deploy a 12k requests/second with average response time to ~75ms through Symfony2 and Doctrine2. =) I feel that makes more sense now."
PHP,3cla9l,guilhermeblanco,1 point,Fri Jul 10 02:29:01 2015 UTC,I personally avoid ORMs like a plague.
PHP,3cla9l,I_l_hanuka,2,Thu Jul 9 15:38:02 2015 UTC,"then you're missing out, it's not because they can't do EVERYTHING that they are good for NOTHING..."
PHP,3cla9l,mythix_dnb,0,Thu Jul 9 17:57:54 2015 UTC,"o EVERYTHING that that ar   I can do ""everything"" my RDBMS allows me to do with SQL queries."
PHP,3cla9l,I_l_hanuka,1 point,Thu Jul 9 18:13:40 2015 UTC,"but you cant do everything an ORM does... that's the whole point, it provides a layer of functionality on top of SQL, it does by no means replace SQL..."
PHP,3cla9l,mythix_dnb,2,Thu Jul 9 21:37:43 2015 UTC,"Like what exactly? The actual ""object relational mapping"" stuff can be done easily with PDO's FETCH_CLASS option."
PHP,3cla9l,Disgruntled__Goat,2,Thu Jul 9 22:45:42 2015 UTC,ORMs are nice for the basic crud. They all have ways to write direct SQL. Pragmatism is an important quality of a developer.
PHP,3cla9l,Tiquortoo,1 point,Fri Jul 10 01:08:58 2015 UTC,The conversation is about what extra functionality ORMs provide.
PHP,3cla9l,Disgruntled__Goat,2,Fri Jul 10 04:07:39 2015 UTC,"FETCH_CLASSdoes the 'object' part, yes. But it's missing the relational mapping... which is quite a big part.  PDO simply maps one row to one class, it does not build an object graph, it does not know when the same instance is fetched multiple times, it doesn't have lazy loading, it has no clue about class inheritance, .... the list goes on, in fact this is just the basics."
PHP,3cla9l,mythix_dnb,1 point,Fri Jul 10 06:11:02 2015 UTC,"True, the relationships don't come free, but that's trivial to add. Your objects can handle that with a couple of lines of code.  Not sure what you mean about class inheritance, why would an ORM need to care about that? The other stuff I've never had a need for personally."
PHP,3cla9l,Disgruntled__Goat,2,Fri Jul 10 16:23:50 2015 UTC,"Your objects can handle that with a couple of lines of code.   You have now built a basic ORM... welcome to the party. Only have you also violated SOLID principles, and your domain is now polluted with code to build object graphs based on specific queries. So you now also have imposed limits on your queries, because the code you wrote expects certain things. And we're not even touching the fact that the column names can differ from the property names...  You say it can be done with a couple of lines of code, but I doubt this is easy for any query with more than zero joins, and it will become exponentially harder when you start adding relations and thus joins. if this were trivial, Doctrine would not exist.  Inheritance is just one of the extra features that are added on top of just SQL, and it can be very handy in certain circumstances.  an ORM does not only add functionality to SQL, as I said it's a layer between the database and your domain. Doctrine also augments your domain model by allowing to easily add validation, data transformation etc..."
PHP,3cla9l,mythix_dnb,24,Fri Jul 10 17:36:37 2015 UTC,You say you want to decouple your software from your database engine and yet you complain that the orm won't let you do things that are specific to your database engine.
PHP,3cla9l,dwolf555,6,Wed Jul 8 20:59:15 2015 UTC,"Hi, Doctrine core developer here. I'll answer your individual concerns one by one:   No support for table partitions   Table partitioning is supported based on @ORM\Table(options=...) where it actually into consideration specific DB options, such as your PARTITION BY for example.   No support for UPDATE ... JOIN in either ORM or DBAL query builder   Through ORM it is not supported, and I completely agree. However, using class table inheritance, it is emulated using multi table update executor if the driver does not support it. As of for association updates, it's up to you to trigger another update as it's out of ORM's scope to do it. You can also manually trigger your query using UPDATE ... JOIN as a specific scenario query using:  $connection = $entityManager->getConnection(); $result    = $connection->executeUpdate('UPDATE ... JOIN query');    No support for INSERT ... SELECT in DBAL query builder (no insert at all in the ORM query builder)   Even though you can do it through connection, think twice about what are you trying to do. In any ORM context, inserting should be controlled through the ORM itself, not at DB level. The key reason is because ORM keeps its internal identity map, allowing the ORM to always give back the same instance when requesting multiple times same object. That's why INSERT is not supported at all in QueryBuilder.   No real support for sub-queries, though that can be hacked together.   Care to expose one example where it doesn't work?   No support for temporary tables   Same as before through Table options: @ORM\Table(options={""temporary""=true})"
PHP,3cla9l,guilhermeblanco,1 point,Thu Jul 9 19:00:55 2015 UTC,"Thank you for your response! I had remembered searching about partitions and didn't find anything, so I either made up the memory or wasn't any good at Google that day. I'll implement that in a week or two.  Also, I think another commenter was correct that my frustrations might be misdirected at Doctrine's ORM when I'm really mostly frustrated at the DBAL query builder. It is outside the scope of an ORM to do the sort of bulk inserts and bulk updates that I'm doing. For most things, the DBAL query builder works fine, but it makes me uncomfortable when I have to write a bunch of native queries that tightly bind me to a database. It seems that there's mostly a good reason for that though, so I think I need to re-evaulate how I use Doctrine, the DBAL query builder, and native queries. At this point, I don't think it would make sense to drop Doctrine as an ORM, but it might be better to let Doctrine do just what Doctrine is good at."
PHP,3cla9l,jose_zap,3,Fri Jul 10 14:52:34 2015 UTC,"The CakePHP 3 ORM does support those things, including UPDATE JOIN (via multi update), INSERT SELECT, temporary tables and subqueries are pretty much a first class citizen. Here is the link to the standalone library, if you are interested https://github.com/cakephp/orm and if you are only interested in the kickass query builder, take a look at the standalone database abstraction layer  https://github.com/cakephp/database"
PHP,3cla9l,rafamds,1 point,Thu Jul 9 06:03:06 2015 UTC,"It looks like a very powerfull ORM, I just don't get why the long names, like TableRegistry::get('Articles');, is it a matter of avoiding conflicts with other Classes? And wouldn't  new() be faster to type and probably understand than newEntity()?  Hoping to get an answer, cheers mate"
PHP,3cla9l,jose_zap,2,Thu Jul 9 13:32:25 2015 UTC,"Well, as you now new is a reserved keyword in PHP, also it needs to express ""new what?"". I don't have a really good explanation for the log names, other than I like class names to transmit the intention of what they are without having to look at their namespace, for example.  I think another reason is that in the CakePHP framework, most of the long class names are abstracted away in utility factory methods."
PHP,3cla9l,mythix_dnb,1 point,Thu Jul 9 14:20:19 2015 UTC,They could have just called it create() though :) many reserved keywords have perfectly fine synonyms
PHP,3cla9l,rafamds,1 point,Thu Jul 9 18:00:51 2015 UTC,You convinced me sir ;)
PHP,3cla9l,pmjones,10,Thu Jul 9 21:49:32 2015 UTC,"While I'd happily engage in a generic rant about ORM, I think the variables are too many to draw general conclusions.  The concept of mapping a table row to an object (or to a container of some other kind, like a hashmap) is fairly harmless on its own. I don't think it's inherently limiting.   It becomes limiting when the ORM starts to assume too much and starts adding concerns to the core mapping logic, which are best done separately at another layer of the app.  For example, Doctrine and other ORMs are big on caching. They keep adding layers of caching, because it makes them look good in benchmarks. The problem is this cache is not synchronized with the database's MVCC, so the guarantees provided by ACID now fail at subtle and hard to detect and debug ways. This is not advertised, and because ORM is mostly used by people who don't want to touch SQL with a 20 foot pole, it's not widely understood as a problem.  As for whether ORM is for people who don't know SQL, I think there are two ways to approach it:   Focus on object graph: use the database as a dumb persistence backend, and give up the guarantees and query power provided by SQL. You're essentially persisting an object graph. Focus on SQL relations: map the database closely and expose powerful SQL features; requires good knowledge about transaction mechanics and so on by ORM users.   I think either one of those approaches is valid. Apple's Core Data is the first approach. And a lean Data Mapper implementation + query generator is the second. Both have their pros and cons.  It gets worse when you try to have it both ways, though. Which is where Doctrine and related solutions like Hibernate lie. The result is complexity and plenty of edge cases with ill-defined behavior. But as I said I'll avoid the generic rant."
PHP,3cla9l,harikt,1 point,Wed Jul 8 20:26:53 2015 UTC,Thank you for the best response so far. I think you're correct - I am mostly complaining about the tools that come with the ORM. Doctrine does do entity mapping just fine.  It would be a feasible solution to switch to a different query builder for queries that don't need to return an entity. I think that might be a workable and maintainable compromise.
PHP,3cla9l,npfund,1 point,Wed Jul 8 21:42:08 2015 UTC,"switch to a different query builder for queries that don't need to return an entity   If you're looking for a standalone query builder, you may wish to consider Aura.SqlQuery. While it does not currently support INSERT...SELECT or UPDATE...JOIN, it is my guess that it'd be easier to add those features in SqlQuery than in other libraries. (I am the lead on Aura so I am biased in its favor.)"
PHP,3cla9l,gadelat,1 point,Wed Jul 8 23:47:05 2015 UTC,"While it does not currently support INSERT...SELECT or UPDATE...JOIN   this sentence confused me reading it don't do insert, select, update etc. But it seems you mean insert into from select , update on join etc.   In case if someone felt the same and stay away looking."
PHP,3cla9l,davedevelopment,4,Thu Jul 9 07:24:43 2015 UTC,"An abstraction is never as powerful as the concept it's abstracting. See: C vs. Assembly vs. Logic Gates. There's crazy stuff you can do in assembly that can't be replicated in C, but the tradeoff is that you don't have to deal with assembly.  In every application that has users, there will be an equivalent of User::findByID($id). If I had to write that myself every single time I start a new application I would murder someone. That's what I use an ORM for. Abstract away the stupid little stuff that occurs in every application, and drop down to raw SQL when you need to do the crazy stuff.  It sounds like you're doing crazy stuff. Or, at least, data processing stuff beyond the scope of your standard CRUD web application.  (Consider, as an aside, the problem of mapping the more complicated features of SQL onto another language. SQL is all about dealing with sets of things, and it's kind of annoying to operate on a single object [especially when that object is composed from several tables]. The kind of OO PHP that ORMs are made out of are all about dealing with individual objects, and it's kind of annoying to operate on sets of things)"
PHP,3cla9l,haydenk1337,3,Thu Jul 9 04:39:55 2015 UTC,"Yeah, by trying to abstract database engine away you will loose lot of useful dbms specific features. Every ORM/Query Builder out there rejects features which are not available in most of their supported engines. I have given up on trying this and just use raw queries for these things. I would like for once some ORMs/query builders which are specialized for one database engine and do good coverage of features instead of trying to cover all of the database engines."
PHP,3cla9l,KiwiThunda,2,Wed Jul 8 23:04:55 2015 UTC,"I've found Doctrine is pretty good at mapping an object graph back and forth from a relational database. Some of the things you mentioned, don't really fit that paradigm in my opinion, so I'm ok with them not being supported."
PHP,3cla9l,headzoo,2,Wed Jul 8 21:36:31 2015 UTC,"ORMs are slow no matter what language you use. They're are useful to abstract how your application communicates with your database.   With any sort of heavy query processing such as ETL jobs or bulk inserts, you're far better off doing them without the ORM. If anything, you could have separate applications that handle the ETL jobs and bulk processing."
PHP,3cla9l,Ginden,2,Thu Jul 9 00:46:53 2015 UTC,"We've come to accept that ORMs, all ORMS, just dont meet our needs. We've gone the service endpoint route with specific queries placed within a ""ModelService"" layer.  There's just too many specific requirements that a generic ORM can't handle."
PHP,3cla9l,tcmccarthy,2,Thu Jul 9 04:19:02 2015 UTC,"Yes, ORMs are inherently limiting. Specifically they are limited to only supporting features that are common to every database the ORM supports. Doctrine can only support those features that SQLite supports, regardless of how many awesome features are built into MySQL and PostgreSQL. That's the price you pay for the flexibility of being able to switch to a different database down the road.  In other words, Doctrine can't provide support for UPDATE ... JOIN queries because SQLite doesn't support them."
PHP,3cla9l,Shadowhand,2,Thu Jul 9 12:10:01 2015 UTC,"Your ""relatively basic tasks"" are in fact much more than most developers need."
PHP,3cla9l,jtreminio,2,Thu Jul 9 18:40:17 2015 UTC,"Echoing a lot of the existing comments, ORMs make for an easier time performing standard MySQL requests -- they should not replace them. Knowing the full SQL spec for your flavor is important and necessary and a developer should be fully prepared to have to spell out a well-written complex query, even when using an ORM."
PHP,3cla9l,guilhermeblanco,3,Fri Jul 10 02:41:34 2015 UTC,"ORM is always a crutch. Every ORM will be a limitation at some point. Queries and query builders are inherently related to databases, so you cannot use a query builder to decouple software from database.   Doctrine is one of the best ORM tools that exists for PHP. You won't really find a better one. In my opinion, what you are missing is simple to say and extremely hard to practice: think in terms of data structures, not databases.  A lot of really smart people (Fowler, Martin, etc) have been talking about this issue for years. The conclusion is that you have to separate entities from storage. A good method for doing so is using the repository pattern. The thing I find most attractive about using repositories is that you can use ORM when it works and use something else when it doesn't. In fact, your repositories can be backed by things besides a database, such as Redis or DAV or memory."
PHP,3cla9l,jtreminio,2,Thu Jul 9 02:07:53 2015 UTC,"Doctrine usually suits my use case just fine. It does have some limitations, but the great thing is that it's in PHP and you can probably submit a PR to get your changes/fixes merged.  If you need support for more complex or unsupported features, you can always fall back to DBAL and run raw SQL:  $dbal = $this->_em->getConnection();  $sql = ""     SELECT u.id FROM user u WHERE id = :id "";  $stmt = $dbal->prepare($sql); $stmt->bindParam(':id', $id); $stmt->execute();  return $stmt->fetchAll();    we're not using the ORM for transforming data   Usually I don't allow the ORM to change the data. It inserts and pull as-is. Domain classes are what should mold data to fit your business case.   INSERT DELAYED   It's deprecated: http://dev.mysql.com/doc/refman/5.6/en/insert-delayed.html   UPDATE ... JOIN   http://www.doctrine-project.org/jira/browse/DC-646  The problem is that you're approaching this as a mysql-specific tool, but it's not. It's an interface that allows working with many different rdbms.  You can either write Doctrine plugins to do what you want, use DBAL for raw queries, or try another tool."
PHP,3cla9l,jose_zap,3,Wed Jul 8 20:29:53 2015 UTC,"Hi, Doctrine core developer here.  Doctrine follows whatever is defined in SQL-92 standards, plus several features from SQL-99 if and only if it is supported across all database drivers we support. This means that features that mostly work can be included, but features that only one driver supports, it will likely never be included.  We are considering to work on SQL-99 compliant support as part of Doctrine 3, mainly because nowadays most drivers support the features described there. Right now we're slowly adding it based on demand and our free time. =)"
PHP,3cla9l,Aldarone,2,Thu Jul 9 18:20:25 2015 UTC,"However, MS Sql server, MySql (and Percona, MariaDB, and AWS Aurora), Oracle, and PostgreSQL all support UPDATE ... JOIN. The fact that SqlLite doesn't seems like a bad reason to not include it. I'd rather it throw an error on SqlLite and still support the rest than not supporting the feature at all. SqlLite seems more like a corner case than the norm.  Doctrine deals with other unsupported options just fine with the caveat clearly written in the manual: ""your database engine might not support this option, in which case it won't be applied"". The best example that I can think of is unsigned integers. From a this-will-break-your-software-if-your-database-engine-doesn't-support-it standpoint, that's right up there with UPDATE ... JOIN."
PHP,3cla9l,jose_zap,3,Wed Jul 8 20:41:32 2015 UTC,Problem with throwing an error for SqlLite is that most TDD shops use SqlLite for integration tests on their DB ... potentially breaking tests...
PHP,3cla9l,jose_zap,1 point,Wed Jul 8 21:20:48 2015 UTC,"Actually neither PostgreSQL nor Microsoft SQL Server, nor Sqlite implement UPDATE with joins. Mysql is the only database with such a feature."
PHP,3cla9l,aleste2,1 point,Thu Jul 9 06:15:57 2015 UTC,"Well, SQL Server supports it and PostgreSQL supports it"
PHP,3cla9l,akeniscool,1 point,Thu Jul 9 06:59:00 2015 UTC,"That is Update From, which is quite different from update join :)"
PHP,3cla9l,jtreminio,1 point,Thu Jul 9 07:00:34 2015 UTC,"Just to clarify, that syntax is similar to the multi update syntax in MySQL. That is, an update with and inner join, whereas the update join syntax allows for other types of joins"
PHP,3cla9l,NeuroXc,1 point,Thu Jul 9 07:14:13 2015 UTC,"Doctrine is great for the majority of situations. If these queries are really, really, really, really, really important, use java and Hibernate."
PHP,3cla9l,akeniscool,9,Thu Jul 9 11:25:39 2015 UTC,"This is probably why Eloquent is currently the most popular ORM for PHP.   ಠ_ಠ  Packagist Install stats:  Doctrine/ORM: 7,506,896 Laravel/Framework: 5,253,927  I use and enjoy both Laravel (with Eloquent) and Doctrine. But throwing out statements like that is totally fanboytastic."
PHP,3cla9l,Disgruntled__Goat,1 point,Wed Jul 8 20:25:53 2015 UTC,What's the purpose of comparing a full framework to an ORM?
PHP,3cla9l,stefanotorresi,-5,Wed Jul 8 20:30:22 2015 UTC,"I'm sorry? I was basing it off of the number of mentions I see on this subreddit, I wasn't trying to be scientific.  Leave it to reddit to be anal about something that wasn't even the point of my post."
PHP,3cla9l,guilhermeblanco,2,Wed Jul 8 21:06:56 2015 UTC,"Forgive me, my telepathic abilities have waned as of late. /s  If you stated it as more of an opinion or observation, rather than fact, I wouldn't have responded as such."
PHP,3cla9l,utotwel,1 point,Wed Jul 8 21:22:41 2015 UTC,"Leave it to reddit to be anal about something that wasn't even the point of my post.   Your point was that Eloquent is great and flexible, and ""this is why Eloquent is most popular"" is specifically used to back up your point."
PHP,3cla9l,Rican7,2,Wed Jul 8 22:59:31 2015 UTC,"I'm sorry, but if you're not familiar with Doctrine, on what basis are you comparing it to your tool of choice?  For starters, Eloquent is not a data mapper implementation, but an active record. That is already sufficient by itself to disregard any comparison, because it would transcend in a broader comparison between design patterns, and the ""data mapper vs active record"" is a pretty big religion war ongoing for years.  Having said that, please, at least give both stuff a try before throwing random ""it's more this, it's more that""...  They're just tools you know, don't get too fond with any hammer."
PHP,3cla9l,atticusw,1 point,Wed Jul 8 23:19:35 2015 UTC,"Hi, Doctrine core developer here.  First of all, Eloquent is an ActiveRecord based ORM, not a fully featured Data Mapper based ORM. It's like comparing apples to oranges after this. Anyway, I'll stick to your point of not using raw queries. Doctrine allows you many different ways to access data using raw queries:   If you're mostly trying to build a different set of objects, then you can use NEW operator, such as ""SELECT NEW UserDTO(u.id, u.name) FROM User u"" and it would create instances of UserDTO instead of regular User. If you're trying to retrieve only a subset of information of the object, you can use PARTIAL operator, such as ""SELECT PARTIAL u.{id,name} FROM User u"" and it would create instances of proxied User instances (any other information not loaded would be fully loaded once you request it) If you're trying to completely customize the SQL, but map to objects, you can use the raw SQL support with a custom result set mapping. There is an entire documentation page explaining how to do it: http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/native-sql.html   Hope I clarified your concern... =)"
PHP,3cla9l,utotwel,1 point,Thu Jul 9 22:54:03 2015 UTC,"I'll look into Eloquent. It's too late to switch now given our timeframe, but I will probably avoid Doctrine in future projects.  However, while ""crutch"" and ""tool to make database interaction easier"" are interchangeable, decoupling the database engine from the code is different. I like working in SQL, I like the challenge of normalizing data and making an efficient database, but I also want to write code that is, for the most part, database-independent. An ORM and good query builder are a important part of that. I don't mind the occasional native query or having to rewrite a class because database y doesn't support the obscure function that database x did, but the proportion of these to query builder queries and ORM interactions is way out of line in my current project."
PHP,3cla9l,utotwel,12,Thu Jul 9 08:08:57 2015 UTC,"You know, I'm no fan of Doctrine, but if I had to pick between Eloquent and Doctrine, I'd choose Doctrine with both my hands. Eloquent is... well... how do I put it best. A toy."
PHP,3cla9l,utotwel,-16,Thu Jul 9 18:12:40 2015 UTC,"I feel very bad for you. Honestly.  As a follow up, can you please show me what you have contributed to the PHP ecosystem?"
PHP,3cla9l,sekjun9878,6,Wed Jul 8 20:33:58 2015 UTC,"As a follow up, can you please show me what you have contributed to the PHP ecosystem?   Really Taylor? Someone shares an opinion you don't like and you ask them to prove their community worth through some sort of credential?  You should really be more careful in your interactions with the community."
PHP,3cla9l,utotwel,4,Wed Jul 8 20:42:01 2015 UTC,"Yeah.. really.  It wasn't a snide comment directed to /u/utotwel, or had anything to do with him; it was a response to a thread on the topic of sharing your experiences with different ORMs. We work in a world of critics no matter what your project is. Everyone has their opinions, it's free speech, you can expect both the good and the bad. How you respond will shape the readers judgement of the discussion. This is Reddit, afterall.  Clearly a better response would have been to spark a conversation providing facts and insight to counter the criticism. Attempting to make a mockery of them in public certainly isn't the high road. Could have turned into a constructive conversation that readers could also be enlightened with, but instead almost validates the criticism to a reader uneducated on the framework.   In recent events, maybe more OSS projects need more codes of conduct :|  ps, oh hai!"
PHP,3cla9l,lordofworms,-3,Wed Jul 8 23:07:12 2015 UTC,"Counter what criticism? There was none. There was an insult.  Anyways, I have nothing else to add here. Clearly not a place interested in actual constructive discussion. It is Reddit after all :) ... Big talk, no shipping."
PHP,3cla9l,mbdjd,-2,Thu Jul 9 02:24:50 2015 UTC,"No, they should be more careful in their interactions with the community. Everyone wants to put all these rules and restrictions on what community leaders say and do, but nobody wants to say the same thing to the community members. :) ... It's a two way street. I absolutely gurantee you, community leaders take way more crap than they dish out. :)  I would kindly accept any constructive criticism. However, I don't consider dismissing something as a ""toy"" as constructive criticism, especially when said ""toy"" is used in a load of successful applications."
PHP,3cla9l,utotwel,7,Thu Jul 9 04:51:01 2015 UTC,"This whole interaction made me feel dirty. Some thoughts.  As a human being to another human being, I do feel bad that you're obviously affected by my negative opinion. I know it sucks to read Bad Things about something you've done. While I do come off as a sarcastic asshole at times, I have respect for people who put work out there that is useful to someone, never mind what I think about the actual work. So it's not my goal to badmouth you or anything. I've said before I admire your energy and enthusiasm about your projects.  On the other hand, I wasn't talking to you, but to someone who IMO was misdirected into choosing a quite less mature ORM in place of Doctine. I spoke with the idea of helping that person, not with the idea of insulting you.  You're always scanning this subreddit for opinions on Laravel and its components, and take everything as if we direct it personally at you, so where is the balance here? We should be free to share our flawed, subjective opinions, because not every time we open our mouths it can be a PhD dissertation about why we don't like Eloquent for serious work. I and others have already spoken at length about the problems Eloquent has in other threads (magical interface, active record, god class, etc.). And you've made it clear that you don't see the problem.  Regarding ""what I've done"", I'm obviously here anonymously, so I can't start listing work under my name. While I don't think that's a valid argument about whether I'm allowed to speak, I see your point. On the other hand, again, Reddit's community model allows anonymity so if you choose to come here as Taylor Otwell, that's fine, and if I choose to come here as Zen Idiot With Tanks, that's also fine, and it's not appropriate to ask ask me to change this only to prove my ""worth"" to you."
PHP,3cla9l,TheBigB86,2,Thu Jul 9 04:56:07 2015 UTC,"I just take issue with us, as open source community members dismissing something as a toy, when other members of the community have put so much time into them. I personally hated working with Doctrine. I don't think it's a toy - it's an impressive piece of software... It just doesn't suit my taste in ORMs.  Eloquent obviously is going to be disparaged by those who don't like ActiveRecord for their own philosophical reasons, but that doesn't mean it's a toy - I and others have built serious applications with it that make serious money and found it very enjoyable to use.  I would have appreciated it more if you said ""I don't like how it couples your persistence to your models"" or ""I don't think it's as feature complete as Doctrine right now."" But, to literally relegate years of hard work to a snide remark that it's a ""toy"" I find very offensive because it's not constructive or helpful at all in regards to furthering healthy open source community discourse. That's why I came back swinging at you."
PHP,3cla9l,adamwathan,4,Thu Jul 9 02:54:59 2015 UTC,"I agree that some people do like using Eloquent and Laravel, and I can't comment otherwise because I've never used neither before.  But resorting to personal insults to a comment that was not even directed at you? And using your position as an open source project leader to challenge others what little work they have done? Even from an outsider's point of view, I feel that your response to /u/zen-idiot-with-tanks was extremely unprofessional."
PHP,3cla9l,utotwel,2,Thu Jul 9 07:41:09 2015 UTC,"I do take it as directed at me though. I wrote every line of Eloquent.  If I was at a conference and someone came up to me and said ""Man, Eloquent is just a toy""... people would think ""Wow, what a douche.""... but if you say it online it's all well and good. Makes no sense to me.  I have and will continue to have people come up to me and conferences and talk about how ActiveRecord just isn't there thing. I don't care. That's great - I don't care how you program anything. But to say something is a ""toy"" is a whole different thing."
PHP,3cla9l,Architektual,6,Thu Jul 9 12:37:49 2015 UTC,"So here is the Laravel Creator again, who doesn't take negative feedback kindly."
PHP,3cla9l,utotwel,2,Thu Jul 9 13:23:15 2015 UTC,How about actually providing feedback instead of throwing around unqualified insults at other peoples' work? Just a thought.
PHP,3cla9l,Disgruntled__Goat,0,Thu Jul 9 14:57:30 2015 UTC,"This wasn't negative feedback though, this was stating an opinion as fact and phrasing it in a way that's pretty disrespectful, not only to the creator but also the people that use it. You're basically saying that any project using Eloquent is just some ridiculously simple thing that doesn't really matter.  The fact is that the vast majority of projects are probably fine with Eloquent and dismissing something with a flippant comment like that doesn't help anyone."
PHP,3cla9l,utotwel,-5,Wed Jul 8 23:17:12 2015 UTC,"I take constructive criticism nicely. Something you don't know how to provide apparently. :)  Again, I'm curious to know your contributions to the ecosystem?"
PHP,3cprzf,saeeds255,2,Thu Jul 9 20:12:31 2015 UTC,"This is JSON data. You can convert it to a PHP array/object using json_decode() and then loop over it using foreach(). Do you know any PHP?  Do you plan to fetch this feed every second though? You should check that this OK with the feed provider, especially if you are getting it for free - you could be blocked for fetching that quickly."
PHP,3cprzf,halfercode,1 point,Thu Jul 9 20:36:12 2015 UTC,"Thanks , json_decode() can help too much . It should save every json data in array am i right ? then I can check the last array data if (type = buy) > buy_sum = sum amount , else if (type = sell) > sell_sum = sum amount , so what foreach can do ? Actually there are about +50 json data every second and this should handle all of them !"
PHP,3cprzf,halfercode,1 point,Thu Jul 9 22:06:13 2015 UTC,"json_decode() can help too much. It should save every JSON data in array, am I right?   No, json_decode doesn't do any saving. It just converts a JSON string into a PHP array or object.   so what foreach can do ?   See /u/tcmccarthy's answer to see!"
PHP,3cprzf,tcmccarthy,1 point,Thu Jul 9 22:34:45 2015 UTC,"I'm a little unclear -- are you trying to count up the number of objects by type or do you want to sum the value of the amount property for each type. So the sum of $obj->amount where $object->type == ""sell"" and then sum of $obj->amount where $object->type == ""buy""?"
PHP,3cprzf,tcmccarthy,1 point,Thu Jul 9 21:17:45 2015 UTC,"yeah exactly . sum of amount where type == sell and sum of amount where type == buy , It should be dynamic and updates every second ."
PHP,3cprzf,tcmccarthy,1 point,Thu Jul 9 22:09:34 2015 UTC,"It would be difficult to get PHP to update every second. PHP is a pre processor and only executes on page load, you can't put an interval or timeout on it. Additionally, asking a webserver to poll another webserver every second is generally not something you want to do. Finally, unless you commit your calculations to persistent storage (i.e. a database or cookie) PHP won't be able to retain the results from the previous session. What will happen is:  PHP will run, capture the JSON, decode it, total it up and then, when you refresh to fire it again, it will lose the results from the previous load and run it from scratch.  It sounds like you want to do this with something like Python or NodeJS -- you'll have much better luck.  If you do want to fight with this in PHP the following should help you get started:  $obj = WHATEVER CODE YOUR USING TO REQUEST THE JSON FROM THE WEBSERVER  $obj = json_decode($obj);  $sell = 0; $buy = 0;  //loop through object and increment $buy and $sell by value of each row foreach($obj as $key => $row){     if($row->type == ""sell""){           $sell = $sell + intval($row->amount);     } else if($row->type == ""buy""){            $buy = $buy + intval($row->amount);     }  }"
PHP,3cprzf,no_not_me,1 point,Thu Jul 9 22:24:13 2015 UTC,"Thanks , this can help me a lot . So the stated code is useless now , right ? the problem is I don't know anything about python or Nodejs , do they store data ?"
PHP,3cn9e2,Crotherz,3,Thu Jul 9 05:46:21 2015 UTC,"Apache doesn't share socket, it has server socket in master process and client sockets in workers. Why not to use event loop instead (used in nginx workers)? As i can see it fits your needs.  Anyway, there is php-pm for handling HTTP requests with similar approach, you can use it as base. Or if you interested in event-loop approach take a look at ReactPHP. It can handle TCP-sockets.  One think that i could recommend is that you should make your master process as simple as possible, it will only start worker processes and supervise them (will restart failed workers). Server socket in this approach should be moved to some workers process and communicate with other workers with queue or pub/sub. In this case your master process can use event loop and handle all network specific stuff and other workers will only execute commands."
PHP,3cn9e2,fesor,2,Thu Jul 9 07:15:14 2015 UTC,If you haven't started coding yet what you've basically described is how erlang's supervision works out of the box. So it might be worth checking out this as a language choice. Or my personal preference: elixir which is a language which runs on the erlang VM.
PHP,3cn9e2,meadsteve,1 point,Thu Jul 9 09:07:04 2015 UTC,"I've got a couple of daemonization and process management tools on my github (same username) you're welcome to poke around at... but there's a good chance they're the completely wrong tools for the job. My game prototype did a bit of sockets work, but that's designed around single-process usage (and is probably trying to be more clever than it should be around encapsulating the crappyness that is raw socket handling)"
PHP,3cn9e2,Firehed,1 point,Thu Jul 9 11:25:04 2015 UTC,Well it sounds like you are describing RabbitMQ.  https://www.rabbitmq.com/getstarted.html  Possibly with different servers working through a worker queue.
PHP,3cn9e2,AceBacker,0,Thu Jul 9 18:18:00 2015 UTC,"Don't use PHP for this. Yes, PHP is a whole lot better at long-running processes now, but it's still a language fundamentally designed for short-lived, request-based processing.  If the long-running connection accepts individual requests that need to be processed and you are somehow bound to using PHP for them, I would suggest coding that socket layer in something else (I would use Python, but the Erlang suggestion is a good one, or something like Go that has concurrency primitives built into it) and then defer to PHP for the work.  Still, if this is a green-field project, I would seriously consider just using a language with these strengths rather than PHP, which is made to serve web requests."
PHP,3cif73,palpalani,15,Wed Jul 8 03:50:57 2015 UTC,What a time to be alive
PHP,3cif73,StaffOfJordania,1 point,Wed Jul 8 13:04:14 2015 UTC,Woah
PHP,3cif73,Caminsky,43,Wed Jul 8 21:12:26 2015 UTC,I can't wait till my company lets me use php 7 10 years from now!
PHP,3cif73,jimbo_sweets,25,Wed Jul 8 04:40:22 2015 UTC,"Given that they can likely save 30-50% on their resource spending by switching, I think that we'll see a faster adoption of PHP 7 than expected."
PHP,3cif73,dshafik,12,Wed Jul 8 04:43:35 2015 UTC,"Most companies are more about stability than performance. My supervisor is fully willing to spend more money on servers because he's afraid of adopting new technologies. We have a new MariaDB cluster set up that we're migrating to (our two MySQL instances are currently on 5.0 and 5.1) which he fully believes will cause us to lose all our data.  So yes, I too can't wait till my company lets me use PHP 7 10 years from now."
PHP,3cif73,NeuroXc,-1,Wed Jul 8 12:12:48 2015 UTC,Can't fix dumb managers ;(
PHP,3cif73,geggleto,6,Wed Jul 8 14:30:06 2015 UTC,"Whilst his caution is probably unneeded, it's borne of experience seeing things fuck up in front of your eyes despite all preparations."
PHP,3cif73,deletive-expleted,1 point,Wed Jul 8 18:18:05 2015 UTC,"yes, the CEO in my company makes some really weird calls about business, and she is right most of the time"
PHP,3cif73,Deadmoon999,5,Thu Jul 9 01:57:37 2015 UTC,"It depends on what you're doing. At my company probably 99% of resource spending is database and storage servers, so saving 30% on 1% of your spending is not that big a deal.  Not to say it's not a good thing that PHP 7 improves performances, it's great, but in many cases PHP is not the bottleneck anyway."
PHP,3cif73,BlueScreenJunky,13,Wed Jul 8 07:20:51 2015 UTC,"It depends on what you're doing. At my company probably 99% of resource spending is database and storage servers, so saving 30% on 1% of your spending is not that big a deal.   Ah yes: ""PHP performance doesn't matter, cause the bottleneck is the database, man!""   That's a strong meme, and it usually comes from people who have never really profiled their app.  While it's theoretically possible to spend 99% of your resources on a database, this either means the database is used incompetently, or the application is very atypical. And atypical cases don't matter for overall adoption. If the community as a whole moves to PHP7 quickly, the laggards will have no choice but to follow suit as their Composer packages for PHP 5 get EOLed.  I'll just remind you that PHP7's performance gains of 30%-50% have been derived by testing real PHP apps (WordPress, Drupal, etc.) that use a database."
PHP,3cif73,BlueScreenJunky,5,Wed Jul 8 08:53:11 2015 UTC,"I'm not saying the DB is always the bottleneck either...  In our case we only have 4 servers which are used to run PHP scripts and they're not even used at 100% capacity, while we have a dozen database servers (which are also the most expensive ones since they each have 96GB of RAM and only SSD storage) which are pretty much constantly on their knees, and our biggest monthly fees are AWS and a video generation/compression service.  So yeah, in our specific case PHP is probably not what's costing us the most money, but as you may have guessed we're not exactly running a Wordpress site either ;-)"
PHP,3cif73,BlueScreenJunky,18,Wed Jul 8 09:07:15 2015 UTC,"I'll tell Rasmus to add a disclaimer below his PHP7 performance charts: ""results not typical if you run a porn site""."
PHP,3cif73,stfcfanhazz,6,Wed Jul 8 09:15:19 2015 UTC,"Hahaha, yeah that sums it up quite well ;-)"
PHP,3cif73,jose_zap,1 point,Wed Jul 8 09:25:41 2015 UTC,First time ive laughed out loud browsing this subreddit!
PHP,3cif73,mgkimsal,2,Wed Jul 8 19:10:05 2015 UTC,"I think it is more often than not that database (or just I/O) is the most time consuming part of any application. For example I work in an application where serving a page from a query may take 150 ms, whereas php is only taking 30ms in total to process the request. What would you optimize first? The database response time is one order of magnitude bigger than what is done in PHP."
PHP,3cif73,jose_zap,2,Wed Jul 8 10:06:34 2015 UTC,"How is that 150ms measured?  In PHP?  If so, at least some of that 150ms would be impacted by moving to PHP7 as well.  The pulling back of rows should, IIRC, be impacted as well, because that involves memory management, and almost all memory operations are improved because of internal structural changes."
PHP,3cif73,mgkimsal,2,Wed Jul 8 11:48:48 2015 UTC,"In NewRelic, that is raw query processing time in mysql"
PHP,3cif73,MrRiotRick,1 point,Wed Jul 8 11:50:34 2015 UTC,OK - you're possibly a bit of an outlier by having that number be as precisely measured as it is :)  I usually see people measuring query stuff via microtime() calls.
PHP,3cif73,marinespl,1 point,Wed Jul 8 11:52:11 2015 UTC,We do the same thing. The measure mysql performance separately with new relic.  In a lot of cases for us the main bottleneck is the db or plain simple disk i/o.  But maturing the php language is a good thing in general.   I'm glad we have servers running on php 5.5 and 5.6. But also still some stuff left behind on 5.3. In the process of migrating to 5.6. Migrating is quite  a task though if you're maintaining hundreds of websites that all need to be tested on new versions.
PHP,3cif73,erp-expert,2,Wed Jul 8 12:36:54 2015 UTC,"Lol, you don't know his use case."
PHP,3cif73,NeuroXc,-3,Wed Jul 8 10:25:22 2015 UTC,huhu!!! WordPress and Drupal are real apps. Bad joke!!! These products (any kind of CMS) doesnt contain 1% complexity of real business apps.
PHP,3cif73,Bremer_dan_Gorst,5,Wed Jul 8 09:27:19 2015 UTC,"Are... are you trying to make my point for me, or you're simply unaware of the point I'm making?  Anyway, I do enjoy the use of numbers in this thread. Everything is either 1% or 99%. Just bunch of engineers sharing hard numbers is all. Definitely not pulling this stuff from our butts."
PHP,3cif73,erp-expert,2,Wed Jul 8 09:34:40 2015 UTC,"You've obviously never worked as a full-time developer for a real business then, because 99% (yes I'm pulling this number out of my rear end) of the apps I develop at work are simple CRUD apps."
PHP,3cif73,Firehed,1 point,Wed Jul 8 12:17:26 2015 UTC,so you're in a business of storing and presenting data instead of processing that data?
PHP,3cif73,pmrobot,0,Wed Jul 8 14:31:23 2015 UTC,then it's time to move on to real world business ; Get a job in manufacturing or finance sector. I hope someday you 'll understand what this mean. These CURD/CMS kind of products are nothing but kid's play zone work.
PHP,3cif73,mythix_dnb,1 point,Sat Jul 11 13:40:54 2015 UTC,"If you're actually a software company (rather than a company which happens to have a couple scripts), there could be huge cost savings in upgrading once the tools catch up with the new features. Better type system for less buggy code becomes better uptime and faster development. Works for Facebook, at least!"
PHP,3cif73,stfcfanhazz,1 point,Wed Jul 8 08:48:27 2015 UTC,"Yeah not necessarily.  If it were more backward-compatible with older versions, then adoption would be relatively fast.  However, recent versions of PHP keep deprecating and breaking old stuff, so I predict that adoption could end up being painfully slow.  Most people aren't going to re-write their entire application to save a bit on server costs (which are cheap and getting cheaper by the minute)."
PHP,3cif73,gizram84,1 point,Wed Jul 8 13:51:20 2015 UTC,"half of the customers I work for a still on 5.3 ""because this is what's on centOS 6""..."
PHP,3cif73,jedrekk,1 point,Wed Jul 8 15:40:05 2015 UTC,ELI5?
PHP,3cif73,Numeriseur,2,Wed Jul 8 19:04:38 2015 UTC,We just upgraded to 5.5 earlier this year!
PHP,3cif73,mrstejdm,1 point,Wed Jul 8 12:45:28 2015 UTC,Considering my client is on 5.2... yeah.
PHP,3cif73,dshafik,4,Wed Jul 8 09:04:54 2015 UTC,I'm working on PHP 4 right now.. :p
PHP,3cif73,SirMuttley,3,Wed Jul 8 14:12:00 2015 UTC,Check PHP supported versions.
PHP,3cif73,SobakPL,1 point,Wed Jul 8 09:53:14 2015 UTC,"I'm pushing for us to update to 7 early in the new year, On our VMs and Staging."
PHP,3cif73,EvanEdwards,7,Wed Jul 8 15:28:44 2015 UTC,"Looks like it actually drops on July 9th, but still, this is great!"
PHP,3cif73,SobakPL,4,Wed Jul 8 04:43:01 2015 UTC,"Just tested latest build on Rasmus's php7dev vagrant box with Slim 3 beta 1.  $ ab -n 10000 -c 100 http://127.0.0.1/ Concurrency Level:      100 Complete requests:      10000  php5.6: Requests per second:    1343.98 [#/sec] (mean) Time per request:       0.744 [ms] (mean, across all concurrent requests)  php7-dev: Requests per second:    2441.47 [#/sec] (mean) Time per request:       0.410 [ms] (mean, across all concurrent requests)   I had to take a cold shower afterwards to calm down.  edit for 1 request at a time  $ ab -n 10000 http://127.0.0.1/ Concurrency Level:      1 Complete requests:      10000  php5.6: Requests per second:    587.20 [#/sec] (mean) Time per request:       1.703 [ms] (mean, across all concurrent requests)  php7-dev: Requests per second:    906.59 [#/sec] (mean) Time per request:       1.103 [ms] (mean, across all concurrent requests)"
PHP,3cif73,umegastar,7,Thu Jul 9 09:06:29 2015 UTC,"Actually it's not released yet. It just has been tagged, what usually happens day or even two before the actual release."
PHP,3cif73,__loridcon,12,Wed Jul 8 04:45:13 2015 UTC,It's been released to be released!  ;)
PHP,3cif73,Inaniti0n,3,Wed Jul 8 05:03:17 2015 UTC,Well said!
PHP,3cif73,rmas,3,Wed Jul 8 06:47:29 2015 UTC,Is there an upgrade path from this to the final release? I see ondrej has a php 7 ppa.  I have a live project I'm interested in running this instead of HHVM but only if there's an upgrade path through apt-get.
PHP,3cif73,Firehed,1 point,Wed Jul 8 08:49:15 2015 UTC,build your own packages: https://github.com/jordansissel/fpm
PHP,3cif73,kagaku,2,Wed Jul 8 11:52:58 2015 UTC,"Any word on how stable this release is? I understand this is purely a beta, but how close to production ready are we at the moment?"
PHP,3cif73,geggleto,4,Wed Jul 8 08:24:22 2015 UTC,"Here's the release timeline: https://wiki.php.net/rfc/php7timeline  Basically, in June there was a feature-freeze, then release candidates started to be produced for testing and qa - I think the alpha/beta is just based on how stable they are. We should see a gold release (i.e. 7.0) in October."
PHP,3cif73,kagaku,2,Wed Jul 8 08:52:04 2015 UTC,"I personally wouldn't use 7.0.0 in production anyways regardless of beta status, except for personal projects. But that's from a history of less-than-stellar test coverage.   It would be wise to download the betas and start testing locally now though, so you can both spot BC/upgrade issues and potentially report any bugs in PHP itself before the final release. Everyone wins!"
PHP,3cif73,geggleto,2,Wed Jul 8 08:51:55 2015 UTC,"any Windows binaries yet? unfortunately we just migrated off of perfectly good Linux servers, so I'm stuck with what I've got."
PHP,3cif73,kagaku,2,Wed Jul 8 13:47:48 2015 UTC,vagranttttttt
PHP,3cif73,geggleto,1 point,Wed Jul 8 14:32:14 2015 UTC,"Not an option for us, unfortunately."
PHP,3cif73,goyney,2,Wed Jul 8 15:43:52 2015 UTC,docker ?
PHP,3cif73,tamcap,2,Wed Jul 8 15:51:51 2015 UTC,"Same. Unfortunately, getting new software approved is a major headache and likely won't happen here (one of the top 10 largest companies in the US). My only options are maintaining the existing software stack. Even software upgrades between major versions (such as this one for PHP) will require a lot of effort to get approved, which is why I'd like to start earlier rather than later."
PHP,3cif73,Disgruntled__Goat,1 point,Wed Jul 8 16:07:36 2015 UTC,earlier rather than   ahhh damn that sucks.... ;(
PHP,3cj0yn,nobrandheroes,28,Wed Jul 8 08:01:52 2015 UTC,"Eh, come on man, just check the folder /tests on any bigger open source project. We write tests.  That said, if you start reading the tests people write, you'll notice some projects have fake tests designed only to maintain the appearance of having a test suite. They may be mocking the thing being tested, or testing hilarious stuff like ""hey is new Foo()... an instance of Foo?"" either because they don't really give a damn, or because the nature of the component may be hard or impossible to fully automate or unit test properly (UI components, third party service integration components, etc.).  Even if you can't give a damn about unit testing your library, fake unit tests are a necessity of modern day FOSS development, as an effective tactic preventing unit test zealot wrath. See, zealots want you to have tests, but they're too lazy to read the tests, so having any tests at all is sufficient to shut them up. It's kind of like using garlic against vampires. Not as good as holy water or a stake to the heart, but good enough in most cases.   One of those days someone will write a self-hosted fake unit test generator for this purpose. Just click, and you now have a bunch of useless fake unit tests. The SCIgen of unit testing."
PHP,3cj0yn,shivenigma,8,Wed Jul 8 08:27:00 2015 UTC,Now I will be compulsively checking everything in my vendor folders just to see if this is true. Thanks...
PHP,3cj0yn,throwaway7n3xp0,5,Wed Jul 8 08:54:34 2015 UTC,"It's kind of like using garlic against vampires. Not as good as holy water or a stake to the heart, but good enough in most cases.   Really liked it.."
PHP,3cj0yn,davertua,5,Wed Jul 8 09:58:44 2015 UTC,Are you /u/idiot-with-opinion'?
PHP,3cj0yn,pmjones,1 point,Wed Jul 8 14:51:35 2015 UTC,"Yeah, sounds fun, but no, real unit tests is a must for any OS project. As a lead of Codeception I can tell that we don't have fake tests there. Any complex scenario or issue that was fixed should come with a test for that to make sure we won't step on the same rake again. Our test suite is running for about 20 minutes and involves all-kind-of-testing. And yeah, testing Codeception itself is not an easy thing https://github.com/Codeception/Codeception/tree/2.1/tests#codeception-internal-tests"
PHP,3cj0yn,tamirvs,7,Fri Jul 10 00:08:48 2015 UTC,"Unit tests, for everything; I follow The Way Of Testivus, which helps cultivate a good attitude toward testing:   The pupil asked the master programmer: “When can I stop writing tests?”  The master answered: “When you stop writing code.”  The pupil asked: “When do I stop writing code?”  The master answered: “When you become a manager.”  The pupil trembled and asked: “When do I become a manager?”  The master answered: “When you stop writing tests.”  The pupil rushed to write some tests. He left skid marks."
PHP,3cj0yn,alexanderpas,7,Wed Jul 8 13:26:00 2015 UTC,"Every time a test fails after writing a new patch I thank my past self for writing these tests, boring and time consuming as it may have been."
PHP,3cj0yn,spliceruk,1 point,Wed Jul 8 13:20:55 2015 UTC,"Also, each time you discover a bug, you write a new test, and prevent it from ever happening again unnoticed."
PHP,3cj0yn,Cysioland,6,Sat Jul 11 18:22:18 2015 UTC,"Everyone should write unit, integration and functional tests as appropriate for the code that they create. It makes refactoring easier, it makes you more confident in your code and the code written by others.  However, writing good tests is actually really really hard, try to test the business rules via the public interface for your code rather than the implementation details as you will find your tests come back to bite you less often.  Also set up jenkins or travis etc to run your tests automatically for you."
PHP,3cj0yn,spliceruk,5,Wed Jul 8 11:05:14 2015 UTC,pubic interface    Freudian slip? 😆
PHP,3cj0yn,jaebigdong,5,Wed Jul 8 18:50:16 2015 UTC,whoops
PHP,3cj0yn,phpdevster,7,Wed Jul 8 22:11:07 2015 UTC,I always defer writing my tests till tomorrow
PHP,3cj0yn,ThePsion5,3,Wed Jul 8 19:40:23 2015 UTC,"Sometimes they're actual unit tests, sometimes they're integration tests, sometimes they're acceptance tests. I don't separate them into different types, because often times the distinction between them is too fuzzy to justify it.  At the end of the day, I just want to know that A still outputs B when I refactor, so I write tests to cover that. If the output is the return statement of a function, great. If it's the final return statement of a series of functions or object calls, great. If it's what I see in my browser, great. If it's what goes into the DB, great. Well, great until I'm dragging too much in to test it quickly - but only when my tests start taking longer than they should do I start looking at pulling heavy functional/acceptance tests apart into faster unit tests.  Also, I don't write tests first. I design the API first to make sure it's not bat fuck insane, THEN I write tests for it. API comes first though - I'll sacrifice fully decoupled testability for a clean, easy-to-use API.  When I do write unit tests, I also test only public methods unless for whatever reason I have a protected method that's heavily used by a bunch of subclasses and want to make sure it does what it's supposed to.  What I don't do is write the kinds of tests that PHPSpec was meant to cover - the kind that test the messaging structure of your app (e.g. B gets called by A). I don't see the purpose of that - that's implementation detail and I don't want to test that. The output of A shouldn't depend on whether B gets called or C gets called. If I should choose to refactor my application to use C instead of B, it shouldn't break my test....  But I've not practiced that kind of testing that much, so I'm probably applying that concept incorrectly. For the most part, I just test output. 90% of my tests are $this->assertSame/Equals($actual, $expected);. The other 10% are testing the right exceptions get called."
PHP,3cj0yn,SirMuttley,7,Wed Jul 8 13:08:39 2015 UTC,"To be fair, most web devs probably don't participate in the greater PHP community in anyway. They just go to work, write code 9-5 the same way they've been writing it most of their career, and then go home and think about other things."
PHP,3cj0yn,YugoReventlov,1 point,Wed Jul 8 15:27:21 2015 UTC,"That pretty much describes 90% of the PHP candidates I see.   Number of tests I've seen from people with ""OO experience"" because they use a framework, but then write all of their code in the controller other than the Active Record models to manage the data in the database.  edit recruitment tests, not unit tests"
PHP,3cj0yn,webdeverper,3,Wed Jul 8 17:00:53 2015 UTC,"I don't know what kind of projects you are working on, but if you're working with multiple people on an application with lotta ins, lotta outs, and releasing more than every 6 months (let alone every week, or continuous), I don't know how you would do that confidently without tests.  I have retro-tested existing applications and found bugs that had been in production for 5 years. And they really mattered to business, but nobody ever reported it."
PHP,3cj0yn,YugoReventlov,1 point,Thu Jul 9 09:22:39 2015 UTC,Ever find those bugs that when you fix them it actually breaks the system because everything was expecting that bug to be there?
PHP,3cj0yn,Revisor007,1 point,Wed Jul 8 10:37:29 2015 UTC,"Sometimes they have cascade effects, yes. Then you build tests for every case you fix, and you'll never have that problem again - or when you do, you know right away.  Usually when you wonder into that situation, the solution is to refactor (with tests)."
PHP,3cj0yn,halfercode,3,Fri Jul 10 02:58:18 2015 UTC,"We are a small team and have decided to write unit tests for everything. A code is not let through a code review if it's not properly tested. As for what should be tested - any method with logic (ie no simple getters and setters).  We have also started writing acceptance tests because a lot of our legacy code is untestable (the app is old and old parts are written in spaghetti style).  We have decided to use PHPSpec for unit tests and Codeception for acceptance tests. I find PHPSpec more readable than PHPUnit and I really like that tests in both PHPSpec and Codeception read like English sentences.  The whole process (writing tests, undergoing multiple rounds of code review) is quite a lot slower, but we have seen again and again that it helps to find bugs that would otherwise go directly to production.  We don't force anyone to write TDD or BDD style, that is write the tests first, but I know at least one of my colleagues has tried it and was pretty happy with it."
PHP,3cj0yn,NeuroXc,3,Fri Jul 10 05:17:26 2015 UTC,"Yes, as much as possible. Unit tests and then browser/functional tests on top. I'm a PHP dev, so all tests go through PHPUnit. Browser tests use Selenium or Spiderling/Phantom.  Some employers I've worked with are not willing to set aside the time necessary. It's harder to do it if you're a freelancer, since making a case for testing for smaller employers and/or time-limited projects can be tricky. If you're prototyping, go easy on the tests, since you don't want to have to re-write if a UI or workflow changes. Bulk up your tests when your app starts to take shape.  Tip: write your tests so they will parallelise as much as possible. Big browser test suites can take hours to run, and if they won't parallelise, getting a green build cannot be sped up by throwing hardware at it. (One of the big sites - something like LinkedIn, I forget which - reportedly had a set of functional tests that took ten hours to run!).    Do you do any PHP? Here's some unit/browser tests for a F/OSS app I wrote."
PHP,3cj0yn,freebit,2,Wed Jul 8 20:05:52 2015 UTC,"I write tests because otherwise my boss won't let me deploy the apps I write.  Seriously, it is useful though. Even if you only find a bug in 1 out of 100 tests, finding and fixing a bug is always worth it."
PHP,3cj0yn,stefanotorresi,2,Wed Jul 8 20:31:19 2015 UTC,I write tests. Tests are important. Tests help me design. Tests help me ensure I don't break things when I add features. I need my tests. They make me feel safe at night. Please don't ever take my tests from me. I would rather die first.
PHP,3cj0yn,downboat_to_the_left,2,Wed Jul 8 12:23:10 2015 UTC,"It's more a matter of mindset and culture. You'll see all the actual benefits in the long run, and once you get used to the confidence that tests give you, you'll find very hard to do without; plus you'd feel guilty and dirty, like when your codebase is not really complete, or it has some smells you know about but you're too lazy to fix them."
PHP,3cj0yn,SpiffyJr,2,Wed Jul 8 15:56:52 2015 UTC,I don't write tests. I work in a small company ~70 persons and I do work on small projects that I'll eventually tweak for a few days every now and then but I'm not given any time to write tests.
PHP,3cj0yn,Kratzyyy,1 point,Thu Jul 9 08:33:35 2015 UTC,"If I'm writing something I intend to release as OSS then I write tests so that people using my software can have confidence that it works. I didn't always practice this so some of my older code is still without tests. Prototyping applications I generally skip testing on until I know I'm in the project for the long haul.  As an aside, you should always keep testing in mind. As long as the code you're writing is easily testable then you'll have a much easier time down the line."
PHP,3cj0yn,mjcov,1 point,Thu Jul 9 20:39:00 2015 UTC,"No I don't. But I'm realising now that it's a very bad thing that I don't, and I'm making steps to change that. I've already started writing unit and integration tests in my side projects.  Unfortunately, convincing managment and the other webdev I work with that we should wrote tests for new projects is extremely difficult."
PHP,3cj0yn,BlueScreenJunky,1 point,Wed Jul 8 16:15:44 2015 UTC,"I've started working at a place that does insist on having unit tests for all new features that get put in the product, and I'm actually for the first time enjoying writing tests, because it is such a complex product, there is no other way for me to see if the code I've written is working properly. In the past I've usually been able to just reload a page and see if everything was working, and for most of my bosses, that has been what they wanted - get it done fast and ""just make it work"" without regard to quality.  I've actually been spending a lot more time writing and improving test coverage than writing actual code, because I've been working on fixing old code and I'm not deeply familiar with the whole codebase yet, so I need to make a lot of assertions about the code - that what I'm doing both works properly, and replicates or improves upon the older code's behavior."
PHP,3cj0yn,blamekaneda,1 point,Wed Jul 8 23:18:01 2015 UTC,I don't usually write tests. Only for stuff that I know I'll be reusing a lot and might have a disastrous effect if they break.
PHP,3clvgr,Renegade-One,1 point,Wed Jul 8 22:39:37 2015 UTC,"There is no such thing as ""SHA256 with RSA"". They are different algorithms that have no interaction or standard construction together. I would suggest checking back with the specification you're using..."
PHP,3clvgr,ircmaxell,1 point,Thu Jul 9 00:46:55 2015 UTC,"Sorry to be amiss - I have been pouring over everything I can find. I have a private key, and in the Java code I saw, the function for the signature was passed a value called 256hashwithRSA, which confused me.  After about an hour, I think I can identify the function call I'm looking for - openssl_private_key. Will post back results"
PHP,3clqwc,verbify,17,Wed Jul 8 22:04:02 2015 UTC,"It has an elephant as a mascot, can't beat that."
PHP,3clqwc,teuna,6,Wed Jul 8 22:14:07 2015 UTC,"Every page request has its own state, so no chance for slowly developing subtly wrong and hard to debug application states (persistent state excluded) and memory leaks. Also no application-wide crashes - every page crashes on its own, which limits the effect of a catastrophic bug severely. Fast feedback during development - refresh the browser and see what happens (matches also how you do client-side JS). Glue language - connects to everything through a bunch of extensions and the dynamic typing system means it's easy to grab data from one place, reformat it and throw it another place with least amount of effort. It has an object type system which, in my humble opinion surpasses Python, Ruby and JS for mid-size apps (for small apps it doesn't matter; for medium size apps it starts to matter seriously; and for big apps it becomes crucial, but at this point you'd use Java, C#, etc. for the services).1 It's f***ing everywhere.   1 For JS a way to solve this is using TypeScript, which changes the entire experience of doing JS code (for the better)."
PHP,3clqwc,no_not_me,3,Wed Jul 8 22:48:12 2015 UTC,"Deployed hosting companies. I mean, you really can pick and choose. Of course you'll have to miss out the ones with 5.2 on them."
PHP,3clqwc,theshad0w,6,Wed Jul 8 22:35:42 2015 UTC,"To say it excels is probably not the best question to ask. The better question to ask is ""where is it the right tool for the job?""   The answer is it depends on context. PHP affords a new developer a very welcoming community with a mature set of features, libraries, and frameworks.   Just like all languages you can write shit code if you're not well versed in CS foundations. Like all languages it has quirks and annoyances that unfortunately due to backwards compatibility and history are still present.  It's not going to be the best tool if you want to build a desktop application. It's also not going to be the best tool if you want to create long running processes. Or if you need parallel processing.   However, if you want a language that integrates easily and well into web servers for delivering dynamic pages or if you want to create command line tools then PHP is an excellent tool. It also maintains quite the broad integration library for various data stores.  For what it does well it can be highly performant and when combined with other technologies such as caching and load balancing it can become extremely performant. In the edge cases using tools such as Facebook's compiler you can gain even further performance at the cost of some language flexibility.  I see this all the time all over the place. Developers who rave that some language or tech is the best thing since sliced bread. In reality all technologies have their strengths and weaknesses and understanding those will help you decide if it will be the right tool for you."
PHP,3clqwc,GlowInTheDarkDonkey,2,Wed Jul 8 22:15:41 2015 UTC,"Lots of people have a tendency to shit on PHP (e.g. /r/lolphp[1] )   I think most of the time it's shitty coders shitting all over themselves and then pointing at PHP as the culprit, or otherwise it's ""it doesn't do it how I want it to do it so it's wrong"".  I think PHP excels at being fucking easy to get momentum if you are already familiar with other c-like languages.  To me that's its biggest drawcard, and the biggest reason I truly can't be bothered with Python yet.  I'm getting too old and tired for this shit and don't need yet ANOTHER way to write what is essentially the same thing that has been done for decades in languages that are given less love these days.  It's all more-or-less the same shit dressed-up in a different suit."
PHP,3clqwc,AceBacker,1 point,Fri Jul 10 11:00:11 2015 UTC,PHP is really easy to learn.  You don't even need to know how to do things the right way to get a webpage up and running.  This is PHP's greatest strength. . . and probably why people tend to hate on PHP.  Because of all the poorly coded legacy stuff that is everywhere.
PHP,3clqwc,dsarchy,1 point,Thu Jul 9 18:15:20 2015 UTC,You can get a job; really easily.
PHP,3clqwc,malkusch,0,Fri Jul 17 19:29:43 2015 UTC,PHP does by no means excel above other languages. Besides its myriads of disadavantages I do see these advantages:   It's meant to live only for a request. This makes it really hard to create a memory leak or think about thread safety. It's interpreted. You can see effects instantly. Developers are available and cheap.   And that's it. And yes those advantages can also be perceived as short comings. It's just a matter of perspective.
PHP,3clg9k,dadamssg,2,Wed Jul 8 20:47:09 2015 UTC,"You realize your entire test is broken because you're trying to open a socket to a domain name called ""http://google.com"" right?  This will cause name resolution failure and pad up the time of the request, while at the same time outright failing.  I modified your code to look like this:  <?php class HttpVsUdpTest {     private $host = 'google.com';     private $port = 80;     public function test()     {         $this->testHttp();         $this->testUdp();     }     public function testHttp()     {         $data = [""hello"" => ""world""];         $json = json_encode($data);          $start = microtime(true);          $ch = curl_init(""http://{$this->host}"");         curl_setopt_array($ch, [             CURLOPT_CUSTOMREQUEST => 'POST',             CURLOPT_RETURNTRANSFER => false,             CURLOPT_USERAGENT => 'api',             CURLOPT_TIMEOUT => 1,             CURLOPT_HEADER => 0,             CURLOPT_FORBID_REUSE => true,             CURLOPT_CONNECTTIMEOUT_MS => 50,             CURLOPT_DNS_CACHE_TIMEOUT => 10,             CURLOPT_FRESH_CONNECT => true,             CURLOPT_HTTPHEADER => [                 'Content-Type: application/json',                 'Content-Length: ' . strlen($json)             ],             CURLOPT_POSTFIELDS => $json         ]);         curl_exec($ch);         $end = microtime(true);         $ms = ($end - $start) * 1000;         echo ""HTTP took $ms milliseconds \n"";      }     public function testUdp()     {         $data = [""hello"" => ""world""];         $json = json_encode($data);         $start = microtime(true);         $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);         socket_sendto($socket, $json, strlen($json), 0, $this->host, $this->port);         socket_close($socket);         $end = microtime(true);         $ms = ($end - $start) * 1000;         echo ""UDP took $ms milliseconds"";      } }  $test = new HttpVsUdpTest(); $test->test();   and the results were:   HTTP took 60.786962509155 milliseconds  UDP took 0.85115432739258 milliseconds   Which is not surprising, considering how much extra work cURL/TCP is doing which the UDP request is not.  In fact, the UDP request couldn't even really be considered a properly formed request for a webserver, since it's not sending anything other than the json making the two operations less than equivalent.  UDP is faster and lighter than TCP, but is also more prone to errors and has no method of recovery.  TCP is far more reliable, has methods to retransmit packets that don't make it, and has a sense of packet order that UDP does not.  So, UDP is best suited to situations where one-way communication is required, errors and dropped packets can safely occur, packets being out of order is ok, and performance is paramount."
PHP,3clg9k,tommeyikya,1 point,Wed Jul 8 21:58:29 2015 UTC,"Similar for me (although it prints a full ""Error 405 (Method Not Allowed)"" HTML page for me in cli):  HTTP took 49.756050109863 milliseconds UDP took 0.88787078857422 milliseconds"
PHP,3clg9k,tommeyikya,1 point,Wed Jul 8 22:09:12 2015 UTC,"It's not a good endpoint, since google.com probably won't like either request.  The only difference is the UDP request collects no response so you can't see google freaking out over it."
PHP,3clb41,kloips,2,Wed Jul 8 20:11:52 2015 UTC,What is the reasoning for needing this? It sounds like a better design can solve your problem without some sort of runtime generation of inheritance.
PHP,3clb41,Meefims,1 point,Wed Jul 8 20:16:15 2015 UTC,"There is a class that encapsulates a lot of things, and has to read all those things from a database, from different tables when instantiated. Sometimes not all of those things are needed, but only a few of those. If there is a better way to solve an issue like this, I'm happy to learn."
PHP,3clb41,Meefims,3,Wed Jul 8 20:24:30 2015 UTC,"Instead of having a single class take care of everything, why not have a set of individual classes each with a single responsibility?"
PHP,3clb41,Meefims,1 point,Wed Jul 8 20:40:08 2015 UTC,"This is a good suggestion, but I don't think it's applicable in my scenario. The base class has one-to-many relationships with many kinds of entities, and therefore needs instant access to them to perform different things. It is in the scope of responsibility of the base class to do these things, it just happens to apply these entities to produce the result."
PHP,3clb41,Meefims,2,Wed Jul 8 20:59:07 2015 UTC,Can you give a concrete example?
PHP,3clb41,Terr_,1 point,Wed Jul 8 21:21:19 2015 UTC,"There is a class, 'Issue', which contains the following: 1) assignees (whom it is assigned to, a list of user IDs) 2) attachments (not the files themselves, just general information about them, like name and size) 3) comments (similar to Reddit comments, with a text, place in comment hierarchy, but no voting system)  Issue itself contains a lot of information (e.g. category, progress, description). There is a table which contains the relationships between users and issues (who is assigned to which issue), a table for attachments, and a table for comments. When instantiating an issue, the information of the issue, its assignees, the attachments and the comments are all fetched via separate queries. In the app, there are various ways of managing the issues (i.e. viewing them).   For example, an assignee can view just brief details about an issue, i.e. the Issue's category, progress, etc, but no attachments or comments. When the issue is clicked, a GET request is sent with the corresponding Issue's ID. The fetched Issue object is encapsulated with all the aforementioned things (assignees, attachments, comments). It is first checked whether the user is really assigned to the issue (for security purposes). Then, the core parts of the Issue are presented.   Assignees are encapsulated to the Issue, and they are used. But the problem is that attachments and comments are fetched, but are left unusued.   There is also a way to view comments in a hierarchical way with very brief details about the Issue. This last one doesn't use attachments at all. There are more properties of an Issue than the ones I listed here (I simplified), and the number of combinations is too high to create a class for each necessary combination."
PHP,3clb41,Terr_,2,Wed Jul 8 22:00:32 2015 UTC,"It sounds like you have several objects that really don't need to be bundled together: The Issue, the Issue Attachments, and the Issue Comments with possibly brief versions of each (maybe IssueOverview and Issue for brief vs full).  Issue could have a method attachments() which lazily performs the necessary query and returns the IssueAttachment objects. Similarly a method comments() which returns the IssueComments. IssueOverview could have the same methods, perhaps implemented using a common trait.  Would this not work for your scenario?"
PHP,3cmf97,dracony,1 point,Thu Jul 9 01:17:31 2015 UTC,"Grats on 3.0.  How come none of the source is commented though?  Wondering if it's just personal preference or what?  I personally can't work like that even if my methods are extremely descriptive, just makes things seem more organized and readable."
PHP,3cmf97,SaltTM,1 point,Thu Jul 9 03:35:15 2015 UTC,Thanks!  I'll be adding documentation to every method after I finish writing the tutorial. I skipped it for now since my classes and architecture used to change a lot as time went on (I actually made a joke that in the span of writing the new ORM I probably wrote 3 different ones). PHPixie 2 has docblocks for every method and this will be the case for 3 too.  As for personal preference I dont usually write them if I am the only one reading/writing the code.
PHP,3cmf97,gripejones,1 point,Thu Jul 9 10:17:24 2015 UTC,"I tend to just berate myself in my docblocks (personal projects.. mostly).    /**   * Here comes some ugly ass code. Good luck future-self.   */   This is something I have in a nasty parser I wrote. In my defense the output I was having to parse was sometimes CSV, sometimes space delimited, sometimes had key=value and hate everything about it.   Another gem from that parser:  /**  * I hate you - you nasty fucking method   So yeah, my docblocks are useful."
PHP,3cmf97,poniprincess,1 point,Fri Jul 10 20:02:45 2015 UTC,Strict mode is disabled this code coverage result doesn't mean shit
PHP,3cmf97,poniprincess,1 point,Fri Jul 17 01:50:25 2015 UTC,How so? Don't you see that each test is annotated to test a specific set of method. There are @covers tags  before every test
PHP,3cmf97,bga9,1 point,Fri Jul 17 09:30:06 2015 UTC,So what you have annotated your tests when test runner doesn't do checks for unintentionally covered code? Right now it's including into coverage report every possible piece of code that your tests might have bubble to without your permission or knowledge.
PHP,3cmf97,ellisgl,1 point,Fri Jul 17 14:14:32 2015 UTC,"No, you are wrong, the annotations limit what gets included in the report. Try it yourself, clone any PHPixie library ( phpixie/slice is the smallest one), run composer update and then run a single test:  php phpunit.phar --filter=""SomeTest::youLike()"" --coverage-html=/some/folder  and you will see that the coverage includes only the result from the functions mentioned in @covers  In fact I doubt you will be able to find a test that ""bubbles to"" somewhere outside the tested class, since I mock ALL of the dependencies."
PHP,3cmf97,ellisgl,1 point,Fri Jul 17 18:18:27 2015 UTC,"So PHPixie 3.0 is finally here and the tutorials will be coming out soon.  With the default project it totals 54936 lines of code (tests included) and over 500 classes.  A detailed description is also coming soon, but for now one my favourite features is having an ""Abstract Framework"" which the default framework implementation extends. This means it's super easy to create your own framework without having to wire everything anew. To create your own framework sitting on top of the abstract one all you need is provide an implementation for a single interface.  So much to write about, I'm super excited =) Hope you like the coverage stats, a lot of effor went into that =)"
PHP,3cmf97,olivier42,1 point,Thu Jul 9 01:24:27 2015 UTC,"Hey, that's awesome! Congrats on the release!"
PHP,3cmf97,ellisgl,-1,Thu Jul 9 03:14:00 2015 UTC,I was just looking over PHPixie/Project and noticed that web/index.php points to vendor directory in the root that doesn't exists...
PHP,3cmf97,no_not_me,1 point,Thu Jul 9 02:13:46 2015 UTC,"Mmm, are you sure?  https://github.com/PHPixie/Project/blob/master/web/index.php"
PHP,3cj1pg,EquinoxMist,2,Wed Jul 8 08:12:01 2015 UTC,There is some good advice in /r/Magento/comments/3cg8yo/supee6285_released_please_update_your_systems_7715/  about applying this patch properly.
PHP,3cj7ja,palpalani,3,Wed Jul 8 09:37:36 2015 UTC,"Did I do it right?  <?php  $phpVersion = 6;  echo 6 === $phpVersion ? ""Next step !"" : ""No !"";"
PHP,3cj7ja,Jonny_Axehandle,1 point,Wed Jul 8 12:55:58 2015 UTC,The description is not explicit enough. The goal of this step is to change the value of the variable $phpversion  The steps validation are done with php-ast (https://github.com/nikic/php-ast)
PHP,3cj7ja,GDievart,2,Wed Jul 8 22:04:30 2015 UTC,"A terrible site. It titles itself as a 'tutorial', but is more akin to a selection of tasks. There's no explanations given or pointers to documentation. You essentially need to already know what the changes in PHP 7 are before using the site.  The first task also appears to mention PHP 6, which could be potentially confusing.  In its current form, I don't see how this site holds any real teaching value."
PHP,3cj7ja,AllenJB83,1 point,Wed Jul 8 09:55:03 2015 UTC,"If you already know an overview of the changes in PHP 7 (eg if, like me, you've been following the RFCs) then this is a great summary. Making it interactive help you remember too."
PHP,3cj7ja,dave1010,1 point,Wed Jul 8 14:11:40 2015 UTC,"Hello,  each step contains a link to its RFC. Maybe this link is not enough visible ? Or the description is not sufficient ?  The main objective of this site, is to show quickly to developers all the new change/feature implemented in PHP7.  If you have suggestions to improve it, I will take them :)"
PHP,3cj7ja,GDievart,1 point,Wed Jul 8 21:51:24 2015 UTC,"That was quite a harsh comment. Every single step has a title, a problem definition AND a comment in the code that tells you what to do.  I went through all 35 steps very easily. Even though I was aware of most of the changes, I still learned a few things.  I appreciate the effort."
PHP,3cj7ja,doMynation,1 point,Thu Jul 9 02:51:48 2015 UTC,"The interactive reference is nice, maybe add some links to the actual documentation for support!"
PHP,3ck726,gilded_honour,4,Wed Jul 8 15:34:05 2015 UTC,"You can make Ruby (or Python) and PHP communicate with each other through HTTP messages, but you're instead suggesting bypassing PHP and editing directly in the database, which is a recipe for corrupted data and violated business constraints (which the PHP model for that database certainly enforces).  Without more detail I'm forced to conclude what you're doing is silly. Either integrate the two components (your scripts and that WordPress component) through a proper interface, or write a few lines of PHP that'll get the job done. PHP is not scary. It's very similar to Python, just take your Python script and sprinkle on some of those...  $ -> => { } $ -> { ->  <?= $ $ -> => $ -> => { } $ -> { ->  } $ $ -> =>  } $ $ -> => $ -> => { } $ -> { ->  } $ $ -> => $ -> => { ?> $ -> { ->    => { } $ -> { ->  } $ $ -> => $ ?> => { } $ -> { -> ?> $ $ -> => $ ->  $ -> => { } $ -> { <?= } $ $ -> => $ -> => { } <?= -> { ->  } $ $ -> =>  } $ $ -> => <?= -> => { } $ -> { ->  } $ $ -> => $ -> => { } $ -> { ->      ... and you're set."
PHP,3ck726,tcmccarthy,2,Wed Jul 8 16:06:40 2015 UTC,"If it's wordpress you can install and activate Wordpress' JSON API plugin which will allow you to use endpoints to capture, alter and create data.   Wordpress plugins really should be PHP -- it's not really a plugin if the end-user will need to follow special steps to implement it (e.g. daemonizing your script or scheduling a cron for it). However, if you do want to work with Ruby or Python you can do so without direct DB writes via the above plugin. If you do choose to alter data directly in the DB, I'd become familiar with the DB structure and how the CMS handles postmeta, revisions, etc so you can emulate the wordpress experience -- afterall the CMS loses its value if you compel your end-user to operate outside of it."
PHP,3ck726,dczx,1 point,Thu Jul 9 22:49:52 2015 UTC,"It's pretty easy to use php to call stuff out of the mysql db.    If you use python or ruby you will have to create a whole new connection, it would be a pain."
PHP,3ck726,dczx,1 point,Wed Jul 8 18:04:06 2015 UTC,"it's not only ""call and update the db"". It's also fetch the data and parse it first."
PHP,3ck726,__constructor,1 point,Wed Jul 8 18:15:11 2015 UTC,"You can use the database as a makeshift message queue.  Use a separate table where your Ruby/Python scripts push processed data for importing, commands to invoke etc. Then have a very minimal PHP script read from that temp table and use the correct service API to update the real table. It's essentially what I suggested above with ""integrate the two components through a proper interface"" but using the DB instead of HTTP for messaging.  It doesn't matter how you really connect them but maintain the encapsulation of every component, don't skip layers."
PHP,3ck24c,patroklo,3,Wed Jul 8 14:57:43 2015 UTC,Here are some links to help you find projects:   http://up-for-grabs.net/ http://www.codetriage.com/ http://www.lookingforpullrequests.com/project/ https://openhatch.org/search/ https://help.github.com/articles/where-can-i-find-open-source-projects-to-work-on/
PHP,3ck24c,colinodell,2,Wed Jul 8 15:57:00 2015 UTC,A few of them are    https://github.com/auraphp https://github.com/distillphp https://github.com/hoaproject https://github.com/radarphp https://github.com/slimphp https://github.com/sparkphp https://github.com/thephpleague   Hope that helps!
PHP,3ck24c,harikt,1 point,Wed Jul 8 16:51:52 2015 UTC,Any one of my projects: http://www.github.com/dotink
PHP,3ck24c,mattsah,1 point,Wed Jul 8 17:34:25 2015 UTC,A personal project : https://asgardcms.com/ (https://github.com/AsgardCms)
PHP,3ck24c,Hafuu,1 point,Wed Jul 8 17:43:57 2015 UTC,"Jeje, I'm starting this days one of those only for learning purposes but in Yii2, not a big fan of laravel myself (also don't want to start a discussion about sega/nintendo php frameworks right now, don't take it wrong, just only giving my oppinion), it's very cool, I'm reading the documentation right now, very detailed; I think that you are also using adminlte as frontend design?"
PHP,3ck24c,Hafuu,1 point,Fri Jul 17 15:05:40 2015 UTC,"Correct, AdminLTE is used as the default admin theme."
PHP,3ck24c,dracony,1 point,Fri Jul 17 15:56:42 2015 UTC,"The best appriach is to find a project you actually use instead of a random one. This will make sure you are invested for a longer time.   Also dont limit yourself to php, the code editor you use is probably also an opensource project yoy could contribute too )"
PHP,3ck24c,MadMakz,1 point,Wed Jul 8 20:21:16 2015 UTC,"Well, in the past I used one of those, but right now it's a broken ide that I won't touch even with a stick. Right now I'm using phpstorm, also, not a big fan of java and it's infernal developments.  About projects I use, as i have said, right now I prefer to be away of bigass projects with docens or hundreds of developers, they have all the help they need."
PHP,3cg28q,xgrave01,18,Tue Jul 7 17:08:36 2015 UTC,"http://www.indeed.com/jobs?q=junior+php&l=Brooklyn%2C+NY  Looks like most JR PHP positions in Brooklyn are starting in the $50k area, with about half of them starting at $70k plus. You're being severely underpaid and your company is making a killing off of you."
PHP,3cg28q,HardKnockRiffe,12,Tue Jul 7 17:57:32 2015 UTC,"Yeah I've looked through the numbers but I didn't believe them solely based on my situation and what I personally make. It's turning out to be that my salary is the unbelievable one, lol."
PHP,3cg28q,Firehed,6,Tue Jul 7 18:02:28 2015 UTC,"Even that sounds very low. I'm going under the assumption that NYC is on par with or slightly below Silicon Valley when it comes to software engineers though.   For reference: there were junior people getting 160k offers for some roles. Granted that was devops and the company was desperate for it, but interns start over 60k these days and 100k is normal for maybe a year or two out of school (if not an fresh grad)"
PHP,3cg28q,HardKnockRiffe,5,Tue Jul 7 18:06:03 2015 UTC,"Well, that was just me going to indeed and typing in ""junior php"" in the search bar. Obviously, there will be fluctuation, but I feel like $70k-ish is probably more appropriate for the position."
PHP,3cg28q,itsSparkky,3,Tue Jul 7 18:13:25 2015 UTC,"I think 70k is a bit much for me to ask for since I don't really know any frameworks, but yeah I would be really happy with 60k. and then maybe 80k when I have 4 years of experience."
PHP,3cg28q,cincodenada,6,Tue Jul 7 18:40:28 2015 UTC,"Stop calling yourself junior is the first step.  If your leading anything, just drop junior from your title and expect your company to adjust accordingly. You'd be surprised how far that will go.  Secondly, knowing frameworks has almost  nothing to do with job titles; there are senior developer who may have never worked in an open source framework their entire career, what matters is your ability to learn new things, solve problems, and work with other people."
PHP,3cg28q,d_abernathy89,2,Tue Jul 7 20:45:15 2015 UTC,"It's relative to my company, the senior dev (the only dev aside from me for that matter) is somewhat of a prodigy and is underpaid as well, and he's been with the company for 8 years. He only makes 10kish more than I do, there's no way I will get paid more than him, he is the backbone of the business, as in, more integral than the owner. I just don't see any further advancement happening here. I feel even worse for him, he's 200k-working-at-Google material."
PHP,3cg28q,itsSparkky,5,Tue Jul 7 21:47:03 2015 UTC,"Jesus, 8 years, senior dev, very talented (by your judgement at least), and makes <$60k in New York?  Your situation is bad enough, but that's crazy talk.  I hope he's looking for another job too, you're both definitely underpaid.  If they want to do business and have people stick around, especially in a place with as high a cost of living as NYC, they need to figure out how to pay more than that."
PHP,3cg28q,txmail,3,Tue Jul 7 22:53:25 2015 UTC,"Well, I'll put it this way - he reverse engineered Websense and we sold it to some major corporate clients to replace their actual Websense."
PHP,3cg28q,jasonlotito,4,Tue Jul 7 23:37:20 2015 UTC,"Good grief. I'm making way more than that in Austin, only a few years experience,  and mainly doing WordPress work (managing 2 junior devs). You need to find a new employer."
PHP,3cg28q,SBGamesCone,1 point,Wed Jul 8 00:34:29 2015 UTC,"Indeed, that seems to be the resounding answer :["
PHP,3cg28q,Waizujin,2,Wed Jul 8 01:28:01 2015 UTC,"I wouldn't worry about his salary.  In a perfect world everyone's salary is relatively fair, but in actuality there is a reason they don't want you discussing your salary and that's because it's never fair.  It's not illegal to look for other jobs while you work your current one; and nothing motivates a raise like ""I have an offer for 20k more at another company, can you offer me something comparable."""
PHP,3cg28q,creatiff,1 point,Tue Jul 7 23:19:47 2015 UTC,"Yeah - one thing I have learned is to not give a shit about what other employees are making; you know what you are worth, if the other guy does not want to step up his game then this is their decision (I have been getting very nice raises for the last 8 years... I have no shame I don't care if anyone was here before I was and has been doing this longer, if you have to give them a raise to give me a raise then that is your problem).   Seriously, do not under value yourself. Be straight, honest and direct. If they are unable to give you a raise then thank them for their consideration, go back to your desk and spend the next week looking for a company that will value your time. Nobody is comfortable talking about money. Then again that is why 99% of people are work in the first place so, it only has to be as awkward as you make it. I assure you the people at the top are taking their yearly raises and not working for less than what they feel they are worth. Why not you?"
PHP,3cg28q,HardKnockRiffe,1 point,Tue Jul 7 23:04:54 2015 UTC,You guys are getting underpaid.  PM me if you are willing to move out of NYC and get paid more.
PHP,3cg28q,creatiff,1 point,Wed Jul 8 10:12:30 2015 UTC,That should be a huge indicator that there is no headroom for you at this company. I would have a frank discussion with your Manager about the career progression for you there and plan accordingly (start looking for other work).
PHP,3cg28q,ryan4888,1 point,Wed Jul 8 14:50:26 2015 UTC,That seems so low... I have a friend making $75k as a Quality Assurance Engineer. Why isn't a dev getting paid a lot more? He works in Valhalla NY about 30mins from Manhattan.
PHP,3cg28q,phpdevster,1 point,Wed Jul 8 00:43:19 2015 UTC,"Wow what? Is that before massive tax deductions or something? What does 50k mean net monthly? I mean, overhere(holland) i make 40k euro a year as a senior(10+y), which means about 2.3k euro a month net after all deductions. And this is way above average.."
PHP,3cg28q,ryan4888,2,Wed Jul 8 17:32:16 2015 UTC,"Yeah, it's before taxes. Honestly, SR PHP developers in the US make upwards of six figures."
PHP,3cg28q,phpdevster,2,Wed Jul 8 17:35:49 2015 UTC,"what the actual fuck, --initiate plans to migrate from a degenerating democrazy called holland--"
PHP,3cg28q,CodeShaman,19,Wed Jul 8 17:46:22 2015 UTC,"I think you're being underpaid. Also, just a little sidebar, Java is not difficult to learn at all. Especially if you already know PHP."
PHP,3cg28q,crossanlogan,8,Tue Jul 7 17:53:27 2015 UTC,"Java is not difficult to learn at all   Java is not difficult to learn, but the massive and hyper-specific tool ecosystem surrounding it, is.  PHP is easy to learn, but then go and learn Zend or Doctrine on top of that. But then imagine Zend or Doctrine, with about 100 times the ""enterprise-y-ness"" complication.  http://docs.jboss.org/hibernate/orm/5.0/manual/en-US/html/ch01.html#tutorial-associations  So you know Java eh? Great. Better also learn the 50 fuckbillion XML tags & attributes used by Hibernate to describe its entities and relations and schemas.  Plus the Java job market looks for experience with very specific versions of tools since a lot of them have entrenched dependencies on specific versions."
PHP,3cg28q,I_program,1 point,Wed Jul 8 01:57:48 2015 UTC,"This is true. I used to work in enterprise Java, using JSP and Servlets. I hated it. PHP is much easier to understand when it comes to web programming. However comparing syntax to syntax, I think that Java is much easier to follow and understand, which is why it is often used in the classroom for beginners."
PHP,3cg28q,doterobcn,1 point,Wed Jul 8 03:39:47 2015 UTC,"Java is more verbose than PHP though. It has static typing and return types, and things like generics that PHP simply does not have. The only meaningful difference between Java and PHP syntax is the $ in front of variables, and the -> instead of .  Once you're used to that, PHP is just a less verbose version of Java.  Example:  Pair<String, Integer> p1 = new OrderedPair<String, Integer>(""Even"", 8);"
PHP,3cg28q,doterobcn,1 point,Wed Jul 8 03:54:40 2015 UTC,The only things PHP has in common with Java are the same things every curly bracket language has in common.
PHP,3cg28q,cincodenada,2,Wed Jul 8 12:35:09 2015 UTC,"Thanks, I will check it out - never really had a usage case for it though but who knows what the future holds."
PHP,3cg28q,MaRmARk0,3,Tue Jul 7 17:56:13 2015 UTC,"Other languages you can learn if you're comfortable with PHP's OOP and so on paradigms: C#, Python, Swift (that allows you to write iOS apps), and the Android devkit (Java, which allows you to write Android apps).  A world of possibilities awaits..."
PHP,3cg28q,loveduckie,1 point,Tue Jul 7 21:09:42 2015 UTC,i thought iOS was Objective-C.
PHP,3cg28q,SilentEchoes,6,Tue Jul 7 21:29:46 2015 UTC,"It still is, but Apple released a new language, Swift, which is much more pleasant to work with. It feels like a script (PHP, JS) but it's compiled, statically typed and fast (like C and Objective-C).  Both languages have full access to the iOS and OS X APIs.  EDIT: Wait, why am I explaining this, can't you google?"
PHP,3cg28q,takuhi,6,Tue Jul 7 21:32:16 2015 UTC,"reddit, the new google"
PHP,3cg28q,squigiliwams,0,Tue Jul 7 22:42:51 2015 UTC,I'm just starting with Swift.......it feels so odd and wrong...
PHP,3cg28q,jimdoescode,2,Tue Jul 7 23:02:01 2015 UTC,Just be glad you're not learning Objective-C instead.
PHP,3cg28q,prodigitalson,0,Tue Jul 7 23:03:40 2015 UTC,"I know, I tried, but didn't have the interest and the time required."
PHP,3cg28q,erik240,1 point,Tue Jul 7 23:23:47 2015 UTC,"I'm no Java expert, but Android app development has been a great way to dip my toes into Java - there's a big framework and lots of examples to get you started, a pretty nice IDE, and you can make something useful (if you have an Android phone/tablet/etc)."
PHP,3cg28q,jimdoescode,1 point,Tue Jul 7 22:48:48 2015 UTC,Hi there. Do you have some tutorials for beginners? I do PHP like for 15 years and yes Java's syntax looks familiar to me but I just don't know where to start.
PHP,3cg28q,Xanza,2,Tue Jul 7 19:13:43 2015 UTC,"I mean, as far as languages go, I would argue that that the two languages are actually syntactically very different but conceptually very similar."
PHP,3cg28q,Xanza,1 point,Tue Jul 7 23:29:12 2015 UTC,"I don't have any tutorials handy but if you already know PHP I'd just go ahead and start writing something in Java. Google everything you need at first even if its ""How do I start a Java app in Eclipse"". Start something like a ToDo app and then go and download the source for a couple when you're done and compare what you did vs what they did.   PHP is popular enough that you can likely search things like ""strlen in Java"" or ""in_array in Java"" to get you started. You're going to miss out on a lot of the reasons WHY certain things are different in Java vs PHP or what an Array might actually mean in PHP vs what it is in Java but I'd guess a lot of tutorials aren't going to teach you that either.   As long as you're making an effort to continue to learn the intricacies of the language and especially the why I don't think it really matters so much your first couple of apps are going to look exactly like a PHP developer writing Java."
PHP,3cg28q,machtap,1 point,Tue Jul 7 19:54:30 2015 UTC,"This is exactly what I did 6 months ago. I got my new job based on my front end experience and now I'm gearing up for my Oracle exams.  Java itself isn't miles away from PHP, but the whole stack is a little different. Things like dependency management seems clunky (Composer seems more intuitive than Maven) as do frameworks like Spring or Struts. You also have to use something like Eclipse or IntelliJ to manage the project, you can't get away with using just Sublime...  ... But, it's super scalable and resilient. There's a reason why Twitter moved from a scripting language (Ruby) to Java....  The way I got my head around it was to take a small project I knew how to do in PHP and did it Java instead (e.g. a blog, todo list, etc.)"
PHP,3cg28q,asmodeanreborn,7,Tue Jul 7 23:01:11 2015 UTC,"Without knowing your skill set, I still feel that's insanely low in NYC. I'm a sr dev now so what I make now isn't going to help you but I was making 55 out of school NOT in NYC in 08.   I did graduate with a CS degree and had a year of internships under my belt, but still. Fairly certain Jr devs where I am are at least 60 to start. We're not even finance, which I assume averages higher."
PHP,3cg28q,asmodeanreborn,5,Tue Jul 7 17:54:50 2015 UTC,NYC based PHP dev. I'm making 10K a month contracting (and I think that's still kinda low). Granted I've been doing this for ~13years.  If you are a lead and are truly managing all of that stuff then you are certainly underpaid. If you've developed all of those applications then you have a great bargaining chip to ask for more. If your company isn't interested then find a new job and tell them they can hire you back at an hourly rate.   I think most jr-mid positions pay around 60K to 80K. Maybe more...
PHP,3cg28q,cincodenada,2,Tue Jul 7 18:21:01 2015 UTC,"Indeed. I too am a consultant and I make just shy of that,  but I'm also in the midwest where cost of living is insanely low. Experience and knowledge wise I'm a senior guy but i'm not currently working in that capacity (not leading a team, not doing architecture, etc.). Hell my current contract is only for client side work (backend is Java), so I'm not even doing full-stack at the moment."
PHP,3cg28q,eyeclaudius,1 point,Tue Jul 7 19:36:06 2015 UTC,"That sounds low. I did slightly better than that contracting in Austin, TX where its a hell of a lot cheaper to live."
PHP,3cg28q,NeuroXc,1 point,Wed Jul 8 14:46:52 2015 UTC,"I've heard the same from some other Austin devs. Maybe I should move, it sounds like an awesome city."
PHP,3cg28q,NeuroXc,4,Wed Jul 8 16:45:52 2015 UTC,"A ton of comments in this thread are correct. You're being underpaid. But you need to consider a few things. One, it's NYC. I live in the area and can tell you (which I'm sure you don't need to be told), shit is expensive. Wherever you can save money, you do it. This includes with employees. If they don't have to pay you a ton, they're not going to. Two, you need to remember that you have a degree in financing--not in engineering or any other computer science related field. I'm not trying to imply that it's required for a career like this, but it can easily be seen as fickle at first glance without reading into it. What I suggest you do, is apply for some certifications and see if your company has any form of continuing education program. By doing both you'll increase your desirability at both your current career and future careers. Three, looking for a new career constantly is not only a good idea, it's basically a necessity. Especially so in the City. If you don't get a decent 3-9% raise every 2 years, then you're underpaid. When it comes to payment, especially with career paths like this, experience is vital. It's great because the longer you work in the field the more desirable you become because you're gaining real world experience all the time. Paired with your certificates and CE credits, 3-9% per 2 years is pretty reasonable.   My last raise was $12k in January and I only got it begrudgingly after my boss found out I was job hunting, not before when I asked for it.   This is sign #1 you're being underpaid and it should be the last straw for you. If they aren't going to pay you what you're worth then they're not worth working for. People really undersell themselves when it comes to careers. The company is helping you out by employing you, sure. But it's not like you're not busting your ass for that paycheck. You don't owe them any loyalty or allegiance. People forget that when they hear things like be a team player, etc.  They're all relatively common qualities, but I've always said that you need 5 qualities to be a good developer;   Humility a. If you walk around acting like you know everything--that's my first indicator that you're not only difficult to work with, but are probably the farthest thing from intelligent. Humility is so fucking important. Curiosity a. No one wants to work with the guy that just comes to punch in and punch out. We're developers. We get paid good for our time (hopefully) and should be putting good time in for our projects. Seeking to expand your current toolset and skillset is apart of the job. Honesty a. If you can't tell the project manager he's a dumbass for thinking that the refactoring of the company's entire codebase isn't going to take a weekend, then you're probably in the wrong field. Cooperation a. Why do all the work when you don't have to? Cooperation is vitally important to operations. Discipline a. Comment, stage, and test often. For God's sake, never push out inferior code for your partners to figure out why in the fuck you're using inverse operators for a simple if statement.     To clarify my above statement. If your starting salary is $45,000 and your raise percentage is 6% every 2 years, then after 10 years you'll see something like this.    Year Raise Gross Change    2 $2,700 $47,700 +$2,700   4 $2,862 $50,562 +$5,562   6 $3,034 $53,596 +$8,596   8 $3,216 $56,812 +$11,812   10 $3,409 $60,221 +$15,221    This is pretty average."
PHP,3cg28q,anoland,2,Tue Jul 7 18:22:01 2015 UTC,"A lot of good points. From what I've read in some job postings, they ask for an ""Analytical"" degree which is essentially what finance is - mathematics and problem solving. I think it would work in my favor if applying to financial/insurance companies, but unfortunately, I don't think too many of those use PHP. Perhaps Java would be more favorable in that case.  Edit regarding salary increases: It seems the popular trend is to look for a new job every 2 years and get a ~15k-~20k raise each time - a few of my friends have done this and are now breaking 150k+ as Java, Node.Js,  and PHP devs"
PHP,3cg28q,anoland,3,Tue Jul 7 18:37:33 2015 UTC,"they ask for an ""Analytical"" degree which is essentially what finance is - mathematics and problem solving.   Like I said, it's not going to count you out of anything--but a proper degree in the engineering field at the very least shows that you're versed with some of the technology you'd be working with day one. Degrees are pretty stupid, if you ask me.   I think it would work in my favor if applying to financial/insurance companies   Definately! There are many companies looking to streamline financials--a developer with a background in finance could be a serious asset here. Java would be more favorable--but lets not forget that PHP can just as easily be used as a scripting language--not just as a web-centric language. If you can think it, you can build it with PHP, too."
PHP,3cg28q,phpdevster,6,Tue Jul 7 18:41:25 2015 UTC,"You are being severely underpaid. Six figures is absolute baseline for real technical talent, especially in a city with as high a cost of living as New York! If you can intelligently copy and paste snippets from stackoverflow into a single file (even at an intern level!) and get it to do what the bosses want it to do: you are worth at least 75k to them.  The only reason employers who pay less than that even exist is because young devs don't understand how tremendously valuable they really are and agree to work for peanuts. 42k is peanuts."
PHP,3cg28q,trimalchio420,8,Tue Jul 7 19:56:38 2015 UTC,"I can't comment on NYC, but I made more than that as a junior dev in freaking Wyoming almost a decade ago. That was mostly Java, though, but still a decent amount of PHP as well. Considering NYC cost of living, I'd say you're underpaid as a dev regardless of your level."
PHP,3cg28q,mantiseye,1 point,Tue Jul 7 17:49:45 2015 UTC,Java pays in gold nowadays - it may be worth learning but I would quickly get rusty with it since I wouldnt have a chance to use it daily at work :[
PHP,3cg28q,rusty_blumpkin,3,Tue Jul 7 17:55:26 2015 UTC,"I was a Java engineer in Boulder and got laid off at the same time as Oracle bought Sun and laid off a large portion of their Java engineers. Needless to say, I couldn't compete for the few available Java jobs on the market.    If you'd be willing to move, I know of available PHP jobs that pay better (plus with great benefits) than what you've got, but... Colorado's kind of far from NYC."
PHP,3cg28q,rusty_blumpkin,1 point,Tue Jul 7 18:02:45 2015 UTC,I appreciate the kind offer but I'd like to stick around the NYC area :]
PHP,3cg28q,dasper12,2,Tue Jul 7 18:04:14 2015 UTC,"Like I implied in another comment, if you've got an Android (or hell, can pick one up cheap), a great way to get started learning your way around Java is find something you want your phone/tablet to do, and write an app to do it.  If it's useful to others, release it, and then you've got a side project that'll help keep you fresh.  Java is certainly plenty different from PHP - it's very emphatically OOP, and feels really verbose especially when you're starting out, but a good IDE helps with that, and as you learn it starts making more sense.  I've started to see how the enforced OOP/verbosity helps keep things organized - it gives you much less rope to hang yourself with than things like PHP.  Android development is a great starting point, I think, because it reduces the scope (you've got a nice structure built to work inside of), and Android Studio is becoming a solid IDE to help out."
PHP,3cg28q,bpopp,4,Tue Jul 7 22:58:26 2015 UTC,"I made $50k 7 years ago here in San Francisco when all I knew about PHP was how to echo out variables in wordpress themes. I know the market for devs is tighter here than in many other places but that seems insanely low especially given the cost of living in NY. I'm about to hire a jr. PHP developer and assume that we'll be paying them at the absolute minimum $80k.   If your work was building homes for malaria-stricken endangered animals it'd be a different story but from what you said, it sounds like they're making money. You don't need to give them your life as a charitable contribution.  Look for another job. With an offer in hand you can say to your boss that you have a better offer. He doesn't get to say what you're worth, the market does. Maybe he'll offer you another raise to keep you, maybe not. That's up to him."
PHP,3cg28q,Matt0864,1 point,Tue Jul 7 19:32:31 2015 UTC,"Very good point, thanks!"
PHP,3cg28q,prodigitalson,2,Tue Jul 7 19:58:38 2015 UTC,"You can do much better. I make $55k (plus great benefits) as a mid-level full-stack PHP dev in Indiana, which has a notoriously low cost of living and a notoriously low availability of PHP jobs (almost everything here is .NET). I feel like you should be able to find something better in NYC for sure."
PHP,3cg28q,phnglui_mglwnafh,1 point,Tue Jul 7 18:26:59 2015 UTC,"Thanks for the info - as a mid level full stack dev, do you do much work with OOP and frameworks? If so, which?"
PHP,3cg28q,jj20051,1 point,Tue Jul 7 18:38:50 2015 UTC,"It's about 50/50 at my current employer. We have a number of older projects and domains that serve mostly static content that just use plain PHP to pull from MySQL (PDO) or LDAP, as well as a couple of Wordpress instances that we maintain.  Then we have a few larger apps which, the ones my predecessor created were in Zend Framework 1 and 2, and now we've settled on Laravel and are planning to use that for any future web apps (we have 3 Laravel apps in staging at the moment and another one in planning). We have one small app using Angular but for the most part our front-ends are using jQuery, with the newer apps also using Bootstrap."
PHP,3cg28q,erik240,2,Tue Jul 7 20:30:28 2015 UTC,"When I moved to NYC in 2006 my first PHP job, with less experience you list here was $75K.  You are definitely under paid."
PHP,3cg28q,AtroxMavenia,1 point,Tue Jul 7 19:15:01 2015 UTC,Thank you for the info - what were your duties at your first job? Anything similar to mine?
PHP,3cg28q,Johndamon77,1 point,Tue Jul 7 19:18:21 2015 UTC,"Started with this: http://web.archive.org/web/20061009055225/http://www.pcquote.com/  Made a pitstop here: http://web.archive.org/web/20061108131015/http://www.pcquote.com/  Finished with this: http://web.archive.org/web/20061227014518/http://www.pcquote.com/  I should note that I didn't do the design/layout but the guy who did sat right next to me. Also, I didn't have any control over the servers but that was already in my skill set so I was able to talk with the people that did the hosting.  I started from scratch but had directives to keep similar functionality. There were user accounts already that I had to keep; that was doing portfolio tracking. Quote lookups from the real time socket feed for authenticated users, but delayed quotes for anonymous requests. I had to pull the news articles from TheStreet.com and TradingMarkets.com. Sometimes I had to pull down copies of the news articles while others had to have links to their pages. Also we had some sort of agreement with ATT/Yahoo where we would host their finance pages and give their users access to the realtime quotes. I also set up and administered an OpenX Ads server for the 3rd party ads on the site."
PHP,3cg28q,jewish_cowboy,2,Tue Jul 7 20:26:22 2015 UTC,"I started off as a junior back-end developer on a ""trial"" salary since my strength was actually front-end. That salary was $42,500 (client services agency). After one year, I was offered $60,000 at that same company, and $72,000 for an in-house product developer in Los Angeles (which was a little more than the equivalent salary for that area).   The cost of living in NYC (Brooklyn area) is 1.48x times the cost of living in my area (according to this).  So given that, you should be getting paid about ~$88k right now.   Of course, that entirely depends on whether that's financially feasible for your company, and whether or not the skills you've learned are actually worth $88k at another company. But assuming you've gotten similar exposure to me in your time at this company, then I would straight up ask your boss for $85k, and don't go any lower than $80k when he haggles with you. I would also aim for that salary at any other companies you apply for.  Don't sell yourself short.  There are Wordpress developers who don't even know what ""LAMP"" stands for making more than you right now - in cheaper parts of the country."
PHP,3cg28q,tcmccarthy,2,Wed Jul 8 02:24:56 2015 UTC,That's absurd. Your company is run by parasites who are getting rich by putting you into debt. RUN
PHP,3cg28q,tcmccarthy,2,Wed Jul 8 02:53:11 2015 UTC,"I made $45k for my first full-time PHP job working in Manhattan about 9 years ago, and that was for a failing newspaper that didn't pay well but I also wasn't killing myself."
PHP,3cg28q,tcmccarthy,1 point,Wed Jul 8 16:58:52 2015 UTC,"I am making $42k a year as a full stack developer in Omaha, Nebraska with approx. 1.5 years experience. I have a B.S. in political science but convinced a small marketing company to give me a job because I took a PHP course on Code Academy and knew HTML/CSS. I started at $38k and got a raise after a year.   Anyway, if you live in NYC and only make $42k a year you must be struggling. I would look for a new job. I would advise you learn some new skills. I thought about Java, C#/ASP.NET, and others but right now I am trying to master Node.JS/Express and Angular. I still can't decide to spend my time on ASP.NET or a Java framework but after diving in to some Java I really don't like it and will probably go to .NET and try and get a better paying job in 6mos-year.   EDIT: Depending on what you want to do, Rails is somewhat popular with smaller trendy companies but it really does so much for you that tons of code schools and amateurs are learning it quick. Python is alright but I don't think its a super popular language for the web outside of more scientific algorithm based projects.   Nodejs and full javascript is gaining a lot of popularity and #3 on Github at the moment. A lot of people think its not worth it but there are a lot of jobs popping up. I would definitely learn a language like Java or C# as well, though."
PHP,3cg28q,tcmccarthy,1 point,Tue Jul 7 19:19:29 2015 UTC,Thanks for the suggestion - I've looked into the MEAN stack is well - much fewer jobs than php but MUCH higher pay with barely any experience required
PHP,3cg28q,tcmccarthy,2,Tue Jul 7 19:21:10 2015 UTC,See my edit to my original post. MEAN stack stuff is fairly new so there aren't a ton of experts out there. If you know javascript you can pick it up pretty quickly and Microsoft has embraced it so they are integrating with it a lot if you like working with Microsoft products.
PHP,3cg28q,rarenaninja,1 point,Tue Jul 7 19:25:41 2015 UTC,"I live in Salt Lake City and make 78k with 10 years experience. I get headhunters that call offering me 100k to 110k but I really love my job and the flexibility and freedom they give me. Plus the cost of living is lower than most metro areas so I live incredibly comfortable. Unless you absolutely love the environment of NYC, I would look at other tech hubs that have a good stand of living with a low cost of living."
PHP,3cg28q,rarenaninja,1 point,Tue Jul 7 20:31:46 2015 UTC,Agree that you are ridiculously underpaid. Cashiers at Home Depot start at $10 an hour (probably more in NY).  Just curious.. how do you survive in NYC on that salary? A buddy of mine was paying $5k a month for a 1000 sq ft apartment there. Do you live in your car?
PHP,3cgavn,pmjones,8,Tue Jul 7 18:07:46 2015 UTC,"The item creation is mixed in with the use of the item.   It is worth mentioning that this alone is not reason enough to create a factory. Factories are a necessity only when there is significant complexity in using new, there are a multitude of ways to create the same or similar objects, or when object creation is so complex and pervasive in the system that the Factory itself needs to have a public API that can be depended on.  All around though, sound and clear advice."
PHP,3cgavn,ralphschindler,5,Tue Jul 7 18:57:16 2015 UTC,"Two other good reasons to use a factory:  You want to create and return interface implementations, but encapsulate the class-selection logic in a factory.  (new PinkFactory())->newBall(); // PinkBall instance  (new BlueFactory())->newBall(); // BlueBall instance   Similarly you may want to encapsulate other instance configuration logic (say constructor arguments the instances take in) in one place in the factory.  // strict number val (new ValidatorFactory(['strict' => true]))->makeNumberValidator();   // non-strict number val (new ValidatorFactory(['strict' => false]))->makeNumberValidator();    Naturally my examples make more sense of you consider:   A factory creates a range of related object types, not just one (but sometimes one also is useful). Creating the factory is usually done in one place, invoking its methods in another (so it's useful to pass a factory with encapsulated configuration)."
PHP,3cgavn,freebit,1 point,Tue Jul 7 19:30:17 2015 UTC,Agreed.
PHP,3cgavn,freebit,1 point,Tue Jul 7 20:41:21 2015 UTC,"(new ValidatorFactory(['strict' => true]))->makeNumberValidator();   Code like that is very not ok. It looks like an attempt to be clever or trendy. Clever and trendy code is annoying and a never ending source of difficulty for everyone. Additionally, debugging it, should the need arise, is a pain due to all of the anonymous/intermediate objects. I have no use for coders that write code like that. Let me fix that for you:  $numberValidatorOptions = array('strict' => false); $validatorFactory = new ValidatorFactory($numberValidatorOptions); $numberValidator = $validatorFactory->makeNumberValidator();   This is much easier to reason about, more self-documenting, and much easier to refactor, if ever needed."
PHP,3cgavn,phpdevster,1 point,Wed Jul 8 16:15:16 2015 UTC,"Your code is just as bad:   You use global variables, you should wrap it in a class or a function. Where is your license boilerplate. There's no PHPDoc. No unit tests.  You should put it on GitHub and add composer.json, Reddit is not a code repository.   EDIT: I just tried your code and it says ""Fatal Error: class ValidatorFactory not defined"". It's broken."
PHP,3cgavn,ralphschindler,1 point,Wed Jul 8 16:25:51 2015 UTC,"Apparently, your user name is apt, at least the ""idiot"" part."
PHP,3cgavn,akeniscool,1 point,Wed Jul 8 17:47:13 2015 UTC,"Replies like that are ""very not ok"". Let me fix that for you:   Sorry for my trivial remarks about what is clearly just a quick example pseudo-code. You were demonstrating properties of factories, and not how we should lay out our production code. I also completely missed the second bullet point in your original post that said ""Creating the factory is usually done in one place, invoking its methods in another"". I can't do anything right :(   Oh, there, there. No need to fret about it. Anyway, thank you for apologizing. But next time, I'll use the tanks."
PHP,3cgavn,akeniscool,2,Wed Jul 8 18:35:13 2015 UTC,"so complex...   It doesn't have to be all that complex to warrant a factory.   If the act of instantiating one object requires the instantiation of another, it's a good sign you should have a factory that either encapsulates the instantiation of both, or makes use of additional factories if needed.  Correct, valid object construction and instantiation is arguably one of the most important parts of any application, and there are no drawbacks to treating that operation like a first class citizen."
PHP,3cgavn,akeniscool,2,Wed Jul 8 01:09:08 2015 UTC,"It is worth mentioning that this alone is not reason enough to create a factory.   I used to think that as well; Misko Hevery, in this article and others, convinced me that separating creation from use is almost always a good idea: http://misko.hevery.com/2008/07/08/how-to-think-about-the-new-operator/  EDIT: Key takeaway being ""The end goal is to have either: classes with logic OR classes with “new” operators."""
PHP,3cgavn,akeniscool,6,Tue Jul 7 19:03:09 2015 UTC,"Have simplicity or consistency; but you can't have both.  I've read Hevery's article back in the day (late 2000's, Symfony+ZF2 in dev mode), and bought it lock, stock and barrel. I've since revised my thinking about this particular viewpoint as I now favor simplicity over consistency.  new by itself, being a core language concept, is pretty simple and a well understood concept.  And sure, it's easier and more consistent to have a rule that says every type must have a factory, with a particular name; but in many cases, the added complexity (addition of new types and methods to your overall API) is not worth it.  Cases like Value Objects, Entities, or other forms of Domain players (Repositories, Table/Row Gateways, etc) simply do not need a Factory by rule.  Additionally, typeless (anonymous factory) systems, Pimple DI for example, have become prolific showing us that sometimes a closure and good documentation is all the factory we need.  My key takeaway is if you want to delegate instance creation to a dependency, it should not be by rule, but by exception.  That exception being that delegation is necessary to achieve some of the necessities I've posted above (and some of the ones /u/zen-idiot-with-tanks pointed out below)."
PHP,3cgavn,akeniscool,2,Tue Jul 7 20:06:17 2015 UTC,"I fully agree, so have this.  Any real world project will see a mixed use of factories and inline ""new"" usage. It should be done with understanding of pros and cons, not blindly."
PHP,3cgavn,geggleto,2,Tue Jul 7 20:35:59 2015 UTC,"Have simplicity or consistency; but you can't have both.   As you know, I generally prefer consistency. And while it is ""less simple"" to consistently use factories, I have not yet reached the point where the tradeoff of the factory is significantly negative. Indeed, I have found that providing a package-level factory (or even a container) for end-users is a positive. YMMV."
PHP,3cgavn,dracony,2,Tue Jul 7 20:40:43 2015 UTC,"I doubt you use factories for everything. Search your codebase for ""new"". I bet you might encounter at least one ""new DateTime()"" or similar outside a factory.  Furthermore, any function you call represents violation of factory usage, because it refers to a static global name (it's like reaching out to call a singleton or a static method).  Imagine how your code would look if you had to capture all functions you use as closures, and grab them from a factory. It'd sure help testing - you can now mock file operations like fopen, fread, fwrite, or time operations like time(), sleep() etc. Buuut... it'd be hell in all other respects."
PHP,3cgavn,freebit,2,Tue Jul 7 20:55:19 2015 UTC,"I doubt you use factories for everything.   You're correct, of course; in PHP at least, I make exceptions for Exceptions (heh) and for language-provided classes. But for any class in userland? Factories.   Furthermore, any function you call represents violation of factory usage, because it refers to a static global name (it's like reaching out to call a singleton or a static method).   For those I usually inject an object that does little more that forward to the PHP functions via __call() (usually called PhpFunc or something like that). It does in fact help testing a great deal, with very little annoyance otherwise."
PHP,3cj5es,erdemece,1 point,Wed Jul 8 09:07:34 2015 UTC,there is /r/programming and php channel on freenode. Stackoverflow obviously too.
PHP,3cj5es,I_l_hanuka,1 point,Wed Jul 8 12:22:33 2015 UTC,I put together a few PHP challenges that might be of interest: https://github.com/wearebase/base-php-challenges
PHP,3cj5es,dave1010,1 point,Wed Jul 8 13:55:42 2015 UTC,You can answer problems in php on hackerrank.
PHP,3chrrc,BareKnuckleMickey,7,Wed Jul 8 00:31:02 2015 UTC,It sounds like gratefuldaed's first project. Go for it!
PHP,3chrrc,yeskia,2,Wed Jul 8 07:25:43 2015 UTC,Only shows up once in my comment history when I view it.
PHP,3chrrc,gratefuldaed,3,Wed Jul 8 22:36:44 2015 UTC,Sounds like my first project. Go for it!
PHP,3chrrc,gratefuldaed,3,Wed Jul 8 03:28:12 2015 UTC,"This sounds like a fun project.   First, I'd like to recommend you convert the Excel spreadsheets into .CSV files (just a different type of spreadsheet saved in plain-text with 'comma separated values') because PHP has excellent built-in .CSV support which you will find invaluable. Stackoverflow and the PHP docs should answer every problem you encounter.  Next, what database are you using? Whichever it is, be prepared to learn a lot. Your database expertise will be lightyears more advanced by the end of this project.  Lastly, is the app/site built on top of a framework? If yes, that will make interacting with the database from PHP less of a headache. If no, you will learn a lot about PDO and REST, just make sure you always follow best practices and never leave your database vulnerable.   You'll learn a lot. This sounds fun."
PHP,3chrrc,_barterlabs,2,Wed Jul 8 03:10:41 2015 UTC,"No need to convert it to CSV, PHPExcel does an excellent job."
PHP,3chrrc,Spinal83,1 point,Wed Jul 8 09:00:52 2015 UTC,Sounds like my first project. Go for it!
PHP,3chrrc,gratefuldaed,3,Wed Jul 8 03:29:12 2015 UTC,Sounds like my first project. Go for it!
PHP,3chrrc,gratefuldaed,4,Wed Jul 8 03:29:45 2015 UTC,Sounds like my first project. Go for it!
PHP,3chrrc,gratefuldaed,1 point,Wed Jul 8 03:29:45 2015 UTC,"Doesn't sound that bad.  I will say, if you have limited experience with php you have some work ahead of you. Patience would be key from the customer as there are going to be some spots you bang your head against for a bit. That might be the push you need to get through those bumps though. All in all it sounds like a good/hefty beginner project.  Good Luck!"
PHP,3chrrc,satyr607,1 point,Wed Jul 8 02:14:47 2015 UTC,"1) PHP has Excel Parsing Librarys, go and find them  2) Use a tool to manage your database like MySQL Workbench  3) Read up on table conventions for designing your database  4) Read up on ActiveRecord libraries for PHP, my personal fav atm is Eloquent  5) Learn how to use composer  6) Slap it all together  7) ... most important step... write unit tests for everything you can think of"
PHP,3cepru,It_Is1-24PM,17,Tue Jul 7 09:39:36 2015 UTC,"PHPStorm is a great IDE, even at full price, definitely worth it in the long run."
PHP,3cepru,AfterNite,3,Tue Jul 7 12:58:05 2015 UTC,And definitely worth the renewal price every year too.
PHP,3cepru,SixPackOfZaphod,2,Tue Jul 7 13:01:28 2015 UTC,"€49 hell yeh! works out at like €0.13 ~ a day, next to nothing _^"
PHP,3cepru,AfterNite,0,Tue Jul 7 13:08:01 2015 UTC,Loose change left over after I buy my daily coffee.
PHP,3cepru,SixPackOfZaphod,3,Tue Jul 7 14:00:12 2015 UTC,"And BTW - I think it can be only used for new purchase, not to prolong existing license.   I wasn't able to use it for my renewal as got error msg:  Sorry, this code cannot be applied because the current promotion discount is already greater than the code discount (and they cannot be combined)."
PHP,3cepru,DrummerOfFenrir,2,Tue Jul 7 09:48:43 2015 UTC,"Am I using it wrong?   I got a opensource license for one of my projects and I tried to develop in it, but it felt heavy to me.  I really like the simplicity of Sublime, and I don't mind dismissing the purchase popup everytime.  Edit: I'd like to add instead of juat complain...   What am I missing out on that makes it so great? What are some killer features that I should be using?"
PHP,3cepru,panoptisis,3,Wed Jul 8 00:24:20 2015 UTC,"Its static code analysis kicks the pants off of any Sublime plugin I've tried. This alone makes me far more productive than jumping around the code base, looking things up, remembering them, etc. not to mention the integration with Xdebug and other tools.  Honestly, you should invest some time into it reconfiguring the keymaps and layout. It has way too many menus and toolbars cluttering the screen by default, but there a handful of guides out there on configuring it to be very minimal."
PHP,3cepru,DrummerOfFenrir,3,Wed Jul 8 01:58:02 2015 UTC,"One of my favorite features of Sublime is the multi-cursor, can storm do that too?"
PHP,3cepru,panoptisis,1 point,Wed Jul 8 03:29:35 2015 UTC,Yup! I wouldn't be able to live without it.
PHP,3cepru,DrummerOfFenrir,2,Wed Jul 8 03:34:35 2015 UTC,I think I need to give it another shot. I might have dismissed it too quickly and ran back to what I already knew
PHP,3cepru,webdeverper,6,Wed Jul 8 03:41:22 2015 UTC,"Isn't posting software license keys against the terms of this subreddit? If it is not, it should be :/"
PHP,3cepru,dataneger,-1,Tue Jul 7 12:57:14 2015 UTC,I must say i don't know :) Also its a link not serial.... In this case the phpstorm developer posted the serials to keep the software free so i don't think it will be a problem.
PHP,3cepru,webdeverper,1 point,Tue Jul 7 13:18:19 2015 UTC,The software is not free unless they give us the source code.  Whether it costs money or not is not a big issue.  They should be paid for creating and maintaining such a quality piece of software.
PHP,3cepru,cjthomp,2,Tue Jul 7 13:58:38 2015 UTC,Why would you think this is ok in this sub?
PHP,3cepru,dataneger,0,Tue Jul 7 23:19:18 2015 UTC,"You're deluding yourself, this is piracy."
PHP,3cg44o,xpxo,20,Tue Jul 7 17:21:13 2015 UTC,"So first, the brutal truth. If you build an ecommerce system from scratch, you're going to fuck it up. You can expose sensitive data that can seriously damage the business's reputation. You can just make it too difficult for them to manage all of their products. Bottom line, no matter how good you feel about your skills today, you can't do this properly.  Now, with that said, you are absolutely capable of delivering what these people want. You need to do that by managing expectations.  Imagine for a minute that you're an honest car salesman out to do the best for your clients. A person comes in who understands what they want out of a car and what they're willing to pay for a car, but they've never driven a car, don't understand how they work, and don't have a good understanding of the differences between a Kia and a Ferrari.  The fact that Ferrari's are hand built may sound really appealing to them. The fact that they're pretty and fast and fun to drive may be appealing. But a Ferrari isn't going to carry their family around to the grocery store, and even if they were willing to make some sacrifices to deal with that, they can't afford it.  This is where managing expectations comes in. This guy doesn't really know anything about cars. You don't even need to tell him that Ferrari's exist, or explain the difference between assembly line assembled cars and hand built cars. He doesn't need to know about engine displacement, weight to bhp ratios or anything else. What he needs is a car that drives his family to the grocery store, for it to be reliable, and for it to be affordable.  This is the situation you're in right now. These people own a fishing shop, and they're entertaining the idea of a high school kid developing their website. They've used the internet, but I doubt they've ever so much as logged into the backend of anything, let alone something as complex as an ecommerce site. They don't know what it should look like, what the UX should be, how the inventory system should function, how payment should be handled, how to process returns through their merchant system, et cetera. Short version, like John Snow, they know nothing.  Like the car salesman, you shouldn't be trying to convince them to buy into a custom ecommerce system. They can't afford one that would be safe and reliable, and even if they could, their needs don't even come close to requiring it. They're more likely to be missing features than having whatever non-standard things they'd want. What they want is Magento or Shopify, installed out in the cloud somewhere, made pretty and configured for their needs. You need to convince them that this is the best option, sell them on it and go from there.  I might add, you can make plenty of money doing this. It sounds simple, but in the same way that you don't need to make them aware of those hand built cars, you don't need to explain that Kia's are getting manufactured super cheap in Korea. They just need to know that it fits their price, is safe and reliable. It doesn't matter if configuring and styling Magento only takes you a few days. You're in charge. You can name any price you want for this.  So, bottom line, here's what I would do. Explore the options for prebuilt ecommerce like Magento or Shopify. Find the one you feel like you're going to deliver the best experience with. Come up with a price for how long it's going to take you to make a design (or purchase and customize one, nothing wrong with that), customize the software and get them going. Do not offer to input their inventory for them unless you are absolutely bored out of your mind and suicidal. It is tedious, mindless and below your ability as a developer. You're setting this up for mortals to use. This is setting expectations again. You setup the software, now they're going to manage the store without your help.  Tell them whatever the price is and go with it. If they're unwilling to pay it, don't haggle. Just pass. They're not going to beat whatever a 17 year old kid offers them. Don't undersell yourself just because you're young.  Good luck man."
PHP,3cg44o,jbarket,5,Tue Jul 7 22:00:18 2015 UTC,"Exactly this.  In addition to the excellent points made above, there are a few things that you should think about doing, whether this is your first project or not:   Make sure you have clearly delineated boundaries to the project.  Itemize what you are going to be doing for them, and stick to it.  Feature creep is a killer. Even if you've quoted a flat price, keep at least rough track of your time.  At the very least it'll give you a better idea of what to quote on the next project. For something as complex as an ecommerce system, make sure you include some client training in your quote - as /u/jbarket said, you don't want to be doing the entry, but you need to make sure they can. DO YOUR DEVELOPMENT ON YOUR OWN SERVER/HOSTING!  Specify in your contract what payment is due at each stage of completion, and definitely require at least partial payment before making the site live.  Once it's up and running on their hosting, you have little leverage.   Good luck!"
PHP,3cg44o,NorthernMatt,2,Wed Jul 8 02:43:44 2015 UTC,This was extremely helpful. Thank you.
PHP,3cg44o,phpdevster,15,Wed Jul 8 23:22:15 2015 UTC,"Doing ecomm from scratch when you have no experience is going to be a problem IMO. Why can't they make use of something like Magento Community edition?  Have you thought about:   Payment gateway implementation? Shipping calculators? Tax calculators & tax laws? Order history storage for customer service purposes? Getting an SSL certificate?   Personally if I were building an ecomm site that sold physical goods, from scratch, I would charge $120/hour, and if it was a fixed price, I would inflate my time estimate considerably to cover my ass.  Else I would charge $75/hour to setup a Magento site (but still inflate my time estimate, because, Magento)."
PHP,3cg44o,jesse_dev,10,Tue Jul 7 18:10:58 2015 UTC,"Try to sell them on Shopify, or anything that is hosted . Asking a beginner to code a shop from scratch is just plain risky; to everyone who enters their credit card into the site.."
PHP,3cg44o,applechuck,2,Tue Jul 7 19:35:34 2015 UTC,"Yep.  Maintaining the system, backups, PCI compliance, load balancing and servers will quickly make this project more expensive than running Shopify / some other hosted solution.  As a junior you would gain a lot of experience maintaining the Shopify store + writing custom plugins using their API."
PHP,3cg44o,chmod777,3,Tue Jul 7 20:45:12 2015 UTC,"pass on this. find some brochureware sites to cut your teeth on. go find an internship somewhere. there are enough issues with freelance and being below legal adulthood that throwing ecom in is just going to be a giant disaster.   secondly, businesses don't hire 17yo's to do their ecom site unless they are looking to exploit you or don't understand what is involved."
PHP,3cg44o,thyrst,2,Tue Jul 7 23:32:46 2015 UTC,"Like everyone else said, don't build this yourself even if you think you can.  They're are plenty of low cost, done and tested, ecom frameworks you can totally still get paid to use"
PHP,3cg44o,syswizard,1 point,Tue Jul 7 22:56:44 2015 UTC,"It's hard to estimate jobs when you have little to no experience.  You will learn as you take on more work how long things realistically take.  An hourly rate is going to be different depending on location.  $50-$60 is probably a good average rate.    Are you planning on giving them a ballpark estimate with an hourly rate or a lump sum contract price?  Do you plan to start from scratch, use an open source package, use a commercial package or use an API from a company like PayPal?  This would be a good project to get some experience with but at the same time online shops can be a bitch.   Don't forget that unless you use an API that includes a shopping cart on a secure site you will also need to worry about the security layer (SSL, auditing, merchant account approval, etc).  Also, make sure you really know what customer data to store and how to store it securely.  A way to process orders is going to take some time to build too.    Make sure you fudge your time enough to also cover the time you spend in meetings, training the client and other administrative tasks.  That stuff adds up quick.  Especially with a small business.  They'll want a bunch of face-to-face time.  I really only take on small business projects when I have absolutely no other work.  Even then I'd probably just setup a shopify site for them and charge them a monthly maintenance fee."
PHP,3cg44o,sarciszewski,1 point,Tue Jul 7 18:37:27 2015 UTC,I think this is a question better suited for r/freelance
PHP,3cg44o,TheGingerDog,1 point,Wed Jul 8 02:01:20 2015 UTC,"If it's a relatively simple shop, wordpress+woocommerce may be the quickest to get started with (magento apparently has more features than a swiss army knife....)"
PHP,3cg44o,hakermania,1 point,Wed Jul 8 05:35:09 2015 UTC,"50$/hour is pretty standard.  If they are really broken, I would do it 40$/hour (no less, when you ask less you are hurting the whole industry) and you could recommend interest free installments."
PHP,3cg44o,agmarkis,3,Tue Jul 7 17:41:44 2015 UTC,"Remember that he/she is 17 and has no experience to show. Usually you get hired for half of that; if not less, for that skill level. Not saying that they can't do it, but what I am saying is that businesses usually do not go looking for a younger person with less skill unless they can pay them less.  That being said, they may expect you to calculate how long it will take. In other words, how much they will have to pay by the time you are finished. Lets say $25/h (based on US median/average? for entry level) with a degree or pursuing. However, if you are actually starting from the ground up (not advised, but..) that would probably double IF you can set all of that up. Out of entry level I would then double that price again per hour. You will probably be learning some things as you go, hence the lower rate.  I may be wrong, but I think in some places this is the norm."
PHP,3cg44o,hakermania,1 point,Tue Jul 7 18:57:58 2015 UTC,"Yes, you actually have a good point."
PHP,3cgzbh,agmarkis,2,Tue Jul 7 20:56:02 2015 UTC,"You could front your site with cloudflare's free service. They provide Flexible SSL and a slew of DDoS protection options and caching (powered by nginx). Once you've updated your DNS to pass requests through cloudflare your site will become SSL enabled for free and you can prepend any of your URLs with https:// -- everything is gravy after that. If your API is RESTful, unsigned and uses JSON/XML cloudflare will probably cache the feeds as well, speeding up the results for your app.   Alternatively to /u/not_a_deputy's point you could handle the HTTPS redirect in Apache/nginx (depending on which you use). In my opinion, HTTP redirects should be handled at the service level not the application level for performance purposes, but that's a personal opinion, and a humble one at that."
PHP,3cgzbh,tcmccarthy,1 point,Thu Jul 9 23:00:02 2015 UTC,"Very helpful advice here, thank you.  It is understandable to handle the HTTPS at the service level. I will probably look into that first before doing anything with PHP.  I looked into cloudflare and it does look very attractive. That DDoS protection would be very nice, but I looked into the pricing and it is expensive for the plan that includes that advanced protection. However, if the app gains enough popularity I will probably look into upgrading to cloudflare. I have seen some services using cloudflare (ironically when it went down), so I know some well known websites do use it.. could be quite useful with a lot of traffic."
PHP,3cgzbh,tcmccarthy,2,Fri Jul 10 16:33:10 2015 UTC,"The free version offers some DDoS and a free SSL cert -- it may still be right for you. If you hit it big and need more than that, you'd presumably be making money and then could just upgrade your plan. Free SSL as a service is a gift, I'd take it."
PHP,3cgzbh,not_a_deputy,1 point,Fri Jul 10 19:10:30 2015 UTC,just a run of the mill SSL cert will work fine.  Here's one for 6 bucks.    https://www.sslcertificate.com/lp/5.99-essentialssl-sale.html?gclid=Cj0KEQjw6OOoBRDP9uG4oqzUv7kBEiQA0sRYBD6M0hpp5pffC3CwuAdJniWUwIoULvUYtuqdJvWCJxkaAkyh8P8HAQ
PHP,3cgzbh,not_a_deputy,1 point,Tue Jul 7 21:17:59 2015 UTC,"Nice! Thanks for this link. I'm assuming the data gets encrypted, and then decrypted before it populates the POST data for the php to process.  Is there anything else I should do with the PHP? For example rejecting non-ssl requests?"
PHP,3cgqiq,fizonek,1 point,Tue Jul 7 19:55:45 2015 UTC,The audio was terrible and make it torture to watch :(
PHP,3ch816,ollehar,1 point,Tue Jul 7 21:58:58 2015 UTC,"Check out Recki-CT (search for it, its on Google's github) is a project I made doing exactly that.  I am working an a third generation. If you want to help, ping me on irc sometime in #phpmentoring"
PHP,3ch816,ircmaxell,1 point,Tue Jul 7 23:51:01 2015 UTC,Am I correct saying that the purpose of Recki-CT is speed?
PHP,3ch816,ircmaxell,1 point,Wed Jul 8 00:13:19 2015 UTC,That's one purpose. But it was designed as a compiler toolkit to also enable better static alaysis. Lessons learned are going into future projects that I am currently working on.
PHP,3ch816,tonyrq,0,Wed Jul 8 01:41:42 2015 UTC,By php's original author himself: https://github.com/rlerdorf/phan
PHP,3chzdi,ollehar,3,Wed Jul 8 01:35:06 2015 UTC,"I would fix the terrible API.... removing trash such as   mktime()  time()  Also fixing dumb argument ordering...  strpos($stack, $needle, $offset)  array_search($needle, $stack, $strict)"
PHP,3chzdi,geggleto,4,Wed Jul 8 16:07:02 2015 UTC,I would probably enforce data type consistency on variables.
PHP,3chzdi,theunionstreet,3,Wed Jul 8 02:37:40 2015 UTC,"You mean, a variable being string, float, etc, but not changeable?"
PHP,3chzdi,dont_ban_me_please,4,Wed Jul 8 03:07:31 2015 UTC,delete? i'm sure just about everyone would fix the function naming inconsistencies
PHP,3chzdi,therussdotcom,1 point,Wed Jul 8 05:14:40 2015 UTC,"Sure, but that's not a subset. :) I just want a very strict linter (with type-inference, if possible)."
PHP,3chzdi,kikikol,1 point,Wed Jul 8 07:10:19 2015 UTC,"Lose the type enforcement keywords like (bool), (int) etc. to me these are a band aid over a recognition that PHP's types are not typed all that well, or at all."
PHP,3chzdi,gearvOsh,2,Wed Jul 8 08:55:46 2015 UTC,"They're not type enforcement keywords, they're casting operators. They have their place in any language, the alternative is to use a function like to_int but it's overhead versus a native operator."
PHP,3chzdi,quacktango,1 point,Wed Jul 8 18:03:33 2015 UTC,A complete rework of the standard lib.  Looking for a good subset of PHP? Try Hack.
PHP,3chzdi,h64,1 point,Wed Jul 8 02:58:59 2015 UTC,"Hack is nice, but is actually a super-set. I thought a subset might be able to help me without imposing architecture (necessary for the job)."
PHP,3chzdi,Pardalean,1 point,Wed Jul 8 03:06:47 2015 UTC,"Don't allow negation of non-boolean values, like !""0""   I use this quite a bit. When an API I'm forced to interact with has methods that require unhelpful boolean parameters, it can greatly enhance readability once you are familiar with the idiom.  A trivial example I run into regularly: json_decode(""{}"", !!""asAssoc"") / json_decode(""{}"", !""asAssoc"")"
PHP,3chzdi,quacktango,2,Wed Jul 8 04:52:44 2015 UTC,"Hm, never seen that..."
PHP,3chzdi,webdeverper,2,Wed Jul 8 07:11:47 2015 UTC,that's a nice trick.
PHP,3chzdi,Pardalean,1 point,Wed Jul 8 11:03:47 2015 UTC,"If I saw that kind of code at work I would kill everybody who showed up in the git history for that file, except for one guy I choose to spread the word of what happens when you do that."
PHP,3ch3mf,doMynation,5,Tue Jul 7 21:27:09 2015 UTC,You can use the EntityManager getReference method to get a reference to an entity without having to fetch it from the DB.  http://doctrine-orm.readthedocs.org/en/latest/reference/advanced-configuration.html#reference-proxies
PHP,3ch3mf,lepideble,1 point,Wed Jul 8 10:16:40 2015 UTC,I'm definitely going to use that. How could I miss that !  Thank you !
PHP,3ch3mf,Terr_,1 point,Wed Jul 8 13:20:29 2015 UTC,"Note that in addition to being ""lazy"" with other entity data, it does not check that the ID is valid, so somebody could pass in a gender-ID of 999. You can guard against this by ensuring that a foreign-key constraint exists, that way you'll get still an error when finally persisting the customer/contact data."
PHP,3ch3mf,dadamssg,1 point,Wed Jul 8 23:31:17 2015 UTC,You have a an entire table to hold genders? Thats way overkill. You should use embeddables for value objects.
PHP,3ch3mf,Terr_,1 point,Wed Jul 8 02:27:30 2015 UTC,Another alternative for simple one-column stuff would be DBAL types.
PHP,3ch3mf,zak10,0,Wed Jul 8 23:38:18 2015 UTC,"Yep, that's definitely overkill. In your Contact entity, just set a field like:  /** * @var GenderEntity */ protected $gender;  Then when you do a $newCustomer->setGender($contactData['gender']) it should automatically map to the gender entity and save the ID accordingly."
PHP,3ch3mf,Rican7,1 point,Tue Jul 7 21:30:49 2015 UTC,"well my Contact entity already has a ""gender"" property:  /**  * @ManyToOne(targetEntity=""Modules\Common\Gender"")  * @JoinColumn(name=""gender_id"", referencedColumnName=""id"") */ protected $gender;   So my setGender() setter expects a Gender entity and not an ID. The $contactData array comes directly from a form input. I'm not sure what you mean exactly."
PHP,3cfe9b,bga9,7,Tue Jul 7 14:12:34 2015 UTC,"Work on the same computer. Sit next to each other.   We usually have the junior type while the senior explains. This forces the senior to present his thoughts in a suitable way. This can sometimes be very difficult and forces the senior to reflect and condens his ideas more AND the junior will see the senior struggle and fail to express himself. This lightens the mood and gets rid of any mythbuilding, which can hamper the junior developments growth as well as the seniors.  The junior - because he is in control of the keyboard - can set the speed and stop to ask questions.   Pair programming is a learning experience for both."
PHP,3cfe9b,emperorkrulos,1 point,Tue Jul 7 14:45:43 2015 UTC,"There doesn't have to be a dedicated driver; the two should switch roles periodically.  There doesn't have to be a hierarchy, either - hence the alternative name ""Peer Programming."""
PHP,3cfe9b,lemminman,1 point,Tue Jul 7 15:13:28 2015 UTC,"True.   I didn't say it has to be that way. I said what we usually do when working with a junior and asenior. ;)  Which is actually not what OP asked. He was asking about himself ""and another senior dev"". My bad.  I'd still recommend to sit at the same computer and have one keyboard. Forces both to talk and communicate information, which to me is the whole point."
PHP,3cfe9b,emperorkrulos,1 point,Tue Jul 7 15:28:48 2015 UTC,"Yeah, I agreed with your original comment. I just thought I'd add a couple suggestions."
PHP,3cfe9b,lemminman,2,Tue Jul 7 15:39:40 2015 UTC,"I've done it several times (not on an ongoing basis, but for quick problem-solving sessions). I usually just stand next to the other person, or vice-versa. We talk through the code together (control flow especially) and bounce ideas and concepts. Lots of what-ifs on conditionals to break apart the program.  I've never tried it for an extended experience, and have no desire to do so. I think it's a good way to tackle initial design or tricky algorithms, but don't think it offers much more beyond what you'd get in a code review after. YMMV."
PHP,3cfe9b,Firehed,0,Tue Jul 7 15:51:16 2015 UTC,but isn't the title a typo?
PHP,3cfe9b,shivenigma,2,Tue Jul 7 15:32:37 2015 UTC,Did you read the first sentence? It was supposed to be a play on words.
PHP,3cfe9b,shivenigma,1 point,Tue Jul 7 15:57:57 2015 UTC,I still don't get it. :P
PHP,3cfe9b,shivenigma,2,Wed Jul 8 09:30:17 2015 UTC,"I can't tell if you're messing with me or are being serious. o.O In the case of the latter, it's a play on words since pear/pair, pi/pie and apple/Apple are homonyms."
PHP,3ceqgh,ICJ,3,Tue Jul 7 09:49:39 2015 UTC,"There shouldn't have been any reason why CloudFlare wouldn't have protected you if you did things correctly. That is, you migrate to a different IP address AFTER you set up CloudFlare, and don't leak it anywhere. See steps #10 and #11 in their guide here.  Regarding CDN, it's important to differentiate what is causing you issues, since this is /r/PHP is it the request/s of PHP?, or is it serving media assets - as above, CloudFlare will help with those - and your php could just be load balanced."
PHP,3ceqgh,no_not_me,1 point,Tue Jul 7 10:15:32 2015 UTC,"We changed ip's 3 different times before we were told that we needed to resolve the ddos issue because they wouldn't issue new ip's after the 3rd. From what i read online this is how the ip was found http://iphostinfo.com/cloudflare/ In the past his happened on one of our previous sites as well ( last year ) we ended up having to go through blacklotus because of the size of the attacks.   If we change the ip after we set up the cloudflare account the resolver wouldn't find it? We were down for a solid week with random 5-10 min of the site randomly being live until we just closed the site down and began researching alternatives. I followed the setup steps & the steps you displayed there. ( We have business protection, currently not making enough to swing enterprise )  As for the cdn it will mainly be used for serving media assets ( video, large hi-res images, etc. ) I am looking into load balancing as well at the moment."
PHP,3ceqgh,no_not_me,5,Tue Jul 7 10:30:32 2015 UTC,"Well, looking at that tool it appears as if you failed at step #11, and leaked your origin IP via a commonly used hostname. That's why its in the guide. Of course, it doesn't make a lot of sense in the guide that they state its email, and only email.  Remember any record that points to your origin ip is a potential leak. So think of things like ""direct"" entries that cloudflare sets up - delete those - and things like ftp, webmail, ssh (not the services, just the hostnames). But yeah, I appreciate that your host is sick of handing out new IP addresses for the attackers to add to their list."
PHP,3ceqgh,Pardalean,2,Tue Jul 7 11:18:04 2015 UTC,"I don't want to be mean, but it looks like you're being outsmarted by a bunch of script kiddies. Your problem is not with cloudflare, it's between keyboard and chair. 3 IP changes and you didn't figure out that the service uses direct., ftp. and email. to leak your real IP? It even highlights it for you."
PHP,3ceqgh,Dachande663,2,Wed Jul 8 13:50:12 2015 UTC,We've had a lot of luck running stuff through Akamai from a Rackspace cluster. You can drop public-net from the instances so traffic can only be routed internally via the CDN.
PHP,3ceqgh,cptsa,3,Tue Jul 7 12:29:43 2015 UTC,"Exactly. Block all ips that are not from cloudflare, problem solved?"
PHP,3ceqgh,Dachande663,1 point,Tue Jul 7 22:12:40 2015 UTC,Blocking with something like iptables won't do much good as you're still going to saturate your connection. Drop the box from the external network and let you CDN act as a DMZ.
PHP,3ceqgh,bga9,2,Wed Jul 8 16:56:12 2015 UTC,"Have you contacted your upstream provider? They may be able to help.  Another thing you could try, but it requires a bit more work is putting a proxy in front of your webserver on an scaling cloud provider like aws, then point cloud flare to that IP. If they resolve your IP, it'll be the proxy, which will scale and render the attack ineffective. That could become expensive, but shouldn't be too bad if the person behind the attack stops after they realize it's not effective anymore."
PHP,3ceqgh,Mteigers,2,Tue Jul 7 13:56:49 2015 UTC,Block all traffic except for traffic coming from CloudFlare. They expose their IPs and there are some IP Tables snippets out there to import their IPs into IP Tables (same with csf).   And make sure you turn CloudFlare on for the domain. Without the cloud being orange you're only using CloudFlare for DNS and they will expose your IPs. With it on they will hide your IP.   Source: Been a CloudFlare Enterprise customer for two years.
PHP,3ceqgh,cYzzie,1 point,Wed Jul 8 06:51:07 2015 UTC,"for protection cloudflare is really good.  as cdn aside from the cloud cnds from amazon, Akamai or Ipercast are probably the ones most suitable for big projects ... for small projects or if you have a big devops team, amazon is good enough and much much cheaper"
PHP,3ceqgh,geggleto,1 point,Tue Jul 7 10:20:18 2015 UTC,Verisign has DDOS mitigation however it is somewhat expensive ($2000+)/mo
PHP,3ceqgh,Skellem,1 point,Tue Jul 7 12:07:06 2015 UTC,"Which ever route you go down, make sure to test your DDoS mitigation is working the way it should be, Checkout Mazebolt.com"
PHP,3ceqgh,loganbest,-3,Mon Jul 20 15:17:22 2015 UTC,Come to host at Webair.com  We have fully managed load balanced clusters with CDN and ddos protection built in. PM me if you want to speak more about it.   Source: Senior infrastructure and Network Engineer @ Webair
PHP,3cf59k,dakshbhatt21,4,Tue Jul 7 12:51:21 2015 UTC,"You should take this down because it seems exploitable.  And you should make this a reusable class, not a ""generator"". The only thing that differs is the config."
PHP,3cf59k,glasscalendar,1 point,Tue Jul 7 16:06:46 2015 UTC,"I will check about exploitation issues. I don't get the part of reusable class, can you please guide me regarding this. I am not major PHP developer. Regards."
PHP,3cf59k,phpwebguy,2,Tue Jul 7 16:19:16 2015 UTC,"Instead of generating the same code over and over, changing only a few strings, just accept that configuration in the constructor:  $api = new MyNotReallyRestApi($host, $db, $user, $pass, $etc.); $api->insert(...);   Now your class is free of configuration and you can reuse it without changing it."
PHP,3cb3h5,suphper,11,Mon Jul 6 15:00:01 2015 UTC,"Actually does way more than that, I've had it for a while. It works for most package managers (NPM, Bower etc) and will also create links for files and stuff within the repository. If you do like require('./foo.json') that'll be clickable, same for require('angular') etc. It's a pretty awesome extension."
PHP,3cb3h5,Anahkiasen,3,Mon Jul 6 15:14:30 2015 UTC,:+1: * 1000
PHP,3cb3h5,geggleto,1 point,Mon Jul 6 15:29:56 2015 UTC,Thanks!  Any other must-have Chrome extensions that you guys use?
PHP,3cb3h5,commercial-hippie,2,Mon Jul 6 23:23:08 2015 UTC,This one is for me a must have https://github.algolia.com/  More interesting extensions over here https://github.com/stefanbuck/awesome-browser-extensions-for-github
PHP,3cb3h5,Anahkiasen,1 point,Tue Jul 7 00:08:47 2015 UTC,Thank you!
PHP,3cb3h5,commercial-hippie,2,Wed Jul 8 11:48:40 2015 UTC,Try this one for viewing fully browsable interactive file trees in Github repos
PHP,3cb3h5,commercial-hippie,1 point,Tue Jul 7 07:50:01 2015 UTC,Thank you!
PHP,3cewhq,DE-8yO3fnJ4,2,Tue Jul 7 11:12:21 2015 UTC,"Some books that are generally good:  The Pragmatic Programmer: From Journeyman to Master  Peopleware: Productive Projects and Teams  SYSTEMANTICS. THE SYSTEMS BIBLE - this book is written ironically, it is not as pompous as it sounds.  And my favourite article on the internet, Wolfram Alpha and hubristic user interfaces"
PHP,3cewhq,Danack,-2,Tue Jul 7 13:04:24 2015 UTC,"Thanks for the suggestions, but books...they're books.  I was thinking of something along the lines of this. Short and sweet."
PHP,3cewhq,stfcfanhazz,1 point,Tue Jul 7 13:33:22 2015 UTC,"Floating points have given me a headache in the past. Try running the following example:  $float1 = 0.04 + 0.02; $float2 = 0.04 + 0.01 + 0.01; $float3 = 0.03 + 0.03;  echo 'Values:'; var_dump($float1); echo '<br>'; var_dump($float2); echo '<br>'; var_dump($float3); echo '<br><br>';  echo 'Comparisons:'; var_dump($float1 - $float2); echo '<br>'; var_dump($float2 - $float3); echo '<br>'; var_dump($float1 - $float3); echo '<br>';           Run on PHP 5.3, here's the result:   Values:  float(0.06)  float(0.06)  float(0.06)  Comparisons:  float(-6.93889390391E-18)  float(6.93889390391E-18)  float(0)   It doesn't matter too much when making calculations unless precision is really important. However as you can see it can catch you out when making comparisons, since PHP treats them as not equal even though they have the same string value."
PHP,3cd1cm,jeffkolez,4,Mon Jul 6 23:28:40 2015 UTC,LOTS of reading and I always have some sort of coding project I am working on. The second is very important as it gives me a chance to try new ideas out in actual code.
PHP,3cd1cm,calevans,2,Mon Jul 6 23:59:23 2015 UTC,What specifically are you reading?
PHP,3cd1cm,CheckeredMichael,1 point,Tue Jul 7 02:30:26 2015 UTC,"Take a look at http://leanpub.com and see what takes your fancy. It really comes down to the sort of projects you're building. Think of a big enough project and break it down into smaller more manageable chunks.  When you get stuck, do a search, or if you think that you need a book to learn off, then find that book related to your project. Need to learn about APIs? Then take a look at ""building apis you won't hate"" or other API books. Need to learn about Angular? Find a book about that. If you're only just getting started, then take a look at books which help you get started.  You should always read http://phptherightway.com as they will give you best practices when it comes to coding. Try following people who have similar experiences as you, whether that's on Twitter, IRC, Slack, whatever. Just find people you find interesting. :)"
PHP,3cd1cm,n0xie,3,Tue Jul 7 08:50:06 2015 UTC,"Instead of TV and movies, I watch presentations on InfoQ (unless it's about ""kanban"", ""agile"", ""scrum"" and so on B.S.). Also presentations I find interesting from Apple's WWDC, Microsoft's Build and other conferences (you can find various conferences on YouTube for PHP, Ruby, Python, Scala, etc.).  I check topics on YC News, and from time to time other subreddits like: /r/python/, /r/csharp/, /r/windows/, /r/linux/, /r/programming/, /r/compsci/, /r/java/, /r/dotnet/, ... Learn to skim fast and look for news more than opinions, because most opinions online are by people who have a lot to learn yet (despite I'm occasionally impressed by someone's insight).  And, of course, as I code, or integrate a library, or whatever, if I see some concept I don't understand, I research it obsessive-compulsively until I understand it by reading articles, googling up videos and even getting books about it.   That's the most important part: be curious about the ""why"". Never just accept something without understanding deeply the reasons that make it what it is. Knowing a lot of random techniques that are considered ""good"" or ""bad"" doesn't matter if you don't understand ""why"". Looking for the ""why"" also protects you from fads and hype, which are very common in our industry, despite we're supposedly using cold logic for all our decisions (best joke ever)."
PHP,3cd1cm,brainphat,1 point,Tue Jul 7 00:04:53 2015 UTC,"Go to conferences, local meetups, follow blogs, follow tech news."
PHP,3cd1cm,jesse_dev,1 point,Tue Jul 7 11:31:09 2015 UTC,"I follow the trends, read up on topics directly or indirectly related to PHP and Web development in general, reinvent the wheel to learn why best practices are what they are, use GitHub/Mercurial/what have you, set up my own servers on & offline, learn & implement the various kind of testing, contribute to open source libraries, and experiment constantly. It also helps to be a little introspective and realistic about your goals: what do you think you need to learn, why, and how much (just enough to BS your way through an interview, or enough to be an acknowledged expert in your field?).   But IMHO the biggest bang for your buck is in using new (to you) stuff in real-world applications, even if it's only something you'll be using (& relying on to work properly)."
PHP,3ce5s1,akash_t,2,Tue Jul 7 05:19:52 2015 UTC,"""Big Data"" that You mentioned is quite vague, but if it's really serious BD, then You have a LOT to learn in here. And remember that you will rarely start working on best projects in company from day one. It's quite normal to work your way up there as your skillset grows."
PHP,3ce5s1,Division_By_Zer0,2,Tue Jul 7 08:23:13 2015 UTC,"i spoke to other people who are working here, the only job they do is to solve the bug and they are 3-4 years in this company.i asked him ""are there any project given"" he said there are no projects just bugs you hav to solve, plus i am the only enhineering graduate here, rest others are have done a php course and joined it and regarding BIG DATA, i am not sure if he really meant BIG DATA, its a MNC and so he said you have to deal with lot of data in terabytes etc."
PHP,3ce5s1,Division_By_Zer0,2,Tue Jul 7 09:54:35 2015 UTC,"It's really hard to tell what should You do, so be sceptical about my advice. Here it is: work for 110% for a half year. Be super eager, try to figure out how everything works there, get involved in as many thing as you can manage, find some PHP/SQL/whatever course/meetup/whatever nearby and ask a boss I they would allow you to participate during work time (without taking day off). Just don't be that guy that gets there, looks around and leaves. At least show them your best, so You'll have a nice reference (and it might be useful at this point of career)."
PHP,3ce5s1,no_not_me,1 point,Tue Jul 7 11:24:34 2015 UTC,"okay, thanks"
PHP,3ce5s1,alizamorgan8,2,Tue Jul 7 12:06:02 2015 UTC,"It's always a difficult call where a job may not be as advertised, and that is why when interviewing it is important for you to ask them as many questions about the role as they ask you about yourself.  Without knowing more about the in-house products, or what external products they/you will be working on, you aren't really going to get any solid advice from people out there - since we don't know the details, and everywhere is different.  In my opinion, as a graduate, the company would be doing you a disservice if they don't get you trained up, or afford you the time to train outside of work time. That isn't a sound investment in you for the future. But perhaps it is important to note that you should walk before you can run, and lots of the work that we have to do as developers is inhouse applications, and the key in their statement is ""help maintain, and improve them"".  You may get the ""good php projects"" out of improving things in the short term."
PHP,3cdcmb,rnncd,1 point,Tue Jul 7 01:00:20 2015 UTC,Basically using namespaces as rudimentary classes?
PHP,3cdcmb,rszrama,1 point,Tue Jul 7 03:30:43 2015 UTC,"Yeah, the namespaces help with organization and help minimize name collisions, just like with classes. I didn't see a better way of doing this."
PHP,3cdcmb,AshleyJSheridan,1 point,Tue Jul 7 14:13:24 2015 UTC,Why would you not want to use OOP out of interest?
PHP,3cdcmb,meandthebean,1 point,Tue Jul 7 14:38:06 2015 UTC,"This was primarily just an experiment. I've been doing a lot of functional programming in the past year and a half, so I wanted to see what something like this would look like.  I'm still a fan of OOP and use in in my day job, and these functions would not prevent the use of OOP with them."
PHP,3cdcmb,meandthebean,1 point,Tue Jul 7 15:06:38 2015 UTC,Neat. I wish functions could be autoloaded like classes. It would help promote functional programming in PHP and you could do away with the ugly list of autoload functions in your composer.json.
PHP,3caik5,lannor,12,Mon Jul 6 11:34:22 2015 UTC,Most business applications are as simple as what you've been doing. It's the scale that changes. Apart from some reporting modules the rest of the logic can be broken down to simple crud operations.
PHP,3caik5,kyriakos,1 point,Mon Jul 6 12:25:06 2015 UTC,"Really? ""So I'm done?""  But really, is that really true? Are you more or less in the same spot? What do you think+"
PHP,3caik5,txmail,3,Mon Jul 6 13:09:57 2015 UTC,"You're not ""done"" but if you want to hear a specific answer, you need to ask a specific question (about service and API design), or describe a specific situation with a specific problem."
PHP,3caik5,phpdevster,1 point,Mon Jul 6 13:58:29 2015 UTC,Spot on. You get over that and start playing around with front end stuff once you get really bored with backed.
PHP,3caik5,deletive-expleted,6,Mon Jul 6 13:02:46 2015 UTC,"Some things that come to mind - stuff I've worked on in one capacity or another.   A backend that can read calendar data and automatically schedule things based on the intersection of free time in several calendars (e.g. 5 team members are free from 2:30 to 2:45 - schedule a standup). A tournament system. Trees, brackets (single, double, round robin, group stage), match report rollback etc. Sounds like CRUD, but it's not. There's quite a bit involved to do it right. Pickup routing/scheduling software for a delivery company (bonus if you do route optimization like UPS does ;) ) League system that lets you define different scoring algorithms, and change them at will Replay parsing for say, StarCraft 2 replay files, and applying machine learning to detect patterns General software architecture - identifying variants or things with change potential, and separating their signatures from their implementations, identifying cohesive behavior, proper encapsulation, proper abstraction etc. Implementing a kick-ass search solution using Elasticsearch (not exactly PHP, but at least it's something different) A context-dependent configuration engine.    E.g. instead of:    if ($user->isAdmin() && $country == 'uk') {      // do something   } else if (....) {       if (....) {            // you get the idea...       }   }   You do something like this:   $context = [       'user' => 'admin',        'country' => 'uk',        'something' => 'else',       'request' => 'api'  ];   $config = new Config($context);   $config['some_setting'];  $config['some_other_setting'];   Such that your configuration values vary based on the context you provide, and you never have to create an unmaintainable mess of hard-coded conditional checks anywhere in your code."
PHP,3caik5,phpdevster,2,Mon Jul 6 13:45:32 2015 UTC,I've seen this context/config idea in a few places recently. Are there any articles you'd recommend on implementing this pattern?
PHP,3caik5,evilmaus,1 point,Mon Jul 6 15:18:39 2015 UTC,I can't identify a specific point in his demo of context up there tbh. Maybe he has to explain more about why he wraps up that particular data in a context.
PHP,3caik5,Terr_,1 point,Tue Jul 7 00:24:30 2015 UTC,"I worked on an application which had three context facets:   The user type: (admin, mini-admin, operator) The country: (canada, us, australia) The type of game (e.g. for creating tournaments).   Some business rules from this app:   You can define the cost-per-play for tournaments in the US and Australia, but not Canada You specify only certain prizes for Canada You could only create tournaments for certain games for certain countries Each country had different date formats to display Depending on which user type you were, you had access to different settings when creating a tournament.   Much of the data came back from stored procedures, like Admin_Get_Available_Games($userID) and Operator_Get_Available_Games($userID) (we didn't create these).  What we had before was conditional spaghetti everywhere in this system:  switch($usertype) {     case 'admin':         $games = $this->query(""CALL $game.Admin_Get_Available_Games($userID)"");     etc... }   That's not so bad you say? The were about 2,000 of those stored procedures - PER GAME - PER COUNTRY, and the data structure between similar procedures (e.g. the *_Get_Available_Games) was different, so after we loaded the array of $games, we then then had to do mapping to get the data to a consistent format, or do a lot of isset() checks.  But that conditional stuff wasn't just for invoking stored procedures, but also for determining which date formatting to use, or currency symbol to display, which options were allowed and which weren't, tax rules, invoice calculations and line itemization etc.  So instead of that mess, we:   defined everything in configuration (e.g. scalar values, formats, IoC container bindings as needed) built a single consistent set of APIs that were the same regardless of user type, country, or game, used the request context to determine which configuration(s) to load, and composited them together   Then we had no more spaghetti, AND we didn't have to resort to a bunch of duplicated code to do country or user-type specific request handlers. 80% of all code and business rules was the same between games, countries, and user types, but the sheer breadth of the code-base and disparity in data structure between different stored procedures still meant that last 20% was cumbersome to juggle without contextual configuration."
PHP,3caik5,siraic,1 point,Wed Jul 8 03:45:55 2015 UTC,"Damn, very interesting! Thank you kind sir!"
PHP,3caik5,erp01,3,Tue Jul 7 05:02:40 2015 UTC,"Start reading about design patterns, data structures, and algorithms. I felt the same as you some years back. I'm now realizing just how very much more there is to learn. It's overwhelming, but exciting!  A good place for you to expand is into doing things in JavaScript. I'm not talking about simple page enhancements with jQuery, but some things that are basically applications in the browser. Play around with Canvas, d3, and anything else that entails running a persistent application in the browser. It's a different mind-set than the CRUDdy request/response that characterizes most server-side code. You'll even find that your PHP skills start improving with this cross-pollination.  Unfortunately, JS still has a ways to go in terms of reaching maturity with its libraries, tooling, and language features. Another language would strictly be better on this front, but JS dovetails with PHP for doing interesting things on the Web, which is why I recommend it.  Incidentally, I found this book to be a fascinating intro to algorithms and some data structures that we don't normally get much call to use in PHP.  My own learning project right now is to build a simple Tetris implementation in JS on a canvas element. It'll be awful, but I'm going to learn a ton from it."
PHP,3caik5,code4pay,2,Mon Jul 6 14:24:24 2015 UTC,"Most APIs start by looking like CRUD, but they never stay there for long. It's like a baby crib - comfortable, necessary, but quickly outgrown. Your API architecture & tools should allow a quick CRUD start but allow you to remove and add actions that don't conform to that template. With a bit of forethought, there's no protocol that won't allow this, even REST.  To discuss API design in more detail, you need to lay out some specific example from your practice, and we can talk how we'd refactor it so it better encapsulates its business logic. Writing business logic is not an end on its own. It serves a purpose."
PHP,3caik5,geggleto,2,Mon Jul 6 13:04:07 2015 UTC,"I'd look into CQRS, events, event-sourcing, and DDD, which are all mostly-separate techniques that often get smushed together in different ways.  I'd start with just CQRS and events, as the most immediately-interesting way to restructure existing applications.   In a nutshell, you design your controllers so that they create and send off a command, like RepriceStoreItem and then collect the swarm of events that occur, especially StoreItemRepriced, deciding how those events should guide the response to the user, which could be as simple as ""Success!""  Meanwhile those same events are triggering other activities, causing certain caches or static tables to get rebuilt if necessary,  sending alerts, or updating graphs for price-histories, etc."
PHP,3cd1ou,donlalo,12,Mon Jul 6 23:31:35 2015 UTC,So what you're saying is you want to learn PHP the right way?
PHP,3cd1ou,909plz,13,Mon Jul 6 23:47:33 2015 UTC,This? -> http://www.phptherightway.com/
PHP,3cd1ou,no1youknowz,3,Mon Jul 6 23:58:16 2015 UTC,"Escape character, Scope Resolution Operator, Object Operator."
PHP,3cd1ou,lemminman,3,Mon Jul 6 23:56:19 2015 UTC,"My recommandations :  As suggested by /u/909plz and /u/no1youknowz, start by reading this : http://www.phptherightway.com/  Then get used to working with https://getcomposer.org/ (dependency manager) and packages on https://packagist.org/  Then start using a framework. I'd suggest Laravel because it's quite popular around here and you can then watch videos at https://laracasts.com/ wich is probably the best PHP resource right now (it's not free, but it's a few bucks for one months and you can download the courses that you'll need and watch them later).  Even if you don't use a full blown framework in the end, learning how to use one will teach you a lot about PHP.  edit : Oh, and use PHPStorm. You can't use PHP properly without a good IDE ;-)"
PHP,3cd1ou,BlueScreenJunky,2,Tue Jul 7 09:13:27 2015 UTC,I have collected some of the popular sources in learning modern PHP. It might be of some help.
PHP,3cd1ou,waiyan13,1 point,Tue Jul 7 00:47:37 2015 UTC,Great! Thanks for sharing
PHP,3cd1ou,coffeemaniac,0,Tue Jul 7 14:51:07 2015 UTC,"The backslash can also, unfortunately chosen, mean namespace. To use class Baz in the Bar subnamespace of Foo namespace, you would instantiate  new \Foo\Bar\Baz;"
PHP,3cd1ou,Pardalean,4,Tue Jul 7 04:22:00 2015 UTC,unfortunately chosen   Not this shit again
PHP,3cbmn0,revets,2,Mon Jul 6 17:25:58 2015 UTC,"If the CMS doesn't integrate with the CRUD app, I would keep them separate. Throwing wordpress in a subfolder seems appropriate enough."
PHP,3cbmn0,meandthebean,1 point,Mon Jul 6 20:06:10 2015 UTC,"I've just done exactly this, because it's going to save a shit load of time..."
PHP,3cbmn0,jpgnz,1 point,Mon Jul 6 20:43:52 2015 UTC,"ant to use a CMS... so ok, maybe I'll provide a base template file with 8-10 lines that handles all the <head> stuff and the header, nav, footer HTML. He just copies that and can put his own custom content in the middle. Then need to figure out a way to add that content to auto-generated nav links, but that's do-able.  About 1/3rd of the site are a few pages will vary on occasion and they want their admins to be able to tweak text on it via WYSIWYG editor. That's where it gets tricky for me.   Any advice on a simple CMS that can handle that last component, but does not try to take over the entire site content? Ideally something with custom fields/flags to make it easier for me to generate nav links? Right now looks like I am pretty much resigned to installing a full-fledged CMS in a subdirectory or rolling my own simple CMS - whic   Agree that Wordpress is a best choice for you. You can easily change nav links there, it has easy to understand WYSIWYG editor. You can install Wordpress SEO plugin for better search engine optimization and so on. For sure there will be some plugin to work with CRUD.  BTW, if you need to read all pros and cons of popular CMS, I recommend you to read the following article about comparing 7 of them http://webinerds.com/seven-cmss-consider-designing-website/"
PHP,3cbmn0,wardbrad,2,Tue Jul 7 08:57:07 2015 UTC,You should try http://processwire.com .
PHP,3cbmn0,harikt,1 point,Tue Jul 7 08:40:03 2015 UTC,"Keep it separate and use Tumblr or something similar. You can create pages and blog posts and all you really have to know is HTML, CSS, Javascript and the Tumblr block usage."
PHP,3cbmn0,haydenk1337,1 point,Mon Jul 6 22:10:55 2015 UTC,"I don't know how big this project is supposed to be. I would do one of the following:   Use WordPress. It's easy enough to use as a simple CMS and the guy who just wants to use html can have the WYSIWYG editor suitable for good account and edit away. If you need more control, roll your own mini CMS with a framework of your choice. It's easy enough with stuff like Laravel our Symfony.    In any case I would tell this guy that it's not feasible for him to still edit html pages."
PHP,3cbmn0,rawfan,1 point,Tue Jul 7 08:32:59 2015 UTC,Something like http://crudkit.com/  or http://getgrav.org/
PHP,3cbmn0,_tenken,-3,Tue Jul 7 14:39:58 2015 UTC,www.slimframework.com
PHP,3cbmn0,SomeRandomBuddy,3,Mon Jul 6 17:33:50 2015 UTC,a framework isn't a CMS. what am I missing?
PHP,3c7vkq,SomeWebdevDude1,39,Sun Jul 5 18:49:33 2015 UTC,"Write down all the things you want to accomplish with the project.  Once that doc is complete, then start to code the website.  Ignore how the code looks, or how its written.  Doesn't matter, complete one milestone and go onto the next.  Finish the project.  Does it work?  Now go back and fix all the bugs.  Now you have a fully working website.  At this point, you'll know what it takes to build something and ship it into production.  Work on version 2 now.  Go back and start refactoring code:  1) Did you build the site just using straight php?  Ok, now look at doing it in a framework.  2) Have lots of code that does the same thing?  Maybe look at building classes. 3) Did you use an ORM?  Maybe look at doing it in SQL. 4) Not using a caching layer like memcache/redis/aerospike?  Look at that.  5) Not using jQuery and AJAX?  Put this in.  6) Not using a Message queue for background tasks.  Put this in.  I could go on.  But the point is, finish something.  You can always keep tweaking and making things better and better.  I currently a 18 month project which kept on being worked on and things refreshed and refreshed until the current project runs rings around what I had initially.  So much so, it's not even funny lol.  Keep working at it.  You'll get there."
PHP,3c7vkq,no1youknowz,21,Sun Jul 5 19:54:41 2015 UTC,"In summary, the old Unix adage.   Make it run. Make it right. Make it fast."
PHP,3c7vkq,jellatin,2,Mon Jul 6 08:20:41 2015 UTC,Ooo... I like this. This should be on a motivational poster or something.
PHP,3c7vkq,arbrown83,1 point,Mon Jul 6 10:15:11 2015 UTC,"This comment is a double-whammy.   This is my natural process. Even now I'll still do a ""hello world"" in whatever I'm doing. Just to make sure everybody is talking to everybody. It just feels like if step 1 isn't working then there is no point in going anywhere else. Even though OP probably won't see this it's little things like this that help mitigate some of those feelings. I'm 35. I've been doing some form of web development for almost 15 years. With the last three being dedicated to programming only. It's still nice to know that I'm doing something right."
PHP,3c7vkq,MyWorkAccountThisIs,6,Mon Jul 6 14:27:53 2015 UTC,Yeah but what happens if you end up shipping something that breaks because you didn't even know about XYZ concept? (A legitimate fear of mine)
PHP,3c7vkq,glasscalendar,15,Mon Jul 6 01:34:51 2015 UTC,"You will.  No matter what you do, or who you talk to there will be SOME area of expertise that is not covered and some piece will not be as good as it can be.  That's fine. Improve it when you find it.  Perfections a nasty target to shoot for."
PHP,3c7vkq,ebonwumon,27,Mon Jul 6 03:49:27 2015 UTC,I think this would be helpful: http://www.katschthaler.com/wp-content/uploads/2014/01/Ira-Glass-ForBeginners.jpg
PHP,3c7vkq,EvanEdwards,12,Sun Jul 5 19:03:08 2015 UTC,Clearly someone had a college typography assignment. Jesus christ that was bad.
PHP,3c7vkq,davidf81,4,Mon Jul 6 04:08:36 2015 UTC,"It's the ""modern look.""  I'm not a big fan either.  But the quote is good."
PHP,3c7vkq,EvanEdwards,12,Mon Jul 6 06:28:50 2015 UTC,"It's called Imposter Syndrome and if you think you have it, you have nothing to worry about.   When you realise there is always someone better than you and always someone not as good as you, you're free to learn what you need as you go.   You're also working for yourself. I've found that people are their own worst client, as we hold our work to a higher standard than we would if we were just paying someone else to do it.  This feeling is harder to work around, but if you accept that you're a beginner and realise that ""sucking at something is the first step to being sorta good at something"", you might be less harsh and demanding on yourself.   No-one expects a newbie painter to paint the Mona Lisa for their first painting; more like paint this cylinder and ball and cone.   Make sure you manage your expectations of yourself realistically.  Once you've built something, build it again with what you've learned. Programmers rarely build something right the first time. Experienced programmers just jump closer to the right solution when they start.  The best way to improve yourself is to Read other people's code. Like for example, when you're ready, learn the Laravel framework, and even if you don't use it for your own work, you'll get a feeling for some best practices and approaches to certain problems.  Tl;dr only compare yourself to older versions of yourself, and never stop learning"
PHP,3c7vkq,Glutnix,1 point,Sun Jul 5 21:48:22 2015 UTC,"Thank you.  I saw this post and came here to say it.  Imposter syndrome is often associated with the Dunn Kruger affect and  strong moral instinct of fairness.   A person who finds things easy is often judging themselves against others and thinks that you must be doing something wrong, because the people all around you are struggling.  Guess what.  Life is not always fair.  In this case, you are getting the benefit of this unfairness without actively taking advantage of someone.  You have to tell yourself it is OK to have this advantage.  You are not being a jerk or taking advantage of someone, so you can set your fairness instinct to rest.  Now, understand that you cannot look at your work through your subjective eyes.  You will never, ever build it to a level that either satisfies you or fixes your imposter syndrome.  In this case, you need to look at it as if it was someone else work and decide if it looks good enough.  If that still does not work, just know you can help out more customers in less time, contributing to the overall betterment of society.  Also, don't sell your work for less, even if you can do better in a shorter time!  This undercuts the market and hurts your fellow designers.  If you undercut, other designers will not make enough to live, not only suffer, but leave the market.  Now you will have more demands on you for less money.  It is better to take time off and the extra money than to screw the rest of the field."
PHP,3c7vkq,RhomboidStorm,9,Mon Jul 6 07:18:46 2015 UTC,"Honestly, you're on the right track. If you feel like you have more to learn then you're in a good place. Once you admit that you know everything then you've failed as a programmer. Keep researching and keep learning, but don't give up on your projects unless there is more of a legitimate excuse (such as finding a possible alternative that you didn't know about when you started the project).  Admitting you're not good enough is not a reason to give up. You may need to take breaks, but that's normal. You should know that even after a decade of programming I still feel like this all the time and my hunch is even the best and most humble programmers in the world still go through this."
PHP,3c7vkq,dillongilmore,6,Sun Jul 5 21:02:03 2015 UTC,"Stop wasting time, and just do it  Your first app will probably be bad, but that's ok. You'll never learn anything without practice. You can study as much as you want, but without seeing how these design patterns and practices could apply to your real-life project, it's hard to fully understand their benefits.  So start. Today. Start with a small piece and make it work. Get into a good feedback cycle of writing a little code and seeing something happen. It'll grow into an organic mess over time, but you'll be motivated to make it better and will understand the pains you're experiencing with your current codebase.  Refactor and improve."
PHP,3c7vkq,jmking,4,Sun Jul 5 21:15:03 2015 UTC,"First things first: everyone starts like this, there is no need to worry. The only real way to combat the feeling is to keep making things. Your first 2-3 years of development will look and feel like absolute shit. It'll all be a maintenance nightmare. You'll hate the code as soon as your write it. You'll find that as you work more and more, though, you and your code get better and better. You will hate your solutions less and less. In fact, you'll start liking what you're making.   KEEP EDUCATING YOURSELF. Don't be afraid to learn something new, no matter how advanced it seems. Just learn it. If there's a prerequisite topic you need to learn about, then learn that prerequisite. There are so many resources out there that there's no reason to stop learning.  DON'T LET YOUR SELF-EDUCATION GET IN THE WAY OF MAKING THINGS. Never say ""as soon as I learn this concept or read this book I'll get to work on this project.""  You will never learn if you don't put what you've learned into action, and you usually don't know what you need to learn until you start working on it. Start the project, and learn as needed. Sure your project will look like shit. Finish it, hate it, and re-do it in a better way.  PAY ATTENTION TO THE PATTERNS. Patterns are more important than functions or APIs. Patterns are more important than PHP books. Patterns transcend programming languages. Whenever you write some code, ask yourself ""Is this a pattern?"" Meaning, ""is this something I've done before? Do I structure my code like this a lot?"" Ask yourself ""Is it good that I do it like this? Are there issues that I run into by structuring my code like this?"" Part of becoming a good programmer is building an internal library of patterns and antipatterns (bad patterns) so that you don't have to re-invent the wheel whenever you start your project.  COMMENT THE SHIT OUT OF YOUR CODE. Commenting isn't necessarily just to make your code easier to read (though it definitely helps). It also helps you gather and simplify your thoughts. Write a comment for every block of code (if blocks, loops, functions). That will force you to write code simple enough to describe it in a line.  NEVER GIVE UP. Really. That's the make-it-or-break-it. You're already halfway there: you care about the fact that your code is shitty. That's what separates the good programmers from the bad programmers, the caring. And the persistence. Just keep writing code, however bad it is. It'll get much better, I promise.  Most importantly, in the words of the legendary Shia LeBeouf: ""JUST DO IT!"""
PHP,3c7vkq,phnglui_mglwnafh,3,Mon Jul 6 03:38:10 2015 UTC,do multiple projects and just improve every time from your last one. That's it
PHP,3c7vkq,512austin,3,Sun Jul 5 21:11:14 2015 UTC,"There's a lot of talk about ""best"" without the commensurate description of the valuation. Your work isn't bad because it's not the best for a given scenario. Code written by 5 people looks WILDLY different from code written by 1 person. There's good reason for this and they can both, subjectively, be considered ""best"". You can make changes. The most difficult problem in software development projects, is management of the project (what to change, when and how). There's a whole subculture of discussion about how to best do it. So don't worry about a better way to do things, just keep at it and slowly learn the patterns of what works and doesn't work (which are partly affected by your personality). It never ends."
PHP,3c7vkq,Jack9,3,Sun Jul 5 19:08:05 2015 UTC,Just keep doing it. I've found self doubt can be a very useful tool. It's already making you work harder to be better. Being bad at something is only bad if you aren't identifying the problems. So keep failing and keep learning.
PHP,3c7vkq,beb1312,3,Sun Jul 5 19:24:36 2015 UTC,"Have a look into PHP The Right Way if you haven't yet.  Are you using any framework for your sites? Using a framework, even a minimal one can help you improve how you organize your code.  Can you show us a bit of your code? We could provide feedback and help you get in the right path.  In the end to get better just build websites!"
PHP,3c7vkq,nelmaven,1 point,Mon Jul 6 06:00:06 2015 UTC,"I'm still new to PHP; mind guiding me the right way?  The website in question is effectively a hand-built CMS and each page runs by starting a session, getting the unique ID and then checking for a $_POST, then after that grabbing database data and echoing that out into all the fields. It's not very DRY but I don't know how I could structure it better. Can that be done better? (I assume yes... :p)"
PHP,3c7vkq,ClutchHunter,2,Mon Jul 6 10:41:39 2015 UTC,"What's the point of the project?  It's important. Is the point to learn how to do a CMS or to provide CMS to somebody else? If it's the latter you should consider dropping what you're doing and digging in to one of the many CMSs available. If you're leaning to make a CMS then we can move on.  Abstraction/Classes  Make sure you're coding in some form of object oriented PHP. Right now, even if they don't follow a pattern and are essentially still functional programming wrapped in a class - make it a class. OO is what you're going to find in the workforce and hopefully schooling - whatever might apply to you.  Framework  You might want to scrap what you've got and look into using a framework like Symfony or Laravel. Starting out I would say Laravel. A framework takes care of some of the complex and the mundane. It will introduce you to MVC - Model/View/Controller. Which is a methodology of building apps/sites.  Classes That Do Things  Without knowing anything about the what you're building you can probably make a few classes that can be reused. A database class. If you're talking to the DB it runs through that class. But that's all it does. Maybe you've got a Page class. Checks for POST and routes data to the DB class.   What's Next  Honestly, I would go do a ""hello world"" with Laravel. It will introduce you to several concepts and maybe inspire you to refactor some of your code. Whatever you do - don't stop. Even if you think you're doing it wrong you keep on moving. You don't make progress wondering what if. You will never make the perfect app/site/whatever. There will always be a compromise and something new to learn."
PHP,3c7vkq,MyWorkAccountThisIs,1 point,Mon Jul 6 14:47:57 2015 UTC,"I really appreciate this and will bookmark it, thank you!  I'm the junior (though technically not junior as I do all the frontend) developer out of two of us for a small company of around 50. The CMS is used by a couple dozen of them. They're currently using an old, hand-written CMS that's identical but separated across each of our websites.  We're rewriting it from scratch into one more modern, unified CMS and I'm doing all the coding as a learning experience with the more experienced dev beside me the whole time. Thus far the biggest change I've made is insisting on PDO with prepared statements (versus mysql_* and manual escaping et cetera).  Because of the fact that I'm already learning a ton from it and I'm in no position to argue with my superior over anything PHP yet (...except PDO, I won that one) the move to a unified CMS is set in stone. That said, I could still move on to a CMS that's already available like you mentioned as a new project next year.  I really like the classes idea, I'll definitely do that.  Oh, and I have to develop against PHP 5.3.2. Probably should have mentioned that sooner haha. Will that affect any of the things you've mentioned?"
PHP,3c7vkq,ClutchHunter,3,Mon Jul 6 17:53:48 2015 UTC,"Maaaaaaaan.   You will learn some good things there. You will not learn good coding there.    hand-written CMS PHP 5.3.2 ...except PDO, I won that one identical but separated across each of our websites though technically not junior as I do all the frontend out of two of us for a small company of around 50   I'm really not trying to shit on your, your job, or the company you work for. But all those are big red flags to me. Why is this a 50 person company with only two developers? Do they sell this CMS as their main product? Did you want to learn PHP or were you presented with an ""opportunity"" to learn? Before I go further, here's what type of company your response indicates to me. Obviously with some reading between the lines and some assumptions.  Small company that is reliant on technology to exist but does not value it. The don't care about process, staying up to standards, or developing your skills. They want you make them something that will do whatever they told the client it does. They don't pay their developers market value and/or they hire people with low skill sets to they don't have to. But still expect them to get it done. No regard to work/life balance - just a ""get it done"" mentality. Little to no infrastructure or process.  I could be completely off base but that's my experience with places that do the things you've listed and I hope I have taken the focus away from programming. You seem really excited and eager to do this. Which is the best thing you can have at this point.  Start here. That's for 5.4. You can go up or down by changing the URL to 55 or whatever. Staying at 5.3 is not good. It's no longer updated. You may run into performance and security issues. The current stable release is 5.6.10. You are three major versions behind. Do some Googlin' and read up on why it's best to stay current. Or at least what you'll be facing by staying. You probably can't change it at work but at least you'll know.  Why do you have a custom CMS? Does your small team think they are going to be able to produce something better than WordPress (for example)? But maybe your company fits a very specific niche and needs very specific requirements. My guess is that is not the case. Is your task to rewrite it a ""test"" or some form of training? What are your senior devs doing while you're doing this? Look, I don't know all the details and I certainly don't want to plant a negative seed in your brain. But nothing of what you stated sounds good. It sounds like your ""senior"" developers are - at best - not guiding you correctly or - at worst - not qualified to be called senior or guiding anybody.   Okay, let's move on to what we can change. Which is a good thing to get used to. You'll encounter some type of issue everywhere. If you can't change it; accept it and work with it as much as you can. Staying positive is very important in development and in your career.  Scope  Do you have one? A defined list of required features? If you don't, make one. Even if the directive is ""just make sure it has all the features it currently has"". You're making a fundamental change (unification) and that will most likely make some feature have to change. Get a sign-off from the highest person you have access too. They want something changed? Pull out that scope and reference it. Wait. Roll back. Do you have a project manager? This is stuff they should be doing - even if it's an internal project. If you don't you just got one. Yourself.  Version Control  If you're not using version control then you need to start. Git is my suggestion. GitHub is free and you get one private repository. It will need to be private since it is an internal project. GitLab and Gogs came up as self-hosted solutions. Learn the GitFlow process. It's easy to understand and great for beginning.  Gawd, there is so much more. Reply back or send me a private message and lay it all out. Answer anything you can in this message. Lay out what your current process is. What technologies you have at your disposal. I'm willing to take a look at see where I can help point you in the right direction. Or don't. I could have completely missed your intent. Maybe you don't really want to become a PHP dev and just want to get through this project. Or you're already looking for another job. But if you want an outsider's perspective I'll provide it."
PHP,3c7vkq,MyWorkAccountThisIs,2,Mon Jul 6 19:25:10 2015 UTC,"just build your webite\service; the beauty with programming is there is no right\wrong way and over time you learn to do things more efficiently.  Then; 100% start using a framework, speaking from experience that elivates that notion - until I started learning a framework and I'm talking in the context of having build a dozen small\medium projects over the years I wasn't abl to shake the feeling too.  Also, don't feel ashamed for using GOOGLE, part of being a good problem solver is by knowing how to find information out fast and not just sitting there staring at the screen."
PHP,3c7vkq,Twinsen343,2,Sun Jul 5 22:22:46 2015 UTC,"If you know that ""exists a better way of doing something"", then you know what is that better way, and thats good. You just have to focus in that better way, leave lazyness in bed, and get your hands dirty. By getting your hands dirty I mean, do a research on google on how to achieve this better way of solving a certain problem and do it. Trust me, I was and am a lot like you, the thing is to never give up and always do the way that you think is best done."
PHP,3c7vkq,rafamds,2,Sun Jul 5 23:21:47 2015 UTC,Which PHP book?
PHP,3c7vkq,WorstDeveloperEver,0,Sun Jul 5 23:57:41 2015 UTC,..... book?
PHP,3c7vkq,yujmnh,2,Mon Jul 6 11:52:18 2015 UTC,"I'm a self-taught PHP professional, as I suspect many of us are. The first paragraph of your post is the whole key here.   Once I start a project, I always gets the feeling of: ""There is a better way to do this"", ""This code is not good enough, I should research a better way to do this"".   YES! This is a good feeling. Someone else here has made this point, but it's an important one so I'll make it again: the very best programmers get this feeling too. Programmers without it are bad, if you meet one who does not think this way, try to stay away from them if you can. It's good to question what way to go to solve a given problem, and to think about this sort of thing before you start coding. You doing this sets you apart from huge droves of beginners. Kudos!   This all ends in a big soup of ""I'm not good enough to even call myself a programmer"" and ""There's so many more people who are better than me on this, why am I even trying?""...   This sort of feeling is unhealthy. I used to be depressed, and I definitely know this feeling. I hope for your sake that you're not depressed. If you are, then there are people out there who can help you.  Anyway, the trick to this sort of thinking, as I'm sure you realize, is that it's rooted in reality, but the fact that you're not really awesome at programming should not be discouraging. There are definitely programmers out there who are better than you are. There are programmers out there who are better than I am, and who are better than anyone who works at Google.  But the only way to get better, is to go out and do it. Just practice. Getting better at anything is part education/theory, and part lots, and lots, and lots of practice. If you do, then you will learn, if you want to or not. A friend of mine is a pretty good guitar player and he's only been playing for two years. I was amazed when I first heard him, being an amateur guitar player myself. But then he told me he'd been practicing for an hour to two hours a day, every day, for the past two years, so he's got about a thousand hours of playing under his belt. And there you go.  Also, I keep thinking I'm a bad programmer, but until I had a few years of experience as a professional, I didn't realize how bad many of my peers are. You would not believe the unsafe and unstable crap I've seen people charge four figures for. You may not actually be a bad programmer, even if you think you are. The Dunning-Kruger effect works both ways!  This leaves just one thing: where do you start? PHP the right way is always good. I'd try a framework, such as CodeIgniter or Laravel. Or just ask, if you have a question about how to best do your architecture, post on here and have your mind blown. Software architecture is hard and access to people who know how to do it is invaluable.  Keep going buddy! You can do it. You're trying to improve and to think, that can only be good. Try to shake the illusion that you're not good enough to be a real programmer. If you really want to be, I recommend that you get a job as a programmer somewhere. That's the best way to learn, because it's the best way to get experience, and also you'll be doing what you love for a living. Unless you're still in school, in which case you should probably finish school first."
PHP,3c7vkq,spin81,2,Mon Jul 6 06:49:54 2015 UTC,"it might never go away, im 10+ years in it, and know exactly what youre talking about ;) it might be a character thing.  on the bright side, i can promise you--having this chracteristic--you'll one day meet developers who are suppose to be god almighty seniors who think very highly of themselves, that will be schooled by you ;)  having the feeling you're always steps behind, and not up to your game, will push your buttons 24/7. just enjoy yourself"
PHP,3c7vkq,creatiff,2,Mon Jul 6 07:47:57 2015 UTC,"This is called analysis paralysis and you probably suffer from the impostor syndrome :)  The ""cure"" for this is just do your thing and welcome criticism no matter if it's good or bad. By failing as much as possible you'll become a better programmer.  I'm actually writing an article on this subject, I'll post it here once it's published."
PHP,3c7vkq,feketegy,2,Mon Jul 6 08:56:03 2015 UTC,"Dude, listen to jake's wisdom It's perfectly fine, you're on the right way. :)"
PHP,3c7vkq,eXilz,3,Mon Jul 6 11:51:18 2015 UTC,"10 You suck.  Understanding this, and coming to terms with it, means you can comprehend things on a slightly higher level than where youre at, because you identify it as on a higher level. If you cant come to terms with it, your ego has won, and you stagnate. (This is where youre at now OP)  By being able to comprehend things on an even slightly higher level, you are able to reach that level.  Once you reach that level, youll be able to comprehend things on a slightly higher level.  Go to 10."
PHP,3c7vkq,Ob101010,1 point,Sun Jul 5 21:40:12 2015 UTC,"Keep doing it until you feel like you are good enough.  I know it doesn't seem like it, but there will come a time when you are comfortable with your own capabilities."
PHP,3c7vkq,KiwiThunda,1 point,Sun Jul 5 22:33:43 2015 UTC,"Long story short; I used to think like you until I met actual senior devs who had big knowledge gaps and couldn't draw up a useful UML. Everyone has the strengths and weaknesses, regardless of experience"
PHP,3c7vkq,sunshine_killer,1 point,Mon Jul 6 04:29:32 2015 UTC,Have you ever wrote code and then a year or two later look at that awful code....it happens to us all. Just keep at it and try to look up best practices when needed.
PHP,3c7vkq,JustinsWorking,1 point,Mon Jul 6 05:19:48 2015 UTC,"Go look at question on stack overflow... That always makes me feel better; there are a lot of ""professional programmers"" asking questions about for loops.  Sometimes a little perspective is helpful.  You don't see the majority of programmers work online, because nobody in the right mind wants to read about it, you get linked all day to the very best; that starts to create a distorted view of the world, especially if you aren't a part of a larger organization and can see what normal is first hand."
PHP,3c7vkq,stepbacksniper,1 point,Mon Jul 6 06:12:58 2015 UTC,"Man I feel you. I always have this, not only with a programming project, but also other stuff... I always wanted to write a book and I never did it.. But I made a huge choice which completely changed my mind..  I had to admit it, I had to admit that I can't get it right. Everytime I said ""Ah next time, tomorrow, I don't have the time, bla bla bla"" but I just don't wanted to admit it.. You did it and I know that you will make it now!  Good luck and keep it up :)"
PHP,3c7vkq,yujmnh,1 point,Mon Jul 6 08:03:13 2015 UTC,"If you know you suck, then you are one step ahead. No one will ever be the best. There will always be a space for each programmer level, and you don't need to be the best to success. You need to learn why you are failing, you need to learn tools that make your code developing almost stupid-proof. It's hard, it's long, and it's boring sometimes. And at the end of the day, you realize what you have done is beautiful, and no one will ever use it correctly, you will get underpaid, and any person who is not a programmer will never understand your frustration.  Programming is hard. You have to really love it. It's not something you will learn by force, you have to be attracted to it. If not, just walk on and try other thing. Programming is not for bitches."
PHP,3c7vkq,anon0108,1 point,Mon Jul 6 11:56:04 2015 UTC,"look at who or whatever is making you feel like that and repeat after me  ""fuck you""  then go do whatever it is that you're trying to do.  if you make mistakes, then learn from them"
PHP,3c7vkq,thomasjthomasj,1 point,Mon Jul 6 12:16:43 2015 UTC,"If you feel like you're not good enough, take a look at the codebases for WordPress and MediaWiki (which powers Wikipedia). These codebases are nasty, but they're also two hugely popular platforms that power a large percentage of the web. There is almost always a better way to do what you are doing, but first and foremost you want your stuff to work. The best way to become a better developer is to just keep writing code, and keep up to date with new developments in the PHP community."
PHP,3c7vkq,alexanderpas,1 point,Mon Jul 6 12:21:03 2015 UTC,"The best/only way to really learn, is to make mistakes, and to learn what you don't know.  If you know a lot you don't know, you are better than the guy that doesn't know that he doesn't know.  /r/getmotivated and start doing shit, and eventually you notice that you have learned a lot.  Remember these 2:   The less you know, the more you think you know, because you don't know you don't know.   and   The more you know, the more you know you don't know."
PHP,3c7vkq,AceBacker,1 point,Mon Jul 6 14:10:06 2015 UTC,"Think about the next person who inherits your code.  They won't care that you were not using a fancy framework, or a specific oop technique.  Just make your code easy to understand.  Anyone can write code that a computer can understand, few can write code a person can follow easily.  Start with well named variables.  Lots of functions (that are well named).  If you get those 2 things down each line of code should be clear what it does.  From their you can start adding more advanced techniques over time.  Always ask yourself as you are working, will this be easy for a new person to work on?  Here's an added bonus.  For most people returning to code older than 2 years you should be embarrassed.  And it will be as if someone else wrote it.  If it's easy to understand it will be easier to work with.  What I am getting at is making your code easy to understand is like giving future you a gift."
PHP,3c7vkq,brainphat,1 point,Mon Jul 6 15:33:14 2015 UTC,"So many programmers feel like this. Just fight through that feeling. It's perception you have, not a reality. Are others better than you? Undoubtedly. Also better looking, more charming, confident, and rolling in dough. So what? They started somewhere, too, and that's where you're at. Keep at it and you'll care less and less."
PHP,3c7vkq,webdeverper,1 point,Tue Jul 7 20:16:15 2015 UTC,"I get this sometimes even as a 10+ year PHP expert.  One pseudo solution is a bit of liquor, sounds funny but helps to kill any anxiety if starting a project for fun.  Too much and it becomes a mess of course.   The second thing is to just say ""Fuck it!!!"" a lot and just do it. As long as you know git you can always change things later, and you'll be smarter in the future."
PHP,3c7vkq,glasscalendar,-1,Sat Jul 11 20:33:17 2015 UTC,Everyone here is 1000 times better than you.   Everyone here has the exact same feeling as you.   You might as well get used to the feeling. It's never going to leave you. Your skill has absolutely nothing to do with it
PHP,3c7vkq,dracony,-3,Mon Jul 6 01:38:38 2015 UTC,"Well, there's a good old remedy for impostor syndrome: study more and grow balls (self-esteem) =)"
PHP,3c7vkq,aleste2,-2,Mon Jul 6 00:10:08 2015 UTC,"Starr by learning OOP, Patterns and reading/watching tutorials about it. Doesn't matter the language.  Then try to put in practice. And this is important. Nobody born knowing this.  Be patient and focus."
PHP,3c7vkq,Aaarya,2,Sun Jul 5 19:35:51 2015 UTC,"""Pattern"" do really sound good huh ? I just don't see a reason why would you bring it here.."
PHP,3c7vkq,aleste2,1 point,Sun Jul 5 22:23:22 2015 UTC,"Well, i was talking about design patterns...."
PHP,3caowv,toateslafel,1 point,Mon Jul 6 12:46:02 2015 UTC,"I normally use   ini_set('display_errors', 'On'); error_reporting(-1);  for error reporting, maybe the change will give you a more helpful error message?"
PHP,3caowv,thatguy454,1 point,Mon Jul 6 12:49:15 2015 UTC,"I changed them, still no errors."
PHP,3caowv,milki_,1 point,Mon Jul 6 12:51:05 2015 UTC,Enabling error_reporting in a script with syntax failures is always too late. You'll need to configure this in the php.ini or .user.ini or via .htaccess Or at least have a look into the webservers error.log
PHP,3caowv,NeoArc,1 point,Mon Jul 6 16:00:52 2015 UTC,"Sometimes shared hostings crash on things like:  $a = [1, 2, 3];   Which version of PHP is available online? Can you change it in the admin panel?"
PHP,3caowv,winglian,0,Mon Jul 6 13:08:18 2015 UTC,"That's the main problem, I have 5.3.3 on the hosting and there is no way to change it. This is the only library I found that still supports 5.3.  Anyway, I managed to solve the problem."
PHP,3caowv,mgkimsal,3,Mon Jul 6 13:15:45 2015 UTC,Can you share what was involved to resolve the issue?
PHP,3caowv,pyr0t3chnician,1 point,Mon Jul 6 13:40:44 2015 UTC,"Yes sure, sorry for not posting. https://github.com/chriso/klein.php/wiki/Sub-Directory-Installation  Basically there are additional configurations when dealing with sub-folders."
PHP,3c8vwl,sarciszewski,2,Mon Jul 6 00:10:11 2015 UTC,"Would anyone even want a secure, DB-agnostic phpmyadmin type program? I've been thinking about building one but the more I think about it, the more it seems people would probably rather use their own specialized tools for their particular RDBMS."
PHP,3c8vwl,adamn90,1 point,Mon Jul 6 02:54:25 2015 UTC,"By phpmyadmin-type, do you mean web-based, installed on the production server? Maybe beginners, but they'd probably get away with phpmyadmin. I would imagine anybody remotely experienced would rather use a proper client"
PHP,3c8vwl,sarciszewski,1 point,Mon Jul 6 15:08:22 2015 UTC,"That's sort of what I was alluding to, yes."
PHP,3c8vwl,boreasaurus,1 point,Mon Jul 6 15:17:55 2015 UTC,"Navicat started, as far as I know, as a MySQL specific tool. Then they started releasing versions of their product for other RDBMS, and in the end, released a combined product for any (popular) RDBMS.  So apparently there's a market for this. I'm a Navicat user, and I appreciate all my DB accounts in one place.  I'd suggest your product doesn't install its ""UI client"" on the host where the DB is, but locally on the dev's machine. The thing that gets installed on the server can be just a connector (for tunneling DB traffic from the server to the client).  This means:   Easier to set up secure connection between connector and client (using private/public key crypto etc.) The dev has less files to deploy (just the connector) in order to use a database. One place (the local client install) to overview all databases and adjust UI settings. No need to configure every copy."
PHP,3c8vwl,damnfinecoffee,2,Mon Jul 6 15:26:37 2015 UTC,"We have a separate instance of our SaaS application, one per client, in it's own directory in /var/www/. For example, client1.mycompany.com has the document root /var/www/client1/. There is a user on the server called client1 that the PHP-FPM process run with when loading the site. The only way I can achieve this right now is to create a new virtual host per client, which seems a bit unnecessary given that every client has the same folder structure.  The question - is it possible to use Apache's mod_vhost_alias in conjunction with PHP-FPM to create a single wildcard virtual host, that uses a different pool for each sub-domain site? Psudo-code to give you an idea of what I'm looking for :  <VirtualHost *:80>     ServerName mycompany.com     ServerAlias *.mycompany.com     VirtualDocumentRoot /var/www/%1/      <FilesMatch \.php$>         SetHandler ""proxy:unix:/var/run/php5-fpm-%1.sock|fcgi://localhost""     </FilesMatch> <VirtualHost *:80>   The %1 from mod_vhost_alias in the FilesMatch directive doesn't work. It would be great if there was a way to pass in the sub-domain to SetHandler. Any ideas?  Secondly, if there is a way to do it using unix sockets above, if there instead a way to do it using TCP instead? From what I've read TCP seems to be preferable over unix sockets. I assume this is impossible because I can't think of any way that a single virtual host could specify a different port for each sub-domain (e.g. 127.0.0.1:9000 for client1, 127.0.0.1:9001 for client2, 127.0.0.1:9002 for client3, etc), but I figured I'd ask anyway."
PHP,3c8vwl,Jonny_Axehandle,1 point,Mon Jul 6 09:14:20 2015 UTC,Try http://httpd.apache.org/docs/2.2/mod/mod_env.html#setenv to make the variable available in the interior directive.
PHP,3c8vwl,Jonny_Axehandle,2,Mon Jul 6 12:26:25 2015 UTC,What happened to idiot-with-opinion ? That guy was funny
PHP,3c8vwl,pmjones,1 point,Mon Jul 6 18:39:10 2015 UTC,"Nah, we're better off without him."
PHP,3c8vwl,Henda23,1 point,Mon Jul 6 19:03:03 2015 UTC,Oh ok
PHP,3c8vwl,nuttytomato,1 point,Mon Jul 6 19:25:35 2015 UTC,Although I do have to wonder what value (or purpose) BringTheTanks/zen-of-code/idiot-with-opinion/maybe_john/zen-idiot-with-tanks finds in serially deleting his previous accounts and starting new ones.
PHP,3c8vwl,mrjking,1 point,Mon Jul 6 20:03:50 2015 UTC,"It's great actually, you should try it."
PHP,3c8vwl,Terr_,1 point,Mon Jul 6 22:02:12 2015 UTC,"I find mysql workbench usually does everything I need. Connecting via a tunnel over ssh is one of my favourite and most used settings. You can also export queries into php using prepared statements,  this can be a great time saver sometimes."
PHP,3c8vwl,nokios,1 point,Mon Jul 6 06:45:35 2015 UTC,"Why is it that whenever people recommend frameworks, i never see zend framework? Most of the time its laravel or codeigniter.  Just asking because we use zend at my internship and kinda want to use it for my own projects but i would like to know the bad things to.  I just want to know the general opinion about zend framework?"
PHP,3c8vwl,uselly59,3,Mon Jul 6 09:01:30 2015 UTC,"That's because when someone comes and asks for ""a framework"" without being specific about their project, it turns away experienced developers from giving advice (based on the project in question) and the majority of comments come from fanboys and fangirls of the framework of the day (who will recommend you Laravel or Code Igniter never mind if it's suitable for you).  Zend Framework isn't amazing, isn't horrible. It's a set of components. They're tested, functional, you should review their capabilities and choose according to how they fit your project. You will spot over-engineering here and there, but that's unfortunately common with public frameworks (same applies to Laravel and Symfony). But you can certainly do a lot worse than use a Zend component."
PHP,3c8vwl,m4r3x,1 point,Mon Jul 6 15:34:00 2015 UTC,"It's a decent framework, used it for the past year or so. I think from a learning perspective, it's a little complicated. I would never recommend it to somebody trying to learn a framework for the first time. Trying to start a new project and diving right in on your own was confusing the first time I did it, compared to say Laravel where it was pretty easy.  I really dislike how complicated the configuration is in ZF2. Everything seems to have a nested array of options, and it's rarely nicely documented anywhere. So if you make a small typo in a config somewhere, the whole app can blow up in your face. I think of using ZF2 like if you were trying to learn to fly, and somebody put you in a Boeing 747 with a half torn manual and said ""Good luck!"".  One thing to avoid doing (even though it's convenient) is abusing the Service Locator in your controllers. Inject your dependencies via the constructor instead. If you find you're injecting a lot of dependencies (maybe 4+) then you should re-evaluate what your controller is doing. Most likely certain actions should be moved to a separate service, and that service can be injected into your controller instead."
PHP,3c8vwl,ConnorVG,1 point,Tue Jul 7 07:36:46 2015 UTC,"Despite the name, I see Zend Framework as more of a library that happens to have some components you can use to build your own framework with.  For certain situations, that's a big plus, but not when someone's looking to just hit the ground running."
PHP,3c8vwl,dlegatt,0,Thu Jul 9 01:07:39 2015 UTC,"ZF can be slow and very bloated at times.  We personally use Phalcon (1.3.x right now, will eventually move to 2.x)"
PHP,3c7e4p,Rygu,5,Sun Jul 5 16:07:24 2015 UTC,"PHP has always had a powerful array-implementation and standard library that goes with it. Some may find the support for both numeric and key-value arrays in the same implementation, a bit difficult to understand. But undoubtedly we have all created good things with PHP's array.  Since the introduction of the splat (...) operator for declaring variadic functions and unpacking function arguments in PHP 5.6, it has become quite clear that we need the splat operator in basic array arithmetic as well. Simple examples are [...$originalArray, $pushNewItem] but also list($one, ...$theRest) = [1,2,3], these are missing utilities in the array toolset we use at work everyday. I do hope to see this incredibly useful operator in PHP 7."
PHP,3c7e4p,fiskfisk,4,Sun Jul 5 16:31:59 2015 UTC,"If it isn't in PHP7 by now, it's probably not going in. We're two days away from the first beta being tagged, so you'll at least have to wait for 7.1 for something that never went anywhere in eight months."
PHP,3c7e4p,kurashu89,2,Sun Jul 5 17:57:35 2015 UTC,"10/10 awesome idea. Tuple unpacking is one of my favourite things in Python, and if I remember correctly there's a PEP under consideration for bringing unpacking into literal syntax as well.  To be curious, is it possible to unpack nested sequences with this?"
PHP,3c7e4p,Disgruntled__Goat,1 point,Sun Jul 5 17:29:53 2015 UTC,"You mean if you have something like $arr = [[1,2,3],4,5], then ...$arr would yield [1,2,3,4,5] ? I'm sure the answer is no."
PHP,3c7e4p,kurashu89,1 point,Mon Jul 6 17:16:14 2015 UTC,"In Python it'd look like this:  *not_nested, (nested_one, nested_two) = [1, 2, 3, [4, 5]]   Unpacking nested sequences like that is incredibly useful."
PHP,3c7e4p,Disgruntled__Goat,1 point,Mon Jul 6 17:18:43 2015 UTC,"I don't know Python, can you explain a bit more? What would the variables be equal to?"
PHP,3c7e4p,kurashu89,1 point,Mon Jul 6 18:24:10 2015 UTC,"not_nested would contain the first three items in a list, so [1, 2, 3] then the (nested_one, nested_two) would create two variables containing 4 and 5 respectively. In Python we refer to it as extended Tuple unpacking, even though it'll work with any sequence (or generator, but those can be dangerous to unpack for obvious reasons).  What's nice is that this can be nested arbitrarily deep and have wildcard unpacking (the *) at each nested unpacking."
PHP,3c7e4p,Disgruntled__Goat,1 point,Tue Jul 7 02:22:16 2015 UTC,"OK I see. That's not in the above proposal, but I suppose it could potentially be added with some syntax like  list(...$not_nested, [$nested_one, nested_two]) = [1, 2, 3, [4, 5]]   Seems to me like the use cases are pretty limited though."
PHP,3c7e4p,scottchiefbaker,-2,Tue Jul 7 20:47:44 2015 UTC,This syntax seems really wrong to me. When I see ... in an array I think range() not merge. I'd rather see the + operator overloaded to implement this functionality.
PHP,3c7e4p,ThePsion5,1 point,Mon Jul 6 03:35:24 2015 UTC,"The + and += operators already works with arrays, it's not the same as array_merge(), it performs the equivalent of a union instead."
PHP,3c7e4p,scottchiefbaker,1 point,Mon Jul 6 14:15:32 2015 UTC,"Are you sure?  print_r([1,2,3] + [3,4,5]);   Outputs [1,2,3]"
PHP,3c7e4p,pitiless,4,Mon Jul 6 16:00:05 2015 UTC,"The + operator merges based on keys, only adding the values from the right value if it's key is not present in the left value."
PHP,3c7asd,gram3000,2,Sun Jul 5 15:33:02 2015 UTC,This is pretty neat! I'll still prefer using things like Jekyll.
PHP,3c7asd,CallMeMayo,1 point,Sun Jul 5 16:53:26 2015 UTC,Really great stuff!
PHP,3c7asd,Xanza,1 point,Sun Jul 5 16:02:02 2015 UTC,"This is pretty simple, I was just looking for something like this :D amazing work"
PHP,3c7asd,rafamds,1 point,Sun Jul 5 18:08:44 2015 UTC,"This is a good idea. It will be useful to some people for sure. I think the copy on your blog post could be phrased differently.  Of course, you could use a free app such as Medium or possibly Facebook, but you are just throwing your content into a walled garden.           Making gistlogs posts from gists is most certainly throwing your content into another walled garden. Adding content to someone else's website isn't always a bad idea. Using facebook or medium are great tools to be utilized for certain things, which are different than what gistlogs should be used for. I'm not saying the tool that was developed isn't useful because it most certainly will be, but that I think the use case you had in your head is different than what people will end up using the site for."
PHP,3c5tbx,howtomakeaturn,4,Sun Jul 5 02:26:46 2015 UTC,"This is akin to the repository pattern in a couple of respects, if you haven't familiarized yourself with that, go check it out.   As for this ARTI approach, you're still referencing your model through the controller... Your model then hands off execution to one of your service classes. This should be flipped. Your data model should be the most decoupled element of your Web app, preforming only specific tasks and then returning to their caller.   Your model should not go out and start playing around with whatever service classes, ever. In doing so you have cemented yourself into a very rigid, coupled implementation."
PHP,3c5tbx,Cryp71c,2,Sun Jul 5 02:47:00 2015 UTC,"Agree completely. Perhaps an example would be useful:  class FooController {     public function __construct(PaymentMaker $pay, ShipmentMaker $ship) { ... }      public function postPay()     {         ...         $this->pay->complete($order);     }      public function postShip()     {         ...         $this->ship->send($order);     } }   At this point, the controller should probably be split into separate controllers for payments and shipments.  As a general note, I find that any time you create a class with new, it points to a dependency inversion problem because you have created an object that cannot be (easily) mocked and therefore will be difficult to test."
PHP,3c5tbx,Shadowhand,3,Sun Jul 5 03:48:02 2015 UTC,"Am I missing something here? Your Order model is still fat, you still have the doSomething and doThat methods. And I don't see how the controller code is simpler, it's exactly the same."
PHP,3c5tbx,Disgruntled__Goat,1 point,Sun Jul 5 13:50:10 2015 UTC,Hi guys! I'm trying a new way to deal with business logic code in fat models in this article. I would really appreciate for any feedback. Thanks!
PHP,3c5tbx,webboy89860,1 point,Sun Jul 5 02:28:42 2015 UTC,"yeah,really useful and sample!! But it always annoyed me that i should write business logic code inside controller or model."
PHP,3c5tbx,Rygu,1 point,Sun Jul 5 03:57:58 2015 UTC,Ditto: https://www.reddit.com/r/PHP/comments/3c5tbx/active_record_model_as_a_thin_interface/csss7hw
PHP,3c5o4u,ICJ,2,Sun Jul 5 01:21:53 2015 UTC,"// Alert Container Used By Controller to Set UI Alerts protected $alerts = [     'errors'    => [],     'info'      => [],     'success'   => [],     'warning'   => [] ];   That's UI concern in a service. Services shouldn't have UI concerns, like displaying ""success"" messages. Not returning errors = success for a service. Level ""warning""... maybe. But ""info"" and ""success"", I don't think so.  // Define and Sanitize Post Data $input = $this->input->get(['username', 'password']);   There's no way you're ""sanitizing"" anything in there. You're just reading input.  Your question about methods is too vague. Define your problem more clearly."
PHP,3c5o4u,ThePsion5,1 point,Sun Jul 5 10:12:49 2015 UTC,"The services do not output any of the alerts to the UI. During service execution multiple ""alerts"" may come up, i could throw a custom exception like i have seen in a variety of places but the alerts are there for the user end so throwing and catching an exception within the controller over complicates things. That alerts array acts as a container to hold all potential alerts that can come up, the controller will retrieve the alerts if they need to be set otherwise they are not used. Some example alerts would be username to short, invalid email etc.  It is just the naming that i use that can be misleading. All input that is retrieved whether it be POST, SESSION, SERVER, GET, COOKIE is all retrieved/filtered through my input class using the filter_var function. POST is the default method of retrieval if i am looking for something else the next param to that method would define that.   I am asking about the necessity of the UserService class or examples/changes that i should make to my services altogether."
PHP,3c5o4u,ThePsion5,2,Sun Jul 5 11:23:31 2015 UTC,"It's not the error ""alerts"" I'm pointing at, but ""warning"", and with both hands at ""info"" and ""success"".  Services shouldn't be handling UI concerns. Returning errors if the action can't go through is a service concern. But the rest isn't. If you go back to your previous thread, you'll notice the poster wasn't suggesting that success messages come from the service, only error messages.  Also if you just collect errors in a service-wide array you risk picking errors in the wrong context (something else generated errors, you pick them up as if you did), or ignoring the fact the action failed (like an exception forces you to acknowledge).  It's not a big deal, but generally do try to have patterns in your code that encourage service users to do the right thing.   I am asking about the necessity of the UserService class or examples/changes that i should make to my services altogether.   I have no idea what this class does as written in your example. It just holds a directory name, it's like reinventing classes.  Can't you have a class with methods, instead of pointing to a directory holding methods as classes?  I mean either you want one action per file (class = 1 action), which is fine. Or you want many actions per file (class = many methods, each one action).   But you're trying to have it both ways by doing filename resolution magic. Not sure it's warranted."
PHP,3c4hfe,coderstephen,8,Sat Jul 4 18:18:26 2015 UTC,"Second method.  You don't want to couple logic for specific classes into other classes. It's more flexible if you define the ability to have events for all types, even if only one type uses the event handler.  It's ""messier"" in this small example, but it scales and expands much better. Ask yourself what happens in the first example when you need StreamSource (or some other source type) to do more when it gets attached? More logic buried into a class that shouldn't have it."
PHP,3c4hfe,movzx,1 point,Sat Jul 4 20:50:49 2015 UTC,"So just throw an exception then like in the second method? That's the part I still don't really like, since I'm still checking for specific interfaces using instanceof, just like the first example it. It's a strange, two-way connection between objects and is tough to design well."
PHP,3c4hfe,movzx,1 point,Sat Jul 4 21:01:41 2015 UTC,"Well, strictly speaking, is that exception something you need to handle? As it stands right now you're throwing a generic exception. If you didn't have that check there you would get a BadMethodCallException exception from PHP core.  Should StreamSource care, insofar as acting upon it, if it gets the wrong type of event loop passed to it?  If this were me, given this example, I'd be wrapping $source->attach($this); with a try{} catch(){} to handle logging or whatever and if StreamSource can only work with StreamableEventLoop then I would be changing the accepted argument type to StreamableEventLoop.  Without seeing the real implementation it is hard to give specifics on what might be the best option. You're right that an exception needs to be thrown in your example. It's just a matter of what makes the most sense. What level do you need to handle it, or are there built in exceptions that handle it already?"
PHP,3c4hfe,movzx,1 point,Sat Jul 4 21:19:31 2015 UTC,"Those are some good thoughts. I'm mulling them over right now.  I would like StreamSource::attach() to type hint for StreamableEventLoop, but that breaks the Source contract, since anything that implements Source must accept any EventLoop (even though I don't really want it to). :/"
PHP,3c4hfe,natowelch,2,Sat Jul 4 21:25:19 2015 UTC,"If the big concern is using instanceof, what about using is_callable in your StreamSource attach handler? It approaches that logic from a different direction.  I personally don't know of a better way than the second one to do what I understand you're trying to accomplish. Sometimes the best way still feels gross (and that's why new programming languages and frameworks get invented)."
PHP,3c4hfe,movzx,2,Sat Jul 4 21:34:18 2015 UTC,"How about this:  class StreamSource implements Source {     public function attach(EventLoop $loop) {        return $this->attachStreamable( $loop ) ;     }     public function attachStreamable(StreamableEventLoop $loop) {         $loop->handleStream($this->stream);     } }   attach() satisfies your interface contract, but then just passes the call on to attachStreamable(), which has the stricter requirements. You still get an exception if the passed event loop doesn't meet the requirements, without having to throw it yourself.   It achieves the same effect, with the improvement that the API now expresses its dependency on StreamableEventLoop in a function signature, rather than buried in the code."
PHP,3c4hfe,AnsonKindred,1 point,Sun Jul 5 00:21:42 2015 UTC,"It's definitely an alternative solution, but I don't think it meets OP's requirements. I think he wants a singular attach method because of an API he is working inside of, integrating with, or architecting. I've done stuff like that in the past, but sometimes you really do want that generic attach method instead of having to define a new method for each type you're attaching.  edit: Nevermind, OP mentioned below this sort of solution (bit different form) is fine."
PHP,3c4hfe,movzx,1 point,Sun Jul 5 22:57:57 2015 UTC,"I think you may be right, but the perfectionist in me (ugh, sucks) wants to explore just a few more possibilities before I go write the interfaces in stone.  And yeah, I think Go interfaces solve this problem nicely if memory serves correctly. ;)"
PHP,3c4hfe,ThaddeusPumpernikel,4,Sat Jul 4 21:37:12 2015 UTC,"Your second example is basically the Visitor pattern, but when you have Visitor you typically no longer have to do instanceof checks, yet you do.  How come you need to account for all four of these cases:   Loop handles stream, source is stream. Loop doesn't handle stream, source is not stream. Loop handles stream, source is not stream. Loop doesn't handle stream, source is stream.   Are all four of those reasonable possibilities and why? You need to explain more about your architecture for us to figure it out, but I bet all this can be much simpler.  Until you explain more, I'll just mention option 3:  interface EventLoop {     public function attachStreamSource(StreamSource $source);     public function attachSomeotherkindofSource(SomeotherkindofSource $source);     public function detachSource(Source $source);     public function run(); }   Now you have to use the right method to attach the right source. No instanceof checks, no exceptions."
PHP,3c3w8s,Cryp71c,8,Sat Jul 4 15:00:11 2015 UTC,"Serious comment, make is a perfectly good task runner and will likely fit all your needs."
PHP,3c3w8s,sirsavant,2,Sat Jul 4 21:32:17 2015 UTC,"I can agree with this suggestion as well. Make is simple, fast, and battle-tested. Might have some extra work to do with some tasks that don't have scripts/binaries already though."
PHP,3c3w8s,coderstephen,-7,Sat Jul 4 21:58:55 2015 UTC,"... Someone made a library named the same as the alias for gcc, or are you high?"
PHP,3c3w8s,DukeBerith,2,Sat Jul 4 21:56:03 2015 UTC,pretty sure they're just implying you use make and customise the makefile
PHP,3c3w8s,sirsavant,2,Sun Jul 5 03:24:51 2015 UTC,"Yes, someone made a library named the same as the alias for gcc. They must be hella high.  make is a generic tool that can be used to control the generation of files and execution of binaries. Most - if not all - task runners have their roots in make, and may just add ""extra"" features on top."
PHP,3c3w8s,ChiperSoft,4,Mon Jul 6 06:30:00 2015 UTC,"I've never heard of Robo, but I like gulp a lot. Gives you a lot more flexibility than grunt, and is significantly faster."
PHP,3c3w8s,dmunro,1 point,Sat Jul 4 15:51:21 2015 UTC,"Robo.li I've not used it before, but I saved it a while ago. Seemed comparable to gulp, but I didn't know."
PHP,3c3w8s,coderstephen,3,Sat Jul 4 16:23:28 2015 UTC,"I implemented robo at work, integrating with with assetic to compile our front end assets (including a file watcher). Good docs, straightforward idea/implementation. I've used grunt before too, but not gulp. I'd probably use robo going forward just to keep as much in php as possible since it's been a few months now with no major issues. Any specific questions I can help with?"
PHP,3c3w8s,suphper,2,Sat Jul 4 16:59:15 2015 UTC,"+1 for Robo. It's exploded in popularity somehow, so I imagine support and stability will only improve. Plus a PHP development stack can be easier to manage the less other languages needed."
PHP,3c3w8s,dmunro,1 point,Sat Jul 4 21:57:11 2015 UTC,Any chance you could make a post of some sort detailing your setup? Really interested.
PHP,3c3w8s,withremote,1 point,Sat Jul 4 23:37:18 2015 UTC,"That's a good idea, however, I'm lazy so I'll let you know if that happens."
PHP,3c3w8s,withremote,2,Sun Jul 5 15:17:28 2015 UTC,I use Grunt for front end stuff and Phing for running tests and deployment.
PHP,3c3w8s,cronofdoom,1 point,Sat Jul 4 15:17:26 2015 UTC,"Have you ever used the php library... I think its called deployer for deployment? For phing, it doubles as a task runner and a deployment tool? Does it do deployment via ssh commands?"
PHP,3c3w8s,SeerUD,1 point,Sat Jul 4 15:21:38 2015 UTC,"Phing will double as packaging and deployment. I like it because it's easy to white list what files I want to deploy to production. I have a deployment bash script that does a composer update, bower update, grunt build tasks, and then Phing tasks. Deployment over Ssh rsync."
PHP,3c3w8s,cronofdoom,-1,Sat Jul 4 21:42:10 2015 UTC,+1 for Grunt
PHP,3c3w8s,SeerUD,12,Sat Jul 4 15:46:21 2015 UTC,Have you tried Gulp? It has huge benefits over Grunt.
PHP,3c3w8s,thatgibbyguy,1 point,Sat Jul 4 18:07:40 2015 UTC,I have not.
PHP,3c3w8s,SeerUD,2,Sat Jul 4 18:52:25 2015 UTC,See my reply to the other guy who commented on my first comment.
PHP,3c3w8s,thatgibbyguy,1 point,Sat Jul 4 19:21:53 2015 UTC,Like what?
PHP,3c3w8s,stefanotorresi,5,Sat Jul 4 19:00:51 2015 UTC,"Gulp is a streaming build system, comparing that to Grunt the difference is that with Gulp you don't have to write to disk every time you get some kind of output, you 'pipe' things between plugins, and then when you've done, you output a result. This means tasks can complete significantly faster in Gulp where they may have been held down by IO in Grunt. Of course, if a task would take a long time, then this benefit becomes less important, but for an average front-end build, we are talking about shaving some considerable time off here. Gulp tasks are written in plain Node JS, meaning you can do what you like in the tasks really. For Grunt, you'd have to write a plugin of your own to accomplish more complex tasks if necessary.  Gulp config files that do the same thing as Grunt config files are generally smaller. Gulp tasks can be used outside of Gulp in regular Node JS streaming code quite easily.   I wouldn't say that Grunt is obsolete, but, on a day to day basis, Gulp has saved me so much time, has been much faster, easier to configure, and more flexible. To me at least, it becomes apparent how much better Gulp is when I try to think of any advantages Grunt has over Gulp. It used to be true that there was a larger community behind Grunt, but now I'm not sure, Gulp is the only one I can recommend, and the only one I see many other people recommend. I feel like if people haven't had the opportunity to try Gulp instead of Grunt at some point, then they really should."
PHP,3c3w8s,sagikazarmark,0,Sat Jul 4 19:21:31 2015 UTC,"Yeah I've certainly noticed the speed difference between gulp and grunt, but honestly moving to meteor has made both mostly obsolete to me. But since this is /r/php we'll move on :)  For my LAMP projects, grunt has always seemed to work better for really just one reason - deploying dbs. I never did, and have not, found a way to deploy mysql dbs in gulp. Compared to grunt where I can watch my git head and see if something was moved to master and fire off grunt deployments.  Everything else you're saying is spot on though."
PHP,3c3w8s,aequasi08,1 point,Sat Jul 4 19:48:31 2015 UTC,"To be fair, Gulp was designed to be used mainly as a build system.  You can run generic tasks with plugins like gulp-shell, but application deployment is definitely not what it is meant for.  Same goes for Grunt, actually, but more so with Gulp because of the data stream focus."
PHP,3c3z31,suphper,1 point,Sat Jul 4 15:28:23 2015 UTC,hardwares softwares middlewares
PHP,3c2vs5,dave1010,12,Sat Jul 4 06:25:03 2015 UTC,"I'm looking forward to Safespaces, the extension to Namespaces.  Edit: I'm talking eg about this http://www.nytimes.com/2015/03/22/opinion/sunday/judith-shulevitz-hiding-from-scary-ideas.html?_r=0"
PHP,3c2vs5,Revisor007,4,Sat Jul 4 09:34:47 2015 UTC,Please elaborate
PHP,3c2vs5,zhubrixxx,6,Sat Jul 4 13:29:08 2015 UTC,"The parent comment is referencing a topical issue, safe spaces, and conflating it with the rhyming PHP/programming term ""namespaces"". This is in response to a humorous PSR mentioning hugging and resonates with some people because safe spaces is a hot button issue on reddit after posts such as:   Create a safe space to encourage participation. Promote ideas, protect people"
PHP,3c2vs5,TransFattyAcid,2,Sat Jul 4 15:58:59 2015 UTC,"It  may also throw a non-fatal MicroAgression warning, or a fatal Rape error."
PHP,3c2vs5,lurchpop,7,Mon Jul 6 02:12:38 2015 UTC,I don't understand. Anyone want to help me understand?
PHP,3c2vs5,buzzTroll,2,Sat Jul 4 15:06:23 2015 UTC,Same here. I'm lost.
PHP,3c2vs5,dont_ban_me_please,3,Sat Jul 4 16:01:08 2015 UTC,"Reading spec may have made my IQ drop. It's the dumbest thing I've seen all year. I assume it's a really, really poor joke."
PHP,3c2vs5,monk_e_boy,2,Sat Jul 4 16:19:39 2015 UTC,Have a look at the date that the PSR proposal was made.
PHP,3c2vs5,TheBigB86,2,Sat Jul 4 18:59:49 2015 UTC,So....ehm...it's a joke right? I shouldn't have wasted 2 hours trying to understand it? I mean I didn't but...
PHP,3c2vs5,PrintfReddit,-2,Sun Jul 5 08:22:08 2015 UTC,"The FIG have lots of PSRs, including things like HTTP messaging and logging, to make implementations interoperable. This is an implementation of PSR-8.  Check out the tests directory to see how you can use it."
PHP,3c2vs5,marimba4312,2,Sat Jul 4 16:38:35 2015 UTC,I laughed.
PHP,3c2vs5,NeoArc,1 point,Sat Jul 4 18:08:18 2015 UTC,Huggable: 0 results found in packagist
PHP,3c0frc,coderstephen,1 point,Fri Jul 3 17:13:11 2015 UTC,"The title is misleading, if you didn't have atleast a 'hello world' example you should have made that clear in the title."
PHP,3c0frc,iCupid,1 point,Sun Jul 5 20:50:38 2015 UTC,"Yeah, an example would've been nice."
PHP,3c1la5,theodorejb,5,Fri Jul 3 22:36:43 2015 UTC,"Smart. Glad this is being proposed. I'd love to see struct added to this list, so we could potentially add a value object structure of some sort down the road. If anyone's curious, the idea's already being explored as a side-project (not mine) of sorts:   https://gist.github.com/auroraeosrose/2036d1d675a4bd254450 https://gist.github.com/Antnee/237334e1eb937892ad7a"
PHP,3c1la5,Rican7,1 point,Sat Jul 4 07:28:37 2015 UTC,"Well my question is, is enum an object, or an array or resource-like complex structure? Id love to have enum in PHP, but only if it is object oriented."
PHP,3c1la5,Hall_of_Famer,1 point,Sun Jul 5 06:41:42 2015 UTC,"The Enum RFC explains implementation details further. All this RFC does is make ""enum"" a reserved word in certain contexts."
PHP,3c1la5,akeniscool,1 point,Sun Jul 5 23:09:52 2015 UTC,"Where: As the last part of a class, interface or trait name.   What does this mean? You can't have a class named ""myVoid""?"
PHP,3c1la5,Disgruntled__Goat,1 point,Sun Jul 5 14:59:37 2015 UTC,I added a note clarifying this with some examples :)
PHP,3c1la5,nikic,1 point,Mon Jul 6 09:57:44 2015 UTC,"OK must be a terminology confusion on my part. To me, Void is a class name but Foo\Bar\Void is not a class name, it's a namespace.  Similarly for enum, I'm assuming by ""any segment of class names"" it means Foo\Enum\Bar is not allowed. Again I'd call the ""Enum"" part a namespace."
PHP,3c0htw,peterkokot,2,Fri Jul 3 17:28:13 2015 UTC,Is this updated to the latest Symfony or is this the exact version that was on Fabien's blog?
PHP,3c0htw,Anahkiasen,2,Sat Jul 4 13:27:21 2015 UTC,"By the look of the tutorial in Symfony's docs, it does seem to be updated for various versions of Symfony, as it has a pull down version selector.  http://symfony.com/doc/current/create_framework/index.html"
PHP,3c0htw,blocsonic,1 point,Sat Jul 4 14:55:58 2015 UTC,"Yes, this has been updated and reviewed by Symfony docs team for the latest Symfony 2.7"
PHP,3c0htw,Anahkiasen,2,Sun Jul 5 11:17:08 2015 UTC,"Ah cool, will give it a new read then"
PHP,3c0htw,Disgruntled__Goat,2,Sun Jul 5 13:08:43 2015 UTC,"What's wrong with it? (Genuine question, I've never used Symfony.)"
PHP,3bz1tn,suphper,7,Fri Jul 3 08:43:42 2015 UTC,I would hope that's a joke and it most likely is but for anyone wondering it means T_COMPUTER_POTATO.
PHP,3bz1tn,paranoidpuppet,2,Fri Jul 3 14:05:55 2015 UTC,T_FUCK_IT_IM_OUT
PHP,3bz1tn,BOSS_OF_THE_INTERNET,8,Fri Jul 3 15:48:38 2015 UTC,What I read...   T_HAKUNA_MATATA
PHP,3bz1tn,TheBigB86,4,Sat Jul 4 01:45:57 2015 UTC,T_MAKHSHEV_TAPUAKHADAMA   A new one of these? PHP has an Israeli heritage thanks to Zend. T_PAAMAYIM_NEKUDOTAYIM has gotten a bit of drama about it over the years.
PHP,3bz1tn,ivosaurus,3,Fri Jul 3 16:17:27 2015 UTC,I also found https://github.com/ovr/phpsa today. I havn't checked it yet but it looks very promising.
PHP,3bz1tn,mycivacc,2,Fri Jul 3 15:39:10 2015 UTC,"Is this just a code linter? What is a ""static analyzer""?"
PHP,3bz1tn,scottchiefbaker,4,Fri Jul 3 11:32:18 2015 UTC,"A linter checks that the syntax is valid - a static analyzer works with what the syntax describes, and tries to decide if the code actually makes sense (referring to valid classes, etc.). From the github README:   Checks for calls and instantiations of undeclared functions, methods, closures and classes Checks types of all arguments and return values to/from functions, closures and methods Supports phpdoc comments including union and void/null types Undefined variable tracking Supports namespaces, traits and variadics Basic tainted data detection"
PHP,3c2d4c,erp01,2,Sat Jul 4 02:59:06 2015 UTC,"Actually, I'm in the process of developing an open source PHP-based ERP system right now.  I was planning on releasing the code and a demo site of a beta version sometime next week.  It's intended for small businesses right now though.  I can send you a PM when it's up, and I was thinking about posting in /r/PHP to ask for feedback later on."
PHP,3c2d4c,jediarchives11,3,Sun Jul 5 22:42:01 2015 UTC,"I think ERP is one of those things where people either buy something off the shelf, or go totally bespoke and build something that's very specific to their organisation / the way they do things, so you don't get people releasing ERP projects as a thing in the same way you do with content management systems or ecommerce stores (where lots of people want something very similar).  When you're using ""off the shelf"" for that kind of software that basically underlies the processes of your entire organisation, you're going to want commercial backing on it (and it may even be demanded by higher management, so you don't get much choice).  Maintaining open source projects that do something fairly specific is more than enough work for most people. When you start getting into platforms like ERP where you're essentially piecing together multiple systems and integrating them to form work flows in a larger system, the complexity multiplies."
PHP,3c2d4c,AllenJB83,3,Sat Jul 4 07:40:12 2015 UTC,Friendly tip: whenever you use an uncommon acronym like ERP you should explain what it is.
PHP,3c2d4c,Disgruntled__Goat,1 point,Sun Jul 5 15:05:41 2015 UTC,It's a very common acronym - 122M results and Google immediately tells you it resolves to https://en.wikipedia.org/wiki/Enterprise_resource_planning.
PHP,3c2d4c,ceejayoz,1 point,Tue Jul 7 19:02:02 2015 UTC,"Enterprise resource planning:       Enterprise resource planning (ERP) is business management software—typically a suite of integrated applications—that a company can use to collect, store, manage and interpret data from many business activities, including:   Product planning, cost Manufacturing or service delivery Marketing and sales Inventory management Shipping and payment   ERP provides an integrated view of core business processes, often in real-time, using common databases maintained by a database management system. ERP systems track business resources—cash, raw materials, production capacity—and the status of business commitments: orders, purchase orders, and payroll. The applications that make up the system share data across the various departments (manufacturing, purchasing, sales, accounting, etc.) that provide the data.  ERP facilitates information flow between all business functions, and manages connections to outside stakeholders.   Enterprise system software is a multi-billion dollar industry that produces components that support a variety of business functions. IT investments have become the largest category of capital expenditure in United States-based businesses over the past decade. Though early ERP systems focused on large enterprises, smaller enterprises increasingly use ERP systems.   The ERP system is considered a vital organizational tool because it integrates varied organizational systems and facilitates error-free transactions and production. However, ERP system development is different from traditional systems development.   ERP systems run on a variety of computer hardware and network configurations, typically using a database as an information repository.     Image i - Picture showing some typical ERP modules     Relevant: CGram Software | Maconomy | IntarS | Adempiere   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
PHP,3c2d4c,autowikibot,0,Tue Jul 7 19:02:58 2015 UTC,"Google results are meaningless, there are plenty of things ERP can stand for. There are only 6M results for ""enterprise resource planning""."
PHP,3c2d4c,Disgruntled__Goat,1 point,Tue Jul 7 20:53:39 2015 UTC,"There are only 6M results for ""enterprise resource planning"".   That's because everyone just says ERP. Seriously. You won't find anything on https://go.oracle.com/LP=3012 with the full term, for example, and it's like page 9 in the Google results before you find your first non-""enterprise resource planning"" match."
PHP,3c2d4c,ceejayoz,1 point,Tue Jul 7 21:10:50 2015 UTC,Brightpearl is written in PHP. It's not very complex as far as ERPs go though.
PHP,3c2d4c,ZvG_Bonjwa,1 point,Sat Jul 4 04:38:59 2015 UTC,No big PHP organizations got enticed by the ERP market (I guess few hundred billion market)   What? Even optimistic projections place the entire ERP market at 41 billion by 2020 with an aggressive 7.2% CAGR.
PHP,3c2d4c,okiipo,0,Sat Jul 4 06:29:23 2015 UTC,"I was laughing while reading that article. Never seen such a useless stuff.  If you just consider the smallest part of the ERP projects (i.e. license fee in a year) that would cross 41 billion by 2020 (may be that's what the article is about). Only Oracle (EBS, Pepolesoft, Fusion  ), SAP 's earning from license fee is around 8-10 billion. Then you have new comers like workday with 500m/yr only providing ERP service.  Anyway. It's kind of difficult to find the total ERP market in current business scenarios. All big manufacturing companies have their own specialized team on ERP. Then you have IT consulting companies (Most of which doesnt publish revenue product wise) and Finally so many different niche ERP product makers."
PHP,3c2d4c,erp-expert,1 point,Sat Jul 4 13:58:42 2015 UTC,"How many SaaS ERPs are there? I'm sure it's a lot, but most of them are focused in specific verticals/industries. Think, for example, Harvest for companies that bill by the hour (eg law firms).   Since these SaaS are closed source, it's not transparent to see what lang are they coded with, but a fair share of them should be PHP.  Now, why SaaS? Well, if it was a software package you could download and had to activate using a license, there would be Nulled versions in a matter of hours."
PHP,3c2d4c,amenadiel,1 point,Sat Jul 4 14:39:25 2015 UTC,"Keywords here might be propriarity,  code protection and outsourceing.  Source obfuscation is expensive while mostly useless on PHP.  And why not putting it into the  SaaS cloud so you can blame other companies that stuff isn't working instead o your inhouse it departement :P"
PHP,3bzcax,harikt,3,Fri Jul 3 11:04:08 2015 UTC,"Cool, but what's new? Would be good to supply a changelog or something. Unless I'm missing it..."
PHP,3bzcax,reinink,1 point,Fri Jul 3 11:26:07 2015 UTC,There's a non-standard CHANGES.md stub. Nothing newsworthy. Probably didn't have a release process till now. And the commit history seems unsuitable to refurbish.
PHP,3bzcax,milki_,2,Fri Jul 3 13:53:25 2015 UTC,"There's a release process, but as this is an alpha of a brand-new 2.0 release that breaks all BC from 1.0, there's no changes to log."
PHP,3bzcax,pmjones,1 point,Fri Jul 3 14:05:25 2015 UTC,"One good thing can be improved, by not removing the old changes. So all the changes will be there irrespective of the version user is going to use. Eg : Consider 2.0.0, 2.1.0 and then 2.2.0 are released. And if the user is upgrading from 2.0.0 to 2.2.0 there is only one changelog documentation as of now. So we should not remove the old ones."
PHP,3bzcax,pmjones,1 point,Fri Jul 3 18:36:34 2015 UTC,"I was wondering can't we use normal methods for filters and validators instead of passing those verbose constants and untyped string names (and we can, but I'm just nudge nudge wink wink-ing you in that direction)."
PHP,3bzcax,pmjones,1 point,Sat Jul 4 21:42:04 2015 UTC,"normal methods ... [instead of] untyped string names    I'd be interested to see a ""pluggable"" system that works like that -- by which I mean, one in which users can add their own rules without extending a class."
PHP,3bzcax,pmjones,1 point,Sun Jul 5 02:47:47 2015 UTC,"I could just point you to a library that does it, but it seems like a wasted opportunity to see some different solution emerge. I'll say - it's possible & the solution is simple - no heavy reflection magic or codegen. How'd you do it?  EDIT One more clue: composition."
PHP,3bzcax,milki_,1 point,Sun Jul 5 09:35:07 2015 UTC,PRs welcome.
PHP,3bzcax,enygmadae,1 point,Sun Jul 5 13:20:10 2015 UTC,That would require a bigger discussion than a PR. Blah blah blah blah. EDIT Never mind.
PHP,3bv9lb,asmblah,54,Thu Jul 2 12:57:43 2015 UTC,"I can't wait to see the first application using Node.js for the server and php uniter-jquery for client.   Next is a db in pure css, and sql for stylesheets (I wont be surprised if that one already exists)."
PHP,3bv9lb,roselan,30,Thu Jul 2 16:20:00 2015 UTC,SQL for stylesheets   Sounds a lot like my last job...
PHP,3bv9lb,XyploatKyrt,20,Thu Jul 2 17:09:10 2015 UTC,"and sql for stylesheets   INSERT INTO      div  SET     color = '#f00',      font-family = 'sans-serif',      margin-top = '1px'  WHERE      id = 'header';"
PHP,3bv9lb,cryonine,8,Fri Jul 3 01:06:53 2015 UTC,That was strangely satisfying.  Ceci n'est pas une pipe.
PHP,3bv9lb,i20d,1 point,Fri Jul 3 01:22:13 2015 UTC,I like it. But can we not
PHP,3bv9lb,mrstejdm,1 point,Fri Jul 3 07:59:01 2015 UTC,"As a backend dev, this feels like it makes so much more sense than CSS.. I want to write CSS like this."
PHP,3bv9lb,__constructor,6,Fri Jul 3 02:10:57 2015 UTC,"If you were to write CSS like this you'd quickly learn why it would be absolutely horrible, haha!"
PHP,3bv9lb,cryonine,2,Fri Jul 3 02:30:37 2015 UTC,Start working on DoctrineCSS than
PHP,3bv9lb,adrianmiu,13,Fri Jul 3 07:04:19 2015 UTC,"Or in the cloud! Don't forget the cloud! Excel 365 cells containers with vb macro glue is the future man!  Ok, I think it's time I go back to finish my prolog 3d game engine."
PHP,3bv9lb,roselan,13,Thu Jul 2 16:29:01 2015 UTC,Finally I won't have to write my websites in assembly!
PHP,3bv9lb,TheCoD4NiNJA,2,Thu Jul 2 16:39:27 2015 UTC,Meh. I want full stack VHDL. I'd settle for Verilog.
PHP,3bv9lb,arbuge00,2,Thu Jul 2 18:00:01 2015 UTC,sql for stylesheets    I never knew I wanted to use this so badly... hmmmm
PHP,3bv9lb,512austin,19,Thu Jul 2 17:03:26 2015 UTC,I must scream but my mouth is implemented in cross-compiled PHP that I can't debug.
PHP,3bv9lb,TheSpoom,6,Fri Jul 3 02:31:18 2015 UTC,"Take that, Node!"
PHP,3bv9lb,amcsi,6,Thu Jul 2 20:52:43 2015 UTC,"This doesn't seem to cover the why. I don't need to have the entire stack in one language. Besides, I JUST started to tolerate coffeescript."
PHP,3bv9lb,EquationTAKEN,2,Thu Jul 2 21:26:46 2015 UTC,This is how many people hate writing JS so much they'd rather write their own transpiler: https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS
PHP,3bv9lb,twenty7forty2,2,Thu Jul 2 21:44:24 2015 UTC,great work! :D
PHP,3bv9lb,jedi58,2,Fri Jul 3 07:48:19 2015 UTC,"Not sure how i feel about this, guess ill have to look at it a bit more. Super interesting nonetheless - petty neat demo too. Is this a ""just because I can"" type thing?"
PHP,3bv9lb,allehh,2,Fri Jul 3 11:35:35 2015 UTC,"Kind of, the underlying idea is to bring the two worlds together. You might pull in some PHP dependencies with Composer, eg. a service container library, and then some JS dependencies with NPM and wire it all up in either PHP or JS-land. Another example could be packaging up an (environment-agnostic) PHP library and publishing it as an NPM module that could be used without ever needing to know that it's actually written in PHP. And thanks!"
PHP,3bv9lb,dohpaz42,2,Fri Jul 3 12:04:58 2015 UTC,"I'm curious what makes this ""full stack""? I'm a bit old [school], so I might be thinking in old [school] ways, but a ""full stack"" used to mean everything from the server architecture all the way up to the web browser. It seems this is more middleware than full stack. But I'd seriously be interested to know if I need to update my terminology.   My meta question aside, regardless of what it's called, I'm sure you put a lot of effort into it. Good work! I would have never considered doing that, and stuff like this is what fuels innovation. So keep it up!"
PHP,3bv9lb,dohpaz42,1 point,Fri Jul 3 22:14:33 2015 UTC,"Thanks. Yeah, I've tried a few different ways to name it - it's probably not the textbook definition of 'full stack', but this seems to be the best way I've found of communicating what it's actually doing, in that PHP is used at both ends (client and server) and that it's not just a fancy RPC wrapper. Thanks for the feedback!"
PHP,3bv9lb,Pardalean,2,Fri Jul 3 15:02:11 2015 UTC,"I totally understand. I suck at names myself. If I had it my way, my kids would be named Thing 1 and Thing 2. ;)"
PHP,3bv9lb,webdeverper,2,Fri Jul 3 22:09:37 2015 UTC,I previously posted this in /r/javascript but thought it was relevant here too.
PHP,3bv9lb,xjake88x,16,Fri Jul 3 22:43:30 2015 UTC,"Some of the comments in your /r/javascript thread very accurately portray my opinion on full-stack javascript:   Just because you can doesn't mean you should  I don't want to live on this planet anymore.  oh man, why?  Dear god, why would you do that to yourself?  Barfs violently   Why did you post it there? It feels like trolling them."
PHP,3bv9lb,jesse_dev,2,Thu Jul 2 12:58:54 2015 UTC,"Because the idea is to work with JavaScript rather than replace it, as demonstrated by the use of jQuery in this demo."
PHP,3bv9lb,magnetik79,2,Thu Jul 2 15:52:19 2015 UTC,"Neat demo, no question, but you're not demonstrating full-stack PHP, because PHP is not just the syntax of PHP.  It's a PHP stack + PHP dialect of JavaScript demo, at which point, I'd rather be writing JS (or using a mature type layer on top of it, like TypeScript)."
PHP,3bz9nc,john_dumb_bear,2,Fri Jul 3 10:29:19 2015 UTC,"You want to create a repository/package that is a ""skeleton"" for potential users.  Instead of doing ""composer require"", you'll instruct them to do ""composer create-project"" and point them to your skeleton package.  This skeleton, once installed, will also install the new projects dependencies, which would be your ""framework"" code.  https://getcomposer.org/doc/03-cli.md#create-project  example: https://github.com/silexphp/Silex-Skeleton"
PHP,3bz9nc,ralphschindler,1 point,Fri Jul 3 17:29:10 2015 UTC,Consider using a custom installer. https://getcomposer.org/doc/articles/custom-installers.md
PHP,3bz9nc,drsii,1 point,Fri Jul 3 10:57:23 2015 UTC,"I'm not 100% certain if this is what you're trying to do, but if you're trying to have files copied from outside of vendor, I wrote a solution for this for my company's packages which is available here:  https://github.com/imarc/opus  If you look at the ""extra"" stuff in my framework's routing package, you'll get an idea of how it works:  https://github.com/dotink/inkwell-routing/blob/master/composer.json  Note that the package should require opus and ""type"": ""opus-package"" see line 6.  The README on the opus page should have some more information, but basically you can map directories in the package to copy to directories in the main project, or specific files."
PHP,3bxyxs,terrablezach,4,Fri Jul 3 02:09:51 2015 UTC,"This seems like something that should be taking advantage of the Github API (https://developer.github.com/v3/repos/deployments/).  Also, you can take advantage of using the .gitattributes file to exclude files and directories you do not want deployed on the server and deployments from tagged releases will automatically exclude the .git folder and anything else that is in the .gitattributes file."
PHP,3bxyxs,haydenk1337,2,Fri Jul 3 03:37:33 2015 UTC,TIL about export-ignore. Thank you!
PHP,3bxyxs,dohpaz42,1 point,Fri Jul 3 14:35:25 2015 UTC,"Thank you for the suggestion! I will definitely look into this, I completely overlooked the possibility of using the .gitattributesutes file and more of the GitHub API."
PHP,3bxyxs,rafamds,2,Fri Jul 3 03:46:43 2015 UTC,"If you have deploy.php in your repository, wouldn't it expose your keys and passwords?"
PHP,3bxyxs,rafamds,1 point,Fri Jul 3 10:33:54 2015 UTC,"Nope! PHP is processed server side. So when someone requests a PHP page in their browser or any other resource, they will receive the output produced from that PHP page after it has processed. You can only see the source code of a PHP page if you edit the server's local version."
PHP,3bxyxs,rafamds,2,Mon Jul 6 17:58:47 2015 UTC,"I know that, but since the code is also on the github repo... all files will be public, or am I getting this wrong?"
PHP,3bxyxs,bga9,1 point,Tue Jul 7 09:14:31 2015 UTC,"Well GitHub doesn't have private repositories for free accounts, but my boss has a corporate account to store our code privately on GitHub which is why we can use this deployment interface. BitBucket has private repositories for free accounts, I plan on changing this repository to allow authenticated use with BitBucket web service requests in the future."
PHP,3bz5pt,phpoverengineering,2,Fri Jul 3 09:36:20 2015 UTC,"You have yourself what's known as a value object.  Typically a VO would be stored in the same location as the models folder under a /vo folder, or in the services portion of your component.  Further reading."
PHP,3bz5pt,Thatonefreeman,1 point,Fri Jul 3 10:30:17 2015 UTC,Love you. thanks :)
PHP,3bz5pt,dohpaz42,1 point,Fri Jul 3 10:45:06 2015 UTC,"Typically a VO would be stored in the same location as the models folder under a /vo folder, or in the services portion of your component.   I would agree with this, if the VO is exclusive to the model. I like to use a naming convention that extends the model. For example, if I have a namespace for a model called \Foo and the model is called Bar (\Foo\Bar being the FQNS), and I needed VO - lets call one Stick - used exclusively by Bar, then I would name them \Foo\Bar\Stick.   Conversely, if my VO was to be shared between \Foo\Bar and \Foo\Baz and \Foo\Fighters, then I would try to find a logical common place to put it so it's more clear that it's shared. In my example, I would choose \Foo\Stick.   It can get more complicated if the VO is needed across multiple namespaces (ie \Foo and \Bar and \Baz), and that would take a little more thought. You might even consider creating a new namespace for those circumstances. If you use the PSR-2 nomenclature, and have a vendor namespace - \MyVendorName - then that would help.   Nb you may or may not be using namespaces, but if you equate the namespace hierarchy into a file path, then it still makes sense.   HTH"
PHP,3bz5pt,mbdjd,1 point,Fri Jul 3 15:13:27 2015 UTC,"So if my current class is my model, what is my Files class? it's not a controller and it's not a view it's only a class used to create objects, does it qualify as a helper? what is it?   It's part of your model, the M in MVC isn't referring to a model or models, it's referring to the model. It is a collection of classes that should represent all your business logic and handle persistence, some of these classes will be models but many of them won't be."
PHP,3bz5pt,amenadiel,1 point,Fri Jul 3 10:30:25 2015 UTC,"Both the Folder and File classes are models. A Folder hasMany File, even if they are just value objects.  You should have a controller method to do  $folderInstance = new Folder($path); $fileArray = $folderInstance->getFiles();   $view->render('foldertemplate', $fileArray);   Let the Folder model discover its files, instance a File model and deliver them as an array."
PHP,3bzuoe,Donateandfeelbetter,5,Fri Jul 3 14:21:53 2015 UTC,"Do you know anything about file permissions? I suggest that if these things are new to you, invest some time in reading up about file permissions before proceeding."
PHP,3bzuoe,no_not_me,1 point,Fri Jul 3 14:42:49 2015 UTC,"Check the folder permissions to make sure your user has write access. Go into the directory and run ""ls -la"" from the terminal and see what user owns it. Look up chown/chmod commands as those will probably be what you need."
PHP,3bzuoe,mattvb91,3,Fri Jul 3 14:41:24 2015 UTC,"Look up chown/chmod commands as those will probably be what you need.   Please be careful when advising users to change file and folder permissions and ownership. You are not wrong in your answer, but there are probably good reasons why they are what they are. And even if they are wrong, we don't necessarily know this, and someone less savvy may take your advice as gospel and just go around changing permissions every time they have a similar problem. :)"
PHP,3bzuoe,dohpaz42,3,Fri Jul 3 14:54:38 2015 UTC,Valid point! I tend to forget how tricky linux can be when getting started.
PHP,3bzuoe,mattvb91,2,Fri Jul 3 15:09:54 2015 UTC,"Oh no doubt. I still fondly think back to the first time I tried to install BSD and somehow managed to not install ANY utilities (such as cd or ls) and I panicked thinking I screwed up my computer. I then yelled at one of the BSD support ppl about how they ruined my computer. I will never forget the reply they gave me: ""Elvis has left the building!"" Good times."
PHP,3bzuoe,dohpaz42,1 point,Fri Jul 3 15:16:40 2015 UTC,"So uhh,  sudo chmod -R 777 ./   Is a bad idea? ;)"
PHP,3bzuoe,AcousticDan,1 point,Sat Jul 4 20:35:36 2015 UTC,Depends on the directory you're in. 😝
PHP,3bzuoe,dohpaz42,1 point,Sun Jul 5 02:07:28 2015 UTC,"So everything in the directory var/www        is off limits. I can't copy or past too. there is even a sub directory with var/www/html/   I can't write to any of it. How do I solve this.   Can you explain why it's off limits? Is that something a sysadmin did and you have no control over? Or is it merely because the owner/group is somebody other than the user you're logged in under?   There are a few possible ways to answer your question based in the situation. If it's because of a sysadmin, you will need to speak with them about installing your software so you may use it. If it's because of permissions, then you can either change them as another user suggested, or you can install the software as the user who owns /var/www.   Keep in mind that if the permissions were intentional, there probably was a good reason for that. So exercise caution before you blindly use chmod (permissions) and/or chown (ownership). I've seen developers destroy an entire server by chown'ing /usr recursively because they didn't understand the why some files were not writable - they switched between root and a normal user and some files were owned by root and not writable by normal users.   TL;DR before changing ownership/permissions, first understand why they are the way they are and only change the files/directories if you absolutely need to do so."
PHP,3btr3q,gooserider,3,Thu Jul 2 02:05:47 2015 UTC,"And 100% Magento compatibility (damn near it, since everything else besides the following feature works in my experience) is incomming in HHVM 2.8 or 2.9  :)   After lots and lots of petitioning, we finally convinced a developer to take on the missing feature which was keeping most Magento installations from working property because if you chose to use a secure method of sending e-mails, which required encryption, any feature in Magento that involed sending e-mails simply did not work, meaning you won't be sending customers any order confirmations or tracking numbers to their e-mails, customer's won't be using your contact form to contact you, and etc; because it would try to send the e-mail and error out."
PHP,3btr3q,antonbe,4,Thu Jul 2 04:47:36 2015 UTC,"I hope someone fixed magento too, because an engine breakage due to an email not going out is lulz."
PHP,3btr3q,no_not_me,1 point,Thu Jul 2 07:55:51 2015 UTC,"Minor correction: 3.8 or 3.9 (currently in the 3.8 branch, but it was a last-minute cherry-pick, so we might need to revert before release if something weird comes up)  Missing feature: stream_socket_enable_crypto(), required for STARTTLS"
PHP,3btr3q,fred_emmott,1 point,Thu Jul 2 20:11:46 2015 UTC,Thanks!
PHP,3btr3q,antonbe,-13,Thu Jul 2 20:14:50 2015 UTC,PHP7 is coming out in a few months.  Making HHVM pretty much useless.
PHP,3btr3q,btcMike,9,Thu Jul 2 09:20:32 2015 UTC,I don't get this thought process. Competitors to PHP are a good thing. HHVM is going to continue to grow and I wouldn't be surprised if it surpasses PHP7 again down the road.
PHP,3btr3q,gimmethrowaway,5,Thu Jul 2 12:18:23 2015 UTC,"Doesn't matter.  HHVM is aimed at the bigger shops.  For your developer who runs shared hosting, PHP 7 will be fine for him.  Look at the big guys, PHP 7 is coming but they won't be switching.  There are 2 reasons, 1) Hacklang and 2) I've seen developers from drupal, etsy, wikipiedia talk directly to the FB devs and in real-time sort problems out.  That is raise tickets, talk through the ticket, submit patches and fix the problem for a point release or next release.  You don't get that with PHP and this is the difference.  I've seen this with some devs who worked on PHP.  They happily fix issues, chat with the fb devs, fix the code and done.  No squabbles, no voting, no nada.  Just get it done. mentality :)"
PHP,3btr3q,no1youknowz,1 point,Thu Jul 2 13:50:39 2015 UTC,"By the way, isn't Hack still faster than even PHP 7?"
PHP,3btr3q,amcsi,8,Thu Jul 2 10:01:45 2015 UTC,"Probably but on the other hand hack isn't PHP and HHVMs PHP interpreter could, in theory, deside to not follow PHPs featureline or completely drop support for it in future. AFAIK HHVM is only 100% PHP 5.3 feature compilant (please correct me). So i'd say you either switch to HHVM and learning hack or stick to PHP with 7 in mind on the long way.  Edit: Seems HHVM has 5.6 support. Still they can drop PHP in favor of hack anytime."
PHP,3byo49,abdul0010,2,Fri Jul 3 06:03:01 2015 UTC,"Every designer needs to be using git, but that's not likely to change in the short term to fix this project. I would suggest that some planning and story boarding on his part with input from the client early in terms of interface and flow will ensure the project gets done on time and on budget.   Try and set the expectation that you should receive the final design and so you can write the code to make it function. This won't always be the case, things change, but if you can set the expectations high and then save the day later.   Someone's paying you extra to redo it over and over again, if the designer isn't receptive to more planning and story boarding you might discuss it with the client or the boss depending on how your shop is set up. Development time is expensive, better to get it done right the first time around...  Have you discussed these concerns with the designer and/or the senior devs?"
PHP,3byo49,ipa_cow,2,Fri Jul 3 06:56:39 2015 UTC,"Agreed, this sounds like bad management more than anything else. Ideally you have some sort of issue tracking system (jira, redmine, even github or something). Try to get a lead/senior dev involved on the scope/specifics before accepting/adding a task. If the scope changes, the designer has to get the change approved by said lead/senior. Any respectable lead/senior will take the proper measures."
PHP,3byo49,MolestedTurtle,1 point,Fri Jul 3 08:59:15 2015 UTC,"People are always going to want to make amends all the way through your work flow. I'm sorry, that's just a fact of life. Even when you plan everything up front it's going to happen. Tracking changes is an absolute must in most cases, but this doesn't necessarily mean revision control. Communication is key.  Have them let you know if things aren't final, so you don't invest time in things that are subject to change/awaiting sign-off."
PHP,3byo49,no_not_me,1 point,Fri Jul 3 14:47:15 2015 UTC,"100% agree. Where I work, all features tickets are in Jira and requirements and mockups in Confluence. Although for smaller features reqs and mockups are usually just in Jira."
PHP,3bxh5h,coderstephen,2,Thu Jul 2 23:28:08 2015 UTC,"I think the current Slack channel (http://phpug.slack.com) fills that chat void rather nicely, and everything else discussion-like stays here for archival purposes. Not sure we need another outlet.  P.S. Please, no Discourse. A whole lot of background with the ""app"" and enterprise-use has taught me to avoid it in absolutely every context for ever. That forum is DOA and won't be getting better. It's a hack that keeps getting hacks on top, calling them new features."
PHP,3bxh5h,suphper,1 point,Thu Jul 2 23:57:29 2015 UTC,"But not everyone is on Reddit (I don't have proof of this), and I've never thought that Reddit was meant for long-form discussions. It's more about commenting on external articles."
PHP,3bxh5h,suphper,2,Fri Jul 3 00:10:16 2015 UTC,"It's more about commenting on external articles.   I beg to differ. There's a couple of new Self.PHP posts every day. People do discuss things here, despite it mostly being a very hostile environment."
PHP,3bxh5h,suphper,1 point,Fri Jul 3 00:18:46 2015 UTC,"True, true."
PHP,3bxh5h,suphper,1 point,Fri Jul 3 00:45:52 2015 UTC,"Also, I've never heard of any such negativity about Discourse. It's open source and very well designed, I've always thought. Even places like SitePoint have switched to it for their comments system. It wouldn't have to be Discourse if everyone dislikes it."
PHP,3bxh5h,suphper,1 point,Fri Jul 3 00:13:18 2015 UTC,"SitePoint no longer uses Discourse for comments. When you have to go back to Disqus from Discourse, that should be a good indicator of how awful Discourse is. And mind you, SitePoint had the actual Discourse team do the integration and everything. They know what kind of mess they built.  It might look pretty on the surface, but spend any non-trivial amount of time with it in a high traffic context and you'll grow to resent it."
PHP,3bxh5h,beryllium9,1 point,Fri Jul 3 00:17:43 2015 UTC,"Hm, according to this pleasant conversation in the SitePoint forums, the switch back to Disqus is only temporary until they finish modifying Discourse to support inline commenting. (Though it obviously is taking a while.) They switched to Discourse, then decided they wanted inline commenting (which I don't find all that necessary), so they switched just article comments back to Disqus temporarily. Its not really Discourse's fault that SP wants it to do something that it was designed to not have.  Of course, I'm not part of the SP community, so this is an outsider's view. I'm not trying to defend Discourse either; do you have other forum software in mind we could use?"
PHP,3bxh5h,beryllium9,1 point,Fri Jul 3 00:59:17 2015 UTC,"""Inline"" means commenting on the very page of a post, something absolutely essential when something is used as a comments system. With Discourse, a user was required to go off site to make a comment, which is unacceptable. The Discourse team knew from the start that that was what was required of them, and made promises they couldn't keep."
PHP,3bxh5h,llbbl,1 point,Fri Jul 3 05:07:48 2015 UTC,"""Inline"" means commenting on the very page of a post, [...]   I knew what it meant. ;)   [...] something absolutely essential when something is used as a comments system.   Which Discourse is meant to be more of a forum system. I do admit the inline ""comment"" views is an unusual idea, but Discourse isn't required to implement inline typing if they don't want to.  A little OT at this point."
PHP,3bw610,Faryshta,2,Thu Jul 2 17:24:08 2015 UTC,My friend (not a redditor) and I did it as our first widget for a project. I would appreciate some help about how to build the documentation from php doc and how to make the unit testing
PHP,3bw610,HattoriHanzo,1 point,Thu Jul 2 17:25:02 2015 UTC,You should cross post and join us in /r/yii
PHP,3bwy46,baileylo,3,Thu Jul 2 20:53:01 2015 UTC,"That blog post is confusing.  Let's just run through the patterns one by one and see how they fit together.  Repository  Seems you know what you're doing. So I'll make this quick.  A repository abstracts fetching information from a datasource. So instead of writing an SQL-Statement or parsing an XML file, you define a specialized method in your repository. Calling code only relies on your specialized method and is (ideally) ignorant of your datasource.  class MyRepo {       public function retrieveCondimentById( $id )       {               // Actual Magic happens here               return $user;       } }  $user = $myRepo->retrieveCondimentById( 123 ); // Calling code does not care what the actual datasource is   QueryObject  Repositories and QueryObjects are often used together. The QueryObject allows to define the query, without knowing how that is translated for the datasource. In turn the repository needs fewer specialized methods.      $q = new Query('Condiment');     $q->findId(123);     $repository->select( $q ); // The repository turns this in an appropriate command for the datasource   Specification  A Specification is an alternative solution to querying a repository (and is useful beyond that too). Think of a specification as a boolean expression, that tests if an object matches.       interface specification      {              /**               * @param User $user               * @return boolean               */              public function isSatisfiedBy( User $user );               /**                * @param Specification $s                *                * @return Specification                */              public function andSpecification( Specification $s);               /**                * @param Specification $s                *                * @return Specification                */              public function orSpecification( Specification $s);               /**                * @return Specification                */              public function not();      }       $spec = myCondiment( 123 );      // Just imagine the Repository already has all Users hydrated and just passes the to the specification      // returning those that satisfy the specification      $repository->select( $spec );   The advantage of specifications is that they can be combined to create new specification. Evans describes this as closed under the operations (in his book Domain Driven Design). Just like int is closed under addition (int+int is always an int), specifications can be combined with and, or and not and will always yield a specification.  Another advantage is that they can free you from the how.       $s = new SlightlySaltySpec();      $s = $s->andSpecification( new HotSpec() );      $s = $s->andSpecification( (new SweetSpecification())->not() );      // salty && hot && !sweet      $repository->select( $s );   Beberlei's Post  Benjamin started out with saying that using a repository without a query object leads to an abundance of methods on the repository. Every combination of properties that might be queried needs its own method.  A solution for this would be a query object, but this might lead to code duplication or inheritance for the sake of sharing code.  So he presents specifications as a solution to this. However his definition deviates slightly from above. Instead of asking if an object satisfies a specification, he manipulates the querybuilder. This is okay because we know that every object returned from that modified query will satisfy the specification. Like above, instead of defining how to query or what to query, you can specify what you want.  The code outside of the repository would not know about the querybuilder. You would query the repository like this:       $s = new SlightlySaltySpec();      $s = $s->andSpecification( new HotSpec() );      $s = $s->andSpecification( (new SweetSpecification())->not() );      $repository->select( $s ); // The repository passes the query builder to the spec and creates the actual query.   RulerZ  Have a look at this example. Kévin likes Benjamin's approach, but would like to expand it to collections in general.   At first glance it might seem that Kévin proposes few non specialized methods on the repository. Instead opting to filter the resulting data later.      $condimentColl = $repo->retrieveCondiments();    $rulerz->filterSpec($condimentColl, $spec);   Actually he proposes to combine Benjamin's approach with a general approach to filter collections. In turn his specifications can be used to modify the querybuilder and be used in other situations.       $s = new SlightlySaltySpec();      $s = $s->andSpecification( new HotSpec() );      $s = $s->andSpecification( (new SweetSpecification())->not() );      $repository->select( $s ); // The repository passes the query builder to the spec and creates the actual query.       // But hold on, what can we do, if we already have a collections of condiments to deal with?       // assume that $condimentCollection has been loaded before.      // For example this might be in a basket and you want to display condiments in groups.      $s = new SlightlySaltySpec();      $s = $s->andSpecification( new HotSpec() );      $s = $s->andSpecification( (new SweetSpecification())->not() );      $goodStuffColl= $rulerz->filterSpec($condimentColl, $spec);   My 2ct  So it seems Kévin is trying to combine the our original definition with Benjamin's approach. Which is great because that means we centralize our logic in only one specification (Only one place to check what salty means). This specification can be reused a lot.   However:    I never understood Benjamin's idea to exclude the isSatisfiedBy() method from the specification. If RulerZ combines those two ideas, why not adhere closer to the definition that Evans gave. The example and explanations are a bit confusing too.   To come back to your examples. It would look like:   ProductRepository::select(new ProducedBySpec($manufacturer));   You could do either of the following (probably more), depending on your exact requirements   add a ValidProductSpecification to each call add a ValidProductSpecification from the beginning make the ValidProductSpecification mandatory and add it in the select-Method   Edit: Proper Headings  Edit: Formatting"
PHP,3bwy46,emperorkrulos,1 point,Sat Jul 4 09:32:36 2015 UTC,"@emperorkrulos' answer pretty much sums up what I'm trying to do with RulerZ. Sorry if the blogposts aren't very clear, I find it hard to explain concepts I just discovered in a language that isn't mine.  Regarding @baileylo's question, I'd follow @emperorkrulos' advice and make the ValidProductSpecification mandatory and add it in the select-Method. But it means that the whole application will only be able to work with valid products, which can be a problem. Assuming that you only want valid products to be returned in the public part of your application, you can create a repository that will ensure that only valid products are returned and only use this repository in this part of the application while you'll use another repository in the rest of the code."
PHP,3bwy46,K-Phoen,1 point,Sun Jul 5 10:03:57 2015 UTC,"No need to apologize, at least you have a blog. I'm too damn lazy and insecure for that. ;)  I wouldn't have guessed that your not a native speaker. If I compare your answer to mine, yours definitely has less errors."
PHP,3bwbck,Caminsky,11,Thu Jul 2 18:04:08 2015 UTC,"Hate to break it to you but that's not exactly recent...  The problem is that while PHP is a language that decent and well-structured code can be written in, there's not much that structurally enforces that (especially compared to a statically typed language).  Therefore, a lot of poor code exists.  Especially code on third party sites and tutorials.  This gives PHP a bad rap compared to a lot of other languages.  That, and the wacky naming conventions on a lot of the standard libs."
PHP,3bwbck,SomeCollegeBro,0,Thu Jul 2 18:13:40 2015 UTC,And how you feel about it though?
PHP,3bwbck,pushad,7,Thu Jul 2 18:17:01 2015 UTC,"It's a bunch of hogwash. PHP is a fine language. You can write shit code in any language. The PHP community has really embraced best practices and design patterns over the past few years, and it's definitely helping PHP get a better rep and making it a better language to work in."
PHP,3bwbck,gripejones,6,Thu Jul 2 18:19:18 2015 UTC,"The PHP community has really embraced best practices and design patterns over the past few years ..   Though, in my opinion, it feels like a hard swing the other way. Too much focus on patterns and best practices to the point of over engineering. Although I'd rather be on this side of the curve than the other."
PHP,3bwbck,bga9,3,Thu Jul 2 18:38:38 2015 UTC,"So seeing someone mimicing Java enterprise design in PHP makes me laugh.   In other words, because PHP is a dynamically typed language, developers shouldn't use enterprise ideas and methodology? Then I suppose we shouldn't follow SOLID or unit testing either?  Happy to have fed you, troll."
PHP,3bwbck,SomeCollegeBro,2,Thu Jul 2 20:23:55 2015 UTC,"I feel like PHP 7 is on the right track, but as a language PHP does have to work to become more respected.  With that said, most people with a sour taste in their mouth regarding PHP have only worked on codebases like Magneto and Wordpress  (or a homegrown legacy codebase).  The fact of the matter is that PHP lets you get stuff done though, so I don't believe a lot of the criticism is really warranted.  If you are a knowledgable programmer who can critically think, you can write good PHP."
PHP,3bwbck,geggleto,3,Thu Jul 2 21:30:29 2015 UTC,I think a lot of the problem is that is quite difficult to determine a good php programmer from a bad one. The only semi-reliable way I have found is code exams .. but then you need to come up with some quite unique problems.
PHP,3bwbck,prodigyx,6,Thu Jul 2 18:20:29 2015 UTC,"People who are bashing PHP either do not know how to implement it correctly, or are using it for the wrong things. They are just professing their ignorance."
PHP,3bwbck,blocsonic,5,Thu Jul 2 18:23:00 2015 UTC,Recent? It's existed as long as PHP has.
PHP,3bwbck,deadtree123,4,Thu Jul 2 19:33:38 2015 UTC,heres a related comic that addresses your concern
PHP,3bwbck,sekjun9878,1 point,Thu Jul 2 18:27:33 2015 UTC,"This is what bothers me, PHP is good in so many ways but the haters focus on just a few consequential aspects of it. It's like hating on America Online not realizing that thanks to them they got internet access in the first place"
PHP,3bwbck,ergalvao,1 point,Thu Jul 2 18:51:22 2015 UTC,"Hmm, I'm not sure that's the best analogy (ignoring the current state of things) but I agree with you on the first point"
PHP,3bwbck,Pardalean,6,Thu Jul 2 18:55:47 2015 UTC,"I don't think that this type of thing still happen, but answering your question: I feel sorry for those who do it. Language|Operating System|Framework|whatever bashing is frowned upon nowadays, as it should be. True professionalsTM understand that specific languages thrive on specific scenarios and there's no such thing as a bad language, only bad programmers.  On top of that, I always mention that people who still bash PHP are usually  a) plain wrong  b) misinformed  c) outdated  d) all of the above"
PHP,3bwbck,_tenken,3,Fri Jul 3 06:12:21 2015 UTC,"I bash PHP all the time when in the company of my fellow PHP developers, but I'm disgusted whenever PHP is brought up on /r/programming and the same ignorant circlejerk ensues. I'm vocally negative about most stuff I deal with, but I make it my point to know what I'm bitching about.  These haters tend to cling to the same minor issues (such as inconsistently named functions) and quite often go out of their ways to find things which are wrong with PHP (such as ""sometext"".1 confusing the parser in some older version).  It's rarely that I see PHP bashed for something that actually annoys me during my 9-to-5 job. And even when they do have a point they're missing the fact that you can find similar flaws in every language."
PHP,3bwbck,Ryckes,2,Thu Jul 2 20:00:24 2015 UTC,"the 1 accurate fault of PHP someone alluded to me recently was that in 2015 (or maybe it was the last 12 months) has had like 13 or so remote code execution exploits released as CVE's. Whereas the author pointed out Perl, Python, Ruby and a couple of other major programming languages have none in the same time period -- alluding to php's faulty and broken security model.  As a developer -- this means nothing to me. To my fellow sysadmins it just means you have to be on top of your system updates and use LTS releases. All in to me not a huge issue -- but I can see how how sysadmins might care. (I basically only code PHP, lately tons of Drupal, some GRAV, some Couscous ....)"
PHP,3bwbck,jb2386,2,Thu Jul 2 20:11:41 2015 UTC,"Some of the criticism feels valid (I feel it every time I use array_map and array_reduce together), but it's the same circlejerk in every thread in /r/programming.  I think /u/SomeCollegeBro is right: PHP allows you to type really bad code. Also, really bad code is advised in tutorials all over the internets. Bad thing is that the circlejerk is often countered with the ""Facebook/Whoever uses PHP, it can't be that bad"", which is true, but is not the reason one would want to use PHP over other languages.  As of your question, I feel bad for the bad publicity for PHP, I really like the language, but I think it will eventually stop. JavaScript was the previous target of the circlejerk and it has stopped (a little)."
PHP,3bwbck,Ryckes,2,Fri Jul 3 07:09:23 2015 UTC,"Facebook, Yahoo and Wikipedia amongst others. They are the number 2, 5 and 7 ranked websites in the world. Twitter started in ruby but had to rewrite in Java cause it couldn't handle the load."
PHP,3bwbck,jb2386,3,Thu Jul 2 18:24:19 2015 UTC,Edited! Thank you :)
PHP,3bwbck,datorndata,5,Thu Jul 2 22:17:22 2015 UTC,"Oh sorry, I wasn't trying to correct you. Was just adding information! :)"
PHP,3bwbck,magnetik79,2,Fri Jul 3 04:22:00 2015 UTC,"I have programmed many different languages professionally including php, they are all fun to use for different reasons. If you don't like a language don't use it. The only thing sillier than complaining about a language you don't use is caring about what people think of your choices. I have seen many people begin programming with php then switch to a language that is strongly typed and through the process learn some more advanced concepts then blame php for their own lack of education. If you can, learn programming THEN choose SEVERAL languages."
PHP,3bwbck,bwen_egavas,2,Fri Jul 3 05:04:43 2015 UTC,"This is nothing new. Have also seen this commonplace in various work environments too - I make no reservations with how much I still enjoy developing in PHP - and mix it with Node.js/JavaScript, Python, C# / etc. depending on project.   It's funny though - i find the really vocal ones bashing PHP usually arent the ones actually delivering output/product for the business regardless of language used - or code of such poor quality. All theory - no execution."
PHP,3bwbck,dczx,2,Thu Jul 2 20:19:51 2015 UTC,"When I see people bashing PHP I feel sad for them. Not because I love PHP and they dont. But because they chose to spend their energy on something they do not like instead of spending their time and energy on something they truly love.  As it was said in other comments, PHP is a bit more pron to bad coding but that does not mean you cannot do something clean and efficient."
PHP,3bwbck,kratie123,1 point,Thu Jul 2 23:34:06 2015 UTC,"What /u/somecollegebro said. People have been bashing it for a long time. It's not the language per se, it's designed to run like a truck.  That means, I'm not always going to give you an elegant solution and or error code.  Its power is what has drawn many amateurs to it. This double edged sword is what has given it's rise and it's inherent problems.   The truth is you can do most things in the comparable languages. PHP is your truck, bastard sword, or whatever you want to metaphorize it as. One criticism is that it is not scalable, so you won't see many enterprise solutions running on it. Hootsuite did a great writeup on how they made it scalable with extensive cache'ing.   Every language has it's advantages, and a good programmer will tell you which tool is right for the job.  So we don't judge monkeys on there ability to swim, or elephants on there ability to climb tree's.   If you dislike a language for a specific reason, ask that and maybe someone can suggest a better language or framework. Or tell us specifically what the problem is.   Lastly, I heard the latest version was blazing."
PHP,3bwbck,maus80,1 point,Sat Jul 4 13:46:15 2015 UTC,"They even write entire articles about that: PHP: a fractal of bad design.   There is a whole lot of action at a distance. Consider this code, taken from the PHP docs somewhere. @fopen('http://example.com/not-existing-file', 'r');  What will it do?  If PHP was compiled with --disable-url-fopen-wrapper, it won’t work. (Docs don’t say what “won’t work” means; returns null, throws exception?) Note that this flag was removed in PHP 5.2.5.   If allow_url_fopen is disabled in php.ini, this still won’t work. (How? No idea.)    Because of the @, the warning about the non-existent file won’t be printed.    But it will be printed if scream.enabled is set in php.ini.    Or if scream.enabled is set manually with ini_set.    But not if the right error_reporting level isn’t set.    If it is printed, exactly where it goes depends on display_errors, again in php.ini. Or ini_set.  I can’t tell how this innocuous function call will behave without consulting compile-time flags, server-wide configuration, and configuration done in my program. And this is all built in behavior.   PHP is certainly usable, but there are indeed entire areas that are lousily designed. This does not mean, indeed, that other languages would not have problems either."
PHP,3bwbck,tcmccarthy,0,Fri Jul 3 09:58:14 2015 UTC,"If you only know PHP and you’re curious to learn something else, give the Python tutorial a whirl and try Flask for the web stuff. (I’m not a huge fan of its template language, but it does the job.) It breaks apart the pieces of your app, but they’re still the same pieces and should look familiar enough. I might write a real post about this later; a whirlwind introduction to an entire language and web stack doesn’t belong down here.   Oh I love that conclusion, the guy criticizes the hell out of PHP but in the end he doesn't provide us with something better. That's just fucking great"
PHP,3bulgq,relyon,6,Thu Jul 2 07:33:24 2015 UTC,"What are your thoughts on injecting a Service Locator in your Controllers?    You shouldn't do this.  You really want to be able to unit test your controllers separately from the view (aka templates) and you also want to be able to test your view without having to call it through a controller. This both for a sanity sake - i.e. being able to write simple tests, a speed issue (the unit tests for a layer of your application should be fast, probably under 5 seconds, otherwise you are wasting developer time) and just a sane development practice thing (i.e. the person writing a template/view shouldn't have to wait for someone to wire in up in a controller to be able to test it).  This is currently really hard to do in most PHP frameworks due to a design flaw in how they are architected.  Currently the architecture of Symfony/Zend/Laravel is:   i) The DIC calls the router, which sets up some information from the URI, returns the next callable thing to call i.e. what controller to call ii) The DIC calls the controller. iii) Program finishes.     It should be:   i) First callable is setup to be the router. ii) The DIC calls the callable which either: iia) Sets up some more information for the DIC to use, and returns the next callable to call. iib) Returns a response. iii) When we have a response and no more callable to call, program ends.     When a web server is architected like that, rather than having to render the view (aka template) inside the controller, instead the controller can just return which template needs to be rendered.....and the DIC can call it with all of the required dependencies.  For anyone going to PHPSouthCoast this is actually going to be the last bit of my talk....  Coincidentally I am going to releasing a templating library that makes doing proper DI in views/templates a lot easier tomorrow (hopefully), which may help a lot of people avoid needing to use a service locator in their controllers."
PHP,3bulgq,Danack,3,Thu Jul 2 11:40:07 2015 UTC,"This is exactly the kind of information I've been trying to find for like 5 years, now. Can you mock up like a quick request to response including how the various classes are instantiated? Or can I call you or meet with you on Skype? Or see your presentation?"
PHP,3bulgq,step_hane,3,Thu Jul 2 15:39:25 2015 UTC,The conference is still more than 10 days away so the presentation isn't finished yet.   I'm actually just in the middle of putting an example of this together (as part of something else) but in the mean time you really ought to check out https://github.com/rdlowrey/auryn as it's a vital part in being able to do this.
PHP,3bulgq,Danack,2,Thu Jul 2 17:08:37 2015 UTC,"I like what I'm seeing there, but I'm not totally clear on how everything would be instantiated. I wonder what a single-file app with minimal classes (1 controller, 1 view, 1 model, 1DB) would look like with a single request / response route."
PHP,3bulgq,step_hane,1 point,Fri Jul 3 00:07:20 2015 UTC,"I've put together the start of an example application which can be found here: https://github.com/Danack/Tier  On the plus side, it works and it pretty simple, on the downside I find it very hard to write text clearly on Friday afternoons. If you want to discuss it I can usually be found in http://chat.stackoverflow.com/rooms/11/php UK (programmer) times."
PHP,3bulgq,Danack,1 point,Fri Jul 3 19:19:19 2015 UTC,Neat-o. I think I've seen you in there. Maybe I'll pop in Monday morning PST.
PHP,3bulgq,step_hane,3,Fri Jul 3 22:14:10 2015 UTC,"Most of my controllers don't have anything worth testing. Almost seems like proponents of unit testing/DI have some rather fat controllers. Which is a far bigger problem than using service locators in a slim controller.  public function indexAction($p, $limit = 10)  {   $rows = $this->get('SomeService')->doSomething($p, $limit);    return $this->render('some_template.twig', [     'rows' => $rows,   ]); }   Unit testing slim controllers like these is beyond pointless and fat controllers shouldn't be tested but rather refactored."
PHP,3bulgq,knrd,2,Thu Jul 2 21:20:53 2015 UTC,"Absolutely fine, those thoughts echo my own."
PHP,3bulgq,davedevelopment,5,Thu Jul 2 09:29:46 2015 UTC,"What are your thoughts on injecting a Service Locator in your Controllers?    NO.   I've read the arguments that you usually not want to unit tests controllers, but instead use acceptance tests or functional tests for that.   You want unit tests for anything testable anyway. Injecting something unmockable is not an excuse to stop testing your code.   And just make sure all libraries used are unit tested.   all.the.code.   What are your thoughts?   NO   Service Locator in Controller fine or not?   NO NO NO"
PHP,3bulgq,ocramius,10,Thu Jul 2 07:37:36 2015 UTC,"Do you realize you're just repeating ""NO NO NO"" without explaining why? Let's have a more substantial debate than just barking orders at each other.   [unit test] all.the.code.   I totally believe you unit test all your code, so considering in the front-end >95% of the code is HTML, CSS, JS and <5% is PHP controllers, I'd be curious if you can share how you manage to unit test ""all the code""."
PHP,3bulgq,mythix_dnb,4,Thu Jul 2 08:38:29 2015 UTC,"It's all the more funny because his flair says ""ZF2 team"" and zend framework 2 does inject the ServiceLocator in the controller..."
PHP,3bulgq,ocramius,3,Thu Jul 2 12:36:37 2015 UTC,"Yeah, trying to get rid of that, but the BC break would be massive: https://github.com/zendframework/zend-mvc/pull/4"
PHP,3bulgq,ocramius,1 point,Thu Jul 2 13:01:27 2015 UTC,"Do you realize you're just repeating ""NO NO NO"" without explaining why? Let's have a more substantial debate than just barking orders at each other.   NO NO and NO (exhibit A).  Seriously tho, it's just because it's been discussed to death multiple times (exhibit B).  Here's what I wrote on this in the past (copy-pasted from a blogpost):    Our object cannot exist without a service locator: makes testability hard, since we will need to mock the service locator in order to test HelloWorld, and mocking a service locator is not so easy. Our object depends on the implementation/initialization of the service locator: portability of our code is reduced, since it will work only with a specific service locator implementing the ServiceLocator contract.  Instantiation of dependencies moved to our code: instantiation of dependencies should not be a problem solved by our code. We introduced it in our code now, so we must test it.  Hardcoded service name in our code: This makes our class very error prone if we don't write extensive integration tests each time we ship our code. Also, it makes our code incompatible with anything sharing the same ServiceLocator instance and requiring an instance with a particular name, but with different expectations.     There, happy? :-)   I totally believe you unit test all your code, so considering in the front-end >95% of the code is HTML, CSS, JS and <5% is PHP controllers, I'd be curious if you can share how you manage to unit test ""all the code"".    JS is tested via Qunit/Jasmine CSS/HTML are handled via visual diffing (PhantomCSS)   Fortunately, most of the time I build APIs, but I'm actually currently testing PDF rendering, FWIW :-)"
PHP,3bulgq,ocramius,1 point,Thu Jul 2 12:50:09 2015 UTC,"There, happy? :-)   Well I'm happier than I was.   Also, it makes our code incompatible with anything sharing the same ServiceLocator instance and requiring an instance with a particular name, but with different expectations.   That piqued my attention. Let's say instead of this:  class A { function __construct($fancyLocator) { $svc = $fancyLocator->get('FancyService'); } }  $a = new A($fancyLocator);   We refactor to this:  class A { function __construct(FancyService $svc) { } }  $a = $fancyLocator->get('A');   Did we resolve the issue you point out? In both examples we require a service by a global name, ""FancyService"", and it's resolved out of a global container with no way to communicate ""different expectations"".  Sure, you can add ""rules"". But you can add them in both cases."
PHP,3bulgq,ocramius,3,Thu Jul 2 13:18:51 2015 UTC,"In both examples we require a service by a global name   One is a name, the other one is a type: radically different concepts."
PHP,3bulgq,ocramius,0,Thu Jul 2 13:34:38 2015 UTC,"No actually it's not a type, it's the name of a type. A name is a name.  For example, just because two things are PDO instances doesn't mean they're interchangeable. One can be pointing to an SQLite cache file locally, the other may be pointing to a remote MySQL database.  It's also not unheard of a project needing two PDO instances like that in one app. Or even passed in one class. Resolving things by their (type) name remains problematic, for as long as those names are global. Type or not.  When you pass things into a constructor, we disambiguate the expectations and contract not just by type, but also by the order of the arguments, and by reading the API documentation. Reducing all those crucial details to ""just gimme something of type Foo, where Foo is an app-wide pseudo-singleton"" does not fully express those expectations."
PHP,3bulgq,amcsi,2,Thu Jul 2 13:45:05 2015 UTC,"""PDO"" is a type, ""my-db-connection"" is the name you assign it to. The fact that you describe a type with a name is just you going meta-meta.  Types are static, names are dynamic.  Making a name static by hardcoding it is the problem of locator-based code (which is why locator config is usually outside the scope of runtime classes, and in a static-ish context called ""bootstrap"")."
PHP,3bulgq,ocramius,1 point,Thu Jul 2 13:53:27 2015 UTC,"I acknowledge the problem of a global locator injected everywhere, and things fished out by their global name.   I'm asking what do you think the solution is. I've spoken about my own at length on /r/php/ and even this thread. My solution doesn't require ditching container objects, though, because container objects aren't the problem IMHO.  What's your preferred solution?"
PHP,3bulgq,ocramius,1 point,Thu Jul 2 13:54:51 2015 UTC,I'm asking what do you think the solution is.    Strict constructor (and constructor-only) dependency injection.
PHP,3bulgq,ocramius,1 point,Thu Jul 2 13:59:33 2015 UTC,"Strict constructor (and constructor-only) dependency injection.   By whom? Where are the dependencies coming from and how are they resolved to constructor parameters.  If it's just by type... back to square one:  __construct(PDO $sqlite, PDO $mysql) {}"
PHP,3bulgq,pmjones,4,Thu Jul 2 14:07:01 2015 UTC,"Injecting something unmockable is not an excuse to stop testing your code.   Service locators are mockable. Albeit they're more wordy to mock, so I still don't prefer using them."
PHP,3bulgq,pmjones,1 point,Thu Jul 2 08:06:15 2015 UTC,"Mocking a locator is quite problematic, as you will be asserting on very specific input strings, and your tests become very fragile depending on service name changes.  The problem is not the servicelocator interface per-se, but the fact that the type of a returned value depends on a parameter value that may be changed."
PHP,3bulgq,ocramius,1 point,Thu Jul 2 12:36:31 2015 UTC,"So if a class would express a ""locator"" via an interface where methods have a return type, does that resolve this problem in your opinion (hint, hint, PHP7)?"
PHP,3bulgq,pmjones,1 point,Thu Jul 2 13:33:21 2015 UTC,"Yes, except that we don't have generics, and generics wouldn't work well with a locator anyway."
PHP,3bulgq,ocramius,1 point,Thu Jul 2 13:50:35 2015 UTC,What do generics have to do with any of this? I'm talking about expressing:  __constructor(Foo $foo) {}   As:  interface Deps { function foo(): Foo; }  __construct(Deps $deps) {}
PHP,3bulgq,ciaranmcnulty,1 point,Thu Jul 2 13:53:03 2015 UTC,"That could work, but that's not a locator anymore, but rather a factory."
PHP,3bulgq,ocramius,3,Thu Jul 2 13:58:39 2015 UTC,"If it creates and retains the instance, it's not just a factory. It's more like a factory + registry, which makes it more like a container. And then because the container is injected so the dependent object can retrieve dependencies, it's being used as a locator. :-/"
PHP,3bulgq,ciaranmcnulty,2,Thu Jul 2 14:27:46 2015 UTC,A wild pmjones appears.
PHP,3bulgq,modestlife,1 point,Thu Jul 2 14:29:06 2015 UTC,If you could see my hair now you'd know how true that is.
PHP,3bulgq,ocramius,0,Thu Jul 2 14:33:52 2015 UTC,"That still makes it a factory, as it is not ""locating"" a service, but just providing you with an instance.  The fact that the instance is retained/shared is a detail that the factory is capable of knowing anyway (factories are somehow ""dirty"" because of this sort of knowledge)."
PHP,3bulgq,anlutro,2,Thu Jul 2 14:36:32 2015 UTC,"/me furrows brow  My understanding has been that factories are supposed to provide new instances, not pre-existing ones. Can you point me to literature or articles talking about factories retaining instances for reuse?"
PHP,3bulgq,pmjones,1 point,Thu Jul 2 14:44:34 2015 UTC,"Yeah. Well, every time I show it to someone and tell them ""so it's like a factory"" and they tell me ""it's a service locator"", so I've completely given up arguing about terminology at this point.  I just wanted to demonstrate how parameters and ""container interfaces"" can be isomorphic in terms of combining dependency type with another differentiator (position for parameters, and method name for interfaces). It also provides for lazy fetching of dependencies, which becomes necessary in larger projects (say passing a dozen dependencies in a larger CMS module to be injected more traditionally as parameters in internal classes as need be).  We still need some sort of containers at some level, so before Zend ditches theirs (injected in controllers), it's good to think about this, and also about the context of dependencies (i.e. dependency ""foo"" for one group of controllers needn't be the same as dependency ""foo"" for another group)."
PHP,3bulgq,malkusch,1 point,Thu Jul 2 14:01:01 2015 UTC,"It also provides for lazy fetching of dependencies, which becomes necessary in larger projects (say passing a dozen dependencies in a larger CMS module to be injected more traditionally as parameters in internal classes as need be).   Not really. I've developed components for lazy-loading dependencies, so that you can avoid passing factories/locators down to your dependencies.   We still need some sort of containers at some level   Agree, but they are used only in very initial portions of the app that are actually doing proper service location (routers, anybody?)."
PHP,3bulgq,mythix_dnb,1 point,Thu Jul 2 14:19:23 2015 UTC,"Not really. I've developed components for lazy-loading dependencies, so that you can avoid passing factories/locators down to your dependencies.   Maybe you mean proxies, but that has multiple problems on its own, including constant runtime overhead. If not proxies, then what?"
PHP,3bulgq,phpdevster,2,Thu Jul 2 14:21:27 2015 UTC,"I admire your passion :-)  But disagree with ""You want unit tests for anything testable anyway"". I don't think unit tests are necessary for infrastructure adaptors (e.g. I would not unit test a Repository of mine that transformed my domain's repository contract into Doctrine method calls).  IMO it's valid to regard a controller as the same sort of UI infrastructure adapter if that is all it does"
PHP,3bulgq,ThePsion5,1 point,Thu Jul 2 15:12:23 2015 UTC,"I'd actually especially test stuff like that: very dangerous to leave it pending, and most likely a source of bugs.  The infrastructure adapter has just lower priority than the core domain, but that doesn't mean it will be ignored: it will be ignored if somebody puts haste/budget issues into play."
PHP,3bulgq,ocramius,1 point,Thu Jul 2 18:41:01 2015 UTC,I test it; I don't unit test it.
PHP,3bulgq,mythix_dnb,1 point,Thu Jul 2 21:23:02 2015 UTC,all.the.code.   I disagree and will leave this here: Testing like the TSA
PHP,3bulgq,phpdevster,2,Thu Jul 2 18:41:06 2015 UTC,"I stopped reading stuff written by DHH, it's toxic.  [EDIT] I actually read it and had a good laugh, thanks :-D  [EDIT2] Then I cried, thinking about the juniors that still read his stuff."
PHP,3bulgq,lithstud,2,Thu Jul 2 21:02:03 2015 UTC,"I think it's just fine. I'm never going to bother injecting the session, templating engine, URL generator, form factory etc. into every single controller I write.  I don't think controllers are worth unit testing. The only interface they implement is the one of turning a request into a response.  I'm more than happy having global state in my templates (generating URLs for routes and assets, partial template rendering etc.), and I feel controllers fall under the same category. As long as they are kept logic-free, I'd much rather cover them with acceptance tests than unit tests.  In a perfect SOLID OOP world you won't be doing it, but I'm far more a fan of getting things done. There are a lot of worse code smells you should worry about."
PHP,3bulgq,lithstud,2,Thu Jul 2 13:55:45 2015 UTC,"What are your thoughts on injecting a Service Locator in your Controllers?   What makes you ask the question? If the reason is ""because my controller has a lot of disparate dependencies and it's inconvenient to inject them individually"" then your controller is doing too much. In that case, consider breaking the actions out to their own classes, a la Action-Domain-Responder. Then you can inject the dependencies individually for that specific action."
PHP,3bulgq,creatiff,1 point,Thu Jul 2 14:16:21 2015 UTC,"What are your thoughts on injecting a Service Locator in your Controllers?   Regarding testability it's still testable, as the SL can just provides Mocks. But, the test will leak a lot of implementation details because it has to know which services will be required."
PHP,3bulgq,creatiff,1 point,Thu Jul 2 14:11:06 2015 UTC,"Why is everybody against this? Both Zend Framework and Symfony do this....  A controller is supposed to control the flow and data through the application by orchestrating the services, so it needs the service locator imho..."
PHP,3bulgq,creatiff,2,Thu Jul 2 12:34:45 2015 UTC,"No, that is not true. Laravel injects the exact dependencies a controller needs since the controller itself is resolved through the container. This means the controller doesn't need to have a service locator or any knowledge of anything other than what is injected into it."
PHP,3bulgq,creatiff,1 point,Thu Jul 2 22:41:36 2015 UTC,"A controller is supposed to control the flow and data through the application by orchestrating the services, so it needs the service locator imho   A controller is supposed to be a bridge between your application's core layer (the domain) and the HTTP layer. It translates incoming requests to some domain service and translates the result to a HTTP response. It should only be making logic decisions that relate specifically to that."
PHP,3bulgq,Danack,1 point,Thu Jul 2 15:04:53 2015 UTC,"The problem is that it allows for very ""quick 'n dirty"" coding that remains sticky afterwards."
PHP,3bulgq,Danack,1 point,Thu Jul 2 13:02:41 2015 UTC,"Lots of things allow for crappy code, it's always a trade off between comfort and ""correctness"""
PHP,3bulgq,sekjun9878,2,Thu Jul 2 13:21:31 2015 UTC,"""Correctness"" is important to enumerate. Code should be these four things:   Change-insulated (changing one thing doesn't cause an avalanche of bugs in unrelated areas) Change-friendly (opposite of #1 - making a change shouldn't require duplicated effort all over the place) Readable (can I look at my code or someone else's code 3 months later and understand it completely?) Testable (you need to be able to PROVE your code works)   As long as your code is those things, then it doesn't matter how you get there."
PHP,3bulgq,creatiff,0,Thu Jul 2 22:44:25 2015 UTC,"The ""unit"" of controllers + templates is the UI. And because UI is intended for humans, the best way to test it is via.. humans. Detecting changes in HTML output doesn't mean the UI is broken. Only a human can assess if it is. So there's no way around it, and yes, I wouldn't say unit testing UI makes sense in most cases.   Instead, by testing the UI manually, you also cover the controllers. You can use service mocks for those manual tests, but when possible, data fixtures using the original services is better (less effort, higher test accuracy).  That aside, even if you prefer to unit test your controllers, a Service Locator, as typically implemented, is highly configurable at runtime, so you can easily replace services with mocks.  The problem comes from elsewhere: who is this locator for? If it's for the entire app, you risk coupling your controllers to global dependencies (and their global names) in a way that gets hard to unmesh and control over time.  So ideally, you want controllers to have access only to dependencies intended for them, and if you use any names (aside from interface and class names) those names should be local to that group of controllers, so you can configure every part of your app independently.   If you use an app-global DI container injecting into constructor parameters, but the container would happily give any of its dependencies to anyone, that's essentially the same as injecting a global locator, the difference is only one of syntax.  tl;dr Inject containers or parameters, that's not the issue. But avoid injecting a global container, or indiscriminately injecting parameters from a global container.  BTW, as I keep up with developer memes, I know I risk being down-voted or shouted at, so let me preempt that: don't just shout, list convincing technical arguments, and I'll address them."
PHP,3bulgq,mythix_dnb,1 point,Thu Jul 2 08:46:07 2015 UTC,"Would you be able to explain what is the difference between container and a global container? For example, in silex, is injecting $app means that it's injecting a global container?"
PHP,3bulgq,guywithalamename,2,Thu Jul 2 09:25:03 2015 UTC,"Unfortunately, yes.  In their attempt to appear simple, micro-frameworks commit a lot of little design ""sins"", like promoting app-global state and mixing unrelated concerns like routing (go to $app), controller construction ($app), dispatching ($app) and dependency resolution ($app). As your app grows, those little conveniences may end up becoming a big problem.  A non-global container is one that's given to a part of your app, and it's specifically configured to it. Let's take a boring example - a blog. You may have these modules:   PublicSite (public pages of the blog) PrivateSite (admin pages, content management, etc.) PostsService (create, update, read, delete posts and related functionality) CommentsService (API for building and querying multiple trees of comments)   Every one of those modules are part of the same app, but they have their own dependencies. As such, whenever they get injected by something (or get it out of a container) the resolution of a dependency should be specific to them.  If you inject the same $app everywhere, it means $app has to be made aware it's in a specific context so it can have context-specific rules. This may end up as a rule engine doing plenty of runtime checks, so it's best avoided. A lighter approach is to simply have one container per module so the context is implicit. You can then give a module its container when instantiating it.  Let's say you have this in $app as a container (slightly contrived, but let's go with it):  $appContainer {     dbForPosts()      dbForComments()      settingsForPublicSite()      settingsForPrivateSite() }   Those dependencies and their names as defined up there represent your app configuration, but it shouldn't be given like that to the modules. Instead, the module containers can be small adapters from $appContainer to a module's specific dependencies:  $postsContainer {     db() { return $appContainer->dbForPosts() } }  $commentsContainer {     db() { return $appContainer->dbForComments() } }  $publicSiteContainer {     settings() { return $appContainer->settingsForPublicSite() } }  $privateSiteContainer {     settings() { return $appContainer->settingsForPrivateSite() } }   Now if you feed PostsService its container, it can just ask for db(), and it'll be given the right DB. We avoided ""telling"" PostsService a global name by which its database is resolved. It uses a local name."
PHP,3bulgq,mythix_dnb,1 point,Thu Jul 2 09:39:59 2015 UTC,"Thanks, looks interesting. I understand (theoretically) what you are saying but its a bit hard to imagine how it should actually work.. I would love to see some real examples, do you know any opensource project which does similar thing?"
PHP,3bulgq,Danack,1 point,Thu Jul 2 13:28:02 2015 UTC,"This goes into more (excessive) PHP-specific details: https://www.reddit.com/r/PHP/comments/3b36k1/seperate_classes_per_each_action_and_getting_rid/csj7npo  Many bigger projects implement aspects of this, but every in their own way, I can't think of a suitable example, sorry. Still, yesterday, I got linked to this: https://github.com/rtroncoso/Laravel-Context  It's a specific add-on for Laravel, but achieves similar modularity despite Laravel is not modular by default. If it weren't for Laravel, you can do achieve modularity without libraries though (more like the first link here explains)."
PHP,3bulgq,mythix_dnb,1 point,Thu Jul 2 13:41:01 2015 UTC,"The ""unit"" of controllers + templates is the UI. And because UI is intended for humans, the best way to test it is via.. humans. Detecting changes in HTML output doesn't mean the UI is broken. Only a human can assess if it is. So there's no way around it, and yes, I wouldn't say unit testing UI makes sense in most cases.    wait.. what? there are plenty of tools to test representational layers and client side stuff such as html and javascript, saying the best way to--and the only way to assess if its broken by, a human..? would mean in my case i would be manually testing for atleast an hour a day if everything is functioning correctly and possibly kill the remaining joy i still have in todays webdevelopment. hello, 2015..  also, no reason to not test controllers, do it manually if you prefer. whats the point of just unit tests if there is something wrong in your controller.   That aside, even if you prefer to unit test your controllers, a Service Locator, as typically implemented, is highly configurable at runtime, so you can easily replace services with mocks.   this is why you inject dependencies, and not containers or service locators..   The problem comes from elsewhere: who is this locator for? If it's for the entire app, you risk coupling your controllers to global dependencies (and their global names) in a way that gets hard to unmesh and control over time.   why would it not be for the entire app? and you dont risk it, you just did it by injecting the SL  tl;dr never, inject a service container."
PHP,3bulgq,coderstephen,1 point,Thu Jul 2 11:06:57 2015 UTC,"wait.. what? there are plenty of tools to test representational layers and client side stuff such as html and javascript, saying the best way to--and the only way to assess if its broken by, a human..? would mean in my case i would be manually testing for atleast an hour a day if everything is functioning correctly and possibly kill the remaining joy i still have in todays webdevelopment. hello, 2015..   There are tools, like Selenium (which I use sometimes), but their functionality is limited to recording human activity (or accepting commands that simulate it), and then repeating it to see if it looks the same in a purely mechanical way (say ""is that DOM element where it was last time"").  Such tools are most useful as a quick substitute for unit testing, when you want to see if refactoring logic on the server side broke your client. If you unit test your services, which is far more useful over the long term, testing your UI ""works 100% the same"" is... quite a lot less useful.  No tool copes well with UI that has refactored HTML DOM and interactions, even if the resulting difference may seem superficial or invisible to a human (say moving from tables & div tags to semantical HTML5 tags). Feel welcome to share any borderline-AI tools you know of. Google will be quite interested, they spend inordinate amount of resources building bots that try to see web sites the way humans do (and while they're the best out there, they're still not that good at it).   also, no reason to not test controllers, do it manually if you prefer. whats the point of just unit tests if there is something wrong in your controller.   The desire to test a controller typically communicates you have more domain-level business logic in your controller than is warranted.   Do you validate input in your controllers? Are controllers the authoritative source for whether an action is allowed for a user or not (permissions, authorization)? Do you operate with repository-level ORM in your controllers? Do you even make raw SQL queries in your controllers?   If you answer yes to any of the above, I don't judge, it works for small apps, but then your controllers are not simply controllers anymore. They are controllers with dispersed domain-level business logic in them, so the need to test them comes from there.   And the solution is to isolate your client & UI logic from your domain logic, until the only thing a controller does is map UI-level concerns to domain-level concerns. And nothing more.   tl;dr never, inject a service container.   You know that's a very poor tl;dr for your comment, given you said nothing substantial to support that statement."
PHP,3bumaf,ICJ,2,Thu Jul 2 07:45:08 2015 UTC,"You might want to look at something like gearman (or some of the many other job queues) - e.g. when rendering a page you add an asynchronous request to update the stats for the user into a job queue.   In the background you have some worker(s) which process the jobs.   That way, you keep a handle on the load (you control how many workers there are) and could move the processing off onto other nodes if needs be (so being scalable)  You could also have a cron job that goes through, every so often, looking for people whose stats haven't been updated recently and add requests for regeneration to the job queue for them as well.  That way, popular people/profiles would have up to date stats, and people who hardly use the site would have stats that might be a few hours old.  However, make sure you've got a handle on where the bottlenecks are in your app - are they the database? PHP? Javascript/page rendering? Use tools like xdebug to profile the website to ensure you know where time is being spent on a page load.  Make sure your database queries are using indexes and the database itself are vaguely tuned/optimised (out of the box config isn't much use in production)."
PHP,3bumaf,TheGingerDog,1 point,Thu Jul 2 19:41:05 2015 UTC,"I'd advise moving these calculations to a backend service that reads from a queue. Any time a user needs an updated stat, insert a message into the queue with the user ID and have the backend process do the calculations. This will be infinitely more scalable than trying to do these calculations on the fly as the sites grow."
PHP,3bumaf,dmunro,1 point,Sat Jul 4 17:06:51 2015 UTC,"Emit events, and use the events to update asynchronous read-models.   For example, consider your code that manages friendships: It should not need to know all the different graphs/rankings nor should it have to wait until those things are updated. It simply does its job and then creates objects/messages for FriendshipAdded and FriendshipRemoved. These messages are quickly appended to a database table or emitted to some other service.  Then, you've separate pieces of code -- maybe cronjobs -- watching that firehose of events and reacting to the ones that matter to them. So you might have a piece of code that goes: ""Oh hey! A FriendshipAdded! I need to update the most_recent_friendships table.""  Finally, there's a piece of code for the front-page that does nothing but render a nice little box based on the most_recent_friendships table whenever people refresh the page."
PHP,3bumaf,Terr_,1 point,Tue Jul 7 17:24:57 2015 UTC,"In my opinion, the background service approach will create more problems than it solves. You can use something like Redis to fast store/update/retrieve the stats you need and avoid hitting the database. If you really want to keep the stats in the database, you can have a cache layer in front of the DB and use INSERT DELAYED to persist the data. Keep in mind that when updating records, INSERT DELAYED is ignored."
PHP,3bumaf,sonix2,2,Thu Jul 2 07:58:19 2015 UTC,"I have not dived into redis or any of the alternatives yet ( relatively new to php ) so i apologize if this is a stupid question. Would this require me to replace the pdo db interaction layer that i am using, or is this another layer that sits on top of it. With redis does it just store the information it is given? ( quickly read the redit website ) so i would still have to read from db to count all of the stats required ( some stats like users are multiple rows that are counted ) then store it using redis? I am going to look into it further since i see it everywhere ( books, tutorials, etc. )"
PHP,3bumaf,avindra,1 point,Thu Jul 2 08:14:07 2015 UTC,"There's more than one way to use a cache server / key-value store. I'd recommend searching around and read about how they can be used effectively, then plan out your architecture. I see key value stores misused quite often, especially at work."
PHP,3bumaf,bga9,2,Thu Jul 2 10:10:11 2015 UTC,Using INSERT DELAYED is only useful for MySQL (it's a MySQL extension) and only applicable when inserting into MYISAM tables.
PHP,3bsjjh,hacder,1 point,Wed Jul 1 20:14:25 2015 UTC,"Looks pretty cool. I was actually wondering about looking into creating a bot when they announced it with Telegram 3, this looks like it'll make life a lot easier.  A few generic ideas I have for bots:   Daily weather forecast (hometown, work) Traffic report for my route Random weekly fact Movies coming out this month Link to Wiki article for a term"
PHP,3bsjjh,dehydratedchicken,0,Thu Jul 2 00:18:53 2015 UTC,"Yep, It will.  Sounds good about those ideas, they look interesting!  Some more bot ideas:   Monitor web apps/sites and notify me/user when they go down, Good for webmasters ofc! Send top reddit posts summary or Maybe subscribe to some subreddit like /r/gifs and send top gifs once a day/picture, could also be a viral video (Since the bot feature supports sending videos too, Either download and send or just send the YT link..whatever). Daily Horoscope (Ofc as per your sign) Daily Jokes Funny Memes Latest/Hot News of the day Social Media Account Poster (Like if you send a message, It would post to fb, twitter, etc. or upload image including on Instagram), So it's like one place for all. Trending Topic of the day Some bot for IoT (Maybe to make home smart using Telegram, Since its like your own app).   I've asked Telegram Bot Support to put up their service on IFTTT, that would open up more ways to easily connect things and automate more stuff :)"
PHP,3bsjjh,dehydratedchicken,1 point,Thu Jul 2 01:58:10 2015 UTC,Just wondering if you might be able to help?  Starting working on a bot this morning and trying to get it to respond to webhooks but from the server access logs it doesn't look like Telegram even hits the server.  You had any similar issues?  I've send a curl request to setup the webhook and getting a success message from that.  The domain has a valid SSL certificate and I can send messages out from my app.  Just having a hard time getting it to listen and have no idea why.  You come across anything similar at all?  EDIT: Figured this out now.  I was using a PositiveSSL certificate from Comodo and needed to created a chained certificate file as someone posted here
PHP,3bsjjh,bga9,1 point,Fri Jul 3 13:13:42 2015 UTC,"Hi, Sorry for the late response. I just checked it. But I'm glad you were able to fix it. I think this should be mentioned on their site. I'll ask support and see if they can add or maybe I'll just add it within my project. Thanks for the update as well."
PHP,3bsjjh,Toupix,1 point,Sat Jul 4 03:18:30 2015 UTC,"Your README is very well laid out, but a bit verbose. Consider moving some of it to another directory, like 'docs', with some usage examples."
PHP,3bqukg,ehansen,3,Wed Jul 1 12:22:19 2015 UTC,There is one happening in Boston in August. http://2015.northeastphp.org/
PHP,3bqukg,fleshintogear,3,Wed Jul 1 12:28:33 2015 UTC,"Symfony seems to do a US specific conference once a year. It was in NYC in October last year. I went to it, and it was ok, but was kind of small and only offered one track. To boot, most of the talks given were not Symfony specific, but rather talks given at all the PHP conferences. I think really only the workshops were Symfony specific. Their site says ""coming soon"" for the US version this year: http://live.symfony.com/  I also went to SunshinePHP in Miami in February, and I highly recommend that. Not Symfony specific at all, but a great conference nonetheless. http://2015.sunshinephp.com/"
PHP,3bqukg,UFTimmy,2,Wed Jul 1 12:51:13 2015 UTC,"We (I am an owner/organizer) have a symfony track at php[world], this November: https://world.phparch.com/schedule/"
PHP,3bqukg,omerida,1 point,Wed Jul 1 15:47:47 2015 UTC,And to add to this (I'm the conference chair of php[world]) ... The OP asked about 'in America'.  php[world] is being held in D.C. ... and our Early Bird sale is going at the moment.  So you can save $200 if you buy in the next couple weeks.
PHP,3bqukg,EliCrossbow,1 point,Wed Jul 1 16:19:26 2015 UTC,"PHP.net has an upcoming conferences page  While some conferences may have more ""big name"" speakers than others, a lot of the value in conferences is ""off track"" in the social and networking aspects as well as in the talks themselves.  Any conference from that page is almost certainly worth your while.  (Don't forget to check with your company to see if they have a ""learning expenses"" / ""training"" budget that might cover part of your conference costs!)"
PHP,3bqukg,AllenJB83,1 point,Wed Jul 1 13:20:23 2015 UTC,Thanks for posting this. I think that people sometimes forget all the useful lists of things that they already have available to them. :)
PHP,3bqukg,llbbl,1 point,Mon Jul 6 22:27:17 2015 UTC,"Pacific Northwest PHP is in Seattle this September. While not entirely Symfony specific, there are some talks that are Symfony related. Link: http://pnwphp.com/talks"
PHP,3bqukg,1nssein,1 point,Thu Jul 2 01:20:36 2015 UTC,"Just to add one more to the list, we hold Lone Star PHP here in Dallas, Texas each year in April. Our next conference will be coming in April of 2016, the 7th through 9th."
PHP,3bqmzn,lithstud,18,Wed Jul 1 10:44:08 2015 UTC,Use the mysql command LOAD DATA INFILE. By FAR the quickest. https://dev.mysql.com/doc/refman/5.1/en/load-data.html
PHP,3bqmzn,willmacdonald,1 point,Wed Jul 1 10:49:48 2015 UTC,"Thanks, I had a quick look but I can see one problem with it.  In the same table there is going to be some rows (products) that are created from the website dashboard. So these products will have source field with 'csv' value for example. The problem with this is that in the CSV file, there is not going to be a primary key. (well it is a primary key in the system where it's exported from, but it's not primary on our database). I cannot really change the table and add unique or primary keys.  So if the product exists already, I'm not sure how should I update it/ or delete the product if it doesnt exist in the CSV file? Also, I believe it should have the same amount of columns? So I would probably still need to parse it first to match the table. Sorry that might be just because I don't have any experience with it. Have you used it in any similar way?"
PHP,3bqmzn,willmacdonald,6,Wed Jul 1 11:07:39 2015 UTC,"yes, I have. This command works best when the table and the CSV have the same structure. My second approach would be to    create an import table and import the file, for temporary use. create a MySQL command to copy the data over to the existing table.   Here is my SO question about this exact subject from many years ago: (http://stackoverflow.com/questions/414828/update-mysql-table-with-data-from-another-table)  If possible try and do this without bringing the data from MySQL to PHP. That is where it will get very slow. MySQL on it's own is amazingly fast at processing this sort of data. A file with 100k lines will be easy to process."
PHP,3bqmzn,MikeSeth,3,Wed Jul 1 11:14:05 2015 UTC,"Better: create a null engine table, apply trigger to it, LOAD DATA INFILE, the trigger processes every row, decides if and how to insert it into the destination, then discards it. No memory constraints, no index issues, no disk IO from the insert table."
PHP,3bqmzn,willmacdonald,1 point,Wed Jul 1 15:16:33 2015 UTC,"The second approach sounds like a good idea.  Then I could update the original table with the data from this temporary table.    If possible try and do this without bringing the data from MySQL to PHP   Sorry for a noob question, but since it will have to be done on a daily basis, I will still have to use php for running mysql queries to insert the CSV data and update the original table. Do you think there is a better way or it will still be as fast if I run that from php?"
PHP,3bqmzn,puahaiduc,1 point,Wed Jul 1 12:12:22 2015 UTC,"aahh there is some confusion here.  I meant run a query which does not return all the data as a PHP array and then iterate over it. In the stackoverflow link above it illustrates how to do this in a single command, but it is PHP that sends the command to the MySQL server."
PHP,3bqmzn,irphunky,1 point,Wed Jul 1 12:44:41 2015 UTC,"Thanks, that explains everything. I just tried it on one of our slowest servers and it works really fast. Thanks very much again - this will work perfectly."
PHP,3bqmzn,Disgruntled__Goat,7,Wed Jul 1 12:55:06 2015 UTC,The PHP League has a pretty good CSV library. Maybe it can help.
PHP,3bqmzn,irphunky,1 point,Wed Jul 1 11:05:23 2015 UTC,"Hi, Thanks. Yes I am actually using this library for the CSV file parsing. It's great! But I'm more interested in the database part. Since there is going to be around 100k rows, I need to find the best way to insert them (or update/delete)."
PHP,3bqmzn,Disgruntled__Goat,4,Wed Jul 1 11:13:32 2015 UTC,"If there business rules that need to be applied to each row, then you'll need to process each line individually and then insert one by one. These could be rolled up as a transaction so are only committed to the db if all are successful, but that might not be a problem for you."
PHP,3bqmzn,irphunky,1 point,Wed Jul 1 13:15:11 2015 UTC,"You don't need to insert them one by one, just process the business rules. You can save up 10-20 rows to insert in one query which would be more efficient."
PHP,3bqmzn,xjake88x,1 point,Thu Jul 2 15:08:15 2015 UTC,"Apart from when one fails and you can't rollback.  But you're correct, INSERT statements with multiple values are much quicker than multiple individual INSERTS. I'm not sure how they compare to a transaction though."
PHP,3bqmzn,NJ247,1 point,Thu Jul 2 15:33:28 2015 UTC,"You can still do all the inserts in a transaction, just do them in batches."
PHP,3bqmzn,_tenken,3,Thu Jul 2 22:05:18 2015 UTC,Unless the data set within the rows is huge this doesn't seem that large and as your processing this daily (i'll assume nightly out of hours) then it should be simple to produce an importer that you can setup to run via cron.  Look into http://php.net/manual/en/function.fgetcsv.php or just use league/csv.
PHP,3bqmzn,fleshintogear,1 point,Wed Jul 1 13:13:15 2015 UTC,"Believe me, op, this is the quickest easiest way to do it. Just loop through the CSV rows using fgetcsv and generate insert queries. If you do it in one transaction it can be orders of magnitude faster. ""BEGIN"" query before the loop and ""COMMIT"" query at the end."
PHP,3bqmzn,_tenken,1 point,Thu Jul 2 14:59:11 2015 UTC,"As a learning exercise I created a class which splits a large CSV into small chunks a while back: https://bitbucket.org/NeilJ247/csv-chunk/src/734f267c5790a18c43f2fb8e9aeae110f101a950?at=master.  It uses the split command on linux.  Note I haven't worked on it in a while or written any tests for it but from manually testing it worked fine, but use it at your own risk."
PHP,3bqmzn,haydenk1337,1 point,Wed Jul 1 11:28:59 2015 UTC,Thanks I will have a look at this.
PHP,3bqmzn,Disgruntled__Goat,1 point,Wed Jul 1 12:16:37 2015 UTC,"I have processed CSV alot ..... my MIGHTY hammer is the Migrate module for Drupal :D. You'll probably consider it overkill to install drupal to just process a CSV file -- but I do alot of drupal sites so it's my toolbox.  I will say the Migrate Framework is just that a framework to move source data from system A to system B by defining mappings and business logic in an Object Oriented manner. The examples included in the migrate (drupal 7) module for baseball use a CSV file.  The nice thing about Migrate is that while it supports a migration source (data) of CSV. It supports an option within a migration called ""track_changes"". What this does is scan the row of incoming data, see if it's been inserted before to a destination and if not CREATES the destination data from the source data. if it has been created before, and the content has changed since the previous creation -- then an UPDATE is performed on the destination row that pre-exists.  More on ""track_changes"": http://timonweb.com/posts/using-hash-value-track_changes-to-detect-source-data-changes-in-migrate-for-drupal-7/  Migrate is a drupal tool so there is built in support for Drupal entities and constructs -- but there is also a vanilla MigrateDestinationTable object which allows the destination of your migration task to be a simple SQL table on the system.  Migrate is moving to Drupal 8 core and the CSV processing is supported by Drupal 8 now it seems. D8 makes use of Symfony components, so I'd assume the migration framework should be useable outside of Drupal 8 -- but much of the drupal 7 migrate module is yet to be ported to Drupal8, they are working on that: https://www.drupal.org/sandbox/mikeryan/migrate_plus"
PHP,3bqmzn,0bp,1 point,Wed Jul 1 15:16:07 2015 UTC,"The difference here is if you want to process it FAST - like more than one row at a time, LOAD DATA INFILE is a solid route. Depending on how the data has to be processed is another part of the puzzle here.  I am highly familiar with the Migrate framework but even it could not handle what I needed to do (parse 90k rows to 500k mappings in less than 5 minutes).  I WAS able to do that after taking the CSV parsing load off of PHP and just getting it into a MySQL table: https://gist.github.com/kevinquillen/45fb33206559449e9cb2"
PHP,3bqmzn,melokoton,1 point,Thu Jul 2 13:41:28 2015 UTC,"Ah so I think you're saying. Import into a bulk vanilla table using LOAD DATA INFILE, then use mysql from there.  Another approach could be from this page: https://www.drupal.org/node/2136603  Specifically: https://www.deeson.co.uk/labs/multi-processing-part-2-how-make-migrate-move  I am using this to process about 2k of records per 10 seconds on my Migrations that process ~100k of records using Migrate.  Maybe try the best of both worlds, use an INFILE than parallelize Migrate. I'm not using INFILE because that requires root access to the mysql server -- or at the least more access and configuration than i'm given."
PHP,3bqmzn,jeffrey_f,1 point,Thu Jul 2 15:55:16 2015 UTC,"After looking through the comments, I just wanted to add, in case you end up needing create SQL queries for it, you could look into useing REPLACE INTO which is basically the same idea as INSERT INTO but will update a record if it already exists."
PHP,3bqmzn,Disgruntled__Goat,1 point,Wed Jul 1 19:01:15 2015 UTC,Using 'ON DUPLICATE KEY UPDATE' on your insert query is faster.
PHP,3bqmzn,Disgruntled__Goat,1 point,Thu Jul 2 15:10:57 2015 UTC,"As mentioned by others, LOAD DATA INFILE in a tmp table and then ""insert into ... select from tmpTable"" with some conditions you need."
PHP,3bqmzn,jeffrey_f,1 point,Wed Jul 1 19:55:22 2015 UTC,"You can use https://github.com/ddeboer/data-import  It already has a Doctrine writer by default (you will have to adapt it) and you may want to add converters for your special columns, for example, you mentioned you have to build a product in your database so you should add a converter step to do this.  If you are not using doctrine, then you could write your own for the abstractions you are using.  Hope this helps.  Edit: Note that they were doing some kind of refactoring so the documentation is out of sync, you can use the stable one or just read the code for master (it is simple)"
PHP,3bqmzn,alizamorgan8,1 point,Thu Jul 2 00:17:45 2015 UTC,"Better order of operation, remove from the main table items NOT in your CSV, update ones that exist and insert new ones??  Isn't that the same as clearing the table prior to upload??"
PHP,3bmclk,nelf86,71,Tue Jun 30 11:24:52 2015 UTC,"Developer with ~12 years of PHP experience here, along with Java, C#, and a splash of Node.   What are your thoughts on this?   I feel most of Laravel's criticism comes from one of two sources: Facades and Eloquent. Laravel's Facades are dangerous, because they allow you to sprinkle dependencies framework-specific dependencies in one's code without much thought and without it being especially obvious (compared to Dependency Injection). Facades should be limited to code that's tightly-coupled to the framework anyway, like controllers and middleware (though less of the latter now that PSR-7 has passed). Eloquent, on the other hand, is the closest thing Laravel has to a god class, and is so easy to use because there is an awful lot of magic going on under the hood. That's all great until something breaks and you have no idea what the hell is going on because (for example) your method call on a model collection is falling through to the query builder.  Both are valid criticisms, but I don't feel like they're nearly enough to condemn Laravel as a whole, especially when both features are 100% optional. I feel Laravel's DI Container can actually make it incredibly solid, well-designed code. But some features are clearly better-suited for rapid prototyping and should be replaced as an application grows."
PHP,3bmclk,ThePsion5,4,Tue Jun 30 11:55:41 2015 UTC,"Totally agree! I think Taylor knows those facades and active record are bad too, he did it anyway. Because for most phpers, it's best to be straight forward, that's why Laravel is so popular. If you know it well enough, you can always use DI, doctrine or whatever to do it right, without leaving Laravel."
PHP,3bmclk,lericzhang,14,Wed Jul 1 06:38:40 2015 UTC,"I feel most of Laravel's criticism comes from one of two sources: Facades and Eloquent.   I'll add the app-global container $app with no scopes1 and modules, as an equally big issue in that list, as it prevents modules from preserving their architectural constraints (which are pretty much defined by which dependencies each module has access to). Talking of app, the router and app classes (among others) are gigantic God objects with multiple very loosely related responsibilities. Check their list of methods. It's comical.  1 I'm not talking about lifetime (singleton etc.), but contextual resolution depending on which app layer is asking."
PHP,3bmclk,utotwel,6,Tue Jun 30 12:32:16 2015 UTC,Can't you just do $app->when('ModuleClass')->needs('SomeInterface')->use('SomeImplementation');?
PHP,3bmclk,hisswaggesty,2,Tue Jun 30 14:54:44 2015 UTC,"It's better than nothing, but there are many problems with defining rules this way, so let's take a typical example.  I have a public site and an admin site. Controllers from the public site may need one or both of A, B (interfaces). So do the controllers from the admin site.  How would you adapt your example, so public controllers get implementations A1, B1, and admin controllers get A2, B2?"
PHP,3bmclk,hisswaggesty,4,Tue Jun 30 15:16:37 2015 UTC,"Hi, I come to shine some light on you as I ran into exactly the same problem and I made a package to solve this issue.  It's a (route-based) Contextual Provider binding, so in short, you'll have the possibility to bind any service provider depending on which group of routes you are (primarily, you can also use the Context facade to bind a context independently of which route or context you already where, useful for tests and other stuff).  The repo can be found at: https://github.com/rtroncoso/Laravel-Context, take a look and tell me what you think! :)"
PHP,3bmclk,utotwel,4,Tue Jun 30 20:04:55 2015 UTC,"Your package is indeed solving a problem suspiciously close to my example scenario :) I'll just mention /u/utotwel/ so he can take a look at it.  What I'm thinking:   In a modular application you choose your context, and then load the context-specific routes, dependencies and so on.  In the $app->when() example and your package we load the router, dependencies and so on, and then you we ""teach"" them how to tell apart contexts through rules. EDIT: Wait, not for you, though, you rely on middleware with the contextual routes, that fires only if the prefix matches I guess... This is better that I thought at first glance.   Rules help in select scenarios, for example $app->when() helps in cases where you have this one dependency conflict between two classes. Your package helps in cases where you have groups of controllers (a common enough scenario to warrant a solution). But there are plenty of contexts which are defined differently: per service, per component, per bundle...   Ideally the framework would be architected to fit this hierarchical nature of a well factored modular codebase without adding a lot of specific rules about specific use cases. I.e. in a more modular architecture, components wouldn't have rule engines that contextualize their state, but they, as objects, would only exist in the context they are relevant in.  And for this, Laravel would have to change some things around. Laravel is not the only framework to suffer this issue, but it's probably the one with most ""unmodular"" approach by default from the popular ones (I can cite plenty of old PHP frameworks which are even worse).   I think your solution is solving the problem nicely without disrupting Laravel too much. Thanks for sharing :)"
PHP,3bmclk,davemc2008,1 point,Tue Jun 30 20:17:52 2015 UTC,"Hey thanks for the feedback! Indeed, it's kind of a patch of the current dependency injection and concrete implementations, but it works as a charm for my biggest projects in which I work with single-project applications which use a shared core package.   What is really helpful of this is that I can have the different implementations of my repositories (which are binded to a context) completely separated from each other, and for example, use one set of repositories for administrative CRUD operations and the other one for just listing (i.e. API repositories)."
PHP,3bmclk,Schweppesale,6,Tue Jun 30 22:19:19 2015 UTC,"Right now you would probably need to do something like:  $app->when(['PubCont1', 'PubCont2'])->needs('A')->use('A1'); $app->when(['AdminCont1', 'AdminCont2'])->needs('A')->use('A2');   Of course I could make it more terse using a * wildcard if I wanted, but that would have performance implications."
PHP,3bmclk,ThePsion5,2,Tue Jun 30 15:23:19 2015 UTC,"Well, naming every controller class in a module is not optimal, which I think is clear. I appreciate that you're willing to explore the problem further by suggesting a wildcard, but the issue with string-based rules is you become bound to a naming convention.   AOP pointcuts have the same problem, for example when wrapping all methods named like ""set*"" expecting they're idempotent property setters, like setPropertyName(), and you accidentally also cover random other methods like setup().  More importantly, if I have a reusable controller like ""JsonApiController"" for exposing my JSON APIs, I can use the same controller on the public and admin side, so the class name won't be different. And there's also the performance problem, which you covered.  An app should be organized in such a way, that you don't need string-based rules in order to infer your context. And this starts with not having an ambient app-global container and letting modules have their own containers (some dependencies may be inherited from an upstream container, so instance-sharing across containers is still possible, if wanted)."
PHP,3bmclk,orrd,1 point,Tue Jun 30 15:48:25 2015 UTC,"First off, a Json Api Controller should not be a controller, you should be using response()->json(Array) for return json responses.  As far as using ""string-based"" rules, I am not sure what you are getting at as using the when-needs-use syntax...that is regulating dependency injection which allows for greater flexability, so I am not sure of the complaint."
PHP,3bmclk,ThePsion5,2,Wed Jul 1 05:55:39 2015 UTC,"I'll accept it may've been a bad example as I didn't explain the use case in enough detail. I was referring to a controller exposing arbitrary domain service APIs via HTTP + JSON. I use one like this, it's highly reusable (just feed it a different service... done), and more complicated than your example suggests. But tl;dr:  class name != object usage context   You can use two instances of one class in different contexts. Another example: a multi-tenant blogging system, where the same blog engine is used to drive differently configured blogs (different template themes, different blog posts etc.).   For this you'll need to be able to inject into controllers based on their context, not based on their classname, or based on the app they're running in (one app = multiple blogs)."
PHP,3bmclk,thbt101,0,Wed Jul 1 14:15:03 2015 UTC,"I haven't tried this yet but you may need to register your service providers on run-time.   App::register('AdminServiceProvider'); //etc   More importantly, if I have a reusable controller like ""JsonApiController"" for exposing my JSON APIs, I can use the same controller on the public and admin side, so the class name won't be different.    I don't see what's stopping you from doing this already."
PHP,3bmclk,callcifer,1 point,Tue Jun 30 20:00:18 2015 UTC,"I admit, I've used laravel for a number of large projects and there are cases where better support for modularization would be nice to have. My initial thinking is that it might work like this: https://gist.github.com/thepsion5/8cac4ab06a00d38770f7"
PHP,3bmclk,dashdanw,-5,Tue Jun 30 21:11:55 2015 UTC,"gigantic God objects   Laravel's approach is always to prefer simplicity whenever possible, and it tends to have fairly concise and simplified methods.  Even Eloquent is a fairly simple class with a small number of methods (it does do some magic to let you use Query Builder methods on the Eloquent object, which may lead to the thinking that it's more complex than it is).  The router class isn't as simple as it could be because it's based on the Symfony router, and Symfony tends to be more of the philosophy of providing every imaginable method anyone could want (not that that's entirely bad, but it's a different philosophy).   with multiple very loosely related responsibilities   Are there particular examples that you're thinking of?"
PHP,3bmclk,phpdevster,8,Tue Jun 30 21:47:02 2015 UTC,"Even Eloquent is a fairly simple class with a small number of methods   3000 lines, 140+ public methods. I disagree with your definition of simple. ;)"
PHP,3bmclk,d3vzilla,3,Wed Jul 1 04:26:43 2015 UTC,"Excuses, excuses. Something can be very complex internally and be a very simple facade externally. Open the classes in question and just see their methods. In source."
PHP,3bmclk,dreadyfire,-6,Wed Jul 1 02:57:26 2015 UTC,"You really should look at the Laravel source code.  It's extraordinarily simple, yet somehow powerful.  It's really nicely done."
PHP,3bmclk,Terr_,2,Wed Jul 1 03:40:56 2015 UTC,"Really? So Eloquent, a 3400 line class with ~150 public methods is ""extraordinarily simple and yet somehow powerful""?"
PHP,3bmclk,baileylo,2,Wed Jul 1 09:47:20 2015 UTC,First of all let me say thanks for the comprehensive explenation. I wanted to ask if you think symfony shares many of the same flaws or even if you could just share your thoughts about symfony in general?
PHP,3bmclk,WishCow,48,Wed Jul 1 04:46:06 2015 UTC,"I feel like people who criticize framework A or B try too hard to over-architect their applications and go out of their way to avoid using the framework - defeating the purpose of using a framework...  When building a web application, you have three choices:   Build everything yourself from scratch and have ""perfect"" architecture built precisely to your own standards. Use a framework, build what you need quickly, and live with the fact that your application and your framework are attached at the hip. Use a framework, and try like hell to keep the framework away from your ""application"" code, writing dozens or hundreds of boundary adapters, wrappers, and interfaces, plugging all leaky abstractions etc.   All of these have advantages and disadvantages.  #1 makes you an unproductive code hipster  #2 means you'll build what you need quickly, but you're now stuck with with your framework. If you don't plan on changing frameworks, great, no major problem. Just don't make your shit untestable - but that's on you, not the framework.  #3 means you're basically not using the framework to your advantage, because you're writing a shitload of insulation code (adapters, interfaces, POPOs) and using a framework.... by not using a framework???  What I've found is that rarely does ""leaky framework"" usage cause problems, unless you like porting your application between different frameworks for some reason. What slows you down is your own code architecture:   Inappropriately applied abstraction Poorly designed cohesion Loosely and tightly coupling the wrong things Poorly defined responsibilities   Not once have I ever said ""shit, I wish I didn't use Eloquent here"" or ""Man, that request facade is really biting me in the ass"" or ""Crap, the router has too many methods"".  What I have said is: ""shit, I tried to solve two similar but different business rules with the same method, and now they're tightly coupled together, and separating them out is going to be a pain in the ass"".  Also, I don't know about the rest of you, but for me, 75% of the code of basically any application is inherently ""http"" code. Views, routes, controllers, forms, validators, css, html, javascript - stuff a human being will interface with - stuff that a framework like Laravel was designed to make easier to build. So when your colleague says ""when you need to rewrite your code in one year...."" what the fuck does he think it is that you're going to be rewriting?"
PHP,3bmclk,dreadyfire,3,Tue Jun 30 15:00:37 2015 UTC,"Agreed! Of course, using a framework is a productivity increase at the expense of being married to that platform. If the app is truly going to be the number one propriety feature of the business, intended to endure decades of evolution, then build it using components to your exact specification; else, do what everyone else does, and rewrite the damn thing with newer tech in 3-5 years (and hopefully having a learnt from the initial iteration)."
PHP,3bmclk,Terr_,-1,Tue Jun 30 18:26:48 2015 UTC,"When it comes to, let me call it ""custom"" or ""complex"" app development I encountered huge problems with the way some parts of Symfony2 and especially(!!!!!!!!) Doctrine2 are designed / intended. Sure there is always a way out, meaning to build a solution fitting in the best with the framework, but sometimes frameworks tie your hands leading to writting more hacky code."
PHP,3bmclk,dreadyfire,7,Tue Jun 30 16:06:38 2015 UTC,I encountered huge problems with the way some parts of Symfony2 and especially(!!!!!!!!) Doctrine2 are designed / intended.   Like what(???????)
PHP,3bmclk,Terr_,1 point,Tue Jun 30 19:41:56 2015 UTC,"All of the Criteria code for non-owning side of a many to many relationship is broken. This isn't a design problem with Doctrine. However, I feel like people always put Doctrine on some pedestal. It's a great library, but that doesn't mean its not with out its bugs and there aren't arguments for smaller and less complex libraries."
PHP,3bmclk,djmattyg007,1 point,Tue Jun 30 20:40:30 2015 UTC,Didn't they improve on this in 2.5? Or are you saying it's still a pain in the ass to work with?
PHP,3bmclk,Terr_,-4,Fri Jul 3 21:00:45 2015 UTC,"Just as an example. To be able to use MySQL native(!) functions like UNIX_TIMESTAMP() if had to install and configure an extra bundle, because Doctrine2 did not support ""core"" features of a SQL dialect. But I have to admit, I am not a big fan / supporter of ORMs."
PHP,3bmclk,dreadyfire,13,Tue Jun 30 19:48:37 2015 UTC,"because Doctrine2 did not support ""core"" features of a SQL dialect.   ... If it's only in a specific vendor's dialect, then it is not ""core""."
PHP,3bmclk,pitiless,-4,Tue Jun 30 20:42:42 2015 UTC,"I agree with you that it isn't actually core functionality, that's why I put it in quotes. MySQL is one of the most used RDBMS system around the common web, especially in combination with PHP. So it is mind-boggling for me that I have to ""re-implement""/install a 3rd-party package for (My)SQL functions for the DQL dialect."
PHP,3bmclk,dreadyfire,7,Tue Jun 30 20:55:10 2015 UTC,"I don't see the bogglement... A good ORM is supposed to help you decouple from a specific database vendor, rather than encourage it."
PHP,3bmclk,aequasi08,0,Tue Jun 30 21:22:24 2015 UTC,"Some people are quite happy to couple themselves to a particular RDBMS, and want to take full advantage of all of its features. This is perfectly okay."
PHP,3bmclk,johnny0055,5,Tue Jun 30 22:54:59 2015 UTC,And those particular people with their particular RDBMS can pop in the particular bundles that layer on those particular features.
PHP,3bmclk,aequasi08,-1,Tue Jun 30 23:49:45 2015 UTC,"That's https://en.wikipedia.org/wiki/SQL for me. The common used syntax/queries you use accross MSSQL, MySQL, Oracle DB, PostgreSQL are either the same or pretty much the same. So the need of decoupling is debatable. If it comes to features of the DBs, the ORM fails to decouple completely. This is my experience, and my opinion, you might experience it differently or see it differently, but for me there is clear difference between what Doctrine2 ideally should do / does as an ORM, and what it actually does for me. Whether I use this tool in the right or wrong way is obviously also debatable."
PHP,3bmclk,AlpineCoder,7,Tue Jun 30 21:42:25 2015 UTC,"In fairness to Doctrine, it is 'constrained' by the need to support RDBMS from multiple vendors. This necessitates targeting a lowest common denominator of functionality.  I'd argue that the ability to plugin vendor-specific components is a Good ThingTM."
PHP,3bmclk,FiendishJ,-3,Tue Jun 30 20:05:54 2015 UTC,"Yes and No. The level of abstraction in Doctrine2 is too much for me, in the sense that the advantages that come with it, also bring their downsides, because it tries to target a lowest common denominator."
PHP,3bmclk,hophacker,4,Tue Jun 30 20:53:09 2015 UTC,"Yeah, as /u/pitiless says, Doctrine ORM using the Doctrine Database Abstraction Layer (DBAL). It doesn't implement unix_timestamp because its not a valid function of all sql databases.   Also, not symfony's fault."
PHP,3bmclk,FiendishJ,3,Tue Jun 30 20:24:58 2015 UTC,luckily symfony doesn't force a specific ORM or any at all.
PHP,3bmclk,hophacker,-6,Tue Jun 30 19:50:36 2015 UTC,"Not once have I ever said ""shit, I wish I didn't use Eloquent here"" or ""Man, that request facade is really biting me in the ass"" or ""Crap, the router has too many methods"".   Me too, but then again, i try to avoid laravel."
PHP,3bmclk,FiendishJ,13,Tue Jun 30 20:23:03 2015 UTC,"14 years pro PHP here, and I'd say that the choice of framework has a lot to do with the type of project and the requirements of it, so anyone who sees any framework as the ""golden hammer"" probably needs to branch out a bit.   That said, these days I find most of my projects fall into two categories:   Large, complex systems with lots of functionality and many devs. For these I prefer Symfony, since it's a very capable and full featured framework that facilitates writing clean and modular code that tends to be pretty easy for other devs to understand / improve. Small, fairly simple ""web page+"" type apps (usually single dev) that don't have a rapid dev cycle or extensive requirements. For these I prefer no framework, and assemble the functionality needed from modules directly. Most small projects don't require an entire framework, and you can minimize your exposure to dependency rot (modules or framework being EOLd / deprecated / etc) by carefully interfacing to just the modules you need, which is handy on projects that you may only be looking at every few months or so once they're launched.   I feel like Laravel is sort of designed to occupy a space between those two (enterprisey vs simple sites) extremes somewhere, but I guess I don't find many projects that fall into that area."
PHP,3bmclk,jsanc623,6,Tue Jun 30 13:23:31 2015 UTC,"I'm a developer with a similar amount of experience. I'd agree with most of what you say regarding your assessment of various frameworks except for one thing -  In my experience, a huge portion of my work falls into that gap between enterprise and webpage+, like, nearly all of it currently. That's exactly why I like using Laravel.."
PHP,3bmclk,hophacker,3,Wed Jul 1 01:36:54 2015 UTC,I am just curious: what would you consider an average project to be in your world?
PHP,3bmclk,jsanc623,2,Wed Jul 1 05:00:50 2015 UTC,I'm really not sure how I'd begin to answer that question..?
PHP,3bmclk,FiendishJ,1 point,Wed Jul 1 09:29:59 2015 UTC,You have 14 years of experience programming but you can't answer that question. OK.
PHP,3bmclk,sudocs,1 point,Wed Jul 1 14:33:43 2015 UTC,"More, actually.  I'm just not sure how you can ""average"" projects.  I've worked on projects ranging from 3-page wordpress websites handling 100's of hits a year to huge scale backend GIS systems written in C, and a ton of stuff in between."
PHP,3bmclk,thbt101,1 point,Wed Jul 1 14:40:35 2015 UTC,Developer with 8 years of experience across a whole plethora of languages/frameworks/stacks - no idea how to answer that question either.
PHP,3bmclk,NeuroXc,2,Wed Jul 1 19:15:16 2015 UTC,"You'd probably start by listing off the common functionality that you believe qualifies the project as being between simple and enterprise. Surely there are some commonalities that can be identified, otherwise it wouldn't be possible to make the original comment. I was/am genuinely curious what would be on that list."
PHP,3bmclk,n0xie,1 point,Wed Jul 1 22:06:14 2015 UTC,"3 mobile apps, 2 server architecture projects, 30+ production websites (laravel, wordpress, drupal, flask, go), 7 RESTful APIs (laravel, flask, scala, go), 10+ small games (c, python, scala). That's just what I can list off the top of my head.   Edit: Changed 1 mobile app to 3 (i built 2 POC apps for clients, and 1 that I have on the market)"
PHP,3bmclk,phpdevster,1 point,Wed Jul 1 23:17:51 2015 UTC,"I think what /u/hophacker fails to understand, is that the more experience you have, the harder it becomes to answer what is the ""average"" project.  Maybe /u/hophacker has no professional experience, and that's fine, but you need to understand that individual projects are so different and varied that it's very difficult to ""sum them up"" in any way.  As an aside - POC apps, or first iterations, are a great example of what laravel is good for."
PHP,3bmclk,lordofworms,1 point,Thu Jul 2 01:49:41 2015 UTC,"I totally agree, I hate when these types of discussions come up without anyone mentioning the size of the project, the size of the team, or the expected life span of the application. If you've only worked on small sites with maybe one other person at the same skill level that has maybe 5-10 pages and maybe 10k LoC you're going to have a significantly different perspective than someone who is working on a site with 100+ pages and 2+ million LoC with 20+ devs ranging from very junior to very senior."
PHP,3bmclk,vbaspcppguy,1 point,Tue Jun 30 17:21:05 2015 UTC,"I don't think there's a website size or complexity where you outgrow Laravel.  There are some very high traffic sophisticated sites that use it.  I think a better way to make the choice is on how worried you or the company are about being tied to a particular framework.  With something like Symfony, it's more of a collection of modules and you can choose whether or not to use certain parts.  Laravel is more cohesive, everything is designed to work together, but it's often trickier to use parts of it without using the whole thing.  When you use Laravel, you're very much creating a Laravel-centric development (which is good and bad depending on your perspective)."
PHP,3bmclk,ThePsion5,20,Wed Jul 1 03:46:04 2015 UTC,"Having used ZF1 and 2, Symfony, and Laravel, I feel that there's nothing wrong with choosing a framework based on its ease of use (so long as it's a stable framework, which Laravel is widely considered to be). When I started my current position, I inherited a few Zend Framework (1 and 2) apps that were nightmares to maintain. Now, we do all our new projects in Laravel and the maintenance is significantly easier.  Your colleague's arguments seem a bit dogmatic. Eloquent is a well-tested and stable ORM, and when you're writing your own application, you can definitely test your custom Eloquent models (Laravel 5.1's model factories make this even easier). Laravel is also significantly faster than Symfony or either version of Zend Framework (based on benchmarks), so his argument against ""slowing down your application"" isn't exactly true either. If his argument against ""global variables"" is referring to Facades, you are never required to use Facades in Laravel and can use dependency injection instead. It sounds like he's just stuck on Symfony and doesn't want to see the merits of another framework."
PHP,3bmclk,vbaspcppguy,10,Tue Jun 30 12:33:08 2015 UTC,"I feel most 'experienced' (whatever that means) developers don't consider Laravel itself to be poorly designed, but instead they question some of the practices that are promoted. Many of those (Facades/Global app/NonScoped Routing/ Eloquent) have been mentioned by others already. These in itself are not the problem: what can be a problem is that these are promoted as being good solutions without providing any of the context.   The same argument and debate can be seen for example in PHP core where the goto keyword is supported, but is considered bad practice to use, unless you have a very good reason: with great power comes great responsibility.  Any decent developer can build good maintainable code, regardless of the framework used. What sets a framework apart is how easy it is to make this happen. And this is precisely why experienced developers seem to dislike Laravel: they are cautious of some of the practices being used, which can be very detrimental to the maintainability of large(r) applications (the Facades being one of them).  And that's exactly the weak/strong point in this argument: most of the problems will only surface if the code becomes large(r) or more complex. Take the ActiveRecord pattern used by Eloquent for example: AR works fine for most CRUD based applications, but can be really problematic once the complexity of the application starts to grow."
PHP,3bmclk,SeerUD,1 point,Tue Jun 30 13:43:07 2015 UTC,"What sets a framework apart is how easy it is to make this happen. And this is precisely why experienced developers seem to dislike Laravel: they are cautious of some of the practices being used, which can be very detrimental to the maintainability of large(r) applications (the Facades being one of them).   Do you know how easy it is to inject the services underlying the facades, in Laravel?  Read this section: http://laravel.com/docs/5.1/facades#facade-class-reference  Then read this section: http://laravel.com/docs/5.1/container#introduction  (btw, this has existed since the 4.1 documentation - so it's been readily available for a while)  Done. Next complaint?"
PHP,3bmclk,thbt101,19,Wed Jul 1 18:15:58 2015 UTC,"There are a number of questionable things within Laravel that if you avoid you will save yourself some long term hassle...   Facades - prefer the injection of the underlying objects. Global helper functions - many added in Laravel 5, in place of facades (work the same way, resolve things out of the container and give you a convenient bit of syntactic sugar to do things - only problem is it ties you to the framework in ways which are painful to untangle) .. It looks like these were added to maintain terse syntax which looks great in demos but is not something you want to do in reality. They may look great, and are probably reasonably safe to use in framework specific code such as controllers, but they are all too simple use in the rest of your app. Again, prefer the injection of the underlying objects blade template injection - avoid this like the plague. There may be a handful of cases where this saves you some bother but the fact that you can just resolve anything and throw it into your template is pretty insane. I've already caught people in my team injecting repositories and querying the database via this... gross.   There are some other parts which people have mixed opinions on. Eloquent springs to mind. I personally think ActiveRecord is just fine for a many things - it is easy to conceptually reason about and gets the job done. You don't have to use it though, you have options. You can just use the query builder, or straight PDO. Or you can bring Doctrine along to the party. Eloquent is fairly optional, but you can get a lot milage out of it, especially for simple(r) apps. And most apps are fairly straight forward simple things.  Many people isolate their app from Eloquent by creating some first class domain object which wraps it up (referred to as a ""repository"", but not certain the term is correctly used... someone who is more terminology savvy than I will probably weigh in on this). This limits Eloquent's blast radius somewhat, allowing you to replace your persistence layer in a reasonably pain free way in the future.  Laravel can be put to good use and can be quite enjoyable to work with... but think beyond the hype and be smart about how you use it. My advice for all frameworks is to do your best to isolate your app from them as much as possible. Try and keep your ""real"" app code as agnostic about the framework as possible."
PHP,3bmclk,lordofworms,2,Tue Jun 30 13:34:52 2015 UTC,"Can you elaborate on the blade issue you listed, and what other template engines do different in that regard?"
PHP,3bmclk,vbaspcppguy,3,Tue Jun 30 16:29:04 2015 UTC,"Laravel will allow you to do in your blade templates in 5.1:  @inject('Some\Class\Instance', 'variableName')   This will automatically use the IoC container to instantiate the class and make it available in your template as $variableName. Typically, another framework would not provide a shortcut to the IoC and force you to use a controller to add the class in question to it's view-specific data."
PHP,3bmclk,phpdevster,1 point,Tue Jun 30 20:31:47 2015 UTC,"Oh... I see. I'm working on my first Laravel site atm, didn't even notice the docs for that. Thats just...wrong."
PHP,3bmclk,Schweppesale,1 point,Tue Jun 30 21:58:32 2015 UTC,"Laravel's @Inject directive uses service location, which is widely considered anti-pattern. On top of that, it makes debugging more difficult as you have more places where dependencies can appear. It's name alone is terrible, as it doesn't actually ""inject"", it just goes and get's whatever you tell it to, which is the exact opposite of injection. And on top of that, how the hell do you test your template then? You can unit test controllers, can you unit test your templates? Probably not. So then you're left with functional tests for this kind of thing (not that functional tests are bad, I just don't think they're meant for this kind of thing!)  Other template engines work just like Laravel does if you avoid using @Inject, you actually inject variables into the templates, and then pass them around in the templates. These usually come from a controller in frameworks like Laravel. The template gets what it's given, and can't just pick what it wants out of a container."
PHP,3bmclk,ThePsion5,2,Tue Jun 30 22:02:10 2015 UTC,"It's just a non-issue.  It's not like this is a central part of Blade templates.  It was just added in the most recent release, and maybe there is some situation that it makes sense.  I don't know, whatever, just don't use it if you don't like it."
PHP,3bmclk,Schweppesale,2,Wed Jul 1 03:53:05 2015 UTC,"Exactly.. but it's worth pointing out the dangers. My post at the top of this branch was enumerating the things that you should avoid because they are known to cause problems. The issue is that these very real risks associated with these strategies are often glossed over or hand waved by some in the community. Nobody's saying ""don't use Laravel because it forces you to use X""... we're saying ""If you use Laravel, avoid doing X"".  As an aside I use Laravel as my primary framework..both for work and side projects. So nobody's hating on anything here..."
PHP,3bmclk,ThePsion5,1 point,Wed Jul 1 04:21:11 2015 UTC,"Yeah, it just seems like a really bad plan all around. Even if you doing testing.  Edit: Even if you aren't doing testing."
PHP,3bmclk,Schweppesale,1 point,Tue Jun 30 23:03:34 2015 UTC,"how the hell do you test your template then?   Let's think about this....  Here's how you use it:  http://laravel.com/docs/5.1/blade#service-injection   The first argument passed to @inject is the name of the variable the service will be placed into   Knowing that, it means we can hydrate the view with the same variable name that's declared in '@inject', from the controller, to inject the data like normal. So the next question is, how do we disable the '@inject' behavior so it doesn't override the variable we're passing in?  This depends on what you mean by ""template"". Do you actually mean ""View""? If so, test the view like normal. Otherwise you have to compile the template, which means you need to use the BladeCompiler, which means now more of the framework is involved in the unit test. Since the framework is involved, you can replace the BladeCompiler with your own compiler since it adheres to an interface:  https://github.com/laravel/framework/blob/5.1/src/Illuminate/View/Compilers/BladeCompiler.php   Extend the BladeCompiler override the compileInject() method to return or echo anything Bind your modified compiler into the IoC in the Test Suite's setup Use View::make('....', $data) to return the compiled and executed template with the data you wanted to inject. Done.   Of course, you could just go ahead and construct the view manually or invoke the compiler directly. Up to you. Either way, it's easy as hell to unit test templates even if there is @inject in there."
PHP,3bmclk,ThePsion5,2,Wed Jul 1 18:46:56 2015 UTC,I've already caught people in my team injecting repositories and querying the database via this... gross.   I tend to avoid this myself but only out of personal preference.    What's wrong with injecting repositories into the view?
PHP,3bmclk,meandthebean,7,Tue Jun 30 20:13:08 2015 UTC,"Because your views should contain logic related to how data is rendered, and nothing more. Querying repositories is business logic, and they shouldn't be making that decision, just taking data (in a perfect world, only primitives, arrays, and/or simple objects with public properties) and rendering it in some form.  Calling repository methods should be the responsibility of domain-level services or (in the simplest cases) controllers, but definitely not views."
PHP,3bmclk,ThePsion5,2,Tue Jun 30 20:35:58 2015 UTC,"Of course, you're probably 100% correct in stating that business logic belongs in the controller.  I was just hoping to avoid refactoring both our controllers and views should project requirements change.  I found myself on stackoverflow the other day where someone had mentioned passing a specialized repository decorator into the view which appends all the necessary data on call; which struck me as an interesting appoach at the time since it may allow us to cut down on code duplication.    Then again nothing is stopping us from doing this in the controller so I guess the point is moot :P"
PHP,3bmclk,meandthebean,3,Tue Jun 30 20:58:01 2015 UTC,"My controllers are usually just an HTTP-specific wrapper for domain services anyway. For example, here's the biggest single controller method in one of my projects:  public function importMembersFromCsv(ImportMemberRequest $request) {     $file = $request->file('import_csv');     $results = $this->importer->importMembersFromCsv( $file->getPathname() );     $this->notifySuccess('Import completed successfully!');     return redirect()->route('members.import-form')->with('results', $results); }   Validation is handled in the request object via an injected domain service and the importer would also throw an exception if the file wasn't a CSV. $results is just a DTO with 4 getters for the number of attempts, successes, failures, and validation errors for the failed imports. This is the most complex piece of logic in the resulting view:  @foreach($results->errors() as $item => $errors)     @foreach($errors as $error)         <tr>             <th>{{is_numeric($item) ? $item+1 : $item }}</th>             <td>{{$error}}</td>         </tr>     @endforeach @endforeach   The is_numeric check is because the validation errors could use a custom error key, IE ""CSV Item #1"" instead of just a row number."
PHP,3bmclk,lordofworms,1 point,Wed Jul 1 04:19:10 2015 UTC,Just out of curiosity.  What if you where dealing with disjoint-set data structures and you needed to parse a deeply nested DTO?    Would you handle that within the view as well?  I realize that it's fairly common to pass DTOs into the view; I just don't think my controllers/views will be fun to look at either way.
PHP,3bmclk,Schweppesale,1 point,Wed Jul 1 04:35:24 2015 UTC,"If it was just a DTO that had a lot of nested data (e.g. Import Result -> array of errors -> array of errors for a single item -> a single error) I'd consider a view partial. For example, I could have a view partial that just renders the errors table with customizable header, ID attribute, etc, so I could do this:  @include('partials.error_table', ['errors' => $results->errors() ]);   If there's a more complex data structure, I believe it would be reasonable to use the controller for change the data structure into something the view can easily understand. Also, all of my DTOs have a toArray() method that converts it (and any nested DTOs) into a simple array. Either way, doing that in the controller means your views only care that the data it's getting implements ArrayAccess and/or Transversable, which is pretty flexible.  That being said, there are always cases where massaging the data into a form you like is going to be a painful task, but it's firmly the controller's (or at least a controller-level) responsibility."
PHP,3bmclk,lordofworms,1 point,Wed Jul 1 05:35:00 2015 UTC,Do you mind explaining a little more about how you populate and inject the ImportMemberRequest object? I like this idea but can't figure out how it's done.
PHP,3bmclk,thbt101,1 point,Wed Jul 1 19:02:46 2015 UTC,"Laravel provides a way to have requests that validate incoming data - all you have to do is create the request class and typehint it as a parameter for the controller method and it will validate it. For example, here's ImportMemberRequest source code: https://gist.github.com/thepsion5/f35d09ed9b5c8393671a  It will check the submitted form/query string data against the defined rules and automatically redirect back with an error message.   EDIT: More on Laravel's Validation component and validating via request classes"
PHP,3bmclk,lordofworms,1 point,Wed Jul 1 19:51:37 2015 UTC,Ah. I didn't realize this was a Laravel feature. Thanks!
PHP,3bmclk,SeerUD,1 point,Wed Jul 1 20:56:11 2015 UTC,"you're probably 100% correct in stating that business logic belongs in the controller.    This was sort of what I was suggesting you avoid when talking about making your application code framework agnostic. If you end up throwing your business logic into the controller, you limit your ability to reuse that business logic within your project and also in other projects (which may or may not be built using the same framework).  Instead (and incidentally this is something that the Laravel community has long advocated), it's preferable to place your business logic in objects that exist in a layer below the controllers. You can then either inject the necessary dependencies into the controller or use the more currently-in-vogue approach of dispatching commands. Your controllers then become little more than a thin veneer between the HTTP request and your 'real' application."
PHP,3bmclk,ThePsion5,1 point,Tue Jun 30 21:59:36 2015 UTC,"You can then either inject the necessary dependencies into the controller or use the more currently-in-vogue approach of dispatching commands.   On a sidenote - I really do not understand why Laravel 5.1 deprecated the commands namespacing convention in favor of ""jobs"".    edit:   This was sort of what I was suggesting you avoid when talking about making your application code framework agnostic. If you end up throwing your business logic into the controller, you limit your ability to reuse that business logic within your project and also in other projects   Would you consider repository decorators as suggested earlier to be an adequate solution in this case?"
PHP,3bmclk,ThePsion5,1 point,Tue Jun 30 23:14:50 2015 UTC,"On a sidenote - I really do not understand why Laravel 5.1 deprecated the commands namespacing convention in favor of ""jobs"".   We can speculate... Taylor has said that it's because he sees them more as being a replacement for ""queue jobs""... There also seems to be an undertone of a distaste for the use of a command dto and a dedicated command handler. That has been completely removed from all the docs etc. It still works by the favoured practice is now to use self handling commands which I personally find less flexible and a bit of a smell. All that aside, nothing stops you from continuing to call them commands and continuing to use them in the way that they were defined in Laravel 5.0 - as best I can tell there is no suggestion that this behaviour will be deprecated in the near future.  And there are other options - you could just build your own command bus if it did disappear..they are not terribly difficult things to make.   Would you consider repository decorators as suggested earlier to be an adequate solution in this case?   I guess? not sure what you mean by repository ""decorators"". Basically I just build my apps so that each class has a single responsibility etc etc. I have a services namespace which deals with communication out to areas elsewhere in the stack (mail, web services, report generators, etc etc), a Repositories namespace which deals with data retrieval, a Commands namespace which deals with actions which can be taken (AcquireCustomer, PurchaseProduct, etc etc)... Other utilities find their way into their own namespaces etc.. I wouldn't suggest using a repository as a dumping ground for ALL your business logic any more than I'd suggest using controllers for the same. Organise the code however it makes sense for your project, and make sure that you have clearly defined responsibilities for each class, grouped up into like-collections of responsibilities for each namespace."
PHP,3bmclk,thbt101,1 point,Wed Jul 1 01:07:08 2015 UTC,"There are situations where it makes a lot of sense to separate some ""commands"" from your controllers, especially if the command is something that you'll want to execute in other places in your project.  But I've seen some developers who take it to an extreme and insist on doing no business logic at all in their controllers, so they build a whole separate layer, really for no reason.  Their separate layer does all the same stuff they could have simply done in their controllers, but now every tiny action is parsed out into it's own separate class and the app has grown into a monster spanning a hundred files/classes.    But they're convinced this will make it easier to maintain because they can ""easily"" swap out their controller... or they could ""replace their whole web front end with a desktop app or console app""... as if anyone ever does that with a web app, and as if they wouldn't have to re-do everything anyway if they really did that."
PHP,3bmclk,lordofworms,2,Wed Jul 1 04:02:15 2015 UTC,"But I've seen some developers who take it to an extreme and insist on doing no business logic at all in their controllers, so they build a whole separate layer, really for no reason.    Commands are one way to do it, but you absolutely should extract all your business logic from your controllers. It's not the controllers job to (for example) send an email, or store/retrieve information from a database, or to calculate something in accordance with some business rule. Sure it's fine for simple things but it breaks down as soon as your app becomes ""non-trivial"".. not even large or complex, just ""non trivial"". And given the cost of (re)factoring so that your business logic lives in self contained classes is negligible there really is no reason not to do it that I can see.   spanning a hundred files/classes.   I believe you are worried about optimising the wrong thing if you are concerned with the number of files you are creating...Maybe it's just me..but I really don't care. My IDE is more than capable of finding what I want and it has no impact on performance. shrug.   But they're convinced this will make it easier to maintain because they can ""easily"" swap out their controller.   Even swapping out your controller is not something you think you'll ever do, being able to share logic around other parts of your application or in other applications is immensely useful. Any time you have thought of reaching for a controller from within another controller, it's a sign that what you need should be off in it's own class.  I'm willing to be convinced, but nothing I've heard thus far suggests to me that putting any of my real business logic in the controllers is a good idea..."
PHP,3bmclk,thbt101,1 point,Wed Jul 1 04:14:01 2015 UTC,Why oh why have you been down-voted for this. This is spot on.
PHP,3bmclk,lordofworms,3,Tue Jun 30 22:03:00 2015 UTC,"Presumably I'm being downvoted by people who are now staring at their overly-complicated views templates, brows furrowed with concern."
PHP,3bmclk,ralfTn,5,Wed Jul 1 03:47:16 2015 UTC,"I have several large L5 projects I would consider well-engineered, but unfortunately upper management would have a heart attack if I shared their source code. :/"
PHP,3bmclk,dracony,1 point,Tue Jun 30 17:50:01 2015 UTC,"The Laracasts are great for learning the fundamentals.  I'm not sure of a well-engineered complete project, but they're probably out there.  Are you sure you want to use Doctrine?  Unless you're just dead-set on following domain driven design type dogma, Eloquent is just plain easier to work with and to maintain."
PHP,3bmclk,thbt101,3,Wed Jul 1 04:37:25 2015 UTC,"domain driven design type dogma   Do we have to call it ""dogma""? It's not dogma..anymore than any other mode of work is ""dogma"". It's a technique which is useful under many circumstances."
PHP,3bmclk,dracony,0,Wed Jul 1 04:05:05 2015 UTC,"I definitely agree that it's useful under many circumstances.  I think in a lot of ways it's a great innovation and it allows for better code reuse, more adaptable systems, etc.    But so many people use it blindly for every project regardless of the scale and requirements of the project.  That's when I say it's just a dogma.  There is a big trade-off in that really following it thoroughly adds a great deal of complexity and added layers of abstraction that are more difficult to develop, debug, and maintain.  As long as developers understand the trade-offs and use it only when it actually makes sense, then great, use it when the complexity of the problem requires it."
PHP,3bmclk,erik240,3,Wed Jul 1 04:22:35 2015 UTC,"But so many people use it blindly for every project regardless of the scale and requirements of the project.    I don't think this is the case. At least it's not in my experience. Sure it's popular to say things like this right now, especially in the Laravel community, but the premise is based on a very uncharitable view of how people approach projects at best, and at worst is a downright fabrication.   That's when I say it's just a dogma.   But it's not dogma...  a principle or set of principles laid down by an authority as incontrovertibly true.  Literally no one is claiming to be an authority or stating that DDD is the ""one true way"". At all. Even a little bit. It simply isn't happening."
PHP,3bmclk,dracony,6,Wed Jul 1 04:55:27 2015 UTC,"""but when you will need to rewrite your code in one years time don't come to seek my help."" That's actually called being a dick. No matter the framework you use, you should be able to write maintainable clean code.  you might want to use doctrine instead of eloquent though, and twig instead of blade, and use DI instead of facades, Oh wait that's Symfony. (just kidding, use whatever makes you happy, you and the ones that have to maintain it after you)"
PHP,3bmclk,mgkimsal,9,Wed Jul 1 05:33:35 2015 UTC,"Simple answer: it is designed to fit the widest range of people and not everyone is a senior developer.  So it really depends on the usecase you are in for. For example you say that Eloquent is not testabe, but would you actually be unti testing your models? A lot of people use behavioral testing like Behat and for such tests the ORM type doesn't matter at all.   Laravel is maybe fast to develop and easy to understand but its only because it is poorly designed   Well not poorly, just focused on a different set of priorities, ease of use being the most important one. So complaining about laravel not having good architecture is like saying that a tractor is a bad racing car. It's just a different niche.  The only realy big problem is security and stability imho, e.g. we allremember the time this happened: http://www.reddit.com/r/PHP/comments/2i95rx (after an update it would delete your ENTIRE TABLE from the database)"
PHP,3bmclk,thbt101,3,Tue Jun 30 20:00:24 2015 UTC,"The only realy big problem is security and stability imho, e.g. we allremember the time this happened   Ok, that was one hell of a gawd-awful holy shit that's bad situation if you accidentally used that one method wrong.  But I wouldn't forever condemn the whole framework as forever being one with ""really big security and stability"" problems because of that one issue in 4.2 that was quickly patched.  That's actually the only data-loss bug I can think of that I've heard of in Laravel.    And for security, it's actually pretty great.  I can't think of any significant security issues that have come up, or at least not anything that wasn't fixed right away.  It does a really good job of making it easy for even bad PHP developers to follow best practices for security (encrypting cookies, built-in CSRF protection, best practice salted/encrypted password storage, escaping template output by default, etc.)."
PHP,3bmclk,pmjones,1 point,Tue Jun 30 14:41:38 2015 UTC,"There was also a security issue where the authentication was handled using encrypted user ID in the cookie. A person has demonstrated it to be extremely vulnerable to all kinds of attacks, it was ignored.  Then a few months after that I brought attention to it again and got downvoted to hell. And only after more of my bitching it got fixed, but its is still not 100% ""proper"". Random login tokens should have a many-to-one relation to a user, not one-to-one"
PHP,3bmclk,thbt101,2,Tue Jun 30 23:45:04 2015 UTC,Why would you think that reset tokens should have a many-to-one relation to a user?
PHP,3bmclk,pmjones,1 point,Tue Jun 30 23:55:16 2015 UTC,"Not reset tokens. ""Remember me"" tokens"
PHP,3bmclk,JordanCallumA,5,Wed Jul 1 14:04:48 2015 UTC,"There's a lot of benefit to everyone on a team using the same tools.  In a team setting, if you have to use symfony, suck it up, or make a larger case for laravel.    More to the point, though, if done 'properly', most of your business logic should be in relatively portable objects anyway, and the framework is more a way to glue them together.  If your work colleague has loads of symfony-depencies in core business logic, I'd say his code isn't any better than yours.    If you focus on testable components to describe your project's logic, 'rewriting' to use another framework, or upgrading to the next symfony or laravel or whatever shouldn't be a difficult task.  FWIW, I'm not sure what's ""not testable"" about active record.  Perhaps not 'unit testable' in the strict sense of the term, but I certainly run test a test suite against code that uses an active-record based library, and the tests run just fine."
PHP,3bmclk,pmjones,6,Wed Jul 1 14:51:26 2015 UTC,"I've been a PHP dev since the late 90s.  It took me a while to come around to the Laravel way of doing things (originally I was looking at Symfony and Yii), but I loved it once I understood it.  It does so much to make coding easy and fun, and it doesn't have the limitations that some people think it does.   -uses active record   If you prefer a Data Mapper, you can use Doctrine or others with Laravel which some people do prefer.  It doesn't force you to use Eloquent.  Personally I vastly prefer the simplicity of using an Active Record (Eloquent) model, but domain programming purists don't like that it breaks some of the rules of that methodology.   active record which apparently is not testable,    You can unit test Eloquent, but it's a different process than with a Data Mapper.     and extends Eloquent class, meaning you can't inherit and make higher abstraction level classes   That doesn't make any sense.  You always inherit it and make higher abstraction classes when using it.  I'm not sure what they mean by that.   uses global variables that will slow down application   <sigh>  That's everyone's first criticism of Laravel and it's based on a misunderstanding.  It appears to use static classes, but those are what Laravel calls ""facades"" and they're actually dynamically resolved, but give you the simplicity of using them as if they were static classes. Facades are entirely optional, and some devs prefer techniques like dependency injection which is also available (more work, but more flexibility)."
PHP,3bmclk,JordanCallumA,5,Tue Jun 30 17:32:28 2015 UTC,"It appears to use static classes, but those are what Laravel calls ""facades"" and they're actually dynamically resolved   Not this again. The ""facades"" are not facades, they are proxies; and yes, you are making static calls when you use them. That the result of the static call is resolved out of a container does not change either of those facts.  Thus, they are static proxies to a service locator. That does not make the misnamed ""facades"" more or less useful, but it should provide clarity about how and when to use them."
PHP,3bmclk,pmjones,5,Tue Jun 30 21:35:36 2015 UTC,"The word facade in Laravel's facades does not refer to the ""facade pattern"" in OOP.  He probably would have named it something different if he knew some people would complain about that, but the word facade was an English word long before the ""facade pattern"" in OOP.  Yes, they are a service locator.  If you don't like them, you can absolutely use dependency injection or other resolving methods if you prefer.  Laravel also makes that easy and it supports that style of development (especially in Laravel 5).  If anything, the Laravel documentation now seems to encourage dependency injection over facades.    Personally I usually prefer Laravel facades because I put simplicity of design at a higher priority than strictly following software design dogmas for the projects I'm currently working on.  But the choice is yours, if you don't like them, don't use them, but there's no point in complaining that they exist as an option."
PHP,3bmclk,JordanCallumA,5,Tue Jun 30 22:51:52 2015 UTC,"The word facade in Laravel's facades does not refer to the ""facade pattern"" in OOP.   Doesn't matter; using the word ""facade"" in an OOP context is enough to put paid to that argument. Been over this a thousand times, and the same wrong arguments keep cropping up. It's misnamed, period-dot."
PHP,3bmclk,pmjones,1 point,Tue Jun 30 23:13:23 2015 UTC,"I'm sure there's poorly named areas of Symfony too. You're not actually making any argument other than it being misnamed and using static calls. Both of which are irrelevant.   The name doesn't matter to the end user who only needs to know what a facade in the context of Laravel is. Facade as mentioned by thbt101 is a standard word which makes perfect sense in Laravel's context. The end developer doesn't care if it conforms to the facade pattern.  Also, static calls really aren't frowned upon all that much. They're just not advised for 9/10 situations. As a way to alias an underlying class, they work fine."
PHP,3bmclk,workerBeej,2,Tue Jun 30 23:56:10 2015 UTC,"You're not actually making any argument other than it being misnamed and using static calls.   You are correct; that is in fact the only argument I'm making, and it is only in response to two widely repeated misstatements of fact: (1) that these are somehow not static calls, and (2) that they are somehow ""facades."" They are static calls, and they are not facades."
PHP,3bmclk,thbt101,1 point,Wed Jul 1 07:40:08 2015 UTC,Explain exactly how static calls in this context cause any problem. And not everything has to follow a design pattern.
PHP,3bmclk,workerBeej,1 point,Wed Jul 1 13:39:53 2015 UTC,"Explain exactly how static calls in this context cause any problem.   I don't say that they do or do not cause problems. I say that they are in fact static calls; stating otherwise is counter-factual.   And not everything has to follow a design pattern.   And if you're going choose the name of a design pattern for something, it should follow that design pattern."
PHP,3bmclk,mellett68,1 point,Wed Jul 1 22:50:30 2015 UTC,"What do you suggest it be called instead. And my point stands that what does it matter if they are or are not static calls. The underlying class being aliased isn't being called statically, only the facade."
PHP,3bmclk,btcMike,2,Wed Jul 1 23:38:41 2015 UTC,"What do you suggest it be called instead.   Heh; I had originally suggested ""surrogate"" as a synonym of ""proxy"", and sent a completely backwards-compatible PR for it, but even just ""proxy"" would be fine. That's what it is, after all.   The underlying class being aliased isn't being called statically   Correct, but the underlying class is not what you're calling; you're making a static call to a proxy."
PHP,3bmclk,utotwel,1 point,Wed Jul 1 23:44:06 2015 UTC,"How do you, personally, unit test with Eloquent? I've got a couple of Laravel projects on the go at the minute, and it's driving me mad. I can do functional tests just fine, I can do acceptance tests just fine, but anything going anywhere need Eloquent I just can't unit test. PHPUnit's built in mocks have a real hard time of it because of all the magic and using Mockery I always seem to run into blocking trouble. It ends up that I either write a massive accessor to abstract all the statics out, and mock that out instead, or spend three times as long frustratedly getting a test cobbled together as I do to write the code. For one project, the previous devs just did everything with functional tests, but that means that to run the test suite takes a full minute. It's very, very tedious. I would usually have core unit tests run on save in about 2-5 seconds, then functional and acceptance on commit, but there are no unit tests! In the other project I was in from the start, I've abstracted out the Eloquent bindings as above and can unit test, but at a huge cost of code bloat and complexity. Eloquent is making me very sad atm, so a real solution would make my day."
PHP,3bmclk,SeerUD,1 point,Thu Jul 2 00:46:49 2015 UTC,"Personally, I went the direction of using a test database and I let Eloquent create records in it.  I could try to mock out the database interactions, but so many of the issues I want to test for are things that would only show up if I'm actually accessing an actual database.  But I also don't use test driven development, so I don't need my unit tests to run exceptionally fast (I think TDD is usually a bad way to design software because of the same sort of reasons that DHH argues, but that's a separate debate).  So someone else who does more of that type of fast unit test development might have a better answer for you (maybe post in /r/laravel or StackExchange?)."
PHP,3bmclk,utotwel,2,Wed Jul 1 11:31:19 2015 UTC,"OK, so functional testing. It works, but it's not fast enough for TDD in this case.  Personally, I'm on the fence about TDD. Mostly I spike, then test, but if I've a particularly complex logic issue or an information web I find it hard to hold in my head, it's TDD FTW. In those cases, a unit test suite is best-by-far. Having to create a way to do it when I really, really need it is a very painful distraction!"
PHP,3bmclk,SeerUD,1 point,Wed Jul 1 15:43:36 2015 UTC,"My experience of this coming from Rails is that the tooling around testing using fixtures and factories in Laravel is lacking to say the least.  It makes for a noticable seam between where the tested framework (Eloquent in this case) ends and my application begins.  In terms of TDD it's not always the goal, but being notified of regressions or breaking changes can be useful when they happen, and not later on when I remember to run the tests."
PHP,3bmclk,utotwel,8,Thu Jul 2 12:39:11 2015 UTC,"Architecturally sounds or not Laravel makes me 5 times more productive.  I finish my project faster and get paid faster.  The neck beard programmers can go and invent the next architecturally sounds framework and looks like Java, I'll be spending time with my kids."
PHP,3bmclk,glasscalendar,36,Wed Jul 1 18:13:10 2015 UTC,"Strong Symfony fans have a very hard time accepting Laravel as a legitimate framework. I promise you - you will constantly fight against this type of programmer. They are not satisfied with simple solutions... everything must be complex and meticulously over-engineered.  You said it yourself, you miss Laravel - you enjoyed using Laravel more. This is your life. Do what you enjoy, not what some opinionated programmer tells you is ""better""."
PHP,3bmclk,utotwel,9,Wed Jul 1 08:02:15 2015 UTC,"I genuinely don't understand where the idea that Symfony is so complex comes from. It's really not that complicated at all. There are things wrong with Symfony, like there are things wrong with Laravel, I just think the things wrong with Laravel are way more obvious, and can affect you more directly.  Eloquent, facades, and service location in views are the first things that come to mind when I think of things wrong with Laravel."
PHP,3bmclk,SeerUD,4,Tue Jun 30 14:57:47 2015 UTC,Literally nobody is doing service location in views. It's just a feature that was ported over from .NET as an experiment. Go read the authentication documentation for Laravel and go read the same documentation for Symfony. It's not even close. Symfony themselves fully acknowledge this hence their DX initiative.   Eloquent is amazing. I consider Doctrine to be one of the more obtuse pieces of software I have seen. It's all personal preference.
PHP,3bmclk,lordofworms,7,Tue Jun 30 22:06:38 2015 UTC,"Symfony 2 was the first PHP framework I learnt. Authentication and all. Their documentation was fine, even with my inexperience. Perhaps Laravel is easier to learn, I'm simply stating that Symfony is not difficult to learn. The community around it is huge, there are plenty of great bundles, plenty of answered questions on stack overflow.  As for Eloquent vs. Doctrine. Just do a quick Google around ""active record vs. data mapper"". Eloquent appears to be; quick, simple, but it violates SRP and couples persistence logic with business logic. Doctrine is more complex, but it doesn't violate SRP. Doctrine is very flexible, and very well written. SOLID exists for a reason. Perhaps the issues that using active record over data mapper causes don't become apparent until you built more complex applications - which Symfony lends itself to easily managing by providing a solid architecture to build upon.  Also, ""Literally nobody is doing service location in views."", people will be using it. If it's there, it's quite likely it's being used. Especially as it's an easy way out of doing things properly (like the kind of route new PHP developers may end up taking)."
PHP,3bmclk,SeerUD,4,Tue Jun 30 22:08:10 2015 UTC,I strongly encourage you to listen to DHH's interview on Full Stack Radio on this topic.
PHP,3bmclk,dave1010,4,Tue Jun 30 22:23:30 2015 UTC,"""Because SRP.   Because SRP.   Because SRP.   Because SRP. ""  (I literally just listened to that episode of the Laravel Podcast and then I come on and see this. I think you win all the internets here)"
PHP,3bmclk,ceejayoz,4,Tue Jun 30 23:44:33 2015 UTC,"Hahaha, so true."
PHP,3bmclk,utotwel,1 point,Wed Jul 1 03:09:29 2015 UTC,"Is SRP not a valid argument? Does it not help to produce clean, testable code?"
PHP,3bmclk,adamwathan,3,Wed Jul 1 03:41:21 2015 UTC,"SRP is a valid argument. But you shouldn't reason about it in a circular fashion. ""SRP violations are bad because they violate SRP"" is a common mode of argument amongst less experienced devs. Provide a concrete example as to how the violation impacts a particular problem being solved and you are likely to get a meaningful debate. But be prepared for someone to point out how the violation does not impact them. For example, eloquent is a big SRP violation but its violation does not greatly impact my own code. I can sufficiently isolate my own objects to minimise the impact. This is a trade off I personally find acceptable for a number of projects. Violated SRP? Sure. Care factor? Often (but not always) very low."
PHP,3bmclk,jimdoescode,3,Wed Jul 1 07:19:22 2015 UTC,I wholeheartedly agree with you there.
PHP,3bmclk,Spartan-S63,-2,Wed Jul 1 08:11:47 2015 UTC,currently does not greatly impact my own code   FTFY
PHP,3bmclk,khamer,2,Wed Jul 1 09:33:08 2015 UTC,"I'd imagine there's an implicit ""nor is it likely to in the reasonably near future""."
PHP,3bmclk,AlpineCoder,1 point,Wed Jul 1 12:26:26 2015 UTC,"Hahaha, so true."
PHP,3bmclk,utotwel,2,Wed Jul 1 18:41:12 2015 UTC,Link: http://fullstackradio.com/episodes/9/
PHP,3bmclk,AlpineCoder,9,Wed Jul 1 03:41:28 2015 UTC,"Often business requirements prevent developers from doing what they enjoy. We aren't all working for ourselves, many of us have to answer to someone higher up who may not know what they're doing."
PHP,3bmclk,utotwel,2,Wed Jul 1 13:35:28 2015 UTC,"In an ideal world, developers would walk away from that kind of management. Those higher up that don't know anything technical should stay out of technical issues. Obviously they should know what's going on and understand things at a basic level, but they should never impose technical decisions because it's completely out of their realm of understanding."
PHP,3bmclk,aequasi08,3,Tue Jun 30 16:46:36 2015 UTC,"It doesn't have to be shortsighted. Even just knowing that code being written needs to be maintained and extended by numerous other developers, it often makes the most sense to find a common framework or set of libraries to use (whether that's Symfony or Laravel.)"
PHP,3bmclk,AlpineCoder,4,Tue Jun 30 20:05:26 2015 UTC,"Strong Symfony fans have a very hard time accepting Laravel as a legitimate framework. I promise you - you will constantly fight against this type of programmer.   I don't know if I'm a ""strong Symfony fan"", but I've used it on lots of projects. I think the prevailing attitude among many devs on the enterprise / large project end of the spectrum is that Laravel is an entirely legitimate framework, but it isn't clear exactly what type of project it's ideally suited for.  Many of the projects I personally run into are either medium / large (where many choose Symfony exactly because of it's flexibility / ""enterpriseyness"" / complexity) or small enough that a framework's benefit is very limited over direct use of packages / custom glue code.  That said, I think we can all agree that no single framework (or lack thereof) is ideal for all types of projects, and anyone who says otherwise is probably either not very knowledgeable or is selling something."
PHP,3bmclk,utotwel,6,Tue Jun 30 23:21:00 2015 UTC,"The idea that Laravel is not suited for ""large"" projects it primarily something that echoes around the Symfony developer community, and it may have been a valid opinion 4 years ago, but it's not anymore.  In fact, Laravel has quite a few features out of the box that many would consider very enterprise such as job queues and command buses, and of course was the first major full-stack framework to implement the new middleware stuff people are excited about.  I think if some Symfony developers would really give it a good shot, they would find it works fine for large projects - just as well as Symfony at least. Of course, it still might not be their cup of tea, but I don't think it will be because they feel it is only suited for smaller projects."
PHP,3bmclk,SeerUD,16,Tue Jun 30 18:33:16 2015 UTC,"In fact, Laravel has quite a few features out of the box that many would consider very enterprise   Enterprise people care about things like predictable release cycles, LTS releases and minimizing breaking changes on point releases. They care much more about the practices a framework encourages when you throw 15 or 20 devs of various experience levels at it than shiny new features (especially ones where we'll probably already have existing or preferred internal implementations).   Granted, Laravel has made some progress as of late in these areas, but don't act like the opinion that it may be less suitable than other frameworks for enterprise products is entirely unfounded and / or only based on blind bias, because I assure you that's not the case (as someone who's done several ""state of framework"" assessments / recommendations for major projects that included Laravel over the past few years)."
PHP,3bmclk,utotwel,1 point,Tue Jun 30 18:40:29 2015 UTC,"Laravel now has predictable release cycles (6 months), LTS, and typically requires less than 1 day to upgrade. The upgrade to 5.0 to 5.1 was 15 minutes. Of course, I don't expect you to be satisfied by these things. :)"
PHP,3bmclk,erik240,2,Tue Jun 30 19:02:40 2015 UTC,"Granted, Laravel has made some progress as of late in these areas"
PHP,3bmclk,AlpineCoder,0,Tue Jun 30 19:26:24 2015 UTC,"Laravel now has...   Yep, it's too bad you were so late to the game with it."
PHP,3bmclk,phpdevster,6,Tue Jun 30 20:20:42 2015 UTC,"Like I said, I don't expect anything I say here to please anyone. :)  However, I can give some decent explanation as to why Laravel just received LTS. Symfony releases an LTS every two years. It's unlikely we would adopt an LTS if the underlying Symfony Http component we use heavily wasn't also under LTS. Two years ago, it was not as obvious that Laravel would be as popular as it is today, so LTS just wasn't on the radar.  Now that Laravel is much more popular than it was two years ago, the recent release of Symfony 2.7 LTS fit nicely with us introducing our own LTS."
PHP,3bmclk,AlpineCoder,1 point,Tue Jun 30 20:20:32 2015 UTC,"I agree with this actually. It's totally understandable. Perhaps it could have come sooner, but it is good for Laravel, and a step in the right direction. However, /u/AlpineCoder has a good point here. Frameworks like Symfony are more ""enterprisey"", and they have features (like the bundle system) which really help when writing large applications.  I'll also take something from something you said in reply to me elsewhere in this thread as evidence to why Laravel doesn't make the cut vs. Symfony for enterprise applications, ""Literally nobody is doing service location in views. It's just a feature that was ported over from .NET as an experiment"". Experiments don't really lend themselves to enterprise applications.  If I want to make a small application, I'll use a micro-framework, maybe Lumen will make the cut, in the past I've used Slim personally. If I want to make a medium-sized application, I'll use Symfony. If I want to make a large-scale application, I'll either use Symfony, or another framework in a more suitable language depending on the project. This is what /u/AlpineCoder is referring to when he says ""Laravel is an entirely legitimate framework, but it isn't clear exactly what type of project it's ideally suited for"", and many people have this issue.  Symfony follows more ""enterprisey"" conventions and best practices like adhering to SOLID principles and Laravel doesn't in many places."
PHP,3bmclk,Mygaming,7,Tue Jun 30 20:37:57 2015 UTC,"I can tell you have seriously never used Laravel because you keep saying stuff about bundles, and Laravel service providers are basically the exact same thing. That tells me you have never really used Laravel for anything serious."
PHP,3bmclk,orrd,1 point,Tue Jun 30 22:38:24 2015 UTC,"I've used both Laravel and Symfony but neither extensively -- I've just looked at the documentation for a service provider and if its the same as a bundle it would serve Laravel to have better examples in the documentation.  The strength of a Symfony2 bundle is its an app on its own. It has its own routes, controllers, models, config (like services.yml)   [ I should note that I actually prefer Laravel but that doesn't mean I think its perfect ]  The laravel docs don't seem clear on how to get similar results."
PHP,3bmclk,SomeRandomBuddy,-1,Tue Jun 30 23:45:45 2015 UTC,"Keep searching for that true Scotsman, you'll find him some day."
PHP,3bmclk,orrd,1 point,Wed Jul 1 14:01:05 2015 UTC,"They care much more about the practices a framework encourages when you throw 15 or 20 devs of various experience levels at it than shiny new features (especially ones where we'll probably already have existing or preferred internal implementations).   A team that large should have a tech lead who is responsible for establishing standards and best practices - no framework, or tool, can guarantee a consistent ""appropriate"" usage. Also, I wouldn't exactly consider Symfony's outright abuse of annotations ""best practice""."
PHP,3bmclk,hophacker,1 point,Wed Jul 1 13:32:56 2015 UTC,"I agree with both of your points, but I'm not sure how they're related to what I posted / you quoted."
PHP,3bmclk,utotwel,1 point,Wed Jul 1 18:20:44 2015 UTC,I do believe my post from last year sums up everything in this thread quite nicely.
PHP,3bmclk,youtubefactsbot,1 point,Wed Jul 1 19:49:09 2015 UTC,"Many of the projects I personally run into are either medium / large (where many choose Symfony exactly because of it's flexibility / ""enterpriseyness"" / complexity)   The line is really getting blurred as Laravel evolves.  A lot of the ""flexibility"" concern is no longer an issue now that Laravel lets you use dependency injection anywhere.  I don't really know of an area where it would limit you as far as this kind of thing.  If anything, one thing about Laravel that could be a concern that I haven't heard mentioned so much is that it's not as easy to use parts of Laravel as stand-alone modules like you can with Symfony.  If you have an existing project and you want to add Symfony routing, or Doctrine, or Twig, that's easy to do.  But most of Laravel is tied together and works together.  You can use parts of Symfony without it being a Symfony app (and you can use parts of Symfony on your Laravel app), but you can't add parts of Laravel to an existing non-Laravel app and expect it to work (in most cases)."
PHP,3bmclk,davedevelopment,0,Wed Jul 1 03:26:39 2015 UTC,"Note to OP - this advice is a double-edged blade. Doing what you ""enjoy"" is certainly not always a good idea. And also, just because something is over-engineered, it doesn't make it bad. Note: Not a symfony fan myself (or laravel for that matter)"
PHP,3bmclk,s74rx,1 point,Tue Jun 30 21:54:57 2015 UTC,"I think a lot of it does come down to that.  I've found that programmers that prefer strictly following particular dogmas, tend to find things not to like about Laravel.    There are aspects of Laravel that don't quite perfectly follow domain-driven design, or the single responsibility principle, etc.  But you know what, whenever it breaks one of these ""rules"", it's because there is a simpler more eloquent way to do things.  And it's not done out of ignorance.  Taylor's own book ""From Apprentice To Artisan"" is mostly about SOLID principles, but he's smart enough to know when to break the ""rules"" if it means creating a better solution.  But there are many academic developers who prefer strict adherence to a set of programming dogmas, even if it makes everything vastly more complicated, and they will find things to fault Laravel and most software.  Meanwhile, the rest of us just want to write apps that perform well and are easy to create and maintain.  And Laravel is perfect for that."
PHP,3bmclk,brutnus,-8,Tue Jun 30 17:51:50 2015 UTC,"Yes, then you can call yourself a ""web artisan"" and blissfully ignore the advice of your colleagues watching Laravel re-implement the same mistakes of previous frameworks that have evolved out of those problems. Then when Laravel grows up out of them itself, there will be something newer and shinier to take it's place and it won't be cool anymore."
PHP,3bmclk,just_give_me_a_name,8,Tue Jun 30 22:05:22 2015 UTC,https://www.youtube.com/watch?v=MX5cJ2GqzFw
PHP,3bmclk,pan069,3,Tue Jun 30 18:05:49 2015 UTC,"I always tell the Truth, Even when I Lie - Scarface [0:51]  Karena Figueira in Music  2,189 views since Apr 2014   bot info"
PHP,3bmclk,utotwel,8,Tue Jun 30 18:17:12 2015 UTC,"Not all experienced developers consider Laravel poorly designed. All of the frameworks have pros and cons, shipping with an Active Record ORM (and integrations to go with it) doesn't make a framework poorly designed."
PHP,3bmclk,pan069,3,Tue Jun 30 18:17:33 2015 UTC,"How to rewrite code is not based on which framework you chose, but how you coded in first place.   A framework provides you with an architecture or schematics based on which you will build your application additionally sometimes it comes with several libraries and out of the box components that makes a life a developer much easier. That's it."
PHP,3bmclk,utotwel,3,Tue Jun 30 12:59:26 2015 UTC,"I do like Laravel, and use it for many projects. But I also feel like the PHP community is getting swept away by ""Laravel"" fever, probably because to date, no framework has made a concerted effort to make PHP look ""prettier"". The truth is that Zend and Symfony are probably better for large scale corporate projects, but many developers find them brutal to work with because they produce ugly code. Laravel attempted to solve this problem, and actually did it relatively well through (questionnable?) features like facades and global helpers.  With that said, I have a number of problems with the framework:   Upgrades. I'm really hoping Laravel 5 is the last ""major"" upgrade for a while, because I truly want to use Laravel for some projects, specifically ones that require RESTful APIs. The problem is that over the last 2 years I had to stop using Laravel for corporate projects because they kept upgrading the framework. Don't get me wrong, upgrading is fine and required to keep up with the times, but a ""laravel"" style upgrade meant that from version to version it felt like a brand new framework every time! And they were releasing upgrades way too often. It was becoming ridiculous and I couldn't justify using it anymore. The framework felt ""unfinished"". Eloquent. I really dislike eloquent. Yes it is pretty to look at and work with, but it is also a memory hog and a nightmare for larger databases. Now, obviously you don't need to use eloquent, but it still is promoted as one of the key benefits of the framework, and it is NOT a realistic solution for larger of projects. Pretentiousness. A somewhat minor thing, but one that bothers me personally. The way Taylor names and brands features is pretentious. Names like ""Artisan"" and ""Eloquent"", or even worse, marketing copy like ""An amazing ORM"" or ""Modern toolkit. Pinch of magic."" Come on, man, get over yourself! Not to mention that Taylor is a bit of a jerk with his community when they don't agree with him or criticize him. I get the feeling that the fame of this framework is getting to his head and he's starting to think he is a godsend to the PHP community. That bothers me a little, not sure why.   Anyway, that's my two-cents."
PHP,3bmclk,robonubbins,4,Tue Jun 30 11:50:47 2015 UTC,IMO Laravel is the meat and potatoes of php. It can be used for 4/5 of the projects and works well enough out of the box. Sometimes meat and potatoes is all you need.
PHP,3bmclk,pan069,5,Sun Jul 5 23:49:22 2015 UTC,There's nothing wrong with choosing a well supported framework and running with it.
PHP,3bmclk,tostilocos,12,Tue Jun 30 16:10:20 2015 UTC,"To me it is the difference between building websites (Laravel) vs building web applications (Symfony 2/Zend Framework 2).  In a typical website everything can be handled in the web-tier, i.e. web framework, whereas with a typical web application the web-tier is normally a smaller (and less important) part in a larger piece. I.e. when I build a website I think first and foremost about the pages (the stuff a user ""sees"") whereas when I build an application I first think about the domain objects and business logic and the web part follows much later.  To me Symfony 2 and Zend Framework 2 are much easier to add (or integrate with) a plain PHP business domain with."
PHP,3bmclk,adrianmiu,16,Tue Jun 30 11:40:50 2015 UTC,I'm genuinely curious: have you ever built a complete Laravel project yourself? What in particular are you finding hard about building a nice domain layer? You can create whatever directory structure you want within app/?
PHP,3bmclk,thbt101,-1,Tue Jun 30 12:10:45 2015 UTC,"That's my point, you don't build applications in the /app directory. It seems you are building you applications ""IN"" the framework whereas it's a much better idea to separate your application from the framework. This means that your core business logic will probably end up in your /vendor which you expose to the framework through some framework mechanism (Bundle for Symfony, module for ZF2, etc)."
PHP,3bmclk,adrianmiu,13,Tue Jun 30 15:02:44 2015 UTC,"Sure, you can do that too. You can do whatever you want. Laravel makes no rules about where you place any given files, as long as Composer can load them.  Although I think that approach is pretty silly, you can do it if you want."
PHP,3bmclk,thbt101,4,Tue Jun 30 20:55:44 2015 UTC,"Agreed. It seems odd to want to build your application 100% custom and separate from a framework, then use a framework to have a 'website' on top of it. Seems to defeat the entire logic behind a MVC framework to begin with.   You can, and we do, still think about domains and logic at the start of building an application, which is just good practice. The guy you're responding to basically says ""I do a bad job implementing this framework, therefore it's bad."""
PHP,3bmclk,utotwel,1 point,Tue Jun 30 21:02:16 2015 UTC,"MVC is an UI design pattern, not an application architecture design pattern."
PHP,3bmclk,Savageman,8,Tue Jun 30 22:44:48 2015 UTC,Laravel 5 takes a step in this direction.  The HTTP layer is very clearly segregated from everything else and the Command paradigm encourages you to keep all of your business logic out of the HTTP layer completely.
PHP,3bmclk,utotwel,1 point,Thu Jul 2 12:06:27 2015 UTC,"In this case, more important than the framework is the architectural choices and the modeling framework (doctrine) which makes the Laravel vs Symfony an ""apple vs oranges comparison"". Which I think it's not."
PHP,3bmclk,hvshbrown,1 point,Tue Jun 30 15:15:53 2015 UTC,"I'm having trouble following what you're saying, but you can use Doctrine with Laravel if you prefer it to Eloquent."
PHP,3bmclk,utotwel,1 point,Tue Jun 30 12:55:06 2015 UTC,"If you use Laravel with Doctrine (and other ""enterprisey"" stuff) you are building a web-app with Laravel. Your initial claim is that Laravel is for websites not for ""web-apps"". There is a contradiction that's all."
PHP,3bmclk,hvshbrown,1 point,Tue Jun 30 21:02:46 2015 UTC,"I didn't post the original comment, that was /u/pan069."
PHP,3bmclk,utotwel,1 point,Wed Jul 1 07:42:13 2015 UTC,"So would you say that building a business class application ( to me over 100 visits per day) in Laravel is a bad idea, as I will be regretting it after the app grows in size?"
PHP,3bmclk,s74rx,20,Wed Jul 1 15:15:12 2015 UTC,"Laravel powers a site that does 15,000,000+ hits per day."
PHP,3bmclk,__constructor,5,Tue Jun 30 13:13:32 2015 UTC,"I would say running a site at this scale, it doesn't really matter which framework is used. At this scale, it's more about architecture and how the application is designed to allow reaching those hits. Every framework could probably do it just fine."
PHP,3bmclk,pan069,8,Tue Jun 30 14:55:37 2015 UTC,"Yeah, that's usually the response I get. But, people still demand to know the big sites and then if I mention any say, ""Well it doesn't even matter what framework you use at that point!""  I don't know why people even ask :)"
PHP,3bmclk,mbthegreat,1 point,Tue Jun 30 21:39:32 2015 UTC,Can you provide a link?
PHP,3bmclk,anlutro,1 point,Tue Jun 30 21:41:11 2015 UTC,I am not able to discuss the site. Sorry :/
PHP,3bmclk,ralfTn,3,Wed Jul 1 06:07:16 2015 UTC,I am literally drowning in my own tears rite now
PHP,3bmclk,assertchris,0,Wed Jul 1 12:15:31 2015 UTC,"The Olympics APIs were no joke though. That was millions of hits. Used by tons of websites to pull results, etc. for reporting."
PHP,3bmclk,anlutro,1 point,Wed Jul 1 12:20:18 2015 UTC,Which site is that? Could you tell us?
PHP,3bmclk,thbt101,5,Wed Jul 1 12:35:40 2015 UTC,"So would you say that building a business class application ( to me over 100 visits per day) in Laravel is a bad idea, as I will be regretting it after the app grows in size?   There are two ways apps grow in size: performance requirements and complexity. In your case chances are you'll hit the complexity problem much before you hit a performance bottleneck.   It's still a problem though. When people talk about ""we have to rewrite our legacy codebase"" they're referring to an app that has outgrown its framework (or one that is has grown organically in random directions... which does tend to happen when the framework doesn't support that complexity from the get go)."
PHP,3bmclk,Bloompire,3,Wed Jul 1 08:48:06 2015 UTC,"100 visits per day   This is infinitesimally small. You don't really need to factor that amount of visits into anything.  When people talk about the web performance of a framework, they're generally talking about how many thousands of requests per second they can serve - to put things in perspective, you're talking about one request per 14 minutes."
PHP,3bmclk,sagikazarmark,2,Tue Jun 30 14:03:36 2015 UTC,"This has nothing to do with performance or hits per day. It has to do with the problem domain. If your business is a single form on a website where people place their orders, a website build in Laravel might very well be a good solution. However, if you need to asynchronously process and refund payments, generate reports, collect activity streams, etc then your architecture will likely be very different and you will probably end up with the ""web"" part as just being a smaller component of the entire undertaking."
PHP,3bmclk,h64,8,Tue Jun 30 19:03:30 2015 UTC,"There is certainly something to the Data Mapper (Doctrine) vs Active Record (Eloquent) argument, depends on how complex your domain is really.   Not sure what 'global variables' is about though... Essentially Laravel is based on Symfony anyway."
PHP,3bmclk,ceejayoz,6,Tue Jun 30 21:00:17 2015 UTC,"Essentially Laravel is based on Symfony anyway.   It's really not. ""Built on top of Symfony"" was more a marketing move than anything. Version 4.0 used the Symfony router, but that was rewritten in 4.1. The only bits that are now actually built on top of Symfony are the request/response objects, the translator and the console."
PHP,3bmclk,aleste2,3,Tue Jun 30 11:28:49 2015 UTC,So this list (from symfony.com) is incorrect ?   BrowserKit  Console  CssSelector  Debug  DomCrawler  EventDispatcher  Filesystem  Finder  HttpFoundation  HttpKernel  Process  PropertyAccess  Routing  Translation  source  : http://symfony.com/projects/laravel
PHP,3bmclk,thbt101,1 point,Tue Jun 30 13:39:45 2015 UTC,"There are quite a few Symfony modules, but I guess ""based on Symfony"" depends on the semantics of ""based"". 11 Symfony modules, 11 non-Symfony modules... :)  The list does seem a little out of date (probably referencing an older version of the framework)."
PHP,3bmclk,pirminis,1 point,Tue Jun 30 20:03:13 2015 UTC,"That is the full list of components that Laravel 4.0's composer.json includes, but very few of those components are actually used.  BrowserKit and CssSelector are simply optional bits of the PHPUnit setup. The Debug component is only used for a few exception types. EventDispatcher was left in 4.0's composer.json by a mistake. The only bit from the HttpKernel component that's actually used is the HttpKernelInterface. Filesystem was replaced with a custom Laravel implementation in 4.1. I don't know where PropertyAccess comes from, might be a dependency of one of the other components.  Ones I guess I left out are the Finder (locates files, similar to the GNU find command) and Process (which is used to spawn queue workers). Recently they've also added the VarDumper - but all of these are very specific tools that can be used in any framework/library, they're not grounds to say that Laravel ""builds on top of"" Symfony."
PHP,3bmclk,Draders,1 point,Tue Jun 30 22:15:13 2015 UTC,"You can use Doctrine with Laravel, and some people do choose to do that if they prefer a Data Mapper.  You can actually use both for different models in the same project if you really want."
PHP,3bmclk,thbt101,2,Wed Jul 1 06:37:41 2015 UTC,"Your friend overextend his thoughs. Yes, Symfony is better framework in terms of architecture and correctness. But no, this does not make Laravel bad. I personally think that Symfony is better, but writing in Laravel is order of magnitude faster and its only ""a bit less correct"" than Symfony, so my choice is obvious. Anyway messing with something like Symfony with all patterns in that shitty language seems like overkill for me."
PHP,3bmclk,Draders,1 point,Tue Jun 30 21:05:26 2015 UTC,"I am a regular visitor of the FuelPHP forums and there are countless threads/comments where people say they are coming from Laravel and they are happy that they changed to Fuel. I don't doubt that the same is true vica versa, but one difference is that people coming to FuelPHP claim to be experienced developers.  My personal opinion is that I can't work with a framework which has its core completely rewritten with each release. (That's the major complain about Laravel on Fuel forums)"
PHP,3bmclk,jesse_dev,-1,Wed Jul 1 12:21:25 2015 UTC,"I don't like the word ""artisan"". It's pretentious and makes my skin crawl."
PHP,3bmclk,rafamds,3,Sun Jul 5 08:16:57 2015 UTC,So do mv artisan sweatshop-worker.
PHP,3bmclk,jesse_dev,1 point,Tue Jun 30 23:47:51 2015 UTC,"The problem with old Laravel versions was the structure change between versions.  From 3 to 4, 4 to 5, 5 to 5.1  It sucks write your project one way and had to change it every update.  Now, with LTS, people can feel more confidence on the framework."
PHP,3bmclk,thbt101,3,Wed Jul 1 14:30:37 2015 UTC,"I wasn't around for the change from 3 to 4, but moving from 4 to 5 took me about a day for a fairly large project (mostly dealing with adding namespacing and changing the Blade escape codes).  Moving from 5 to 5.1 took less than an hour.  I really wouldn't call the changes ""structural"".  They did move around a bunch of folders, but that wasn't too hard to deal with.  The changes were relatively small things and everything pretty much worked just about the same way."
PHP,3bmclk,clickclickboo,1 point,Tue Jun 30 19:07:20 2015 UTC,"Used & using Rails and Symbony 2 profesionally. tried learning Lavarel. first impression: it's the hackiest framework i've ever seen. and it's not as fun as, for example, Symfony 2. Once you learn Symfony 2 and know how to use the force, there's no reason to choose Lavarel. Also, Symfony 2 holds it's own against Rails, which couldn't be said about Lavarel.  But my Lavarel knowledge is somewhat out of date. So what do I know."
PHP,3bmclk,geggleto,1 point,Tue Jun 30 21:11:52 2015 UTC,"I'm a big proponent of single responsibility principle so I would agree that active record is a bad design pattern. I would also agree that globals are generally bad. A class relying on outside values is harder to test/debug.  It might take more time and thought to develop, but in my experience the time is saved by less time maintaining it and updating it. If everything is it's own separate component, you can easily swap out individual parts instead of having to change one giant active record class that does everything."
PHP,3bmclk,ceejayoz,1 point,Wed Jul 1 02:36:57 2015 UTC,"I'm a big proponent of single responsibility principle   If you have found in your experience that for the projects you work on it's beneficial to strictly adhere to those particular design rules, then yes you'll prefer a Data Mapper to Active Record.  So you should use Doctrine instead of Eloquent (which you can do with Laravel).    If everything is it's own separate component, you can easily swap out individual parts   (I'm going to go off on a tangent debating this type of software design in general here...) This is true.  The ability to instantly swap out anything at any moment, including swapping it with mock classes for testing, is the reason for using things like domain-driven design.  But man... the extraordinary levels of complexity, inefficiency, and hassle software developers are willing to put themselves through to achieve that complete isolation.    For so many types of projects, maybe, just maybe, it's better to do things the simple way.  It's funny, but in the end, the simple way of doing things usually ends up resulting in a project that is easier to maintain, and actually easier to change implementations.  Which was supposed to be the goal of all that software design dogma in the first place."
PHP,3bse3o,OptimusCrimee,19,Wed Jul 1 19:35:56 2015 UTC,I'll never understand why someone would release a library with 0 documentation. Especially when they go as far as making a website for it...  Where are the docs? How do we use this library? WHY would we want to use it over X? How about some examples of how to do it in xPDO vs X?
PHP,3bse3o,pushad,2,Wed Jul 1 20:04:17 2015 UTC,"xPDO has been around for a while, but it's been predominantly used within the MODX CMS and that's also where the documentation has historically been hosted and updated: http://rtfm.modx.com/xpdo/2.x/ This is a new website for xPDO now that it's becoming easier to use standalone thanks to the upcoming v3 and composer."
PHP,3bse3o,mhamstra,2,Thu Jul 2 11:41:37 2015 UTC,"i have to agree here, the README on the github only shows how to create the xPDO object, the website doesnt have a documentation at all.  At least adding more examples to the README is absolutely necessary, looking at the tests setup and configuration already is complicated, also the XML file schema needs documentation. The tests are not self-explanatory themselves."
PHP,3bse3o,beberlei,9,Wed Jul 1 21:45:42 2015 UTC,"Please don't use this library. Not only, as others have said, does it lack any sort of documentation.  It is also poorly written in my opinion. It's using paradigms from php from 4.x era and doesn't seem to understand that objects are pass by reference.  Then mix it with methods with really large cyclomatic complexities like this.  The methodology of the bootstrap file seems unnecessary since the only way you could get to this state was if you downloaded the library by hand in which case you've defeated the purpose of using composer to begin with.  There are lots of weird things in the code like this which make no sense. Other than to save typing why copy a static collection locally? More over why use a static at all? Why not use a session manager like class? It's not like PHP scripts typically run for any extended period of time it's not going to be preserved across requests so you're not saving anything. The only things that are cross request persistent are the actual PDO connections and they're managed at the FPM/CGI layer.  I'm sorry, I understand what the library is attempting to achieve but it really has a lot of tell tell signs of someone who came from a C++/C background and doesn't understand how the language works nor have they kept up with the best practices."
PHP,3bse3o,theshad0w,0,Thu Jul 2 00:58:48 2015 UTC,"Not only, as others have missed the tell tell signs, does it have documentation.  Its author can write complete sentences, too! It was written in 2006, and originally included a PDO emulator for PHP 4.  Yes there is ""cyclomatic"" complexity that needs refactoring—but the code works and is quite efficient.  The bootstrap file is copied from Composer.  Why copy a static collection locally? Because you can't do late static binding in older versions of PHP supported by the library and the MODX CMS written on top of the library. I don't think you took the time to understand what that code is used for.  BTW, I've never written a line of C++/C in my life, and I contribute to cutting edge PHP projects that adhere closely to the latest PHP standards and best practices.  In summary, please don't listen to this troll. Not only, as I have pointed out, is he way off base. Tell tell signs I tell you!"
PHP,3bse3o,drumshaman,1 point,Thu Jul 2 13:30:03 2015 UTC,"I also see underscore prefixed variable names, and a function signature like ""public function &foobar()"""
PHP,3bse3o,webdeverper,3,Sat Jul 4 13:37:14 2015 UTC,"This whole codebase reminds me a lot of PHP 4, which is definitely not a good thing. A custom autoloader, files that end in .class.php, multiple classes per file...I think I'll pass."
PHP,3bse3o,ThePsion5,1 point,Fri Jul 3 00:47:56 2015 UTC,"Sorry you wouldn't give it a closer look as I think you were looking at the legacy code base, which has all of those things. It was written in 2006 originally. However, the develop branch has been modernized a bit with namespaces, proper autoloading, and is available from packagist via composer. I'm giving some renewed attention to bringing the code up to date and will be working on documentation for the 3.x branch once I'm ready for beta."
PHP,3bse3o,drumshaman,2,Fri Jul 3 02:00:07 2015 UTC,xPDO documentation here http://rtfm.modx.com/xpdo/2.x/ There is a link to the documentation at the bottom of the xPDO site page.
PHP,3bmtio,pmjones,3,Tue Jun 30 14:15:58 2015 UTC,"Hiiii... It's me again.  The problem with unserialize() is that __wakeup() is very rigid, it just gets called once deserialization is done, so you can't map one set of fields to another set if your object model has evolved, like you can with __set_state() + var_export().  So you can alias the name, but you still need to match the legacy state 1:1 in the new class. So instead of aliasing, you'll have to build a replica of the old class only so when it gets deserialized there you can call a method on it to produce an instance of the new class from its internal legacy-formatted state.  JSON requires a ""manual"" mapper, but you get to walk it and map it how you prefer, so you don't need to perform those class gymnastics in PHP as your codebase evolves.  If I had a legacy problem on my hands with tons of serialized objects in a database, and once I'm done placing a hit on the old developer, I'd probably fetch something from Composer (or write it myself) that would produce simple arrays out of serialized objects (what class name they are, what fields they have) and use that to map to my new classes, as I would with JSON.  EDIT: Feel free to add that to your bootcamp :P"
PHP,3bmtio,LittleWashuu,1 point,Tue Jun 30 14:43:30 2015 UTC,"you can alias the name, but you still need to match the legacy state 1:1 in the new class   Correct -- this particular step in the modernizing process was merely to rename the class under PSR-0/4 rules. It's a very small baby step, but one that's tough to make when you can't even unserialize the object in the first place because of the name alone. Once the database has the new names stored, you can then refactor more easily, including a change to the serialization process itself."
PHP,3bolw9,doMynation,4,Tue Jun 30 21:57:45 2015 UTC,"Magic numbers are generally a bad thing in your code. I'd definitely say that using a constant is better than hardcoding the number, as a future maintainer looking at this line:  if( product.status === -1 )   might be confused about -1. Personally I prefer to use small keywords for situations like this, so:  ""status"" : ""disabled"""
PHP,3bolw9,evertrooftop,2,Tue Jun 30 23:44:17 2015 UTC,"OK, two assumptions I'd like to state:   It sounds like this question is more keeping your client-side logic in sync with some server-side logic.  It sounds like ""API"" in this case means ""how the two aspects of my single UI will communicate over AJAX"", as opposed to ""a generic JSON-based service which may be accessed by many different clients for different purposes.""   In that case, I'd say that you should craft the JSON payload based on what is most-convenient for the Javascript. If you're just showing the status, I'd use stuff like is_enabled, while if the Javascript has to ""know"" about the status anyway (such as to edit it) then I'd use the numeric values with constants."
PHP,3bolw9,Terr_,1 point,Wed Jul 1 00:08:18 2015 UTC,"Well you are right when you mean that i'm trying to keep my client-side in sync with the server-side, but I'm also trying to plan for what will be best in the future when I will re-use the same API for different UI's/projects.  I believe that I am going to stick with the third approach where I craft a more fine grained payload that is more reusable.  I like the idea of returning a string-based representation of the real value in the database, but it requires additional transformation that I'm not fond of.  Thank you both for your reply, I appreciate it."
PHP,3bolw9,Terr_,2,Wed Jul 1 02:17:01 2015 UTC,"I'm also trying to plan for what will be best in the future when I will re-use the same API for different UI's/projects.   An interface which can be entirely expressed in Javascript is rare... Most of the ones I can think of are userscript plug-ins.    This may be more of an enterprisey thing, but I find that there's always something that the server has to do which is UI-dependent, even if it's just hiding certain pieces of sensitive data from the client or pre-rendering the page for progressive enhancement.  [UI-independent PHP code] <----------------> [UI-supporting PHP code] <-> [Javascript UI]   I assume it's going to happen anyway, so I might as well design my UI as a yin-yang piece from the get-go."
PHP,3bm88b,davertua,2,Tue Jun 30 10:24:14 2015 UTC,Recorder is awesome!!!
PHP,3bm88b,aequasi08,2,Tue Jun 30 22:37:08 2015 UTC,Awesome :) .
PHP,3bm88b,harikt,1 point,Wed Jul 1 16:47:26 2015 UTC,"Gave it a whirl yesterday, all my assertion tests broke."
PHP,3bm88b,withremote,-4,Thu Jul 2 18:27:55 2015 UTC,What is this?
PHP,3bm88b,___ayylmao___,2,Tue Jun 30 16:04:01 2015 UTC,A PHP testing framework
PHP,3bmd41,nyamsprod,5,Tue Jun 30 11:31:55 2015 UTC,You're actually... making a very good point that FIG might include tests for its interfaces. Maybe you should talk to them and ask them to consider making this an official feature of the PSRs.
PHP,3bmd41,ThePsion5,1 point,Tue Jun 30 17:48:54 2015 UTC,"This is actually a really good idea. Granted, there are some cases where tests wouldn't add much (PSR-3 comes to mind, since testing the Logger interface won't tell you anything the PHP parser wouldn't tell you first), but overall I think it's a really good idea."
PHP,3bmrah,rszrama,1 point,Tue Jun 30 13:57:50 2015 UTC,"Being somewhat new to PHP, frameworks hurt my brain.  Is there any tutorial for these things?  Each one has documentations but they are too advanced for a beginner."
PHP,3bmrah,dangerzone2,3,Tue Jun 30 14:20:02 2015 UTC,"Sure! I'm actually new to Slim myself, coming from the Drupal world (which is more a monolithic PHP application than a framework). I'm writing these tutorials from the ground up, so if you start with my first one (linked from the first paragraph in this tutorial), you may be able to follow along.  That said, are you just new to PHP or are you new to web application development in general? How much do you understand about HTTP requests and responses, request routing, and the various pieces of code you might need to do things like logging, e-mailing, database querying, etc.?"
PHP,3bmrah,dangerzone2,2,Tue Jun 30 14:55:46 2015 UTC,So my real job is a database engineer focused in the performance and tuning aspect of databases.  So I have extensive knowledge in SQL and Bash Scripting.  This led me down the path of HTML and PHP.  I've built a few websites and PHP applications so I know my way around the language.  I get HTTP requests and responses but get lost in the routing aspect.  Confident in the ability to learn just hard to find the documents.   thanks a ton for the help BTW.
PHP,3bmrah,geggleto,3,Tue Jun 30 15:32:50 2015 UTC,"Dispatching and route planning is probably the hardest thing in modern php applications. The tldr; version of routes is probably, use a word to describe the resource. ... so like... /user, /post, /comment... etc. Then you get into nesting resources like... /user/1/comments which would give you all of the comments from the user with id 1. or you could do... /post/1/comments ... all the comments for a post with id 1... or /post/1/user/1/comments ... get all comments for user 1 on post 1...   In slim each of these would have a corresponding Route.  $app->get('/user/{id}'),  $app->get('/post/{id}'),  $app->get('/comment/{id})  so you can then construct something like the last example like so.  $app->get('/post/{post_id}/user/{user_id}/comments',  function ($req, $res, $args) { ...});  I hope this helps."
PHP,3bmrah,dangerzone2,2,Tue Jun 30 16:44:59 2015 UTC,"I dig. Sounds like you've got a good start! You may get some mileage out of my Slim tutorials, but I'm only just beginning and I didn't take the time to explain everything (i.e. what is routing? how do PHP namespaces work? etc.)  I've been a Drupal developer since 2006, so most of my PHP experience has been wrapped up in that - with some small bespoke projects and osCommerce hacking sprinkled back there in my Dark Ages. I learned a lot by going through Fabien Potencier's tutorial on building a framework on top of Symfony2. You might consider starting there and seeing how far it helps you along:  http://fabien.potencier.org/create-your-own-framework-on-top-of-the-symfony2-components-part-1.html  I did this a couple years ago and made a repository that uses branches to contain the code examples from each part of his tutorial. Probably not necessary if you're a careful reader / don't mind learning as you go, but if you get stuck you can always see the code I produced following the tutorials here:  https://github.com/rszrama/symfony-tutorial"
PHP,3bm0un,ICJ,5,Tue Jun 30 08:39:26 2015 UTC,"Don't.  There are four layers in a properly architected application — Domain, Infrastructure, Application and User Interface; each of them builds upon the previous ones and is unaware of the following ones.  By doing what you want to do, you'd make the Application layer UI-aware, and, what's even worse, tied to a particular implementation of the UI. Imagine if you wanted to change your template-rendering based site into a JSON API. There wouldn't be a session anymore, and you'd have to make changes in your UserService, even though you only actually wanted to change the user interface.  What you should do is create a UserRegistrationResult class to act as a Data Transfer Object. The class should have three properties — bool $validationPassed, used to denote whether all incoming data was successfully validated and a user has been registered, User $user, containing the registered user (if applicable) and string[] $validationErrors, an array of validation error messages (if applicable as well). Your UserService should instantiate, fill in, and return instances of this class when requested to register a user, and your UI layer (the controller) should take care of presenting the result to the user."
PHP,3bm0un,androios,1 point,Tue Jun 30 09:28:08 2015 UTC,"Makes complete sense. Ok a secondary question based on your answer. Right now i am creating a framework to learn and make these sort of mistakes. The project i am working on includes user login's and csrf tokens.   UserAuthentication will check session userid, key, and token, and csrfValidator checks session csrftokens. At the moment i launch my application as follows  This is the core app/bootstrap file https://github.com/ICJR/esportspCMS/blob/master/library/core/esportspcms.php  If you take a look here  https://github.com/ICJR/esportspCMS/blob/master/application/config/autoload/classes.php  I call the method to validate tokens. Within that method i set a session alert which uses this helper https://github.com/ICJR/esportspCMS/blob/master/library/helpers/alerts.php  Is there a better way to handle this? Should the csrf token return false if invalid and within the autoload/classes file i check on the bool and assign the alert through there?"
PHP,3bm0un,pmjones,2,Tue Jun 30 09:45:40 2015 UTC,"I separate my app strictly into domain services and clients using them, and I've struggled to see what makes sense in terms of factoring, so ask me any details and I'll share my experience.   I read and now understand why it isn't wise to place http redirects within a service layer.   How did you place redirect in a service? For what purpose. Not sure what you refer to here, and I'm curious.   I also read that the service should not do anything outside of its purpose.   A ""user service"" (also ""identity service"" or ""authentication service"") is a relatively standard component in any project and typically has these kinds of responsibilities (all of them from neutral input from, say, a controller, as you said; this applies to all services):   Create (register) a user. Produce auth tokens: take username/pass, return token. Authenticate: takes token, return whose username/userid it belongs to (and if you use RBAC, you can also return which roles this user has /client, staff, admin, system, .../). Get and edit core user fields and profile settings (avatar, name, email, change password).   If your ecosystem is large, some of the user profile data may be stored separately and be specific to some of your services (based on the same username/userid), but typically you have at least some user fields on its core identity, say an avatar, so the identity can be expressed consistently throughout your system.   Example: User Registration should only create a new user, using input passed by controller, but i am wondering if it is also fine to set flash messages within the service layer.   The session conceptually belongs to the client (client here = controller + templates that form the website frontend). Services should not be aware of the session on their own, because at some point they may end up split off to another process, machine or language and have no access to the PHP session1 . Notice how the user service produces tokens, instead of having signIn() and signOut() commands that keep something in the session.  You'd have a client-specific service that your controllers can access, which will return state that is stored in the session:   Current token (fetched from user service, passed in here) and cached user details, to display on the page (""Signed in as: Joe | joe@example.com""). Flash messages. Current CSRF token (if you use session-wide one, which is typical). Anything else you've selected to implement on the client side that saves state in the session (say you may have a shopping cart here, although it can also be differentiated as a domain service that multiple clients can use - that's project-specific decision).    My application displays a lot of flash messages session based notifications for users [... like ] The username xxxxxx is already in use Usernames Should be > 5 Characters [...] Should/can this be defined/set within the service class or is there something wrong with that?   The controller should take the user service result and feed the errors in the client service; the user service is not aware how its messages are displayed, it just returns them. In pseudo code your controller will contain code sort-of like this:  $result = $userService->register($registrationForm);  if (!$result->success) {     $clientService->flashError($result->errorMessage); } else {     $clientService->flashSuccess('You did it!'); }   At the PHP level, a service object may communicate an error in many ways: throw exception, return error object, return array with errors, this is not what's crucial here, just pick one that feels natural to your workflow and be consistent with it (I also return a list of errors from services, not just one error, which is handy for a list of validation errors on forms).  What's important is the controller is acting as the glue between two services here, that's what its role is.  If anything is unclear about what I said or you have other questions about services/controllers, ask.  1 It's ok to ""cheat"" and use the session in services, but only in a way where it can be easily replaced with independent storage later on. The test on whether it can be easily replaced is: ""can I keep the same exact API for this service, if I did NOT have access to the PHP user session?"". If yes, go for it."
PHP,3bm0un,pmjones,1 point,Tue Jun 30 09:41:00 2015 UTC,"From tutorials/help i received on stack overflow i was told to place all of the validation/db interactions within models. I dont like to mix the db interaction with business logic so i separated it further by having strict entity models is what i think they are called ( again following tutorials that i can find on google ) which handle all db interaction ( pulling user info, updating user, etc. ) then i have the services accept user input, validate ( check if username exceeds defined chars, etc. etc. if yes sends flash message alert ) if no errors are produced the service acts accordingly. i have UserLogin, UserLogout,UserRegistration`, etc. Within the user login service for example the input is checked if an error occurs the service is stopped and the alert was set.   With the redirects, i created the ability to lock user accounts so in the event that an account was locked an alert would be set and a user would be redirected using a basic helper class ( all within the service ) https://github.com/ICJR/esportspCMS/blob/master/library/helpers/redirect.php  That is what i am currently working on atm, it has changes a bit since i uploaded i will update it pretty soon. I didn't include any controller/model/services code yet."
PHP,3bm0un,Terr_,1 point,Tue Jun 30 09:56:45 2015 UTC,"Having validation/db logic in the service is good, and yes, you can always split off db code as a ""repository"" (or your entity models, same deal) within the service, that's good.  I am somewhat suspicious of something being referred to as a ""login service"" due to my considerations in the comment above (splitting off the session and identity as two separate concerns). But if it works for you, then it works for you.  As for the redirect, it still feels like something that belongs in a controller/view and not in the service. You suggested as much yourself. The service should simply either return results, or errors, without having an opinion how they're presented to end users."
PHP,3bm0un,geggleto,1 point,Tue Jun 30 10:06:30 2015 UTC,"No i am passed that, your right, and i understand that already and now i am understanding the issues with session error setting within services and keeping it separate from controller. I wrote question/response below before seeing this but what are your thoughts on the code provided in the link."
PHP,3bhy29,erp-expert,33,Mon Jun 29 11:02:18 2015 UTC,Yup. Most benchmarks I've seen show a promising 40-60% decrease in execution time. I'm certainly looking forward to a stable release.
PHP,3bhy29,Xanza,1 point,Mon Jun 29 11:30:06 2015 UTC,"That's actually an exceedingly difficult question to answer so I'll be safe end say, ""early next year."""
PHP,3bhy29,Xanza,3,Mon Jun 29 18:51:25 2015 UTC,"It is exceedingly difficult to look up the PHP 7 timetable, to see that the release date is November 15 2015?  https://wiki.php.net/todo/php70#timetable"
PHP,3bhy29,Thue,2,Mon Jun 29 20:00:13 2015 UTC,"!RemindMe 5 months  Look it up? No. Follow it? Hell yea. We'll find out, won't we?"
PHP,3bhy29,Xanza,2,Mon Jun 29 20:20:24 2015 UTC,"Well, PHP has been testing phpng (php7) since 01/20/2014 where a generic bench.php took 2.115 seconds to run, compaired with their last test run of bench.php where it completed in 0.777 seconds. The results are really promising, but that's with over a year and a half of testing and optimizing. Which is why I kinda want to take the Gandalf approach on this one--just replace Wizard with phpand he with it."
PHP,3bhy29,Xanza,29,Mon Jun 29 20:36:27 2015 UTC,"What's a ""BOM"" and what's a ""MRP""?  I've been doing PHP web dev for many years, but I've never heard those terms.  I Googled it, and if that's the same thing, I think they're business accounting terms?"
PHP,3bhy29,thbt101,26,Mon Jun 29 20:03:10 2015 UTC,"BOM means ""Bill of Materials"", which is essentially a list of all the required materials/parts to manufacture a product.  MRP stands for Material Requirements Planning (or Management, Resource, Production), which is a software to manage your manufacture/production. Those softwares usually come with a variety of modules for managing your floor production, your inventory and your product definitions."
PHP,3bhy29,doMynation,22,Mon Jun 29 20:16:46 2015 UTC,"Good question, BOM makes me think of byte order mark."
PHP,3bhy29,kawsper,12,Mon Jun 29 15:11:56 2015 UTC,"He said supply chain app, so probably...  BOM = Bill of Materials MRP = Manufacturing Resource Planning (or Material Requirement Planning)"
PHP,3bhy29,ideadude,8,Mon Jun 29 15:32:45 2015 UTC,"Good explanation!!! In simple terms...the program does a lot of mathematical calculations and our million dollar software (Oracle R12.2 ) with it's 90issssh(it) kind of procedural programming language (PL/SQL) takes 1 hour to complete. (Now, please dont ask why we are not using C++ / Java etc.There are a lot of background why we are using this product ) Bottom line, if you have programs which really does a lot of calculation, permutation/combinations, etc and in PHP 5.5 then try PHP 7. I bet you 'll be surprised with the performance."
PHP,3bhy29,Dariusve,1 point,Mon Jun 29 15:17:01 2015 UTC,want to see my KnapSack/StockCutting algorithm implementation run on PHP 7 with 8600 pieces and tree different stock sizes...
PHP,3bhy29,innerspirit,-3,Mon Jun 29 15:36:59 2015 UTC,"Why are you not using Zephir, though? It's basically compiled PHP, much faster than PHP7 even."
PHP,3bhy29,NeoArc,-14,Mon Jun 29 16:09:49 2015 UTC,"I'd look into Go, Crystal lang, Nim, Lua (JIT), and a few others for good performance and faster development time than C++/Java.  Zephir can give good speed, with some C extensions.  Edit: Node.js has 10x/5x speed (for calculations) if the code is well structured :)   (For the occasional visitor: hi from June 28th)"
PHP,3bhy29,NeoArc,-2,Tue Jun 30 20:22:23 2015 UTC,"I'm not sure why people are downvoting, I hope somebody would explain himself before giving a rating.  PHP is a good language for web development, but if the main concern is speed why I should not try one or more tools?"
PHP,3bhy29,MrDOS,13,Mon Jun 29 16:42:38 2015 UTC,"OP himself already explained before you even bothered posting:   Now, please dont ask why we are not using C++ / Java etc.There are a lot of background why we are using this product   If he's explicitly stated that he doesn't want to talk about why they're not already using something else, there's no way he wants to talk about potential replacements – potential replacements he's aware of, as he stated he doesn't want to talk about them."
PHP,3bhy29,NeoArc,-2,Mon Jun 29 16:44:42 2015 UTC,"My English is not that good, but I think ""I would"" does not mean that the original poster is forced to follow my advice.  I never asked him anything, and I do not expect a response from him, about tales of my previous experience when dealing with performance issues."
PHP,3bhy29,movzx,8,Mon Jun 29 18:51:55 2015 UTC,"Your response implies that he should be pursuing those as an option.  What you said, to an English speaker, is ""[If I were you] I would..."" when the guy specifically said that he is aware of better options, but cannot (most likely for internal political/cost reasons)."
PHP,3bhy29,ken_tankerous,2,Mon Jun 29 19:13:08 2015 UTC,Probably because your comments are not relevant to the discussion.  OP is only reporting their results when changing one part of their application environment.  Perhaps the app was written ages ago and has been modified countless times since. Perhaps the company could only find PHP programmers. Perhaps it's time for a rewrite in PHP or a more suitable language but that's outside the focus of the post.
PHP,3bhy29,NeoArc,0,Mon Jun 29 19:28:28 2015 UTC,"I agree those languages require more effort than just dealing with PHP, maybe I should've not mentioned them.  I hope they can test HHVM too, since they are able to install PHP 7 in their servers."
PHP,3bhy29,ken_tankerous,0,Mon Jun 29 19:41:37 2015 UTC,Any of those languages might do well on a rewrite (at a technical level).   I couldn't imagine a business funding a full rewrite until it's close to being necessary. Especially now run times have dropped ~45% with seemingly no real effort. They might try hhvm and squeeze a few more percent but then you're using a non-standard VM (might be an issue with some businesses)
PHP,3bhy29,NeoArc,2,Mon Jun 29 20:47:53 2015 UTC,"Well, I think that rewriting only the MRP module would be the best (and the obvious) approach.  I should explain myself better in the future."
PHP,3bhy29,aleste2,5,Mon Jun 29 23:49:46 2015 UTC,"Good. this kind of test if, for me, what matters. I wish i could see the same operations with HHVM, just for comparison.  Request tests, for me, is kinda useless because i work with huge applications with lots of validations, operations and database queries and data manipulation.  If it was only about requests i would be using node."
PHP,3bhy29,EquationTAKEN,4,Tue Jun 30 02:25:58 2015 UTC,"I wish i could see the same operations with HHVM, just for comparison.   Here you go.  PHP7 is definitely on par with HHVM - in some cases ever so slightly faster. But we're talking about 1-4ms of differences."
PHP,3bhy29,Cryp71c,4,Tue Jun 30 02:35:14 2015 UTC,"What is HHVM with Repo auth? It seems to be outperforming PHP7 and standard HHVM, especially with caching."
PHP,3bhy29,Disgruntled__Goat,5,Mon Jun 29 12:17:01 2015 UTC,This article from the front page has an explanation. Sounds like it compiles the code down and never checks if any files have changed.
PHP,3bhy29,nikic,6,Mon Jun 29 13:05:30 2015 UTC,"The essence of repo mode is not that you don't have to check if files changed, but rather that the compiler can assume that it already knows all classes, functions, methods etc (as dynamic creation is forbidden). This means, for example, that a call like strlen($foo) can be optimized because the compiler knows that this is the normal, global strlen function and not a namespace override (which it could also be ... and which could be introduced at any time)."
PHP,3bhy29,vbaspcppguy,2,Mon Jun 29 13:36:43 2015 UTC,"Yep, which you can also do with opcache. I'd like to see them benchmark that too."
PHP,3bhy29,2012-09-04,2,Mon Jun 29 15:39:36 2015 UTC,http://hhvm.com/blog/4061/go-faster  It is basically like setting apc.stat=0.
PHP,3bhy29,fred_emmott,3,Mon Jun 29 19:40:45 2015 UTC,Nope - we almost do that anyway by using inotify to watch for changes.  @nikic's comment is correct - the main benefit is allowing us to do additional optimizations that depend on us knowing that the code will never change and there will never be any additional code.
PHP,3bhy29,no1youknowz,4,Mon Jun 29 15:53:26 2015 UTC,"Why are you bothered with HHVM?  I really don't understand.  So what if HHVM is a few benchmarks faster, which in some cases after the lock down, it is.  Just be grateful to the HHVM developers that PHP devs have been forced to up their game in which you will soon be winning by upgrading to PHP 7."
PHP,3bhy29,cjthomp,8,Mon Jun 29 15:08:46 2015 UTC,"Yup. Competition, even non-traditional, is always good.   HHVM isn't an option for us because they don't have the same extension priorities (pgsql), but they sure were snappy."
PHP,3bhy29,2012-09-04,11,Tue Jun 30 21:03:05 2015 UTC,"I know! My corporation committed to moving to pgsql for years, with marginal success, due to the complexities of migrating apps from MySQL. Then we committed to migrating to HHVM by Jan 1, 2015 [successful as of Jan 27] and then to HackLang by Jan 1, 2016. We immediately realized a lack of support for Postgres. We immediately suspended the pgsql migration efforts. Then we found https://github.com/PocketRent/hhvm-pgsql  Stability isn't exactly perfect, but it's not bad, either. The project is very actively maintained. The performance benefits from HHVM were far and away worth it.  HHVM is where all the true innovation is these days. And dealing with their core maintainers with issues is a MUCH nicer experience! Plus, I remember submitting a bug report for an HHVM security function and then I was contacted a few days later by Facebook Corporate: ""Where should we mail your cheque?"" -Excuse me? ""You have been credited for discovering a security bug. We want to send you $800."" I cannot even imagine that happening with Zend :O There, I have filed several critical failure bug reports (one where new DateTimeZone('EST'); would cause a segfault in PHP) and usually just ended up having them chronically ignored for months and months or treated with disrespect."
PHP,3bhy29,vbaspcppguy,3,Mon Jun 29 14:27:39 2015 UTC,"Why would you move to pgsql? What advantages made it worth the effort of learning the intricacies of a new db engine, let alone the time to recode and test?"
PHP,3bhy29,cjthomp,2,Mon Jun 29 14:31:45 2015 UTC,"For us, Heroku."
PHP,3bhy29,vbaspcppguy,1 point,Mon Jun 29 15:18:45 2015 UTC,"Ah, I see. I've played with Heroku and Pagodabox but in the end they just seem so expensive compared to other options."
PHP,3bhy29,cjthomp,2,Mon Jun 29 15:56:10 2015 UTC,"It's expensive at first, but if you stay in their ecosystem it makes maintenance costs MUCH lower, and I (programmer) can stop wasting days as devops and just press a button here and there.   If suddenly demand grows exponentially, heroku lets you scale up in a matter of seconds instead of spending a couple days setting up new servers, and if demand drops again it's just as easy to scale back.  Heroku isn't the be-all end-all, but it very definitely has its place."
PHP,3bhy29,vbaspcppguy,1 point,Mon Jun 29 22:16:43 2015 UTC,"Oh, yeah, it definitely has its place. I personally come from a place of always hoping to have hosting costs, single man projects. If I had a more financially viable project, I would probably use such a service just for peace of mind."
PHP,3bhy29,nikic,1 point,Mon Jun 29 22:53:56 2015 UTC,"FYI while PHP itself obviously can't afford bug bounties, you can still get them externally. For example HackerOne has bounties for security bugs in PHP: https://hackerone.com/php"
PHP,3bhy29,aleste2,2,Mon Jun 29 23:19:07 2015 UTC,"Just for curiosity and, as you said, its a good competition. HHVM, somehow, forced Zend engineers to pay more attention to PHP community and opinions. And to make a faster language."
PHP,3bhy29,afraca,1 point,Tue Jun 30 00:56:20 2015 UTC,"1) ""Zend engineers"" sound like employees of the Zend company. I know it's a bit confusing, but the Zend engine is a separate entity. So lots of volunteers from all over the world, including people who've worked with HHVM.   2) The language itself won't become faster, the standard implementation for it does. Although this has always been a bit vague since there is no dedicated language specification like in other programming languages."
PHP,3bhy29,imexpeditor,0,Mon Jun 29 22:15:28 2015 UTC,Here's a comparison with HHVM: docs.google.com (source)
PHP,3bhy29,mgkimsal,3,Mon Jun 29 15:02:03 2015 UTC,"This seems on par with the other benchmarks published so far - about 50% reduction in time.  It seems to jive with my own understanding that a lot of the speed comes from internal data structure changes, which reduce memory use."
PHP,3bhy29,pilif,3,Tue Jun 30 11:05:18 2015 UTC,"Here's a small benchmark running over the main product I'm working on.  http://i.imgur.com/ir7dkFx.png  The first three are synthetic, the last one is rendering a page of our application.  Bloody impressive."
PHP,3bhy29,marcusklaas,1 point,Mon Jun 29 22:47:45 2015 UTC,Rendering a page on PHP 5.6 takes well over 4 seconds? :O
PHP,3bhy29,pilif,2,Mon Jun 29 12:45:54 2015 UTC,"Rendering it 100 times. The benchmark function runs code multiple times, as denoted by the "" xxx runs"" note."
PHP,3bhy29,zerostyle,2,Tue Jun 30 11:48:10 2015 UTC,"I'm most curious to see what can be done about the major frameworks.  Every benchmark test I've seen of various frameworks always puts things like symfony, etc near the very bottom."
PHP,3bhy29,suphper,1 point,Thu Jul 2 21:00:30 2015 UTC,what can be done about the major frameworks   In what way? Performance lockdowns for frameworks? That'd actually be pretty cool.
PHP,3bhy29,fred_emmott,5,Fri Jul 3 04:00:39 2015 UTC,"On the HHVM side, we don't do this because in the real world, most of the performance cost comes from application-specific code, so benchmarks for 'frameworks' are either just 'hello, world' or they're testing some arbitrary application, not the framework itself, so the numbers are fairly meaningless; this is why we mostly look at things like Mediawiki, Wordpress, and Drupal.  We have the frameworks in our benchmarking harness to check we're not doing something particularly bad, though the profiles usually look pretty much identical to '<?php echo ""hello, world""' once the JIT is warm.  As an example both of 'particularly bad' and how similar 'framework' benchmarks are, profiling hello world led to us noticing that we were initializing libxslt once per request, instead of once globally; this was a 64% performance improvement in '<?php echo ""hello, world""' and 30-40% in most 'framework' benchmarks."
PHP,3bhy29,ScopeChain,2,Mon Jun 29 17:27:13 2015 UTC,"That is great but honestly I don't find it very exciting, because as far as I've seen code execution is very rarely the bottleneck for most websites with lots of traffic, db connections and file system IO are almost always the problem."
PHP,3bhy29,suphper,1 point,Tue Jun 30 06:54:55 2015 UTC,"How do you not find it exciting? It is obvious that speeding up just the code in a project like this one had a major impact, and the maintainer of any sufficiently complex application should be incredibly optimistic due to this."
PHP,3bhy29,sarciszewski,1 point,Tue Jun 30 20:42:28 2015 UTC,"Depends how you see the complexity. If complexity for you mean a lot of traffic , a lot of DB transactions and a lot of file access then yes program execution speed is not important. But we are talking about programs with complicated logic and calculations. Doing a lot of permutation, combination and then again doing a lot of mathematical operations depending on the result and finally showing simple messages to the business users. And speed matters a lot here."
PHP,3bhy29,creatiff,2,Tue Jun 30 01:23:35 2015 UTC,"Every time I see this talk about PHP7's performance, I remember the table on the RFC page that tracked the number of operations as the code evolved.  And then it reminds me of the the Sanic Hegehog meme"
PHP,3bhy29,thbt101,2,Tue Jun 30 06:54:10 2015 UTC,"fuck, i actually tried to resize my window -.-"
PHP,3bhy29,Toast42,1 point,Tue Jun 30 12:46:30 2015 UTC,"From what I've read, PHP 7 is roughly in the same ballpark of speed as HHVM.  What does this mean for the future of HHVM?"
PHP,3bhy29,thebuccaneersden,5,Wed Jul 1 04:46:41 2015 UTC,"I don't think we'd be seeing the speed improvements in 7 if HHVM had never existed.  I think HHVM will continue to be the bleeding edge with PHP adopting their strategies as they are released.  Plus HHVM is backed by FB, so they have a vested interest in keeping the program running."
PHP,3bhy29,Toast42,3,Mon Jun 29 14:28:05 2015 UTC,Cassandra...
PHP,3bhy29,thebuccaneersden,1 point,Mon Jun 29 15:06:21 2015 UTC,"Cassandra   I've never used Cassandra, but I've heard good things.  Is FB still actively developing on it?"
PHP,3bhy29,mrargh,3,Mon Jun 29 15:16:52 2015 UTC,"Facebook used Cassandra to power Inbox Search, with over 200 nodes deployed. This was abandoned in late 2010 when they built Facebook Messaging platform on HBase as they ""found Cassandra's eventual consistency model to be a difficult pattern""   [sauce]  From my perspective, I liked Cassandra in the beginning, but eventually found it to be a difficult PITA to maintain. This was many years ago, so things may have changed since."
PHP,3bhy29,vbaspcppguy,1 point,Mon Jun 29 15:55:57 2015 UTC,DataStax
PHP,3bhy29,mythix_dnb,1 point,Mon Jun 29 16:41:00 2015 UTC,Probably that they will focus more on Hack.
PHP,3bhy29,lordofworms,1 point,Mon Jun 29 16:57:30 2015 UTC,"They are already on par with the future version of PHP, so they may improve further by the time PHP7 hits the shelves.  And also, they still have hack, and with the retarded strict typing they are gonna put in php7, they might still have an edge for the strict typing fan base."
PHP,3bhy29,mythix_dnb,1 point,Mon Jun 29 20:54:43 2015 UTC,retarded strict typing they are gonna put in php7   what exactly is retarded about it?
PHP,3bhy29,lordofworms,0,Wed Jul 1 12:17:46 2015 UTC,"I've got 2 problems with the implementation:   It's call time regulated, so it defeats the purpose, you still have to do manual validation in your function... The call time regulation only applies to certain types, so when I declare strict_types=0 you would think no type checking is happening, but this setting doesnt apply for object, callable or array .... this is making this very confusing imo... especially for new people who don't know the history.   e.g.:   function doStuff(array $data, bool $flag) {       // do stuff with data based on flag   }   In this example, with strict type checking OFF the array is type checked but the boolean is not..."
PHP,3bhy29,mythix_dnb,2,Mon Jun 29 15:58:16 2015 UTC,"You don't have to do manual validation in the function. If your function asks for an integer, it will get an integer every time (no matter whether the caller had strict hints on or not).  Think of it this way, if it helps. It actually probably doesn't work this way but it's a useful analogy.  If you have strict hints on and you call something that depends on an int, passing a string, this will happen:  $input = ""1""; functionRequiringInteger($input); // error   If you call the same with strict hints off...  $input = ""1""; functionRequiringInteger((int) $input);   The engine will implicitly cast. From ""functionRequiringInteger's"" perspective, it will always get what it asked for, or you'll get an exception. No ifs, buts or maybes. You can rely on the fact that you will always get an integer (or whatever you ask for). So in both cases you can do away with validating inputs in the function (well, maybe... if you're hinting on an array, you may still want to validate that the structure is correct but there's no getting around that).  So no, it doesn't defeat the purpose.   strict_types=0 really just means ""conform fairly closely to the old juggling semantics""... so you can't do MORE than you used to be able to do...    In this example, with strict type checking OFF the array is type checked but the boolean is not...   In both cases, the body of hte function doStuff will be guarantee that data is an array and flag is a boolean, assuming that whatever was passed was castable to these. You can check it out yourself by doing:  function doStuff(array $data, bool $flag) {     var_dump($data);     var_dump($flag); }   with strict on and off.. in both cases you should get an array and a bool."
PHP,3bhy29,lordofworms,1 point,Tue Jun 30 09:35:24 2015 UTC,and what would happen is you pass something that can not be casted? eg: array to string conversion? it throws the same error as it would with strict_types=1?
PHP,3bhy29,mrargh,1 point,Wed Jul 1 06:39:26 2015 UTC,I believe it's TypeError in both cases.
PHP,3bhy29,lordofworms,1 point,Wed Jul 1 08:09:56 2015 UTC,"I was under the impression that you'd still get the type you hinted, just that the engine would automatically coalesce (based on the standard PHP rules) the variable into that type with strict checking not enforced..."
PHP,3bhy29,djslakor,1 point,Wed Jul 1 11:35:07 2015 UTC,"They are still working on making it faster. They recently had a performance lockdown and got some good gains in specific applications.  FB's problems are somewhat unique - their data centres are so big that saving a handful of cycles on a each request can lead to a substantial reduction in their energy bill.. so as long as they are marginally faster for their own use cases, they'll probably keep it going. Then there is hack.. which they rely upon.. and unless vanilla gets feature parity with hack I doubt they'll shift away from it.  One thing that we never really see in the benchmarks is how optimised HHVM is for running FB itself. One has to speculate that they've got some pretty specific optimisations that only matter to their code... perhaps it's significantly faster than vanilla in that circumstance?"
PHP,3bhy29,Yurishimo,1 point,Wed Jul 1 12:22:59 2015 UTC,Anyone know how it compares to python/gunicorn?  I'm a PHP dev but have been considering a switch to Python/Django/Flask.  The web is short on comparison benchmarks!
PHP,3bhy29,reasonablenagging,3,Wed Jul 1 22:27:53 2015 UTC,"Zend.com has a cool little infographic. Not sure how accurate the data is, but unless it's just miles and miles off it's still impressive."
PHP,3bhy29,alizamorgan8,1 point,Wed Jul 1 12:19:19 2015 UTC,Unicode?
PHP,3blrwp,suphper,3,Tue Jun 30 06:36:48 2015 UTC,Not sure if you're the author; but that blank 'usage' box in the read me needs to be filled...
PHP,3blrwp,flyingkiwi9,1 point,Tue Jun 30 08:10:55 2015 UTC,"Not the author, /u/crell is."
PHP,3blrwp,Danack,1 point,Tue Jun 30 09:07:04 2015 UTC,Apparently Crell = Larry Garfield.
PHP,3blrwp,AcerbusNoir,1 point,Tue Jun 30 12:52:11 2015 UTC,"lol, only a Drupal dev would come up with yet another way to deal with HTML in PHP."
PHP,3bjwzt,drsii,5,Mon Jun 29 20:47:03 2015 UTC,"Care to explain the difference/benefit over the official library? (I have never used it, so I'm genuinely curious if there is a difference here.)"
PHP,3bjwzt,adragons,2,Tue Jun 30 01:52:48 2015 UTC,"I'll try to be as short and thorough as possible. I appreciate you asking the question. The Stripe PHP package uses Curl which can be slow and unreliable.      We use Guzzle, an HTTP client to interact with Stripes API. By using Guzzle developers gain capability. Some of these especially important for applications interacting with the Stripe API in high volume.      When we first started this package, Stripe didn't keep the PHP package up to date with the latest versions. This appears to have changed in recent months.      We attempt to maintain full coverage with in a couple weeks of the latest version.      We feel, and i'll stress this is our opinion only that the Stripe package is a bit over engineered... rushed. It's up the individual developer to browse between the packages and decide for themselves.       Our packages are engineered to be easily extensible, follow consistent patterns, adhere to semantic versioning, and follow PSR-1, PSR-2, PSR-4."
PHP,3bjwzt,adragons,1 point,Tue Jun 30 14:48:32 2015 UTC,Okay! Thanks for the great reply!
PHP,3bjwzt,chris_a6software,1 point,Tue Jun 30 15:04:26 2015 UTC,"yeah Stripe's official package is not so good. They only very recently added namespacing. Felt like the PHP library was a bit of an afterthought.   Congrats on this btw, it looks awesome. Great job."
PHP,3bjwzt,chadicus,1 point,Tue Jun 30 15:12:23 2015 UTC,I'd be interested in hearing this as well.
PHP,3bjwzt,glasscalendar,1 point,Tue Jun 30 12:33:15 2015 UTC,"I spent hours last night bashing my head against the keyboard messing with the Stripe API. Nothing was working, mostly due to my own stupidity.   I tried this today and everything just worked. I'm new to a lot of this so I was kind of confused as to how to architect everything.   If I wanted to change a record in my DB if a charge throws an exception, any idea how I'd do that?"
PHP,3bkekx,notsooriginal,4,Mon Jun 29 23:04:00 2015 UTC,"As usual, it was an error in my own code! (Very happy to have tracked it down).  The code that consumes the value returned from the cache store was originally written for memcached. In order to reduce calls, the typical scenario passes an array of keys to search.  Memcached looks in its cache, and returns an associative array of key->value pairs. If a key is not found, that row is omitted from the returned array .  $memcached->set('a','1'); $memcached->set('b','2'); $result = $memcached->get(array('a','b','c')); array('a'=>'1', 'b'=>'2');   Redis can do the same thing - searching for multiple keys in one call, and sending back an array of results. The critical difference is that Redis sends back a regular array - the keys are not sent back, only the values. If a key is missing from the cache, its position is maintained in the response array, but the value is NIL/NULL.  $redis->set('a','1'); $redis->set('b','2'); $result = $redis->get(array('a','b','c')); array('1', '2', NIL);   In either scenario, any cache misses must be handled so the content request can be fulfilled. My code looped over the response from memcached, checking through all the key->value pairs for any missing keys. This code worked fine for Redis (no exceptions, errors, etc), but it would never find any of the keys and thus would flag EVERY request as a cache miss. D'oh!  For now the simple fix is to have code that can handle either cache engine.  Thanks to everyone for your help! I didn't know enough about Redis and phpredis to eliminate those as an issue, and my code wasn't throwing or logging any complaints (since cache misses are a pretty normal behavior), but you guys gave me the background to point fingers at my own code, haha."
PHP,3bkekx,-Mahn,1 point,Tue Jun 30 19:14:00 2015 UTC,"Heh, never assume two data stores are interoperable without testing them first :) Glad you figured it out, thanks for following up posting the culprit! By the way, from my experience, as long as the connection and the instance are healthy, redis does not exhibit ""cache misses"" (that's because redis isn't designed as a cache per se, but more of a general purpose in-memory database). APCu on the other hand can miss, but then APC is a real cache storage mechanism, if you treat it as such with proper fallbacks it's fine.  While we are at it, since you are just getting started with Redis and phpredis, beware that while you can instruct phpredis to use redis for session storage (as opposed to files), phpredis will not lock session keys. This is important because PHP default behaviour is to lock session files, which prevents two requests from overwriting one another. If you switch to store sessions in redis via phpredis, you will lose said locking, which means your app will be wide open for the nastiest race conditions you can imagine depending on how complex and how much session data is used. I recommend not to store sessions in redis unless you absolutely understand the consquences of non-locking session storage."
PHP,3bkekx,-Mahn,1 point,Tue Jun 30 19:54:53 2015 UTC,"Touché! I did test with simpler code first, but falsely assumed that the end to end worked for both. Funny how the ""simple"" things trip us up sometimes.  Interesting about the session locking. I try to keep sessions very light (<200 bytes), and mostly things are read. Writing is done on a limited basis, but persistence and recovery is important in the event of a node failure.  We're trying to get redundancies setup for every critical piece of infrastructure to eliminate any single points of failure. I also want the switchover to other instances to be as smooth as possible and ideally transparent to the user. Since our web service itself is distributed, keeping each web server instance stateless is important.  I might end up using a local cache on each instance to keep traffic down, and using a centralized (but fault-tolerant) cache for sessions. My current view is that Redis offers a lot of nice features (like pub/sub) that could be good for sharing other types of information/workflow across our instances, and save each instance a little bit of work. Thus my preference is to use a Redis cluster or at least master + read replicas as THE source for sessions and cached info."
PHP,3bkekx,-Mahn,2,Tue Jun 30 20:10:33 2015 UTC,"Redis could be a bit slower than memcached in certain cases, but a redis instance running locally ought to respond much quicker than a remote database of any kind. What address are you using to connect to redis locally? If it is 'localhost', try using '127.0.0.1' instead, it sounds stupid but in certain cases resolving 'localhost' can cause issues connecting."
PHP,3bkekx,-Mahn,2,Mon Jun 29 23:25:30 2015 UTC,"Agreed on the first points. I am using 127.0.0.1 to avoid any DNS resolution issues. On a whim I did try both, and localhost is maybe a few milliseconds slower."
PHP,3bkekx,-Mahn,2,Mon Jun 29 23:30:37 2015 UTC,"Then it sounds to me there is something in your stack interfering between your code and your redis instance. Either that, or the benchmarking procedure is flawed. I would set up a new machine with the barebones necessary to run PHP and a local instance of redis, then run the benchmark there. If the results are the same, something's up with the benchmarking code. If it seems to be faster, then slowly add one by one all of the components in your stack (be it php extensions, databases, etc) to the barebones machine and test the benchmark for each until the culprit shows up. It's the poor man's way to debug, but it might just work if nothing else does."
PHP,3bkekx,LittleWashuu,1 point,Mon Jun 29 23:45:15 2015 UTC,"This did start as a barebones os install a week ago, so there shouldn' be much cruft. I tested both local and remote instances of redis (local is faster, but still slower than the remote MySQL instance). The remote redis is always proportionally slower than the local instance, which seems fine to me. I could disable php extensions if that would help - I agree that sometimes you have to distill down one layer at a time to debug!  I should also clarify that I'm testing both with my own full php code as a ""real-world"" benchmark, and using the redis-benchmark tool. The redis-benchmark tool seems to indicate that both the remote and local redis instances are behaving properly - <7ms response for GET in the average worst case (remote). Does that sound proper to you?"
PHP,3bkekx,melokoton,1 point,Mon Jun 29 23:53:31 2015 UTC,"The redis-benchmark tool seems to indicate that both the remote and local redis instances are behaving properly - <7ms response for GET in the average worst case (remote). Does that sound proper to you?   That sounds fine to me. I wish I could be of more help but nothing you posted so far suggests there's something wrong in your setup per se. You may want to consider posting the code you used to benchmark, but otherwise I'd say you have to test components one by one.  As a sidenote, if all you need is a local cache for PHP, consider using APCu, it's orders of magnitude faster than a local instance of redis or memcached because it uses shared memory between processes, but it has the downside of not being able to scale to clusters of servers. If clustering your cache is not important to you definitively check it out."
PHP,3bkekx,gunshard,2,Tue Jun 30 13:41:19 2015 UTC,"Good call - it was totally my code, haha. I posted the solution.  Thanks!"
PHP,3bkekx,-Mahn,1 point,Tue Jun 30 19:22:36 2015 UTC,"I am going to be scaling to clusters in the near future, but that cache looks pretty nice. I am using opcache for script performance (without timestamp validation).  I tested using predis as some others had suggested - same results, maybe 5-10% slower than phpredis (not terrible). Given these results, it does seem like it has to be something further down in my stack, very puzzling. I'll keep drilling down - would you like me to update when/if I figure it out?  Thanks for your help!"
PHP,3bkekx,-Mahn,1 point,Tue Jun 30 15:11:33 2015 UTC,"I am going to be scaling to clusters in the near future, but that cache looks pretty nice. I am using opcache for script performance (without timestamp validation).   But do you need your cache to be distributed? Because you can scale to clusters while keeping your cache local. APCu can be crazy fast, I get a few thousands of fetch/store operations in less than 5ms (I benchmarked back in the day)."
PHP,3bkekx,llbbl,1 point,Tue Jun 30 19:58:39 2015 UTC,Are you using a single Redis instance or multiple servers?  I previous encountered an issue where the connection library would take up to a few seconds to determine that a server in the Redis cluster was not operating correctly.
PHP,3bkekx,llbbl,1 point,Tue Jun 30 05:08:37 2015 UTC,"Single Redis instance, no read replicas or anything like that."
PHP,3bkekx,LittleWashuu,2,Tue Jun 30 14:09:55 2015 UTC,"You already tried querying remote and local and is working as expected (local is faster) so it must be something in your stack.  Instead of guessing, try profiling your code with Xdebug and then analyze it with a tool like Kcachegrind.  Do it for both (remote and local) and see what is taking so much time in your stack."
PHP,3bkekx,llbbl,1 point,Tue Jun 30 03:51:21 2015 UTC,"I recommend installing the php redis extension, if you're on ubuntu >= 14.04 use:  sudo apt-get install php5-redis   Additionally I recommend reading up on how Redis handles persistence, if you're just using redis for caching you can simply turn persistence off.  http://redis.io/topics/persistence"
PHP,3blaxj,webboy89860,1 point,Tue Jun 30 03:39:14 2015 UTC,"Great idea! The title doesn't really say, this is about using Toran Proxy in a container to cache Composer packages for yourself"
PHP,3blaxj,fideloper,1 point,Tue Jun 30 12:21:03 2015 UTC,"WoW , too long"
PHP,3bhc88,hophacker,6,Mon Jun 29 05:48:39 2015 UTC,What benefit does this offer over a regular class?
PHP,3bhc88,LeBuddha,9,Mon Jun 29 07:21:48 2015 UTC,"In the object-oriented paradigm, classes aren't supposed to be mere data-structures -  they are supposed to be things that 'do things' which conceptually belong closely together and will only vary as a whole.  Classes are meant to encapsulate and thus hide the internals of behavior - and use data (processed from constructor- or method-arguments) to achieve that end.  Structs are what the name says - data-structures. They allow us to pass-around and modify structures of data while having certainty that the values of the respective fields have the right type, and nothing else.   You can use classes for this - and in PHP, if we wanted any form of type-validation for a data-structure, that's exactly what we had/have to do, because you can't restrict the names, numbers and types of elements in associative arrays. The alternative is to just use assoc arrays and check / sanitize types in the consumer. That's fine, too - and often preferable to using classes (in order to avoid a class/file-explosion in complex applications) - but certainly cumbersome.  With structs, you can organize your application more clearly - all classes have behavior, and mere data-structures are no longer mixed in with them - reflecting the functional and conceptual separation. They also don't need their own files for definition anymore. Defining structs anywhere, even on runtime, is perfectly fine - though it still makes sense to 'predefine' commonly used structs. And of course - to make use of the main advantage of type safety for complex types without (ab)using classes, consumers have to know about them in order to be able to type-hint, so they have to be predefined.  (Edited for clarity)"
PHP,3bhc88,BlueHatScience,3,Mon Jun 29 09:59:08 2015 UTC,"I do like your concept but I don't think there are good reasons to go with arbitrary statement that classes should 'do things'.  In fact there is no big difference between classes and structures in languages which have both. Differences are really small. What is important is of course that: structures are made for representing data structures. But in languages that have lack of this another type of data and have only classes, these classes may be used instead of structures without violating any of good OOP good practices.  There are even really popular patterns like Data Transfer Object that are expected and supported in popular libraries (for example in Doctrine) and you cane make clear distinction between data objects and classes by using fixed namespaces and logic naming conventions by prefixing or suffixing your classes name.  I don't think your concept is wrong. The point I'm trying to make is that the classes are just fine for using them as structures specially in languages with lack of built in support for structs."
PHP,3bhc88,ekiwok_,2,Tue Jun 30 06:41:39 2015 UTC,"In fact there is no big difference between classes and structures in languages which have both. Differences are really small. [...] structures are made for representing data structures   Exactly! - And in languages which have both - the most important (I would argue) difference of those few is behavior, which structs don't have. If some complex entity has properties / data, but no behavior, it's a data structure and will naturally be implemented as a struct.   But you're absolutely right - in languages which don't have structs, but have classes, those are a natural fit... just not perfect. PHP was designed to be so simple and flexible that you could use arrays for most things and get a lot of stuff done in a simple way. And (if you know to avoid the pitfalls) and take care of sanitation / checking in the consumer, they are still just as valid an implementation of a data-structure as a class.  You're right, too that behavior must not be the only difference-maker between structs and classes. I thought about it some more and remembered that classes can be a valid implementation when you need inheritance, even without external behavior (aside from setting and getting). But then, it's mostly possible to solve the same problem with composition (eg strategy, decorator) instead of inheritance, and you can build actual structs, as well as assoc-arrays by composition.  In any case - yes, I agree it's fine to use classes for structs in PHP, as well as assoc arrays, since PHP doesn't have native structs. But if it had good native support for structs, I would say many classes in many projects would be better suited to them, conceptually, than they are to the class-concept... namely all those instances where classes are used as data containers & type safety providers / complex data structures, instead of providing behavior (f)or application-infrastructure.  Another aspect - if a class doesn't just receive and provide data unmodified, but somehow transforms the input, for example by sanitizing and/or consolidating it, I would think that counts as the kind of behavior that I took to distinguish (though not uniquely) the role of classes in the OO-paradigm from that of mere structs."
PHP,3bhc88,BlueHatScience,2,Tue Jun 30 21:44:38 2015 UTC,None - other than type checking. In C++ structs are actually just classes with only public properties.
PHP,3bhc88,Chippiewall,3,Mon Jun 29 21:49:15 2015 UTC,"This probably will seem like insanity for some, for me it was a fun way to play around with type hinting in PHP7. Yeah, it does eval() things to generate a class on the fly - but it's only as dangerous as the values you feed it.   I think it's kinda neat because I often find myself creating basic data structures/models that offer very little other than some properties and some getter/setters. Having this sort of syntax could make that a bit easier."
PHP,3bhc88,SaltTM,5,Mon Jun 29 05:58:15 2015 UTC,"I often find myself creating basic data structures/models that offer very little other than some properties and some getter/setters.   Pretty neat, but why not use anonymous classes? https://wiki.php.net/rfc/anonymous_classes"
PHP,3bhc88,ivosaurus,8,Mon Jun 29 06:50:30 2015 UTC,That is really cool and I wasn't even aware that made it into PHP7. Seems like an easy way to refactor out the eval statements. Thanks for sharing.
PHP,3bhc88,innerspirit,3,Mon Jun 29 07:06:56 2015 UTC,"Interestingly, Python also implements some very similar functionality in its standard library, called namedtuple. It can come in handy all the time.  It also uses an eval of a templated class code string to construct the resulting object. Which has resulted in many, many user arguments over whether that is The Best Way To Do It ever since."
PHP,3bhc88,ircmaxell,2,Tue Jun 30 01:19:54 2015 UTC,"I think it would be interesting to use this as a less verbose way of declaring entity classes.  You could take a db schema and turn it into a bunch of classes via the array conversion, maybe add a couple of methods here and there, and then you could use type hinting to pass objects around through your code.  The benefit would be not having to maintain a bunch of classes manually and not having to add/remove fields from them as your schema changes."
PHP,3bhc88,dericofilho,1 point,Mon Jun 29 09:34:17 2015 UTC,I was definitely thinking that would be a very practical use case.
PHP,3bhc88,renang,2,Mon Jun 29 13:53:01 2015 UTC,"Awesome. Really, awesome. Nothing something I'd suggest using in production, but an awesome demonstration of dynamic programming.  One idea, instead of eval, create a series of anonymous functions with the proper type hints, and set them into an array. That way you have a map for each property and a callback to validate it...  But this kind of experimentation is what I love to see from the community. Keep it up!"
PHP,3bhc88,fredoche,1 point,Wed Jul 1 14:49:55 2015 UTC,Is Go's visibility rules implemented?
PHP,3bhc88,c12,2,Mon Jun 29 07:20:21 2015 UTC,"Yeah. Everything named with its first letter in uppercase gets exported. So func Print() gets exported, but func print() doesn't."
PHP,3bhc88,2012-09-04,1 point,Mon Jun 29 09:07:52 2015 UTC,That'd be pretty cool but I can't think of a way to pull that off in PHP in a way that actually worked like go's visibility rules.
PHP,3bhc88,nikic,1 point,Mon Jun 29 16:30:14 2015 UTC,"Interesting concept, but high performance degradation, because it is not possible to use opcode caching."
PHP,3bhc88,aequasi08,2,Mon Jun 29 12:41:35 2015 UTC,"As far as I know you're not wrong, however I think structs are extremely useful and should be included as a core feature of PHP; for now this would make do as a nice example of how it could work."
PHP,3bhc88,c12,5,Mon Jun 29 14:18:05 2015 UTC,We definitely want enums before structs!! Seriously! Been trying to get that in PHP for 15 years now!
PHP,3bhc88,Jaimz22,2,Mon Jun 29 19:02:25 2015 UTC,"I think chances are pretty good that you'll see enums in PHP 7.1, as someone is already working on a proposal and implementation, and I don't see any obvious reasons for it to be declined."
PHP,3bhc88,geggleto,2,Mon Jun 29 22:18:20 2015 UTC,Besides the obvious I dont like change...  Looking forward to it though
PHP,3bhc88,gearvOsh,1 point,Mon Jun 29 22:25:53 2015 UTC,"Oh for sure, enums are supremely useful and I have ended up using various solutions to emulate their behavior in php for years :)"
PHP,3bhc88,Huliek,1 point,Tue Jun 30 07:16:38 2015 UTC,"just a thought... I haven't tested PHP7 yet... but:  Could you use anonymous classes (yeah I saw the other comment) then use casting? so you'd end up with something like this  (Struct)['User'=>['name'=>'string','email'=>'string','age'=>'string']];  That'd be kind of cool"
PHP,3bhc88,baalkor,1 point,Mon Jun 29 14:43:45 2015 UTC,How does this work if i want to say turn it into JSON ?
PHP,3bhok2,adamn90,3,Mon Jun 29 08:40:08 2015 UTC,WHat does this have to do with PHP?
PHP,3bhok2,fleshintogear,3,Mon Jun 29 18:51:50 2015 UTC,"```php echo ""I think he's implying that some evil person is making him read grey PHP code""; echo ""on github and suggesting that they could use this syntax-highlighting thing""; ```"
PHP,3bhok2,wubblewobble,3,Mon Jun 29 21:26:04 2015 UTC,"```console $ echo 'Also useful for highlighting console output...' $ composer require --dev ""phpunit/phpunit:*"" ```   https://gist.github.com/deizel/beecf49f1e27bc4a4ba2"
PHP,3bhok2,deizel,2,Tue Jun 30 00:19:41 2015 UTC,"note: mostly proprietary to github-variant markdown plugins.  Which for various reasons, not everyone will want to use. Also requires support from the CSS generating functionality of the site."
PHP,3bhok2,ivosaurus,3,Tue Jun 30 01:13:46 2015 UTC,It's part of the common mark spec called info string.
PHP,3bftou,Mike724,30,Sun Jun 28 21:11:27 2015 UTC,soooo your solution to avoiding frameworks is creating a framework?
PHP,3bftou,mykeyboardhaskeys,24,Sun Jun 28 22:39:15 2015 UTC,"I think this is more interesting to deconstruct and study as an approach, instead of taking it naively as in ""this guy is telling us to use his framework"".  Having a framework is inevitable. But it does matter if it's quickly assembled ad-hoc according to the needs of the project, or it's a big monolith designed to serve an abstract ""general purpose"" with tight coupling between components and lots of magic.  When you integrate the components yourself, those components come from different vendors, they're forced to provide simple and easy to use interfaces and you're forced to integrate them in a loosely coupled fashion.   When they all come from one framework, the author may advertise component-based architecture, and they might be putting some honest effort into it, but the temptation is often too great to add a bunch of shortcuts that hide complexity for the purpose of demos, sample apps and the documentation (a.k.a. ""convention over configuration"" - familiar phrase?), and you're back stuck to a monolith before you even know it."
PHP,3bftou,sekjun9878,8,Sun Jun 28 22:51:11 2015 UTC,"You worded that a lot better than I was able to. The point of this is to give an example of how I personally have done it, so others aren't as afraid about doing it themselves (thinking that they may be alone in their venture). It's great for discussion."
PHP,3bftou,sekjun9878,2,Sun Jun 28 23:04:36 2015 UTC,"So what you're suggesting is... Basically the Symfony 2 project?  (Symfony is made of their own standalone components, like you say, tied together into a tight framework, like you say.)"
PHP,3bftou,pmjones,4,Mon Jun 29 08:45:44 2015 UTC,"So what you're suggesting is... Basically the Symfony 2 project?   No... think of the implicit dependencies you roll into your component when you factor it as a Symfony bundle. It's as far from ""POPO"" as it gets.  Symfony is an example of a project that tries to be componentized, but veers off that goal drastically in some places. I want to say nothing bad about Symfony as it's one of the better PHP projects to have around, and some components are relatively standalone. But I'm not ""suggesting it"".   Symfony is made of their own standalone components, like you say, tied together into a tight framework, like you say.   The entire comment was about ad-hoc vs. general purpose frameworks, and I'm afraid somehow you missed that."
PHP,3bftou,pmjones,2,Mon Jun 29 08:48:57 2015 UTC,"Hmm, I'm not sure I agree with you, although I'm not even sure what we're discussing now.  I was arguing about the   When they all come from one framework, the author may advertise component-based architecture, and they might be putting some honest effort into it, but the temptation is often too great to add a bunch of shortcuts that hide complexity for the purpose of demos, sample apps and the documentation (a.k.a. ""convention over configuration"" - familiar phrase?), and you're back stuck to a monolith before you even know it.   Components used in frameworks are not different to general-purpose libraries that are out there. Take Symfony 2 for example (since that's what I use,) you can take anything out of it, like the form component, the Doctrine 2 ORM component, the DBAL, the router, the HttpFoundation, the routing, security, any and all of the component as you see fit. If you're not using it, you can either not use it or you can remove it and it won't have the slightest effect on constraining you to use those components.  Those components that I just mentioned, are also standalone. If you have composer, go for it. Require the component and you can use it in your own project without ever using the framework. Nobody's stopping you from using Propel or Doctrine 2 on your own projects. In fact, they're so modular, you can create an entirely new framework out of them. The Laravel team uses some of Symfony's components to make their framework. If that doesn't demostrate how modular and standalone those libraries are, I'm not sure what can.  The author of this article, links to his GitHub repo of this https://github.com/Mike724/Frameworkless. If you have a look at it, it is basically a framework. A framework doesn't have to be one of the popular multi-purpose megaproject, it can be as tiny as a set of PHP scripts and clean separation of roles and ta-da! You have a framework on your hands!  A framework is simply a collection of components making them ready to use, which is exactly what the author has come up with. And he calls it ""frameworkless"". How ironic.  Edit: I'm not trying to bash anyone, hopefully nobody finds it that way!"
PHP,3bftou,sekjun9878,1 point,Mon Jun 29 10:37:00 2015 UTC,"Those components that I just mentioned, are also standalone. If you have composer, go for it. Require the component and you can use it in your own project without ever using the framework.   The components might be independent from the framework but they are not always independent from other components. Pick 2 or 3 that have other dependencies, and pretty soon you have most or all of the framework.  Aura, on the other hand, is committed to the idea that the components should be independent from a framework and from each other. The library packages are truly standalone."
PHP,3bftou,SkyRak3r,1 point,Mon Jun 29 16:15:56 2015 UTC,"Admit it, you rewrote Aura to fit this thread. :P  I've noticed the dependency problem in many ""component based"" frameworks, not just dependencies between components, but even circular dependencies, which means what looks like two components is one component (always used together).  Might be interesting to see how popular projects like Symfony look like with dependency lines drawn between the components to see if we can identify separate modules at all, or at least relatively defined layers. A naive static analysis might not do, however, because Symfony relies on codegen and reflection for configuration & wiring."
PHP,3bftou,kekj,1 point,Tue Jun 30 04:38:25 2015 UTC,"Admit it, you rewrote Aura to fit this thread.   Yes, although going back in time to 2010 to do the rewriting retroactively has severely depleted my Delorean plutonium reserves."
PHP,3bftou,amcsi,1 point,Tue Jun 30 15:04:49 2015 UTC,So that's your secret to modernizing legacy codebases.
PHP,3bftou,step_hane,1 point,Tue Jun 30 15:26:10 2015 UTC,"Hmm, okay. I'm sure that they are still standalone to some degree, but you seem to have more experience in that than I do so I'll take your word for it."
PHP,3bftou,Disgruntled__Goat,1 point,Tue Jun 30 05:50:17 2015 UTC,"I think there was a bit of misunderstanding here. I'm not against frameworks at all, they're great, but this is meant to offer an alternative solution that allows you to create a tailor made framework specific to your needs. I modified the post intro to reflect that."
PHP,3bftou,step_hane,1 point,Sun Jun 28 22:56:58 2015 UTC,Library !== Framework. See here
PHP,3bftou,step_hane,3,Mon Jun 29 08:49:51 2015 UTC,"Love it. I've been using Symfont and Zf2 throught the years, but more and more thinking ""I can make it simpler"" and without so many deps. Your approach is something I've been thinking of doing for a while - clean and elegant."
PHP,3bftou,step_hane,1 point,Mon Jun 29 13:10:03 2015 UTC,"Thanks! Good luck, and if you discover anything, feel feel to contribute back to the repo :P"
PHP,3bftou,Disgruntled__Goat,2,Mon Jun 29 13:26:08 2015 UTC,I already dislike your not-framework framework for making the assumption that I want to namespace controllers by Controllers rather than App\EntityName\Controller  Otherwise I really like the concept! Upvoted.
PHP,3bftou,step_hane,1 point,Mon Jun 29 12:35:31 2015 UTC,"I can see what you mean, for a larger project there should be more thought put into the namespacing. Thanks!"
PHP,3bftou,step_hane,5,Mon Jun 29 12:51:45 2015 UTC,"Hi! This is my first blog post, and my first time posting to this subreddit. If you have any questions, let me know!"
PHP,3bftou,step_hane,3,Sun Jun 28 21:23:31 2015 UTC,"Something I've wondered for a while, but never seem to find the answer to: In models, it seems like the convention is to pass in required classes when instantiating. I always wondered about that with respect to controllers. Do you have any insight on that? If controller methods have $instance = new Model() in them, does that mean that inversion of control is only for models? If so, do you know why?"
PHP,3bftou,pmjones,3,Sun Jun 28 23:41:26 2015 UTC,"I think the key difference is how tightly coupled you want/need your code to be.  For example in a model you don't want to tightly couple it to your specific database in case you decide to switch databases later (probably a bad example but you get the point). So you pass some kind of StorageInterface into the model, which can be swapped out later (e.g. For testing).  Whereas in controllers the actions you're doing are quite specific so it makes sense to instantiate models there. There's not really any way to make your models generic enough that you could pass in a different model. You'd just change the code in the controller."
PHP,3bftou,step_hane,1 point,Mon Jun 29 01:00:18 2015 UTC,Thanks. I think that makes sense. Have you seen code that uses ioc in the controller?
PHP,3bftou,step_hane,1 point,Mon Jun 29 03:44:08 2015 UTC,"It's quite common, many frameworks will inject dependencies if you specify them in a controller constructor.  I'm not a fan of that exact approach (because it means the controller can ask for anything... including stuff it shouldn't access directly, say raw SQL connections), but... it's a way."
PHP,3bftou,fmargaine,1 point,Mon Jun 29 08:35:39 2015 UTC,"I actually do this, to pass in an instance of PDO to the controller constructor."
PHP,3bftou,fmargaine,2,Mon Jun 29 10:54:49 2015 UTC,"How close the controller is to the ""metal"" (such as talking to PDO) depends on how well differentiated the domain layer is from the rest of the application. My comment implies it's well differentiated, which reduces controller & views to be yet another ""dumb client"" which presents aspects of the domain as a website (for example). That's how I prefer to write apps, but for smaller projects it's a lot of writing without necessarily yielding serious benefits. So, what's suitable for a controller is a project-specific decision, sorry if I wasn't clear."
PHP,3bftou,fmargaine,1 point,Mon Jun 29 10:58:28 2015 UTC,"Gotcha, thanks for the clarification!"
PHP,3bftou,pmjones,3,Mon Jun 29 11:02:32 2015 UTC,"BTW, as a side remark, it's good to be able to specify which dependencies are valid for which layer, this helps enforce the intended architectural constraints in an app.  Let's say you have a central app container which has dependencies like various services, db connections and so on.  Let's say you have dependencies A, B, C, D, E. You decide:   I want controllers to work with A, B, C only.  I want services (domain logic) to work with C, D, E only.   When a controller tries to ask for D or a service tries to ask for B, it's good if there is either no way to do it, or it at least yields a runtime error. This ensures components stay within their scope, because watching what every class types in its constructor if you have automatic resolution becomes impractical at some point, and then people are tempted to violate the architecture of the system, if nothing stops them (either due to ignorance, or pending deadlines).  I've not seen a PHP framework from the popular ones that gets that right yet."
PHP,3bftou,pmjones,1 point,Mon Jun 29 11:08:39 2015 UTC,"So then back to my original question: is not injecting in controllers ""ok"" because these classes aren't ones you test usually? And if I wanted to inject into a controller, how does that work with complex apps? A container?"
PHP,3bftou,pmjones,1 point,Tue Jun 30 04:49:02 2015 UTC,"So then back to my original question: is not injecting in controllers ""ok"" because these classes aren't ones you test usually?   If you have a well isolated domain layer you wouldn't unit test controllers, yes, because controllers become quite minimal and their ""unit"" is the UI and UI has to be tested manually (the only thing you can test automatically in UI is ""did this change in any subtle way""... which is kinda pointless).  But DI isn't really just about testing. It's also about isolation and configurability. If a controller has to accept its dependencies in one specific place (say the constructor) they're easily visible, so easily controllable and configurable for both sides (dispatcher and controller). When controllers reach out to static classes, as your app grows it becomes hard to keep track of how they tick, and where their configuration points are.  This doesn't have to apply to every single thing you use from a controller, but I think passing in the domain APIs (referred to as ""model"" in the web community) isn't that hard, so...   And if I wanted to inject into a controller, how does that work with complex apps? A container?   PHP frameworks these days tend to use a container which injects via reflection, but it's hardly essential to do it this way. Maybe provide an example and I'll give specific suggestions."
PHP,3bftou,step_hane,1 point,Tue Jun 30 05:16:26 2015 UTC,"In my experience, it seems like most apps I run into have a front controller and then at least one other controller. So let's say I have a route that is collecting book names from the DB and outputting it to the screen.  I usually have a method called BookController->getBooks() and inside that I may have a $books = new BookManager($DB); $books->getBooks(); return $books;  I don't know where to inject BookManager. It seems like I'm going to have a lot of classes to pass in and reflection seems like ""Well, guys, can't think of anything better to do than to reverse engineer this thing... here goes!"""
PHP,3bftou,pmjones,1 point,Tue Jun 30 15:01:56 2015 UTC,"If your model requires dependencies it can make sense to inject some of those into the controller, like the database connection (which you can then mock for testing). It's really a judgement call - if an object is quite generic then DI makes sense, otherwise instantiate it in the controller."
PHP,3bftou,fmargaine,1 point,Mon Jun 29 13:54:39 2015 UTC,I like how you're putting this. Let's say I wanted to inject things into the controller. Would this be through reflection or just a DI container? Seems like it could get messy fast.
PHP,3bftou,egisspegis,1 point,Tue Jun 30 04:47:14 2015 UTC,"This makes sense to me, but all the DI examples I see never talk about where to instantiate and how this should happen. I mostly see model examples which makes me wonder what the rationales are for various ways of injecting/not injecting."
PHP,3bftou,TheHelgeSverre,1 point,Tue Jun 30 04:51:02 2015 UTC,"Do you have an example of what you mean about the models? With controllers, and almost everything else, using dependency injection (passing an object to the function, instead of having the function itself create/get the object) makes unit testing easier. I don't think that answers your question, though."
PHP,3bftou,AceBacker,1 point,Sun Jun 28 23:56:06 2015 UTC,"I don't think the purpose of dependency injection is simply to make tests possible, although that is a huge practical consideration. And controllers aren't as likely a target for tests (I don't think). I guess what I'm wondering is: is having class instantiation happening in controller methods ""not doing DI/IOC""? And the follow ups would be: If you're not ""supposed"" to have DI in the controller, why not? And if you are, how is that supposed to happen? Even with reflection, I don't see how you can fully tailor this without using a service layer at some point. Even a container won't fully resolve this I don't think  Anyway, I was looking through your code and figured since you were disassembling stuff and playing with it you may have some insight. This questions has been on my mind for years."
PHP,3bftou,pmjones,1 point,Mon Jun 29 00:10:38 2015 UTC,"I've never personally heard of a rule that states you're ""not supposed"" to have DI in a controller. Business logic shouldn't be in a controller, but.. to say that every programmer is perfect is flawed, and would lead to blocks of code that are not vetted as well as they should be. Controllers are more poised for integration tests, though.  Maybe someone with a bit more experience with this can chime in?"
PHP,3bevcs,watterssn,26,Sun Jun 28 16:17:18 2015 UTC,"What he is doing is cool, but at some point you have to step back and think. The things that make PHPStorm great are because it's a full IDE, not a simple text editor. These great features slow it down. We can port more and more of those into a text editor, and at some point turn that into an IDE. But the more feature we port the slower it goes. Once it finally has all the features of an IDE, it will be as slow as one.   PHPStorm is not slow because it's poorly coded, rather it has lots of features like this. Porting all those features to Sublime Text just seems a bit silly, it will just slow it down."
PHP,3bevcs,Jedakiah,4,Sun Jun 28 20:08:53 2015 UTC,"FTA:   Please note: There are a million other features that PHPStorm uniquely offers, but to be honest, it's the tiny little conveniences that I've seen provide the biggest boost in efficiency.   He's not porting every feature, just the handful that add to his productivity.  The startup speed should still be significantly faster for a text editor with some plugins than a full blown IDE."
PHP,3bevcs,SquareWheel,7,Sun Jun 28 20:41:50 2015 UTC,"Startup speed has never been important to me.. Shit, i leave the IDE open 24/7 anyways."
PHP,3bevcs,aequasi08,-2,Mon Jun 29 08:19:26 2015 UTC,"I know. And he is implementing a few other features that people already ported. And then someone will pickup where he left off, just as he did with someone else, and implement a few more. It's been happening for a while now, and has every indication of continuing. Like I said, at some point we should step back and think."
PHP,3bevcs,Jedakiah,7,Sun Jun 28 20:47:45 2015 UTC,"I will never go back to a text editor after using PhpStorm. I really don't know what this slowdown business is. Yes, it's slow (comparatively) to start but how often do you do that? I think I do it once a week. And I like having extra features that I don't use in the IDE. You never know when you'll find some new feature. My coworker just discovered the clipboard manager. Built right in. The diff tool is great. Actually, all the Git tools are great. Shows which files are new, changed, or not tracked. Also shows what lines have been changed. The database browser is handy. It has specific integration with Symfony, WordPress, Vagrant, Composer, and NPM. One time I set up a hotkey to take the current file, upload to a server and run a PHPUnit test via the remote server. I just can't but help think the that think PhpStorm isn't for them never really tried to use it or think of it like Dreamweaver or something."
PHP,3bevcs,MyWorkAccountThisIs,3,Sun Jun 28 21:25:53 2015 UTC,"Perhaps.  Though I think realistically, most people who read this article are just going to pick out the plugins that most interest them rather than install in full.  It's more a list of resources than it is a guide, despite the intro.  For me, I'm already using the linters but hadn't seen GitGutter before.  That one I'll add to my list.  But I've no interest in PHPUnit Build, for instance."
PHP,3bevcs,SquareWheel,-8,Sun Jun 28 20:55:01 2015 UTC,PHPStorm is slow in part because it's an IDEA...
PHP,3bevcs,jvnk,3,Sun Jun 28 22:07:27 2015 UTC,"I've recently switched from Sublime Text to PHPStorm, and my Sublime package list looked roughly like his. What finally made me switch was the XDebug support. The package for Sublime is very unstable, and I thought it was just that XDebug was like that, until I saw a colleague use it. The connection is stable, the variable overview is excellent, and I like the way the values appear as 'comments' in your code.   Overal it's just the better editor for PHP, and do think no amount of packages is going to bring Sublime to the same level. The code-completion for project code is excellent. Running PHPUnit test with XDebug straight from the editor is amazing. I didn't know I had been missing the refactoring and 'smart delete' functions, but I had. The little 'TODO' tab that looks for 'todo' comments in your code is quite handy. And there are more functions that I forgot to list now that I use every day and come standard with PHPStorm, but I didn't have in Sublime.  Sublime is still my default editor for PHP files, but my main projects I do in PHPStorm. I do miss the overal speed and fussy search Sublime Text has, but it doesn't weight up against all the added functionality in PHPStorm."
PHP,3bevcs,siraic,2,Mon Jun 29 08:03:35 2015 UTC,"Yeah, it's faster to open and to open files but, for productivity, i still prefer using an IDE. It makes me faster in development."
PHP,3bevcs,aleste2,1 point,Mon Jun 29 16:01:17 2015 UTC,"Construction injection (e.g. simplifying injecting a property into the constructer as a property, setting it in the constructor, and defining the class property) is something I think can be solved with a clever macro—but I haven't seen that clever macro yet.   phpfmt has the option to create the constructor and setter/getters, which is essentially the simplest way to add a dependency to a class. Just declare the property, and it will look for missing getter and setter. If constructor is missing, it will add of properties (and their setters/getters) in a brand new constructor."
PHP,3bevcs,dericofilho,1 point,Sun Jun 28 19:30:31 2015 UTC,"Construction injection (e.g. simplifying injecting a property into the constructer as a property, setting it in the constructor, and defining the class property) is something I think can be solved with a clever macro—but I haven't seen that clever macro yet.   I tried this once - it's not possible. Sublime macros miss one important feature that would make this possible: Go to next/previous occurance of a substring or pattern. It might be possible to do with a plugin, I should try writing it at some point."
PHP,3bevcs,anlutro,1 point,Mon Jun 29 08:04:07 2015 UTC,PHPStorm > any other PHP IDE.
PHP,3bevcs,fleshintogear,-23,Mon Jun 29 18:53:04 2015 UTC,netbeans ftw
PHP,3bevcs,nigger2014,1 point,Sun Jun 28 19:46:20 2015 UTC,"So much about this post is just, bleck."
PHP,3bfdbz,rszrama,1 point,Sun Jun 28 18:57:04 2015 UTC,"Am I reading this correctly, in that php7 will have performance on par with hhvm?"
PHP,3bfdbz,psych0fish,2,Mon Jun 29 03:29:04 2015 UTC,"Yup, with the big difference being that you'll still have most of your PHP extensions that may simply not exist in HHVM.   HHVM is faster in repo.auth mode (which is what you'd use in a production setting, for sure), so it still leads, but is less attractive now I think. There are other factors too, I think HHVM still uses less cpu, can still handle more overall requests better, and is more memory efficient. But if you gauge just by 'average page speed out the door"" it's not quite as attractive as it used to be."
PHP,3bfdbz,chuyskywalker,6,Mon Jun 29 03:55:49 2015 UTC,"The biggest selling points for me is the async/await support and Hack in general (type system, hh_client, collections etc). PHP can't compete against async Hack code. Most PHP applications aren't CPU bound, but instead spends the majority of their time blocking on DB, I/O and caching systems (memcache etc). Async/await allows the possibility of parallelizing this work, in a way that is much harder to achieve in PHP (still possible, but no language level support)."
PHP,3bfdbz,metanat,1 point,Mon Jun 29 05:24:25 2015 UTC,"You're right, that's another great feature of Hack/HHVM. However, Hack is a relatively substantial bet. Not saying it's going to go away or anything. If you've got a codebase the will work in HHVM, and you trust Hack to stick around, you've got a viable option there. If you're starting from scratch, there are other great languages for async-y-ness (like Node and Scala) which might offer much of the same benefit without as much risk."
PHP,3bfdbz,chuyskywalker,3,Mon Jun 29 05:30:16 2015 UTC,"I think the best reasoning here is what I like to call the ""build with brick"" analogy. There are many organizations out there who have invested significant resources into PHP: Codebase and accompanying technical debt, a skilled development team (some of whom probably regard PHP as their primary language), infrastructure planning around scaling PHP applications, and so on. These organizations are primarily ""built with brick"" but scaling PHP can prove difficult and/or costly for some business requirements.  For these organizations, there are significant barriers to switching to building with e.g. concrete, wood, bamboo, or space-age hyperplastics. For them it makes sense to continue to build with brick -- especially if the bricks in question can be significantly upgraded. This is what HHVM + Hacklang represents to this organization: Major upgrades without the significant downsides of a language change.   The benefits are pretty clear:   HHVM is open-source -- there is no loss of freedom from switching. Almost all PHP code runs without issues on HHVM at this point. (Some lingering Postgres issues and esoteric PHP extensions are the main exceptions.) Properly configured, HHVM is still kicking PHP7's butt on performance. (It performs better on single requests and scales up better under load as well.) PHP developers can switch to coding in Hack relatively easily, which brings developer productivity gains thanks to the type-checker. Specific application hotspots (around I/O in particular) can be re-written to take advantage of Hack's async functionality, which can offer additional major performance gains.   Put all of this together and it seems like a fairly compelling argument for any organization that's significantly invested in PHP and needs to scale up more effectively.  Build with brick."
PHP,3bfdbz,Kazanir,1 point,Mon Jun 29 14:00:50 2015 UTC,I agree. There are other great languages.
PHP,3bfdbz,metanat,1 point,Mon Jun 29 07:13:04 2015 UTC,Yes it appears so and when they implement JIT into php 7 it should be faster again.
PHP,3bfdbz,2qUX59WjEwlly30Zj9X,2,Mon Jun 29 03:43:14 2015 UTC,Nope
PHP,3bfdbz,Schweppesale,1 point,Mon Jun 29 04:52:16 2015 UTC,Guess I should have quantified the statement with additional improvements rather than a blanket statement. Thanks for the link was informative
PHP,3bfdbz,2qUX59WjEwlly30Zj9X,1 point,Mon Jun 29 05:58:47 2015 UTC,why are you using 12 decimal pointxs? 2 or 3 would have been enough ... it's too verbose
PHP,3bfdbz,iCupid,1 point,Mon Jun 29 11:52:38 2015 UTC,I just copied out the results from OSS Performance which are themselves from Siege. In my ongoing benchmarking of Drupal 8's daily commits (www.paddedhelmets.com/performance) there is a little better choice in significant figures. :)
PHP,3bfdbz,Kazanir,1 point,Mon Jun 29 13:43:36 2015 UTC,HHVM with Repo Authoritative mode PHP70 with any opcode cache? How configured?
PHP,3bfdbz,zulusx,2,Tue Jun 30 11:35:32 2015 UTC,"This is documented extensively in the blog post, but yes HHVM was tested with and without Repo Auth and PHP 5.6 and 7 both had opcache enabled."
PHP,3bfdbz,Kazanir,1 point,Tue Jun 30 13:12:47 2015 UTC,"Sorry I found only info about apc.stat (APC is dead, should be opcache.validate_timestamps for built-in opcache: Zend Optimizer Plus)"
PHP,3bfdbz,zulusx,1 point,Tue Jun 30 18:43:23 2015 UTC,"We're doing that too: https://github.com/hhvm/oss-performance/blob/master/conf/php.ini#L38  If there's anything we've missed, pull requests and issues are very welcome :)"
PHP,3bhpf3,gbuckingham89,2,Mon Jun 29 08:53:29 2015 UTC,Look into Event Driven and Event Sourcing. I think this is what you're looking for.
PHP,3bhpf3,n0xie,1 point,Mon Jun 29 09:41:37 2015 UTC,"EventSourcing is often what has happend, you could also look into the CommandBus. This is what the user wanted to do."
PHP,3bhpf3,mkroeders,2,Mon Jun 29 11:25:23 2015 UTC,"All of this depends on purpose and scope. Do you want the log for a few admins or customer service to review recent activity? Or for a social activity stream among users depending on their relationships?  Maybe you want a format for [activity streams}(http://activitystrea.ms/).  Then read some code about how it could be implemented: https://github.com/redpanda/ActivityStreams   Or maybe a complete server implementation: https://github.com/DracoBlue/activitystreams-php  If you need something fast and searchable, perhaps elastic search or kibana fit the bill: https://www.elastic.co/products/kibana"
PHP,3bhpf3,graydoubt,1 point,Mon Jun 29 16:58:21 2015 UTC,Why not create a human readable version of the log on create? At least in that moment all relevant data I assume are readily available.
PHP,3bhpf3,1von,1 point,Mon Jun 29 09:33:13 2015 UTC,"Why not create a human readable version of the log on create?   1) Speed 2) If you ever want to change the formatting, you now need to have a task to update the previously created human readable version - which would be a bit of a nightmare."
PHP,3bhpf3,Danack,1 point,Mon Jun 29 12:17:32 2015 UTC,"I recently found https://www.graylog.org/ but haven't used it yet, it could be good. :)"
PHP,3bhpf3,CheckeredMichael,1 point,Mon Jun 29 16:33:41 2015 UTC,"Our dinosaur logs updates, inserts and deletes from Zend DB's source. So every one of them are being logged."
PHP,3bge3s,teuna,3,Mon Jun 29 00:10:10 2015 UTC,Is there a list of words I should not use when naming files/folders/namespace?  I remember seing complaints about a drupal folder named 'core'.  Will people get mad if I use 'Open' as a vendor namespace?
PHP,3bge3s,hophacker,1 point,Mon Jun 29 06:12:54 2015 UTC,"There's no definitive list, but I'd probably recommend considering another vendor namespace. It seems likely that you'll face collisions down the road if you don't already. I always think of vendor namespacing as something that should be as unique as possible.  Unless this is a priv repo and you'll only be accessing it privately. Then do whatever you want."
PHP,3bge3s,CheckeredMichael,1 point,Mon Jun 29 06:22:00 2015 UTC,"The most common way is using your first and possible last name with whatever it is the thing is doing.  So you could have Michael/FileName or Michael/Folder/FileName or if you have a common first name, then use MichaelBrooks/FileName or MichaelBrooks/Folder/FileName  If you have a company, then you can use that as the namespace. If you name something 'Open' and someone else has a package with the same vendor name, then they can easily alias each of them so it won't overwrite one or the other.  I think if they're getting mad over 'Core' being used, then it's a pretty small concern, if someone wanted to use another package called 'Core' then they could alias it as say Michael/Core."
PHP,3bge3s,EquationTAKEN,3,Mon Jun 29 08:11:23 2015 UTC,"When I'm unit testing, I've heard you shouldn't be using static functions. You instantiate an object (mock), and unit test its methods.  Why?  I can see the need for mock objects when testing filewriters and database calling methods, but why not unit test static logic-and-return functions?"
PHP,3bge3s,fivetide,7,Mon Jun 29 07:25:08 2015 UTC,"I think you misunderstood that.   You should of course thest static logic-and-return functions.  BUT you should avoid using them, since you can not mock them when testing other components.   Usually you want to test object A not by mocking itself, but the other objects it collaborates with.   Look at this example:  class SomeClass {     public function updateStoredEntity ($id, $newContent) {         $entity = StaticStorage::getById($id);         $entity->setContent($content);         StaticStorage::persist($entity);     } }   Testing this would be hard, since you are wired to StaticStorage. Consider instead:  class SomeClass {     protected $storage;     public function __construct($storage) {         $this->storage = $storage;     }      public function updateStoredEntity ($id, $newContent) {         $entity = $this->storage->getById($id);         $entity->setContent($content);         $this->storage->persist($entity);     } }   This way you can inject a mocked storage, and use behavioural expectations to verify the entity is mutated correctly."
PHP,3bge3s,amazingmikeyc,1 point,Mon Jun 29 07:52:33 2015 UTC,"Exactly. You could mock the static object through some horrible hacking around with includes and autoloaders* but it would be daft; after all, the reason you want to avoid static objects isn't just about Mocking. it's about being able to swap out dependancies in general.  *SOURCE - once tried this like a fool"
PHP,3bge3s,fivetide,1 point,Mon Jun 29 13:05:34 2015 UTC,"If you ever need to do that again, have a look at runkit..."
PHP,3bge3s,Terr_,2,Mon Jun 29 17:28:06 2015 UTC,"The real problem isn't static-functions, but static-state. For example, suppose someone has a function:  class Util{     public static function Hash($data){         return sha1($data);     } }   That function isn't a problem. You can't mock it, but you don't need to, because it's all self-contained. Here's an example where it isn't so good:  class Util{     protected static $salt;     public static function setSalt($salt){         self::$salt = $salt;     }     public static function Hash($data){         return sha1($data . self::$salt);     } }   With this one, you've got a problem, because you've got some shared state that may or may not need to be reset/wiped/stored in-between all your tests.  Here's a worse-scenario:  class Util{     protected static $salt;     public static function Initialize($salt){         if(!is_null(self::$salt)){             throw new Exception(""Already initialized"");         }         self::$salt = $salt;     }     public static function Hash($data){         if(is_null(self::$salt)){             throw new Exception(""Not initialized"");         }         return sha1($data . self::$salt);     } }   Uh oh! Now you're forced to pick one and only one salt through your entire test run, and you have to make sure it's called once and only once too."
PHP,3bge3s,Disgruntled__Goat,3,Mon Jun 29 23:39:50 2015 UTC,"Is there any difference these days between HHVM and the PHP runtime? I mean in the sense of PHP functions that you cannot use in HHVM. All the relevant pages on the HHVM website just say ""coming soon""."
PHP,3bge3s,anlutro,2,Mon Jun 29 14:03:54 2015 UTC,"PHP still has a lot of extensions that aren't or are only partially implemented in HHVM. For example I've heard that postgres support is still pretty buggy. I couldn't list all of them, though."
PHP,3bge3s,shivenigma,3,Tue Jun 30 06:23:46 2015 UTC,"I am PHP, JS developer for almost 2 years now, worked on pretty challenging projects. But I don't have a computer science background. I am feeling like I'm lacking something. Is that a drawback to be a programmer. What can I do to overcome that ( other than getting a computer science degree)?"
PHP,3bge3s,Disgruntled__Goat,2,Mon Jun 29 14:53:37 2015 UTC,"I'd suggest learning some other programming languages, especially ones of different types (e.g. an OO language like Java and a functional language like Haskell). And maybe try and learn a bit about how computers work internally (processors, registers, etc)."
PHP,3bge3s,PrintfReddit,2,Mon Jun 29 15:47:36 2015 UTC,"I was similar to you before I started my CS course, I had really good experience with PHP but no formal education. I'm still only done with 2 years of out 4 so I might miss a few things, but in a nutshell for PHP at least you should read up on OO concepts, maybe learn some Java because it really helped with clearing my OO concepts. Data structures, formal theory of computation are not really directly relevant to PHP but can help understanding what's going on (especially data structures, theory of computation was mostly fun). Algorithm design was really really helpful. Formally learning about DBMS (normalisation, transaction and all) also helped quite a lot  One thing you can always do is look up any reputed university's course structure, and read about things you feel would be relevant (or research individual courses) and learn whichever you feel like. Good thing about CS is almost everything is available online without any cost, doesn't cost to learn."
PHP,3bge3s,bga9,1 point,Tue Jun 30 06:30:30 2015 UTC,"With PHPUnit, why does all documentation show ""$this->assert"" instead of ""static::assert"" since all the assert methods are static?  edit: spelling"
PHP,3bge3s,anlutro,2,Mon Jun 29 21:01:36 2015 UTC,"I'm just guessing:   more people are familiar with $this-> they ideally want to make them non-static but can't for technical reasons it's only a testing framework, so correctness doesn't matter as much"
PHP,3bge3s,aget23,1 point,Tue Jun 30 06:27:18 2015 UTC,"""The current Application is automatically injected by Silex to the Closure thanks to the type hinting.""  Is injection simply mean Silex is passing/injecting a Silex\Application variable to the function?  http://silex.sensiolabs.org/doc/usage.html#dynamic-routing"
PHP,3bge3s,anlutro,1 point,Tue Jun 30 01:38:16 2015 UTC,"That is a practical use of injection, yes.  Injection in general means to give things what they need from the outside, as opposed to the things that need other things finding it themselves.  Contrast this with this code example where injection isn't being used:  $app->get('/blog/{id}', function ($id) use ($app) {   Or this:  $app->get('/blog/{id}', function ($id) {     global $app;   Or this:  $app->get('/blog/{id}', function ($id) {     $app = Application::getInstance();"
PHP,3bge3s,sarciszewski,0,Tue Jun 30 06:31:53 2015 UTC,Would my time be better spent not helping the community and instead selling exploits to the US government? The market rate for a 0day is between $104 and $106 depending on the target. Kind of hard to ignore those numbers.
PHP,3bge3s,fivetide,3,Mon Jun 29 04:01:54 2015 UTC,Depends on how DateInterval::better() is implemented. If it returns a \MonetaryValue or \PersonalKarma ...
PHP,3bge3s,sarciszewski,3,Mon Jun 29 07:08:24 2015 UTC,I can't buy food with \PersonalKarma.
PHP,3bge3s,fivetide,4,Mon Jun 29 07:15:02 2015 UTC,But it will let you sleep() better.   Maybe you can do a combination of both. I imagine you can do a lot of community work with $106 moneez in your pocket. That might offset the negative karmic balance...
PHP,3bge3s,anlutro,1 point,Mon Jun 29 07:23:42 2015 UTC,Yes
PHP,3bge3s,amazingmikeyc,1 point,Mon Jun 29 12:16:54 2015 UTC,OR use your l33t hacking skillz with the exploit and make $$££$$£€€€100
PHP,3bge3s,sarciszewski,1 point,Mon Jun 29 13:01:13 2015 UTC,I'd rather not add another employment-prohibitive felony hacking conviction to my record if I can avoid it.
PHP,3bge3s,Terr_,1 point,Mon Jun 29 13:11:00 2015 UTC,https://www.youtube.com/watch?v=oBzvMLW0ii4
PHP,3bge3s,PrintfReddit,0,Tue Jun 30 00:00:10 2015 UTC,"What about exploiting the US Government? Hack the NSA and ransom them! Probably get assassinated on your second day but hey, it's worth the risk!"
PHP,3bi2np,quienchingados,5,Mon Jun 29 12:02:34 2015 UTC,"PHP is server-side, JS is client-side. So the short answer is no. The long answer is yes, you should create a JS redirect to a PHP-page with a GET or POST function so PHP can pick up on that. This can be accomplished trough a redirect like: index.php?exec=1 or using AJAX. And I would recommend learning AJAX."
PHP,3bi2np,blurrywindows,1 point,Mon Jun 29 12:04:40 2015 UTC,"Thank you for your help, I'll read AJAX then."
PHP,3bi2np,avindra,1 point,Mon Jun 29 12:07:08 2015 UTC,"I would recommend using a framework like Slim too, otherwise your ajax code can end up looking like spaghetti."
PHP,3bi2np,NeoThermic,1 point,Mon Jun 29 16:04:24 2015 UTC,"bookmarked, thanks!"
PHP,3bi2np,Pardalean,1 point,Mon Jun 29 16:06:10 2015 UTC,I suspect this is more of an XY Problem. What are you wanting to do in general? What made you consider that triggering the PHP from JS is your solution?
PHP,3bi2np,Pardalean,1 point,Mon Jun 29 13:06:21 2015 UTC,"tiredness, and lack of experience. thanks"
PHP,3bi2np,PickerPilgrim,1 point,Mon Jun 29 13:41:41 2015 UTC,"Sorry, I'm tired. What I'm going to do is load a blank page with javascript code to send a $_GET with the size of the screen, then I'll use php to determine the size of the text and the images. because stupid chrome doesn't work correctly on linux right now, and if the user changes the zoom on the screen the measurement of the screen messes up. with this I expect to have the very same resolution on any zoom. (I don't know if I'm tripping but the ""em"" on firefox looks way too different on chrome, and my design needs it to be precise. Thanks for the help, but I made an overnight and I'm kind of annoyed."
PHP,3bi2np,xsanisty,1 point,Mon Jun 29 14:05:13 2015 UTC,or maybe I should do it directly in the computer of the client... damn... lol... so I don't need php now. :D
PHP,3beo3y,SpiffyJr,1 point,Sun Jun 28 15:07:08 2015 UTC,What makes Tonis better than Relay?
PHP,3beo3y,Shadowhand,1 point,Sun Jun 28 16:00:44 2015 UTC,"I don't have any experience with Relay. Link? My Google-Fu is failing. Ah, the one from pmjones (https://github.com/relayphp/Relay.Relay)? I'll look at it and supply some feedback.  EDIT From the looks of it Relay appears to be much more low-level similar to Stratigility. Tonis sits on top of Stratigility (or possibly Relay, had I known about it) to provide some quality of life features. Specifically, a view manager for handling templating engines, easily outputting JSON, etc."
PHP,3beo3y,Shadowhand,0,Sun Jun 28 16:08:22 2015 UTC,"So you're actually baking in routing and response handling? That's not how I think of ""middleware"" but I guess that's okay. I personally would describe Tonis as a ""small framework that uses PSR-7 and middleware""."
PHP,3beo3y,pmjones,2,Sun Jun 28 17:21:47 2015 UTC,Potato Potato.  ;)
PHP,3beo3y,pmjones,1 point,Sun Jun 28 17:37:38 2015 UTC,"Depending on the entirety of Stratigility might be overkill. If all you need is a middleware execution system in the middle, Relay should be plenty sufficient. Add to that whatever middleware queue you want; starting to build a collection here -- note that it depend only on the request/response/next signature. Finally, stuff like routing need not be integrated; you can write a middleware piece that does the routing, so others can pull that out and add in a different one if they like.  These are all lessons learned from building Radar -- you may wish to combine forces there (or on the underlying libs) instead of ""diluting the market."""
PHP,3beo3y,pmjones,1 point,Mon Jun 29 13:44:51 2015 UTC,"Thanks for the middleware collection link - I added Tonis\ResponseTime.   For the framework, I wanted a bit more than just a simple middleware stack. Stratigility offers basic prefix mount points and Tonis expands on that by offering routing (through nikic/fast-route) and response helpers to output json, jsonp, render a template from various view strategies, etc.   These are features that I would need for any project I'll be working on so I packaged them into a very small framework. My problem with Radar is that I don't want to force ADR/MVC on consumers. I just give them some very basic tools and let them pick what they want to do with them. Relay, however, looks very nice for handling the middleware queue so I might look at using that and removing my own implementation."
PHP,3bdqfa,iKSv2,18,Sun Jun 28 06:36:15 2015 UTC,"What are these queries and what exactly is that idiot trying ?   As an idiot, I feel qualified to answer. It seems like someone is trying to find an injection vulnerability in your code.  Depending on which part of the query you're pasting up there, they may be succeeding, or not. The string above seems to be slug-ified, like for an article URL.  In either case mitigation techniques include:   Check which kind of forms send slug-ified strings to the DB. Typically it's be for posting an article, which seems like an admin-side functionality, should an anon user even have access to this? Tighter validation. If this is slug-ified, it's probably an article title. Is an article title of this length, and with all those characters %|() etc. valid? If not, it should have never been accepted. If the above is an example of suceeding to break out of a string literal in a query, you may be incorrectly interpolating user input into queries and that should be remedied. SQL logs aside, do log remote IP with model/service/API-level requests and try to spot if the attacks come from a narrow IP range and block it. You can also have automated blocking per resource/IP when the call patterns are atypical.   When blocking IP-s, make sure to display a friendly message that allows people incorrectly blocked to contact you and let you know about it. Chances are the attacks may be at least in part coming from the infected desktop machines of blissfully ignorant customers."
PHP,3bdqfa,ellisgl,3,Sun Jun 28 10:16:14 2015 UTC,"Upvote straight away for idiot thing. Yeah, nice find, we save slugified form of search term so that we redirect it as example.com/search/slug-of-the-term.There's only one such field. We would look into allowing or disallowing characters, but since its a UTF-8 based search-form, we have allowed all characters so far, including these SELECT and all ones. We would have to discuss about the IP blocking. Currently we use Cloudflare's free plan which as it is blocks some threats.   Thanks alot for the suggestions mate :)"
PHP,3bdqfa,DCoder1337,6,Sun Jun 28 12:29:46 2015 UTC,"They are trying something ""sophisticated"" 0x44,0x4f,0x52,0x4b,0x54,0x45,0x53,0x54,1,0x44,0x4f,0x52,0x4b,0x54,0x45,0x53,0x54 Converts to: DORKTESTDORKTEST  Nothing in google finding anything related to the query as a hack - maybe zeroday crap?"
PHP,3bdqfa,DCoder1337,1 point,Sun Jun 28 07:03:13 2015 UTC,what did u convert that text into? I mean which encoding is that
PHP,3bdqfa,mc_hammerd,1 point,Sun Jun 28 12:26:15 2015 UTC,"It's plain ASCII, expressed as hex.   You can do select CAST(CONCAT(0x44,0x4f,0x52,0x4b,0x54,0x45,0x53,0x54,1,0x44,0x4f,0x52,0x4b,0x54,0x45,0x53,0x54) as char) in MySQL to read it (there's one unprintable character in there you won't see).  Or concatenate it to 444f524b5445535401444f524b54455354 and read it through http://www.rapidtables.com/convert/number/hex-to-ascii.htm ."
PHP,3bdqfa,the_rabid_beaver,1 point,Sun Jun 28 13:18:19 2015 UTC,So does using HEX of DORKTESTDORKTEST do something ( like bypassing some queries or something)
PHP,3bdqfa,indenturedsmile,3,Sun Jun 28 13:23:55 2015 UTC,"If you're doing proper input escaping via PDO, it should not have any effect.  This hexing trick is (used to be) used to bypass a different type of protection - Web Application Firewalls like mod_security, which blindly scan the request body looking for keywords like DROP or SELECT and reject them. It's less effective nowadays, since those firewalls are now smart enough to detect the hex form as well."
PHP,3bdqfa,the_rabid_beaver,1 point,Sun Jun 28 13:40:24 2015 UTC,Didnt know about the Hex trick. TIL. In anycase PDO is ensuring it to be safe.
PHP,3bdqfa,rydan,1 point,Mon Jun 29 04:28:07 2015 UTC,"if you have a slug 'abcd', and your server allows the SQL query slug='abc'+0x44, the page will render normal  what he would probably do next is something like: use a hex or unicode semicolon,comma and/or quote, and do where slug='invalid123';select password from users where id in (0,1,2,3,4,5,6,7) as bodytext  thats my hunch anyway"
PHP,3bdqfa,tylermenezes,1 point,Sun Jun 28 16:31:34 2015 UTC,"but wouldnt that query be logged in Error_log ( TRY-CATCH ) as that table or view doesnt exist. ( if user tried something like that )  Also,  ideally we would expect PDO to bypass such attempts right?"
PHP,3bdqfa,arcdigital,6,Mon Jun 29 04:29:10 2015 UTC,"looks like an automated SQL injection tester. I see a few things to suggest they were trying to dump the information_schema table. If you use prepared statements though I doubt these attacks pose much threat.  When I ran a pretty high traffic site I encountered automated hacking attempts daily. Especially from China, Russia and the Ukraine."
PHP,3bdqfa,jomanlk,2,Sun Jun 28 07:39:44 2015 UTC,"thanks mate, we do use pdo, i guess thats the reason we are still up and running.   Any ideas / mitigation of such attacks ?"
PHP,3bdqfa,coffeesleeve,1 point,Sun Jun 28 08:09:16 2015 UTC,"If it's coming from a specific IP, you can try blocking the IP itself. However, if they're really intent on compromising your site specifically, they'll probably just switch IPs.  You could also monitor all search queries on your site and block IPs that try to perform a query with the info you posted.  Honestly, if it's not causing any problems currently, I'd just keep monitoring the situation and make sure you have good backups. If they can't find a vulnerability, they'll eventually move on."
PHP,3bdqfa,disclosure5,1 point,Sun Jun 28 17:48:11 2015 UTC,"Well you cold put in code that recognizes non-standard queries/injection attempts and log all of those IPs, then completely block them from the server using iptables. If you look in your web server logs I'm sure you'll find thousands and thousands of automated requests looking for exploitable scripts. Disable open directory listings if they aren't already. Also disable the HTTP headers on your webserver that might show what version of things you're running.  However some big things are: keep your server software and any third party scripts up to date, make sure any administration related software (ssh, ftp) is configured properly, and just try to keep a watchful eye over the logs."
PHP,3bdqfa,GSlayerBrian,1 point,Sun Jun 28 18:16:13 2015 UTC,"Well you cold put in code that recognizes non-standard queries/injection attempts and log all of those IPs,    We can do that , certainly, thanks for that. HTTP headers is already disabled, but wil re-verify.Same with open directory listing."
PHP,3bdqfa,fizzy_tom,1 point,Mon Jun 29 04:26:23 2015 UTC,Any idea what is so special about 99999?  I see this number a lot when Ukrainians try to hack me.
PHP,3bc0ls,marcjschmidt,3,Sat Jun 27 19:52:24 2015 UTC,Does anyone have a comparison and/or benchmark of Propel vs Doctrine vs Eloquent etc?
PHP,3bc0ls,DumbQuestionUser,1 point,Sun Jun 28 11:38:39 2015 UTC,"They also made their docs more readable, I put in a ticket a while back because the baby blue font was a bit too bright on that white background.  Now I can read their docs at night without hurting my eyes :)."
PHP,3bc0ls,SaltTM,1 point,Sun Jun 28 06:56:07 2015 UTC,Seems like they're changing it to use the same methodology as Doctrine.
PHP,3bc0ls,zav_,4,Sun Jun 28 11:36:09 2015 UTC,"Propel and Doctrine both imitated RoR's ActiveRecord in version 1.  Then everyone had a sudden realization ActiveRecord sucks and switched to DataMapper. RoR in v4, Doctrine in v2 (and they started copying Hibernate) and now Propel, because apparently its development is slower."
PHP,3bc0ls,bojanz,2,Sun Jun 28 13:52:23 2015 UTC,Now it's Eloquent's turn to realize that :)
PHP,3bc0ls,skrawg,6,Sun Jun 28 18:25:34 2015 UTC,"For this to happen, Laravel will need a mature leader who cares about architecture beyond what's neat in demos."
PHP,3bc0ls,skrawg,5,Sun Jun 28 18:57:56 2015 UTC,"I don't see why you feel the need to bash people unnecessarily. We all know you're Mr. Clever Bollocks around here, you don't have to go round reminding everybody how high your horse is in every thread."
PHP,3bbttj,rafamds,5,Sat Jun 27 18:52:02 2015 UTC,"You may be interested in the --depth argument, it lets you clone a repo without pulling in the entire history."
PHP,3bbttj,frivolousTimewaster,7,Sat Jun 27 20:01:40 2015 UTC,Why not just use composer?
PHP,3bbttj,darrenturn90,4,Sun Jun 28 01:19:44 2015 UTC,https://m.youtube.com/watch?v=wpecBkdpiK4
PHP,3bbttj,xcodula,8,Sat Jun 27 19:19:53 2015 UTC,https://www.youtube.com/watch?v=31g0YE61PLQ
PHP,3bbttj,IceTheBountyHunter,1 point,Sat Jun 27 19:23:25 2015 UTC,"hehe and I want to know why, they would kick me for doing this"
PHP,3bbttj,xcodula,2,Sat Jun 27 19:23:41 2015 UTC,"It's a lazy Saturday and we're just being a couple of smart asses. It was too easy to walk into that one. But hey, if this works for you, then run with it. I won't expect this approach to be welcomed on a PHP dev team though. Seems like the PHP crowd don't get along too well with the Node.js crowd from what I've seen."
PHP,3bbttj,Shadow14l,10,Sat Jun 27 19:36:02 2015 UTC,"It's faster because it ignores the dependencies. So if you really love manually managing your own dependencies and seppuku, then go for it."
PHP,3bbttj,bga9,1 point,Sat Jun 27 19:56:51 2015 UTC,"this packages where I used this, have no dependencies, thats another reason why I use this humm"
PHP,3bbttj,ikari7789,3,Sat Jun 27 20:52:28 2015 UTC,"It sounds like your doing more work this way, which also makes it easier to make a mistake.  Why reinvent the wheel for the sake of a few seconds?"
PHP,3bbttj,ikari7789,-1,Sat Jun 27 20:03:00 2015 UTC,"not just a few seconds xD this way I don't need to create composer.json for each package, and configurate them to install in another directory instead of vendor/"
PHP,3bbttj,bga9,4,Sat Jun 27 20:55:07 2015 UTC,"Why are you wanting to install to someplace other than vendor? If it's some custom library not built to support namespacing or even proper class formatting, you may want to rethink about the libraries you're deciding to use for your project. If it's some custom library, then just add them to the project as git submodules and load them via your main project's composer.json."
PHP,3bbttj,gearvOsh,1 point,Sun Jun 28 00:14:54 2015 UTC,"Humm, that last suggestion seems what I'm looking for, could you give me some tip or link to understand more about submodules? Thanks, in the meantime I'll dig myself on google"
PHP,3bbttj,EspadaV8,1 point,Sun Jun 28 02:15:24 2015 UTC,I usually find the git documentation itself to be the easiest to understand and the most thorough.  http://git-scm.com/docs/git-submodule
PHP,3bbttj,stefgosselin,4,Sun Jun 28 07:42:36 2015 UTC,"You can use composer for a package that does not have a composer.json   If you want to use a project that does not support Composer through any of the means above, you still can define the package yourself by using a package repository.  Basically, you define the same information that is included in the composer repository's packages.json, but only for a single package. Again, the minimum required fields are name, version, and either of dist or source."
PHP,3bbttj,creatiff,2,Sun Jun 28 03:08:52 2015 UTC,"Bower either uses git clone internally, or downloads a ZIP, the same as Composer. Either way, this seems highly unnecessary."
PHP,3bca1m,clintonandrews,3,Sat Jun 27 21:18:10 2015 UTC,"You should document the original source for your zipcodes CSV file, the license it's under, and how frequently it's updated (particularly from the point of view of users of your API service).  Also, a little trick regarding the selection of points within a radius: If you work out the min / max (lat / long) limits of the bounding box first, you only need to run the full formula on points that lie within that box. (Essentially, if you're drawing on a paper map, you draw a rectangle around your origin, then you only work on data inside the rectangle)"
PHP,3bca1m,AllenJB83,1 point,Sat Jun 27 21:25:13 2015 UTC,Gotcha. That's a great point. I will add this to my TO DO list. =)  Thank you for the help.
PHP,3bca1m,ciaranmcnulty,1 point,Sat Jun 27 21:31:14 2015 UTC,You can actually also find the inner bounding box (the square that would fit inside the circle) - points in that area are definitely in range. Then you only do pythagoras stuff on the points between the two boxes.  With the right UNIONs this can be a pretty efficient SQL query
PHP,3bca1m,Jaimz22,1 point,Sun Jun 28 10:29:37 2015 UTC,"not trying to hijack your post, but have you seen zippopotamus?"
PHP,3bca1m,Shadow14l,0,Mon Jun 29 14:48:22 2015 UTC,"What unit is the distance in? Miles, I'm guessing?"
PHP,3bcr2z,php-developer,5,Sat Jun 27 23:59:56 2015 UTC,"Just return pure JSON data and transform it client-side with a JavaScript library (React, Angular, etc).   The right tools for the job, and all that. Not every wheel needs to be reinvented, and most should not."
PHP,3bcr2z,Firehed,2,Sun Jun 28 01:07:00 2015 UTC,Page.json looks like the worst one to learn and type out.   Why do you want to make life harder for yourself?
PHP,3bcr2z,sethnis,2,Sun Jun 28 00:45:18 2015 UTC,"There are lots of existing templating engines available such as Twig, Smarty and Blade.   This JSON based one that you've created looks like it would be much harder to read and write than just plain PHP. What problem is this trying to solve?"
PHP,3bcr2z,dead-fish,1 point,Sun Jun 28 00:10:53 2015 UTC,"It is intended to solve the same problems as twig or smarty, or blade (but I'm not very familar with last one), but in addition, it can be used to provide partial rendering and reloading parts of web page because of it's hierarchical structure."
PHP,3bcr2z,DCoder1337,1 point,Sun Jun 28 00:19:39 2015 UTC,"You're introducing new problems on top of the original ones you're trying to solve. For example:   This requires a lot of modification to the static HTML, which increases the time needed to integrate any non-trivial template. Any syntax error will prevent the whole template from rendering, at which point you'll need a JSON highlighter or a custom JSON parser to see where the error is. I can't quite see how this solves partial page reloads better than existing templating engines - care to demonstrate?."
PHP,3bcr2z,DCoder1337,1 point,Sun Jun 28 04:32:53 2015 UTC,"I can't quite see how this solves partial page reloads better than existing templating engines   Yes, controller can have action like reloadUsers() with invoking method that does partial rendering of view:  public function reloadUsersAction() {     $page = json_decode(file_get_contents('Page.json'));     return $this->view->renderPartial($page[1]); }"
PHP,3b7qft,pmjones,16,Fri Jun 26 17:23:05 2015 UTC,"There are some great points in this article, and I believe much of it to be true. However, I think the following quote is disgraceful: ""If you see one of your average programmers walking out the door at 6:00 pm [...] figure out the best way to terminate his or her employment with your organization."" I say this as someone who frequently works extra hours, but there is absolutely no shame in doing a hard days work and going home to be with your family, or take part in other pursuits. In fact, I believe following the advice of this article, to the letter, is a recipe for burnout."
PHP,3b7qft,d3vzilla,6,Sat Jun 27 10:29:19 2015 UTC,"yes I wish this idiotic notion that working 80 hours a week vs 40 actual productive hours would just die. Besides, most programmers I know, myself included, end up getting back online in the evening if they couldn't solve something to hack away at it again. The concept of a ""work-week"" kind of fades away in this type of environment."
PHP,3b7qft,l3tigre,3,Sat Jun 27 12:31:46 2015 UTC,"It's also worth noting the article is from 2002, when programmers were treated much differently than today."
PHP,3b7qft,Firehed,1 point,Sat Jun 27 16:49:40 2015 UTC,"I'm good for 2, 2-3 hour windows of high productivity per day, and that's it. In that time, I'm able to consistently blow away all expectations in terms of output, yet consistently judged for not being perceived as ""working an 8 hour day"". It's horse shit."
PHP,3b7qft,davidf81,0,Mon Jun 29 04:14:47 2015 UTC,"Yeah bruh. Look at all these successful Silicon Valley companies having their employees work ""productive"" 40 hour work weeks. Google is widely known for not ever overworking their employees.  /s  This guy is talking about how to get above average returns. You don't do that by getting average productivity. He even says that in the article."
PHP,3b7qft,512austin,1 point,Sat Jun 27 18:24:07 2015 UTC,"Above average returns or above average turnover? You don't get above average returns by just squeezing people dry. When the last company I was with started tightening their belts and making us work more hours for the same (below market) pay, I started looking for a new job fairly quickly, and while I remained there, I certainly didn't care about doing my best work for a company that treated me like a commodity.  You can't expect developers to work 80 hours a week. People have families and lives. We didn't go into a profession where we expected to be working 80 hours a week (e.g. medicine) nor one where we are paid what would be expected of that."
PHP,3b7qft,NeuroXc,1 point,Mon Jun 29 16:00:35 2015 UTC,I love this talk about working long hours - https://www.youtube.com/watch?v=YBoS-svKdgs
PHP,3b7qft,sinkingfish,1 point,Sun Jun 28 10:59:18 2015 UTC,"I think you're going into it with a preconcived notion that this guy wants to work you to the bone until you die. That isn't the case. He's interested in maximizing productivity. That includes managing burnout in your employees. If your employee is burning out, you obviously aren't maximizing productivity.   There were a few things in there explicitly brought up that would help mitigate it. Some of the ideas could be skiing in the mornings at the alt-office cabin or his attempt at leniency with his MIT students and the 2 week deadline. Don't focus on these specific examples at all though, it's definitely not the emphasis of the article or my point. I'm just saying that he is at least keeping burnout in mind w/ his management techniques.   On the same coin, I don't think he'd hire a family man in the first place if they're an average level programmer. That isn't the profile of an employee who will quickly turn into a good-excellent programmer.   edit:   and you're misrepresenting the idea behind firing the ""average [level] programmer who leaves at 6pm.""   There's a couple elements at play here that he brought up.     This doesn't apply to you if you're a good programmer. There is a stress on ""average"" that everyone is somehow missing.  You don't want average level programmers. You want them to try to get to a good or excellent level because the good/excellent programmers are 10x more productive than the average ones.  It was a failure by management for not giving them a task that would intrigue them enough to make them want to work past 6pm.  If they did and the employee still isn't engaged, that's when you want to get them out of there. You don't want average level employees on your payroll that aren't going to (rapidly) make the next step up. (The rapidly part is important since he also brought up how slow learners suck.)  The ""stay past 6 pm"" deal is also related to the idea that the office should be a much better work environment than your home. That's why he doesn't talk about any of the edge cases like people leaving at 5, but working later at home. In his mind, if they're doing that--he's failed in setting up a good enough work environment. (obv not accounting for people with families though, who he doesn't seem interested in)   Basically this guy is expecting you to be at an MIT grad level of capability. He's not hiring average-joe to his companies, he's taking the best of the best. If you can't keep up, you aren't working there."
PHP,3b7qft,512austin,7,Sat Jun 27 18:42:24 2015 UTC,Such crud. Please don't follow these suggestions. They will lead to burnout and a very ineffecitve team.
PHP,3b7qft,ircmaxell,8,Sat Jun 27 16:06:39 2015 UTC,Disagree that a computer science degree is something necessary. Also disagree that a programmer leaving before 6PM is a bad sign. He could have been working solidly all day and nailed a load of problems and he simply made the sensible realisation that his brain was done for the day. It happens.
PHP,3b7qft,mooz0r,2,Sat Jun 27 07:56:36 2015 UTC,"He's not saying a computer science degree is necessary. He's saying a CS education is desirable in obtaining some base skills...""But without the right experience, such a person will never be more than an average quality programmer."" He's emphasizing continuous learning and continuous practice to become a good programmer (which is quite obvious).  I do vehemently disagree with the entire 6PM premise though. His arguments on this are simply idiotic and I would seek employment elsewhere if he were my manager."
PHP,3b7qft,mmmflapjacks,3,Sat Jun 27 14:01:28 2015 UTC,Keep in mind this article was written in 2002 and you should take it with a grain of salt ... mostly because of gems like this one:   Your business success will depend on the extent to which programmers essentially live at your office.
PHP,3b7qft,mmmflapjacks,4,Sat Jun 27 14:09:24 2015 UTC,I prefer this one:   Microsoft Internet Explorer is a much better browser than Netscape Navigator.
PHP,3b7qft,roselan,2,Sat Jun 27 19:33:37 2015 UTC,Autonomy mastery purpose
PHP,3b869g,Rican7,2,Fri Jun 26 19:16:56 2015 UTC,This is a neat idea ocramius.  I'd be too scared to enable in on my legacy app though.
PHP,3b869g,sirsosay,0,Fri Jun 26 21:45:28 2015 UTC,"It's not meant for legacy apps, but for new code.  As it says, it's ""strict"", so you can't expect any code to be running on it unless it was written by a maniac (me, usually)."
PHP,3b869g,ocramius,2,Fri Jun 26 23:42:52 2015 UTC,"Author here, sorry for releasing it in this pre-alpha stage, but I needed to get it done while at DPC, or else I would never find the time for it :-)  Basically:   install enable in your phpunit bootstrap.php (or app init file) (set it to cover paths in your sources) feel the pain."
PHP,3b869g,ocramius,3,Fri Jun 26 19:19:46 2015 UTC,"This probably fails when assigning or fetching a property by reference, so it might break some apps.   Just thought I'd mention so you can document it.  I have something simple internally that does the same (without AOP, it's just a trait, that can enforce property type or immutability) with the same limitation."
PHP,3b869g,ocramius,1 point,Fri Jun 26 19:30:44 2015 UTC,"Yeah, saw that one, will have to fix it in the GO fw"
PHP,3b869g,ocramius,1 point,Fri Jun 26 19:39:11 2015 UTC,"Well done, but runtime behavior dictated by annotations?  No thanks.  I know your next question is ""why?"" so here it is:   unnecessary complexity - you're adding a bunch of code that now has to parse the source you've just finished parsing?  Annotations for one-time configuration generation would be questionable, but on every execution? hard to explain behavior - so now you've got a new ""gotcha"" for everyone who works on your project.  Comments are comments.  They should never impact the runtime.  a new potentially hard to track point of failure - typos in your comments can now cause your code to break in new and exciting ways.  Code that does this sort of introspection on a language so all-over-the-place like PHP is also bound to have some pretty esoteric bugs as well.   The benefits to this sort of thing in php are at best, minimal.  If you really want stricter PHP, you'd be better off exploring Hack, or some other language choice."
PHP,3b6xcn,FrenkyNet,5,Fri Jun 26 13:41:44 2015 UTC,"So basically, some packages undergo more frequent or heavier development than others, and different package maintainers may use very different versions of packages which break API compatibility, thereby preventing third-party developers from using two such packages that depend on different incompatible versions of the common library.  Frankly, I would try to avoid a robust workaround for this ""problem.""  I don't want 3 different versions of Guzzle.  I want 3 packages that work with the newest version, and HTTP abstraction who's API doesn't change so frequently that there are 3 other libraries using 3 different versions.  What if a major problem or security vulnerability is found in some older version, but only gets patched in the latest?  Are we supposed to apply and maintain hotfixes for X number of versions backwards because some other third party library which depends on version 2 no longer cares enough to update to version 5?  Having had this discussion with respect to internal packages, to me there seems a clear solution.  Update the packages which use the out of date stuff (if they are truly necessary); find or create alternatives if they are not.  This is how the ecosystem progresses as a whole.  As far as I can tell, suggestions here represent a way to treat symptoms of a set of larger problems, namely:  1) The whole ecosystem is still very immature - as libraries stabilize, major BC breaks should not be so frequent and other packages should be able to catch up.  2) No one is really devoting their time to being a package maintainer, even if they are a lead developer on a library.  Note, I'm not saying this is their fault, most people still have day jobs and lives.  3) Some larger systems with lots of complexity and lots of sway (looking at you Symfony), are looking for solutions that automate solving the mess they have created for themselves.  Here's a few things I think library devs, package maintainers, etc, can do to help themselves and their community:  1) Clearly state the versions they are supporting (fixing bugs in, will backport hotfixes to, etc).  Part of this is making it clear what versions are DEPRECATED.  Anyone use Atom?  Why is their plugin ecosystem so good?  Because the moment an API is deprecated there's an obvious notice in the UI that the package is using deprecated functionality.  I recall updating a bunch of Symfony packages recently and they were literally throwing deprecation exceptions at me (although I don't suggest this as that actually means you BROKE the old methods), raising notices might be good.  2) Help other major packages which rely on yours move to newer versions.  This could be anything from migration guides between BC breaks to actually updating other libraries and submitting pull requests.  3) Make your intended future clearer.  This doesn't have to be so far as official long term support cycles, it could be short term support cycles.  ""Starting work on 2.0 in Q1 of 2016"" might be enough to tell someone that the library they intend to be at v1 in March, should maybe coincide with dev versions.  On the other side of this... don't pull a Propel 2."
PHP,3b6xcn,mattsah,5,Fri Jun 26 21:41:58 2015 UTC,"There's something I don't understand: if we ask composer to install both symfony/symfony and symfony/event-dispatcher, it should install only symfony/symfony right?  That's because symfony/symfony ""replaces"" the event-dispatcher component in its composer.json: https://github.com/symfony/symfony/blob/2.8/composer.json#L36   Edit: composer require symfony/symfony:~2.3.0 symfony/event-dispatcher indeed installs both packages, which is wrong. I see that more as a bug in Composer than a global problem with PHP's packages."
PHP,3b6xcn,mnapoli,0,Fri Jun 26 14:40:11 2015 UTC,There's a feature replace in a composer.json which handles that. See symfony's main composer.json https://github.com/symfony/symfony/blob/2.8/composer.json
PHP,3b6xcn,adamn90,4,Fri Jun 26 14:47:58 2015 UTC,That's exactly what I said :)
PHP,3b6xcn,mnapoli,2,Fri Jun 26 16:50:05 2015 UTC,I must have completely mis-read your comment. My bad
PHP,3b6xcn,adamn90,2,Sat Jun 27 13:36:38 2015 UTC,"The point being made here, which I agree with, is that in theory you shouldn't have the event dispatcher at /vendor/symfony/event-dispatcher and /vendor/symfony/src/Symfony/Component/EventDispatcher."
PHP,3b6xcn,mbabker,2,Fri Jun 26 16:00:46 2015 UTC,"Node/NPM solve this, if a bit recursively, by importing multiple levels of dependencies. For example:  project/     package-a@2.0/         node_modules/             package-e@1.0             package-f@2.0     package-b@3.0/         node_modules/             package-e@2.0             package-f@3.7   and so on. When code from package-b requests package-e::class, it gets the one from its own dependency tree.  The problem PHP is going to have with a solution like this is that the namespacing for package-e is the same in both sub-folders, and as PHP can't deal with redefining classes, you couldn't load it ""again"" like that. You'd have to do something bat-shit crazy like changing all the source code to be namespaced with version numbers (as others are suggesting). Bit of a shame."
PHP,3b6xcn,chuyskywalker,1 point,Sat Jun 27 06:30:45 2015 UTC,"Maybe we should put each package version in a separate namespace like vendor\package\v1_2_3 (for version 1.2.3) and then let composer's autoloader map* that to vendor\package\v1_2, vendor\package\v1 and vendor\package. If there are conflicts for one of the components, first package providing a version namespace wins.  * With map I mean using class_alias with works with namespaces (from my short tests). The only restriction here is that vendor\package\AClass:class will return ""vendor\package\v1_2_3\AClass"" which could be confusion if you use strange class name comparisons."
PHP,3b6xcn,dennisbirkholz,5,Fri Jun 26 15:48:41 2015 UTC,"As somebody who's dealt with the madness that's called class_alias before, please don't. It's not even a ""maybe"", but it's a ""I'm pretty damn sure"" that you'll shoot yourself in the foot with this. It's not a scalable model, in fact, it doesn't scale at all on a nested dependency level, everyone will still need to reference exact version. But why do the aliasing at all? Why not have the version in the namespace?"
PHP,3b6xcn,gearvOsh,2,Fri Jun 26 16:42:58 2015 UTC,"The problem is if you map it to no-version name you still can only have one of them loaded at a time.  In a solid module system it should be possible to have multiple versions loaded in parallel and everyone gets the version they want. This is how modules will work in Java 9, for example, and this is how modules work in NPM.  If we follow semver, we can simplify things a bit and instead of having Vendor\Package\v3_4_5 we can just have Vendor\Package3, because semver guarantees minor and patch versions are compatible.  So then you can have multiple major versions loaded in parallel and Composer doesn't have to map them.  Any holes in my explanation ;) ?"
PHP,3b6xcn,dericofilho,1 point,Fri Jun 26 16:11:10 2015 UTC,"Nah, that's all good 👍"
PHP,3bancq,suphper,3,Sat Jun 27 11:18:59 2015 UTC,I'm allowed to claim that God is a teapot.... claims aren't automatically true though.
PHP,3bancq,ivosaurus,1 point,Sat Jun 27 12:52:58 2015 UTC,Are you planning on using it for evil?
PHP,3bancq,xuu0,1 point,Sat Jun 27 16:01:28 2015 UTC,"This has nothing to do with PHP/Php Docs; this is just PECL. Issue should be with them, and not PHP. The docs accurately describe how the bundled JSOn library works. If you choose to replace it; that's on you and not the PHP team or the PHP docs. I'm not entirely sure how this is not obvious; and why this has been posted here..."
PHP,3bancq,Methodric,1 point,Mon Jun 29 14:53:17 2015 UTC,"The problem is in the fact that most distros bundle this broken json extension with PHP nowadays which, I would argue, means that most default PHP installations (and, hence, the majority) have a broken implementation. This, in turn, makes a library that relies on the working extension break on all such platforms, which leads users of it think it's the library's or PHP's fault, when in fact it's the fault of one developer who didn't think feature parity was important enough to be bothered."
PHP,3bancq,Methodric,1 point,Mon Jun 29 17:17:39 2015 UTC,"Makes sense... But still has nothing to do with php itself. I'm not denying its an issue that should be handled.. I just believe the target here is misplaced. The issue belongs with the maintainers of php on the various distros. The PHP team has no say on what the default configuration is for distros who package their own version.   I think this topic could have gained more traction if it was just an attempt to get the word out and get things fixed, cause as it stands it feels like a misplaced blame game, derailing the main topic."
PHP,3bancq,dracony,1 point,Mon Jun 29 23:42:38 2015 UTC,"Mm, good point"
PHP,3b63qy,stepbacksniper,20,Fri Jun 26 07:26:32 2015 UTC,"You should have a look at xdebug or other debuggers. You can integrate it into your IDE so that you can step through the code while your request is processed from php. That way you see exactly where things go wrong in your code.  If you have never worked with C or Java or something where it's normal to debug the code that way xdebug might not be that easy to handle for you at first, but it is definitely worth the hassle. Just keep debugging :)"
PHP,3b63qy,dadiego,1 point,Fri Jun 26 07:41:58 2015 UTC,Thanks :)
PHP,3b63qy,Bezzie,1 point,Fri Jun 26 08:22:13 2015 UTC,Totally do this.  Changed my entire life.
PHP,3b63qy,drawm08,9,Fri Jun 26 13:22:40 2015 UTC,"Xdebug is the way to go, php simply feels empty without it. Also you might want to check PHPStorm. All my collegues but one switched from netbeans to phpstorm for its debuging tools (it also have vagrant, typescript, react support and many other cool features netbeans lack)"
PHP,3b63qy,dlegatt,2,Fri Jun 26 12:27:56 2015 UTC,"I just got xdebug running on my iis dev environment yesterday! I'm using it with phpstorm, its great to be able to put break points anywhere i need and view all of my variables and their values without putting var_dump and/or die statements everywhere"
PHP,3b63qy,laurencei,1 point,Fri Jun 26 10:31:09 2015 UTC,"This might actually be a sign of a problem with your coding style. If you are having difficulties tracking down even the slightest bug - then perhaps you are not writing good, clean, testable, maintainable code.  Are you using common techniques like DRY, SOLID etc?  Is your code broken up into small chunks of isolated behaviour? Or are you writing 60 line functions everywhere?  Something to consider"
PHP,3b63qy,scootstah,3,Fri Jun 26 10:24:06 2015 UTC,"It is not my code, it is old legacy code...I need to do/find something. At home I only work with objects, here it's just procedural.."
PHP,3b63qy,Ozymandias-X,1 point,Fri Jun 26 10:59:13 2015 UTC,"In that case, xDebug will be a life saver.  I'm not sure how it works with NetBeans, but xDebug integrates flawlessly into PHPStorm with very minimal effort."
PHP,3b63qy,NJ247,1 point,Fri Jun 26 13:14:28 2015 UTC,Besides XDebug you can have a look at Tracy from the nette framework. It's basically var_dump on steroids and very helpful.
PHP,3b63qy,Bezzie,1 point,Fri Jun 26 13:23:07 2015 UTC,"More than often the time it takes to investigate a bug is going to be longer than to fix + test it, especially when working with legacy code.  I wouldn't beat yourself up about it."
PHP,3b63qy,Bezzie,1 point,Fri Jun 26 14:55:53 2015 UTC,"Several people have recommended Xdebug or other interactive debuggers and that's, of course, a very powerful tool for debugging, and you should have it in your toolbox. But for clean simple pipelines as an HTTP server app should be, I do consider frequent use of Xdebug suspicious.  Few things to consider:   Are your components having clearly defined inputs and outputs. Look up the definition of ""deterministic"" & ""pure"" code. It's a term with a specific meaning and not about some fuzzy feeling of ""pureness"", BTW ;) It comes from functional languages, but it applies to OOP design as well. Your code will never be 100% pure, but the more pure it is, the easier it is to follow what's going on. Your application can be defined as a pipeline of components processing input into some kind of output (and then that output is fed as input to another component). For example: server request -> bootstrap -> application filters -> router -> controller -> template. In the controller you'll be accessing models, aka services, aka domain layer, aka whatchimacallit. Those also are typically defined as a set of available clear transactions that take input, and produce output (ex.: take user id, return user profile). You can have a standard mechanism for logging those inputs/outputs and always have a clear overview of how data flows in your application. What's the request like, what's in the session, what the router gets, what the router resolves, what the controller gets, what variables the template gets, and what input do services get and what output they produce.   If this overview is always produced for you every time you refresh the page (in development context only, of course...) then chances are you can spot the issue from that alone before you have to whip out XDebug. I always have Xdebug ready to help here, but I go days without needing it.  The logs tell all."
PHP,3b63qy,PetahNZ,1 point,Fri Jun 26 11:03:01 2015 UTC,"I do consider frequent use of Xdebug suspicious.   100% disagree.  Why would you let an app run a full cycle just to read logs, when you can watch your data be manipulated in real time?  I'm speaking strictly in terms of development."
PHP,3b63qy,malkusch,2,Fri Jun 26 13:25:40 2015 UTC,"100% disagree. Why would you let an app run a full cycle just to read logs, when you can watch your data be manipulated in real time? I'm speaking strictly in terms of development.   Jesus, 100%? Can't you leave some margin for error in there :D?  Well, when I notice an app has done something odd during development, I already have the logs, so I don't have to run a ""full cycle"", I typically don't have to run it at all.  It's especially helpful for ""heisenbugs"" which don't occur every time. The bug has happened and now you're having a hard time reproducing it in Xdebug, because the environment is slightly different, you can't quite pass the same exact input and so on. Or you know how to reproduce it, but it's so much pain to reproduce it anyway, so many conditions to match.  Does it sound familiar?   But with logs, you don't have to reproduce it in order to obtain the information. It's already logged. In the rare case my logs don't cover the details I need, sure, I will start an Xdebug session and do it that way.  However logs are helpful not only when you have bugs. They're helpful as a reference during development in general. For example ""how was that field called in users that I pass to the templates - was it id or userId?"" It's in the logs.  BTW, having a convenient interface for rendering the logs intelligently is important. If it's just a giant text file, that wouldn't be as good (despite it's still useful)."
PHP,3b63qy,malkusch,1 point,Fri Jun 26 13:36:12 2015 UTC,"having a convenient interface for rendering the logs intelligently is important. If it's just a giant text file, that wouldn't be as good   This must be the difference in your scenario and mine.  Also, if I'm debugging by logs, it's usually not my logs I'm using to debug anyways.  The only logs I ever get to see are just a big dump of data that I have to sift through.  Your example of id vs userid would not be in the logs in my world.  =("
PHP,3b63qy,PetahNZ,1 point,Fri Jun 26 17:24:37 2015 UTC,"I was referring to debug-time logging, not production logging.  But either way, it pays to have a log highly structured, so it can be easily presented by a UI. Both debug time and production logs.  I tend to log in JSON format: it's a single line (newlines in strings are encoded as \r and \n), it's plain text, so it can be a part of any existing log. It's semi-readable even in a text editor too, but an intelligent UI can make wonders with it, because JSON allows you to specify highly complex data tree structures in your log. Whatever you need.  There's no reason in 2015 logs should be some stuff you need to sift-through manually and parse with ad-hoc regular expressions."
PHP,3b63qy,maiorano84,-1,Fri Jun 26 17:31:47 2015 UTC,Just put some random var_dump($someVar);die(__FILE__); statements in until you find the issue ;)
PHP,3b63qy,PetahNZ,7,Fri Jun 26 09:46:35 2015 UTC,Do yourself a favour and stop doing so.
PHP,3b63qy,craigerator,2,Fri Jun 26 09:57:28 2015 UTC,"This is essentially ad-hoc debug logging. It can get messy but there's nothing wrong with it within measure.   If one wraps the call it gets easier to control, though:  if (DEBUG) DebugLog::dump($var);   Now this method can generate a trace and it'll know where the call happened (file, line, full stack trace).  But... sometimes you debug someone's code without your tooling. Gotta do what you gotta do."
PHP,3b63qy,chris_a6software,1 point,Fri Jun 26 10:55:14 2015 UTC,This is essentially ad-hoc debug logging.   dieing is not debugging.
PHP,3b63qy,geggleto,2,Fri Jun 26 22:55:39 2015 UTC,"I don't know why he/she added the die() in there, but it's hardly essential enough to make a point out of it.  Typically it's added so the subsequent page output doesn't obscure the logged content (if dumped on screen). No animals were harmed in the process of PHP die()-ing."
PHP,3b63qy,nashkara,1 point,Fri Jun 26 22:58:40 2015 UTC,"Output buffering, the __FILE__ to know exactly where it was put. Of course you could wrap it all up in a function with some pretty output and a stack trace, but this at least gets my point across."
PHP,3b6wul,drewinthehead,3,Fri Jun 26 13:36:59 2015 UTC,B'oh!
PHP,3b6wul,ifatree,3,Fri Jun 26 14:01:49 2015 UTC,Creating strings of HTML in your code is horrible   That's exactly what this library is doing...
PHP,3b6wul,akeniscool,1 point,Fri Jun 26 17:36:13 2015 UTC,"It's closer to that than using a proper template. But it's also not literally embedding HTML in a string, which for me makes it useful."
PHP,3b6wul,mattsah,2,Sat Jun 27 05:40:16 2015 UTC,"In the service of fair feedback, a good library should do two things:   state a clear, well-defined problem show a conclusive solution   I neither see a well-defined problem, nor a conclusive solution to it."
PHP,3b6wul,irphunky,1 point,Fri Jun 26 19:20:44 2015 UTC,"I thought the problem was reasonably stated in the readme:   Sometimes you need to output a quick bit of HTML at a point where it's really inconvenient to use a full template.   You might not identify with that problem, depending on your workflow. That's ok."
PHP,3b6wul,irphunky,1 point,Sat Jun 27 05:46:56 2015 UTC,"It's hard to identify with a situation described with one word: ""sometimes"".   It feels like something that's highly specific to your workflow, that you feel is a general enough issue that a wink and an elbow nudge is enough to remind us of the problem. But not, really.   When do I need to output a quick bit of HTML at a point where it's really inconvenient to use a full template? I'm not saying you don't have a point, but the description doesn't trigger any memory of traumatic inline HTML experience for me.  Also, your examples are often just as long, or even longer than the HTML produced, except slower to render (parsing selectors and producing HTML) and slower to read (parsing in my head what would the selector produce).  The reason you offer to explain why typing HTML directly is bad: ""it's horrible"". It's just horrible. Because. Ok."
PHP,3b879n,Jotaro13,5,Fri Jun 26 19:24:03 2015 UTC,"In my opinion the biggest thing you can do for your career as a junior developer is to learn frameworks, contribute to / publish open source, and to actually switch to different companies.  Each of those does different things. The first teaches you more about design patterns, best practices and gets you on the same page as thousands of other people.  The second gets your name out there and proves your value to future employers.  The third gets you more experience with different use cases, types of management and most importantly gives you a ~15-30% raise typically.  I don't see much value in certifications. They are typically only valuable to the management types in corporations."
PHP,3b879n,trs21219,1 point,Fri Jun 26 20:10:58 2015 UTC,"Being a project manager is not being a programmer. Of any kind. It's a separate discipline. The PMP credential is very, very highly regarded.  If you talk to CTOs, architects, recruiters, they'll all tell you that certs are still important and in fact making a comeback. Folks like Amazon, MySQL, Mongo, RedHat, getting serious about cert paths are driving forces in the industry. They definitely matter.   And there's no shame in pursuing management or work at large corporations. I've been in this field 15 years and worn every hat there is to where at every size company, and the only constant is that nobody has figured out how to estimate software development tasks with any accuracy :)"
PHP,3b879n,davidf81,1 point,Mon Jun 29 04:27:12 2015 UTC,"While I did miss the PHP vs PMP thing, I still don't think certs provide much in the programming world. I've been in for about 7-8 years working for startups and mid-size companies and have yet to see someone that has a cert other than office IT having the A+ certs or MSFT oriented guys getting those.   I'd say that if your company wants to pay for the certs go ahead (who doesn't like free training?!). If you have to pay for it personally its not worth it to me unless you are working for one of the bigger companies / corps who recognize them more heavily.  IMO the best thing a Jr programmer can do is learn other technologies and frameworks. Instead of falling deeper into the rabbit hole of methodologies of their current stack its best to figure out what other frameworks/languages do best to see where you can improve. Certs and the like can come later when you want show you've mastered a concept."
PHP,3b879n,trs21219,1 point,Mon Jun 29 04:41:13 2015 UTC,"You definitely need experience behind a cert, no doubt. But I can tell you first hand that I've seen candidates chosen (at a ~500 person ecom shop) based on having MySQL and Mongo certs for a dev job over a slightly more otherwise qualified dev, based solely on that specific expertise.   The reality is, with so much constantly in flux and so many choices (jesus christ almighty how many no-sql options are there now?!?!??!) the certs can really help identify people who have invested more than just that cursory learning time most of us give most things. Of course the problem is the lack of certs for so many technologies in general."
PHP,3b879n,davidf81,0,Mon Jun 29 15:35:40 2015 UTC,"I'll second this, after a year and a half of professional development experience getting a pmp certification makes it look like you don't really give a shit about code you just want to make more money and possibly manage people who actually do give a shit about code."
PHP,3b879n,Salamok,1 point,Fri Jun 26 21:01:26 2015 UTC,I think you want /r/pmp not /r/php
PHP,3b879n,sethnis,1 point,Sat Jun 27 10:16:18 2015 UTC,"i came to /r/php because I am a programmer, and I wanted to know what fellow programmers thought of said certification"
PHP,3b879n,geggleto,-1,Sat Jun 27 11:56:47 2015 UTC,mostly useless unless you plan to go to a largeish company.
PHP,3b879n,erp-expert,1 point,Sun Jun 28 01:27:11 2015 UTC,"PMP is the most boring certification that I have ever done. Coming from supply chain background, I was quite thrilled when I did APICS CPIM certification. I have also done some Oracle certifications and enjoyed the process of learning all the new stuffs. but my PMP experience was pathetic. I had to do it because my company was forcing me to go for it. It's not that you wont learn anything. You 'll for sure but reading the PMBOK 5 was simply painful to brain & eye. The official guide is written like a research pape,r not  like a book which you can enjoy reading. Finally at the end you 'll realize that you could have managed to pass the exam without really focusing much on PMBOK. The exam asks more practical questions that you learn in your job and daily day to day life by managing projects."
PHP,3b2s01,theodorejb,6,Thu Jun 25 14:34:46 2015 UTC,All of PHP is written in C??
PHP,3b2s01,Chmittens,19,Thu Jun 25 18:02:55 2015 UTC,Sorry but I can't miss the opportunity to ask: what did you think it's written in?
PHP,3b2s01,gearvOsh,11,Thu Jun 25 18:19:28 2015 UTC,"PHP is written in PHP, obviously. /s"
PHP,3b2s01,Chippiewall,2,Thu Jun 25 18:32:00 2015 UTC,..not as farfetched as it sounds.
PHP,3b2s01,Firehed,2,Thu Jun 25 18:59:06 2015 UTC,"A compiler can be self-hosted when it compiles to an executable you can run directly. PHP can't do that.  It doesn't have to be machine code, for example we have TypeScript, which is self-hosted compiler which compiles to JavaScript. But ""JavaScript"" represents the executable here (and the JS runtime is written in C).  It's turtles all the way down. At some point you need machine code, or damn thing won't run :D"
PHP,3b2s01,Firehed,5,Thu Jun 25 19:17:07 2015 UTC,It's... been done.
PHP,3b2s01,d2xdy2,1 point,Thu Jun 25 20:21:09 2015 UTC,"Despite Anthony claiming otherwise, that's a toy and he hasn't touched it in a year."
PHP,3b2s01,physics4life,2,Thu Jun 25 20:23:57 2015 UTC,Indeed. I was merely pointing it out as an existing POC.
PHP,3b2s01,Chippiewall,1 point,Thu Jun 25 20:26:34 2015 UTC,"I'm pretty sure a lot of functionality in v8 is self-hosted JavaScript, at least the es6 bits."
PHP,3b2s01,jsanc623,1 point,Thu Jun 25 20:15:12 2015 UTC,"JS engines implement a good part of the APIs in JS, yes, but that's not the definition of ""self-hosted"". The APIs may be JS, but the runtime is not.  PHP also has PHP code in itself - for example the built-in development server."
PHP,3b2s01,jvwatzman,0,Thu Jun 25 20:35:10 2015 UTC,PyPy is Python in Python - isn't that the same level as writing PHP in PHP?
PHP,3b2s01,Tyra3l,3,Thu Jun 25 19:25:54 2015 UTC,"PyPy is written in RPython, which is a subset of PyPy, which compiles to machine language.  No such thing exists for PHP.  Frankly it'll be a very bad idea for PHP, because part of what makes PHP useful is the integration with all the C libraries out there. If you make it self-hosted, it should have C interop, and half the thing will be C libraries again, so beside the literal circle-jerk the benefit would be nil."
PHP,3b2s01,the_rabid_beaver,-1,Thu Jun 25 19:29:11 2015 UTC,"PHP can't do that yet, but there are plenty of self-hosted compilers for other languages and a JIT for PHP is on the books eventually."
PHP,3b2s01,phpdevster,1 point,Thu Jun 25 19:23:27 2015 UTC,"It's still not bootstrapped. When php can be compiled to native, then it can be bootstrapped (look at the recent Go bootstrapping effort, which eliminates nearly all C code)"
PHP,3b2s01,the_rabid_beaver,1 point,Fri Jun 26 07:40:55 2015 UTC,"Yep -- while PHP5 and PHP7 are both entirely written in C, for HHVM, an awful lot of the standard library is written in a combination of PHP and Hack. (HHVM's core runtime and JIT is all C++ of course; PHP isn't a great language for expressing the kind of specific systems stuff you need for a JIT.)"
PHP,3b2s01,xsanisty,1 point,Thu Jun 25 20:54:29 2015 UTC,"probably he isn't meant anything like that, but in other script languages (like with ctypes in python for example) it is common/possible that even some core functionality is written in the given script language.  there were multiple discussions in the last couple of years about providing an option to write extensions in php. (that is what PEAR originally used for, but that is an optional tool for PHP so we can't and won't depend on it for the core extensions).  you can read more about this topic here: http://www.serverphorums.com/read.php?7,1100873 http://grokbase.com/t/php/php-internals/093y4x9q4w/rfc-removing-the-zend-api"
PHP,3b2s01,noknockers,1 point,Fri Jun 26 09:21:16 2015 UTC,Yep...
PHP,3b2s01,haschtekaschte,1 point,Thu Jun 25 23:11:43 2015 UTC,But what is C written in!?
PHP,3b2s01,nikic,3,Thu Jun 25 20:06:23 2015 UTC,well the first C compiler was most likely written in assembly code. then the following c compilers were written in C.
PHP,3b2s01,haschtekaschte,5,Thu Jun 25 23:12:22 2015 UTC,I think its written in B :D
PHP,3b2s01,nikic,1 point,Thu Jun 25 21:11:29 2015 UTC,B++ maybe?
PHP,3b2s01,Chmittens,2,Fri Jun 26 00:44:56 2015 UTC,"Depends on the compiler, but Im guessing most of them are in C as well..."
PHP,3b2s01,hevymetaldudemant,2,Thu Jun 25 21:51:02 2015 UTC,"I think nowadays most of them are in C++. Clang certainly, GCC is migrating to it (parts are C++, parts C) and Visual Studio uses C++ and C#, though I'd assume MSVC itself uses C++."
PHP,3b2s01,Irythros,1 point,Fri Jun 26 09:39:01 2015 UTC,Interesting. I once read that Linus Torvalds says that you cant write an OS in C++ Does that mean he might use a compiler written in C++ to compile an OS written in C?
PHP,3b2s01,BlueScreenJunky,6,Fri Jun 26 09:50:12 2015 UTC,"There is no technical reason why you could not write an operating system in C++. Of course you'll need some assembly for the boot process and some of the interaction with the CPU, but this is no different when writing an operating system in C. You also have to be careful about certain C++ features, e.g. you should not use exceptions before you have implemented the necessary stack unwinding runtime support.  What Linus was really saying is that he just doesn't like C++. People implementing hobby operating systems on the other hand often use C++. Or more exotic languages like Rust. You can use pretty much any thing that is low-level enough."
PHP,3b2s01,not_thrilled,-1,Fri Jun 26 10:21:40 2015 UTC,Hahah 😛
PHP,3b2s01,h64,2,Thu Jun 25 20:15:22 2015 UTC,"So... perhaps a dumb question... but what happened to PHP 6?  Edit: Here's the story: http://halls-of-valhalla.org/beta/news/from-php-5-to-7,146/  Thanks, Google."
PHP,3b2s01,mbabker,8,Thu Jun 25 20:30:28 2015 UTC,"The TL;DR for people not wanting to read: PHP6 happened, it flopped.  It's that bastard child you never talk of now."
PHP,3b2s01,the_rabid_beaver,8,Thu Jun 25 20:38:31 2015 UTC,More like a miscarriage if you ask me.
PHP,3b2s01,ZachSka87,1 point,Fri Jun 26 07:23:24 2015 UTC,"So...dumb question. (Not the question, the circumstances. You'll see...)  I'm managing an application that's currently running on 5.3.x. I'm looking at replacing my servers hopefully within the next couple months (and then maintaining my PHP version a little better). How stable is 7, even if it's alpha? Would it be better to go with the alpha/beta-quality 7, or just move to 5.6?"
PHP,3b2s01,Danack,2,Fri Jun 26 14:11:21 2015 UTC,7 is going to break things from 5.  5.6 is the highest backward compatible version.
PHP,3b2s01,ZachSka87,1 point,Sun Jun 28 08:40:12 2015 UTC,"Personally, I'd say go to 5.6 if when you update 7.0 isn't at a stable release yet; 5.6 still has another year of full support and a year beyond that for security so you'd be fine for another 12-18 months post-update there.  From my own testing, code that's working on PHP 5.3+ and not using deprecated features is working generally well on PHP 7 (I've seen very few compat issues with what I've tested and it's all documented in the changelog so it's easy to catch)."
PHP,3b2s01,rocketpastsix,1 point,Fri Jun 26 16:07:00 2015 UTC,"I had trouble getting a few extensions compiled with 7, overall it seemed stable enough but I would recommend  going with 5.6.x as well. Unless you enjoy being a Guinea pig."
PHP,3b2s01,doMynation,1 point,Sun Jun 28 07:46:13 2015 UTC,Can anyone help me understand how to compile this for use in MAMP?
PHP,3b2s01,asdrubalivan,-3,Fri Jun 26 14:38:12 2015 UTC,"Step 1, install vagrant. Step 2, follow the instructions for compiling it on a sane development platform."
PHP,3b3ume,nerfyoda,4,Thu Jun 25 19:17:30 2015 UTC,"Fancy:  ✯  ~  brew install php70 ==> Installing php70 from homebrew/homebrew-php ==> Downloading https://homebrew.bintray.com/bottles-php/php70-7.0.0-alpha.2.yosemite.bottle.tar.gz ######################################################################## 100.0% ==> Pouring php70-7.0.0-alpha.2.yosemite.bottle.tar.gz  <snip>  ✯  ~  php -v PHP 7.0.0alpha2 (cli) (built: Jun 24 2015 21:37:50) Copyright (c) 1997-2015 The PHP Group Zend Engine v3.0.0-dev, Copyright (c) 1998-2015 Zend Technologies"
PHP,3b3ume,no-fun-at-parties,2,Thu Jun 25 19:19:18 2015 UTC,Seriously fancy. Macports is still on alpha1!
PHP,3b3ume,jonnybarnes,1 point,Fri Jun 26 04:46:24 2015 UTC,Is it easy to switch between php70 and php56?
PHP,3b3ume,th3fallenon3,1 point,Sat Jun 27 09:38:06 2015 UTC,I think so. You'll have to brew unlink the versions you don't want to use then brew link the version you want. I set up shell aliases to do it.  alias use_php56='brew unlink php70 && brew link php56' alias use_php70='brew unlink php56 && brew link php70'
PHP,3b3ume,th3fallenon3,1 point,Sat Jun 27 23:22:38 2015 UTC,would be amazing if it updated the link to the php module in apache.   You wouldnt happen to have some magic way to do that would you? (crosses fingers)
PHP,3b4r4t,darylldoyle,1 point,Thu Jun 25 23:27:17 2015 UTC,"Just as a quick note (I didn't look the code further), it looks like XML handling is vulnerable to XML injection (see http://phpsecurity.readthedocs.org/en/latest/Injection-Attacks.html#xml-injection)."
PHP,3b4r4t,timoh,1 point,Fri Jun 26 07:38:02 2015 UTC,You're correct! This is one of the things this sanitizer will protect against :)
PHP,3b66jq,ICJ,1 point,Fri Jun 26 08:07:11 2015 UTC,Edge side includes are probably what you want to look at.
PHP,3b66jq,anlutro,1 point,Fri Jun 26 08:40:14 2015 UTC,"I'd like to help, but I struggle to infer specifics about your situation from the given description. Can you present a more concrete, grounded example, and we can discuss it.  Also you aren't very clear where your bottleneck is:   Bandwidth. Number of requests and resulting lag. Controller logic. Domain logic. Database queries.   etc."
PHP,3b36k1,dracony,4,Thu Jun 25 16:24:02 2015 UTC,"i dont think its good idea, i am creator of quite big private ERP system with hundreds of actions in several controllers, and some of them have only 1-5 lines of code (like simple ajax delete update etc) and having hundreds of 3 lines files would be huge mess"
PHP,3b36k1,thebrainless,1 point,Thu Jun 25 22:29:45 2015 UTC,"Yeah, imagine the amount of tabs in you're favorite IDE... it would be a mess like @thebrainless said. Try to make groups of methods that use the same dependencies."
PHP,3b36k1,rafamds,1 point,Fri Jun 26 13:25:09 2015 UTC,"Try to make groups of methods that use the same dependencies.   Or a class hierarchy that uses the same dependencies. Then you can group by module or namespace, instead of by class."
PHP,3b36k1,pmjones,3,Sat Jun 27 14:05:34 2015 UTC,"If you have controllers that can have one or more actions, then you can still have one action per class, if you want.  So then the issue of having too many dependencies per class is not up to PHPixie, but up to how people decide to factor their controllers.  So what you're asking is if you should take this choice away from them. Maybe not that great of an idea. People can still emulate multiple action methods by defining the action as a route parameter, then calling a method based on the parameter value. And you can bet some will do that, because people gonna do what people gonna do.  If you want to solve the issue of dependencies you have at least two other ideas to explore, before you start removing features:   Allow injections directly in the action method. Then dependencies will be contextual. Lazy dependency injections: inject a proxy, or a factory for the dependency, which creates it only on first use (injecting the proxy/factory doesn't count as ""use"").   I personally use a factory, so all my dependencies get created on first use, not upon injection."
PHP,3b36k1,pmjones,3,Thu Jun 25 16:41:51 2015 UTC,"Allow injections directly in the action method. Then dependencies will be contextual.   At which point I assert one might as well separate out the method to its own class. Then one can use plain-old constructor injection, and the class is created only on first use."
PHP,3b36k1,pmjones,2,Thu Jun 25 16:48:47 2015 UTC,"Let's take the most basic and most typical case: a CRUD set of actions. Create and Update is basically the same code, but one has an id included, the other doesn't. So what you'll do, spread Create and Update in three classes (parent class for code reuse and two action classes)? The read and delete actions do share code as well (say, like referring to the same service as create and update).  You can factor it in countless ways, but pragmatism always wins in the end. The code for each action in a controller is short and repetitive, so a design should encourage more compact project layouts (i.e. gathering related actions in one file and not having hundreds and hundreds of five-line classes) and easy code reuse.  But the ultimate test for a flexible framework is one that lets the users choose."
PHP,3b36k1,pmjones,2,Thu Jun 25 17:25:07 2015 UTC,"Personally I'd use inheritance for that. But the thing I often see is when all the logic is moved to the actual domain a lot of actions become oneliners, which do look better grouped in a class."
PHP,3b36k1,pmjones,2,Thu Jun 25 17:31:14 2015 UTC,"Which is what leads to separating out the sub-concerns, since every action ends up having exactly the same structure: collecting of input, passing that to a domain layer to get back a payload, and passing the payload to a responder. Then there's not even any Action classes per se; or rather, only a single generic one. Thus Arbiter."
PHP,3b36k1,pmjones,2,Thu Jun 25 18:40:04 2015 UTC,"Which is what leads to separating out the sub-concerns, since every action ends up having exactly the same structure: collecting of input, passing that to a domain layer to get back a payload, and passing the payload to a responder. Then there's not even any Action classes per se; or rather, only a single generic one. Thus Arbiter.   So what happens if I need to call multiple domain services, multiple times, with different input in order to produce one responder. There goes the Arbiter.  I kind of admire the level of your output. You have a new component or framework to release like every week. But the downside is, you don't have enough time left to use them in complex projects and see where you f**ked up..."
PHP,3b36k1,pmjones,1 point,Thu Jun 25 19:03:45 2015 UTC,"So what happens if I need to call multiple domain services, multiple times, with different input in order to produce one responder. There goes the Arbiter.   I assert that if you need to make multiple calls to different domain services, you should probably wrap all those calls in an upper-level domain service. Your action can then call that one domain service, which in turn will coordinate the other domain calls.  Further, if you're in a Request/Response environment, you only get one set of input from the user: the Request. Extract from that the input needed for your upper-level domain service call, pass it in, and you're done.  UPDATE: Re ""in order to produce one responder"" -- for what it's worth, the domain does not produce a responder; it produces a payload, describing the results of the domain activity, which is passed to a responder. The responder in turn builds the response."
PHP,3b36k1,pmjones,2,Thu Jun 25 20:21:03 2015 UTC,"You're basically saying I should have UI-specific code in my domain services, such as the combination of service calls I need for a particular portal page in my website.  Well, I ""assert back"" that what you're doing is just moving your client-specific controller glue code to the domain thus negating the very point controllers exist for: to glue client UI concerns with domain services without the domain being polluted with client logic or vice versa.  You know this saying: make it as simple as possible, but not simpler. You're trying to make controllers so simple, they fail to work as controllers anymore, so now you have controllers in your domain.   Just... no."
PHP,3b36k1,renang,1 point,Thu Jun 25 20:31:49 2015 UTC,"You're basically saying I should have UI-specific code in my domain services   I am saying the opposite: that the Responder should examine the results of the Domain Payload to generate the response. The Domain should always be independent of the UI-specific input concerns, and the UI-specific output concerns."
PHP,3b36k1,gettroll,1 point,Thu Jun 25 20:54:36 2015 UTC,"UPDATE: Re ""in order to produce one responder"" -- for what it's worth, the domain does not produce a responder; it produces a payload, describing the results of the domain activity, which is passed to a responder. The responder in turn builds the response.   I was talking about the action producing it, not the domain."
PHP,3b36k1,pmjones,1 point,Thu Jun 25 20:37:45 2015 UTC,Fair.
PHP,3b36k1,pmjones,1 point,Thu Jun 25 21:08:25 2015 UTC,"But the thing I often see is when all the logic is moved to the actual domain a lot of actions become oneliners, which do look better grouped in a class.   Precisely."
PHP,3b36k1,gettroll,1 point,Thu Jun 25 18:05:46 2015 UTC,I use such factories for actually building stuff. Usually in my code the only classes that are allowed to talk to factories directly are other factories. I really hate having them in the actual processing code.
PHP,3b36k1,pmjones,1 point,Thu Jun 25 16:49:08 2015 UTC,"""Hate"" is an interesting engineering argument.  You are describing a real problem you have, that I don't have, so I give you my solution. And the counterargument to using my solution is you ""hate"" it :P"
PHP,3b36k1,pmjones,2,Thu Jun 25 17:59:16 2015 UTC,"You're making many of the points I made in the ADR paper, which is satisfying. It's always nice to get independent validation.  Anyway, it's funny you should ask about this now. Having worked with ADR for a little while now, and in collaboration with Woody Gilk and others, I have within the past 24 hours released Arbiter. The idea is that each Action really does only three things: collects input for a domain call, makes the domain call with that input to get back a payload, and calls a responder with that payload. So even the actions can be reduced to their component parts. I have just this morning converted the core Radar package to use Arbiter, to good effect."
PHP,3b36k1,pmjones,1 point,Thu Jun 25 16:53:11 2015 UTC,"BTW this entire argument about how dependency injection and controller layout fight... Have you considered, maybe it's not the job of the router to create the controllers. This would also resolve the problem of how should the router use a container to pass dependencies to them."
PHP,3b36k1,pmjones,1 point,Thu Jun 25 18:02:35 2015 UTC,"Have you considered, maybe it's not the job of the router to create the controllers.   I completely agree! (Not sure what led you to think that I do.)"
PHP,3b36k1,baileylo,1 point,Thu Jun 25 18:34:46 2015 UTC,"Mostly because we're discussing how we should split our actions in separate classes, so the class doesn't receive dependencies it won't use. If you completely agree then... we're arguing over a problem that doesn't exist."
PHP,3b36k1,weierophinney,1 point,Thu Jun 25 18:36:26 2015 UTC,I don't see how it solves anything really. The number of dependencies for a class is the same regardless of who is building it. So putting the creation of Controllers and Actions outside the router changes nothing in regard of constructor parameters
PHP,3b36k1,utotwel,2,Thu Jun 25 19:08:33 2015 UTC,"I did mention you can pass dependencies to the action methods. That's just one thing you can do when the user is allowed to build it (or provide a factory that builds it inside the router).  But what I do is have my app module define a factory interface of what it needs. Then I pass a concrete factory to the controller constructor, so the dependencies are created lazily.   And if you can pass the factory by yourself, you can avoid needing a DI container at all. It's just amazing how good architecture makes a ton of problems disappear, and yet it's less code. Magic."
PHP,3b36k1,pmjones,1 point,Thu Jun 25 19:12:44 2015 UTC,"But what I do is have my app module define a factory interface of what it needs. Then I pass a concrete factory to the controller constructor, so the dependencies are created lazily.   Do you use something like a container or do you have a method for each dependency in the interface? Having one method per dependency won't you end up with a fairly big interface for a small, but not micro, app?"
PHP,3b36k1,aequasi08,2,Thu Jun 25 20:54:31 2015 UTC,"Method per dependency.  These interfaces should be defined per module, and not globally for the entire app, so it scales well in terms of growing your codebase for large apps. You can still have a single ""root app dependency factory"" that services all those module dependencies, but nobody sees that root factory. They just see their little module-specific factories.  The root factory is like a DI container. And the little per-module interfaces are like constructor arguments. It's just at a different scale. We're talking a big app that's made of modules... which are made of classes.  You'll have one module per service (user service, order service, payments service, and whatever you need), and you'll have one module per ""client"", which for a typical website means at least a public site, and an admin site (so two modules).  The number of dependencies in a well-factored module are surprisingly few, especially for controllers, which we're discussing here.  My controllers typically have only two dependencies:   The domain services endpoint (which aggregates access and discovery for all other domain service endpoints). A single ""client services"" endpoint, which... actually the client publishes to itself, so it's an internal dependency, but controllers see it as another dependency.   And that's it... Controllers don't have direct access to a database or anything like that, they rely just on the domain and their own ""client service"" (which essentially just keeps session state, like signed in user name and token, UI event notification queue /i.e. ""flash message"" etc./).  Few clarifications:   When I say ""UI client"" I refer both to the PHP controllers and templates and the browser-side JS. Together, they represent the ""client"" here (i.e. the website frontend). When I say ""endpoint"", I mean the object that is the public interface of a service. A simple collection of methods (""actions"") and subobjects (""resources"") which can be called either natively in PHP, or remotely from JavaScript via AJAX.   EDIT: All this came out a bit more abstract than I hoped, but it's just not quick to explain in a nutshell. If you're curious, don't hesitate to ask questions."
PHP,3b36k1,aequasi08,1 point,Thu Jun 25 21:07:49 2015 UTC,"Do you have any example/open source projects with the structure you speak about above? I really want to move away from DI containers to remove the magic, guessing and uncertainty that can come with using DI containers but haven't found the right implementation. I would love to see how injecting a factory into a controller could look!"
PHP,3b36k1,tjdavenport,2,Fri Jun 26 00:05:09 2015 UTC,"When I get a request like this, I have instant regrets for not having a cohesive open-source example on Github or smth. to show people. Maybe I have to just do it some weekend.   It's essentially about factories and factory adapters.    Let's say you have UserService module, and a PublicSite module.  UserService needs a DB connection. PublicSite needs the UserService endpoint.   Modules are bundles of classes, where one of them is the ""representative class"", which acts as the module's explicit entry/exit point. Means when you use the module, you instantiate that class. And if you need something out of that module, that class provides it. You don't reach from outside the module into this module's other classes, their constructors and static methods must be considered an internal implementation detail of the module.  Let's define the two modules (injected dependencies interface and ""main"" module class):  // USER SERVICE MODULE:  interface UserServiceDeps {     function getDb(): Db; }  class UserService {     function __construct(UserServiceDeps $deps) {         $this->deps = $deps;     }      function getEndpoint() {         ...     } }   The main module class and its dependencies interface. The same for the public site:  // PUBLIC SITE APP MODULE:  interface PublicSiteAppDeps {     function getUsersEndpoint(): UsersEndpoint; }  class PublicSiteApp {     function __construct(PublicSiteAppDeps $deps) {         $this->deps = $deps;     }      function run($request) {         ...     } }   Of course if you always had one or two dependencies, you can get away by injecting the dependencies directly. That's up to you to decide. Factories scale better because they're lazy and don't become a mess if you have a service with half a dozen dependencies or more (which is not unheard of for an entire service).  Now we need our environment context - the compositional root, that'll wire the two components together:  // ""COMPOSITIONAL ROOT"" - a root factory setting up the environment for all used modules  class Environment implements UserServiceDeps, PublicSiteAppDeps {     protected $usersEpt;     function getUsersEndpoint() {         if (!$this->usersEpt) {             $userSvc = new UserService($this);             $this->usersEpt = $userSvc->getUsersEndpoint();         }          return $this->usersEpt;     }      protected $publicSiteApp;     function getPublicSiteApp() {         if (!$this->publicSiteApp) {             $this->publicSiteApp = new PublicSiteApp($this);         }          return $this->publicSiteApp;     }      protected $db;     function getDb() {         return $this->db ?: $this->db = new PDO(...);     } }   You can of course have some simple helpers to automate boring tasks like ""memoizing"" the instance for single-instance dependencies, but those are optional.  // RUNNING THE APP:  $env = new Environment(); $app = $env->getPublicSiteApp(); $app->run([$_GET, $_POST, etc]);   In more complex apps, the Environment won't be able to implement directly all the deps factory interfaces due to method name conflicts. For example UserService and OrderService may both call getDb() for their database, but they're not the same database.  Then you can switch to adapters. For my toy example using adapters feels like a lot of boilerplate, but in larger projects writing simple adapters is quite natural and not where most of the effort or code will be in a project by a long shot.  Refactoring the environment class above to adapters (using PHP7's anon classes for brevity would look like this):  // ""COMPOSITIONAL ROOT"" - a root factory setting up the environment for all used modules  class Environment {     protected $usersEpt;     function getUsersEndpoint() {         if (!$this->usersEpt) {             $deps = new class($this) implements UserServiceDeps {                 protected $env;                 function __construct($env) { $this->env = $env; }                 function getDb() { return $this->env->getDb(); }             }              $userSvc = new UserService($deps);             $this->usersEpt = $userSvc->getUsersEndpoint();         }          return $this->usersEpt;     }      protected $publicSiteApp;     function getPublicSiteApp() {         if (!$this->publicSiteApp) {             $deps = new class($this) implements PublicSiteAppDeps {                 protected $env;                 function __construct($env) { $this->env = $env; }                 function getUsersEndpoint() { return $this->env->getUsersEndpoint(); }             }              $this->publicSiteApp = new PublicSiteApp($deps);         }          return $this->publicSiteApp;     }      protected $db;     function getDb() {         return $this->db ?: $this->db = new PDO(...);     } }   Notice that the public interface of Environment didn't change. Nothing in the module classes and interfaces changed either. The refactoring was entirely isolated within the Environment class implementation. This means you can start by Environment directly implementing interfaces and make adapters only when you have to.  As I said, you can have some helpers to reduce the amount of code to do common tasks, but it's crucial that you preserve the public interfaces as they are. If you start relying on container-specific features you can't easily implement in ""plain PHP"" like I demonstrated above, you're back in magic-land and hard-coupled to a container.  And... now I need to also explain the routers and how controllers see all this, but it'll become too long of a post, if interested let me know you're still on-board. In a nutshell:   The router gets a list of routes as usual, and a controller factory (a simple closure would do here). The route resolution is sent through that factory which must return the controller.   Since you provide the factory, you get to decide what to pass to the constructor of controllers. You can pass the entire module's $deps, or a subset of it that you deem suitable for controllers (technically most of a module for a site will be controllers and templates... so the distinction is thin).  But the key is that because the router doesn't create the controller, it can be a reusable component from a third party, while the dependency injection tactics are entirely up to you to decide in the factory closure, module by module.  EDIT: Screw it, let's finish this...  This is what the PublicSiteApp's run() method could be like:  $router = new Router();  // Example of a closure handler. $router->add('/foo/', function (ModuleDeps $deps, $request) {     $user = $deps->getUsersEndpoint()->get(['id' => $request->queryField('id')]);     return 'This user is named: ' . $user['name']; );  // Example of a lazily created class handler. $router->add('/bar/', Handler::class);  $router->setFactory(function ($resolution) {     if ($resolution instanceof \Closure) {         // For closures, we can pass them the dependencies          // by wrapping the handler:         return function (...$input) use ($resolution) {             return $resolution($this->deps, ...$input);         }     } else {         // For class handlers given to us by classname,         // we can pass it to the constructor:         return new $resolution($this->deps);     } }  // Find the controller. $controller = $router->route($request);  // Dispatch the controller (we wouldn't just ""echo"" the result, but... example). echo $controller($request);   Of course wrapping a Closure and constructor injecting into a class by classname are just two examples. You can also decorate a class instance or what have you. The point is, you're in control, and not the router, which is the purpose of this technique."
PHP,3b36k1,phpdevster,2,Fri Jun 26 08:17:59 2015 UTC,"When I get a request like this, I have instant regrets for not having a cohesive open-source example on Github or smth. to show people. Maybe I have to just do it some weekend.   I encourage you to do so; it's a lot of work, but then you can just point people to it instead of havig to re-explain stuff.  Regarding these ...  interface UserServiceDeps {     function getDb(): Db; }  // ...  class Environment ... {    function getUsersEndpoint() {        if (!$this->usersEpt) {            $userSvc = new UserService($this);            $this->usersEpt = $userSvc->getUsersEndpoint();        }         return $this->usersEpt;    } }   They, along with the *Deps classes, look remarkably similar to a collection of hand-written containers, and used as service locators."
PHP,3b36k1,Firehed,2,Fri Jun 26 16:57:00 2015 UTC,"They do in form, because it's a passed-in factory, but not in purpose and architecture, because the interface for the factory is defined by the accepting module, and not by the implementing application root. So the names of the factory methods are not global to the application, they're local to the module that's calling them.   It's a subtle difference, but it means:   The module isn't coupled to a global factory that may change for a reason unrelated to that module. The factory doesn't contain dependencies the module doesn't need or use.   I'm familiar it's hard for some people to get over the fact it's a factory. The problem of a service locator isn't that it's a factory, but that it's a global factory. Factories by themselves are not a bad practice, even when injected.  If you think there's any problem in the design I outlined, I'd be happy to hear about it, and address it here."
PHP,3b36k1,pmjones,2,Fri Jun 26 17:10:50 2015 UTC,"I don't have a problem with factories, but those pieces are doing more than merely creating an object and returning it. They are creating and retaining the object, so that the same object gets returned each time. That makes it more than a factory.  Further, I've no problem with service locators per se. One can have multiple service locators in a system; they need not be global. As such, I argue the objects you have here appear to be purpose-specific service locators, not merely factories.  UPDATE: More strictly, I'd say they are purpose-specific containers, used within their modules as service locators."
PHP,3b36k1,Firehed,2,Fri Jun 26 17:29:44 2015 UTC,"Sure, the singleton behavior is not strictly like a ""factory"", but I'm trying not to overburden my explanations with less-familiar buzzwords.  It's closer to a pattern called Encapsulated Context, with the additional constraint that the module defines what its context should look like.  Some methods can act like a factory, some can return one instance, some may return strings. Say, getAssetsURI() can return the URI base a module should look for its static assets when rendering a template (as a string). Some methods may return nothing, but have some sort of side-effect (commands). It's entirely up to the developer to design it according to their needs, just like any other class.  EDIT: BTW, I've had success explaining the whole setup to people before with an analogy:  namespace Linux;  class InternalKernelAPI {     function internalPrintToConsole($text) {         echo $text;     }      function internalCreateUserlandApplication($class) {         $userlandAPI = new class($this) implements UserlandKernelAPI {             function __construct($internal) {                 $this->internal = $internal;             }             function printToConsole($text) {                 $this->internal->internalPrintToConsole($text);             }         };          return new $class($userlandAPI);     } }  interface UserlandKernelAPI {     function printToConsole($text); }  class UserlandApplication {     function __construct(UserlandKernelAPI $api) {         $this->api = $api;     }      function run() {         $this->api->printToConsole(""Hello World."");     } }  $kernel = new InternalKernelAPI(); $app = $kernel->internalCreateUserlandApplication(Application::class); $app->run();   Not sure if this helps. Probably not. But there you go.    The application is a standalone module. The userland API is the platform and configuration it stands on, the encapsulated context it uses. The internal API is the compositional root & platform implementation, which wires it all and that no application/module sees directly.   I could have had ""interface Application"" for having multiple applications using the same userland API, but abstract modules with multiple compatible implementations are relatively rare in my projects (but they happen)."
PHP,3b36k1,pmjones,1 point,Fri Jun 26 17:41:09 2015 UTC,This has been a huge help thanks! I have mocked your example and I am seeing the benefits of having a root factory that handles the injection of dependencies into modules without the use of magic methods. It makes it a lot easier to manage modules dependencies. Although it did take me a while to get my head around instantiating  UserService and PublicSiteApp and passing the Environment class into their constructor methods. The reason it confused me was because injecting the Environment class into the UserService allowed the UserService class to access to the PublicSiteApp which you might not want. How would you go about preventing this? Would you use adaptor classes?
PHP,3b36k1,Firehed,2,Fri Jun 26 12:21:59 2015 UTC,"The interface UserService asks for is UserServiceDeps. That interface doesn't have a method for getting the app.  In any statically typed language, calling a method which is not in that interface would be a compile error.  In general, when a class asks for an argument of a given interface, it should only use what's on that interface. Your IDE will show in autocomplete only those methods, and anything else would be considered a IDE type error, even if the method is a valid Environment method (because the typehint is not for Environment itself). And so the problem can end there by coding to the requested interface and not doing runtime tricks.  Of course, PHP allows you to call that method at runtime, technically. And you can even add an instanceof guard which will remove the error in IDEs which detect instanceof usage as a ""cast"":  if ($deps instanceof Environment) { $deps->getPublicSiteApp(); }   Zend Studio will recognize $deps as an instance of Environment in that codeblock. The purpose of a module, however is that it may be used in different apps, and class Environment might not even exist when a module is deployed in a given situation.   Programmers tend to know when coding modules, that making assumptions about $deps which they've not declared in the interface is a bit like shooting themselves in the foot, because everything else might or might not be there in a different configuration, the type system won't guarantee anything.  If you don't trust your devs (say they're inexperienced, junior, so on), you can always use adapters and enforce your constraint, sure. It's slightly more verbose, but not that much.  But once people get the hang of programming to interfaces, it's not really necessary to do so.  tl;dr If you need it, ask for it in the typehint. If you haven't asked for it: don't use it."
PHP,3b36k1,pmjones,1 point,Fri Jun 26 13:23:59 2015 UTC,"In my implementations actions will be just one of many kinds of chainable processors that are built into chains ( and each chain in turn is also a processors and can become a part ofanother chain), e.g. the HTTP chain looks like this: https://github.com/PHPixie/Framework/blob/master/src/PHPixie/Framework/HTTP.php#L49"
PHP,3b36k1,Firehed,1 point,Thu Jun 25 16:55:52 2015 UTC,"Would it be fair to call that kind of system middleware-ish? (FYI not a fan of the term middleware, especially since /u/idiot-with-opinion pointed out its previous history, but you get my meaning.)"
PHP,3b36k1,pmjones,1 point,Thu Jun 25 17:12:37 2015 UTC,Well not really. Middleware ideology is more about nesting and processing in sequence. I use linear processing mostly ( although nesting is possible ) and allow forking ( the checkIsDispatchable is a fork that either processes the request or forks to the notFoundProcessor which shows a 404 page )
PHP,3b36k1,Firehed,1 point,Thu Jun 25 17:27:59 2015 UTC,"/me nods  Thanks for the explanation. I'll note only that linear processing for middleware is possible, although I do not recall any for PSR-7 offhand. The Silex middlware processor is linear, IIRC."
PHP,3b36k1,pmjones,3,Thu Jun 25 17:48:01 2015 UTC,"Considering ""middleware"" is the laraword1 for ""decorator"", now I'm trying my best to imagine linear processing of decorators... and failing. Is it trampolining?  1 From now I'm calling random term abuses as ""larawords""."
PHP,3b36k1,blocsonic,2,Thu Jun 25 18:39:07 2015 UTC,"""middleware"" is the laraword1 for ""decorator""   The term was in (mis-)use well before Laravel. I first saw it in Slim and Silex, and I didn't especially like it then, but didn't really know why. I used up all my energy fighting ""facade"", and cannot muster the strength to fight this one too."
PHP,3b36k1,Bloompire,2,Thu Jun 25 18:48:01 2015 UTC,"The origin of middleware is from Ruby's Rack, which is a play on ""Rack of servers"", and all its handlers are referred to as ""apps"" and so things that wrap them are referred to as ""middleware"". So it was a brand name, that some clueless folks thought is a technical term for this kind of a plugin.  But I'm going to call any word abuse a laraword, anyway. The fact it's inaccurate makes it even more suitable."
PHP,3b36k1,geggleto,2,Thu Jun 25 18:54:46 2015 UTC,"But I'm going to call any word abuse a laraword, anyway. The fact it's inaccurate makes it even more suitable.   Heh. It's sure way to Rack up points with that crowd. ;-)"
PHP,3b36k1,pmjones,1 point,Thu Jun 25 19:04:52 2015 UTC,Isn't laraword an laraword itself. It inaccurately links a term to the framework.
PHP,3b36k1,pmjones,3,Thu Jun 25 19:40:08 2015 UTC,Isn't laraword an laraword itself.   That's the genius of it.
PHP,3b4eo7,dericofilho,7,Thu Jun 25 21:45:58 2015 UTC,"By default, the supported versions page calculates the dates for each version's support lifetime based on the release date of the first stable release on that branch. So for 5.5, that was 2 years from the release of 5.5.0, which happened on June 20, 2013.  In practice, though, those dates don't necessarily line up with the exact release cycle in use two or three years later, and that's what's happened here: the 5.5 maintainers intend to make one more ""normal"" release on July 9, so the support dates for 5.5 on php.net have been adjusted accordingly. (July 10 was picked mostly in case the 5.5.27 release slips into the next morning, which happens occasionally depending on one's time zone.) Ideally, that should have happened in advance, but since 5.5 is the first release to hit EOL since the supported versions page was added, nobody really thought to reconcile them until after the fact.  (Edited to add: it's likely that the exact date for 5.4 ending its security only support phase is going to change ever so slightly too; that date will be announced in the 5.4.43 release announcement in a couple of weeks.)  tl;dr: One more ""normal"" release was in flight; the site wasn't updated to show that until later than it should have been. Our bad. Mostly my bad."
PHP,3b4eo7,LawnGnome,3,Thu Jun 25 22:04:08 2015 UTC,"As far as I gather from the internals mailing list, simply because the final (non-security-only) release wasn't ready yet, so the release managers pushed out the dates a little."
PHP,3b4eo7,AllenJB83,1 point,Thu Jun 25 22:01:42 2015 UTC,The question is why wasn't it extended by 6 months. Given that it takes 6 months for a new version to be adopted by any distro and to be accepted as production stable. That leaves 18 months of life before its on life support.
PHP,3b4eo7,ozsynergy,1 point,Tue Jul 7 09:49:33 2015 UTC,"On the opposite, why was it not deprecated before. There is the very bad habit in PHP-dom to postpone upgrades."
PHP,3b3y3i,duh777,4,Thu Jun 25 19:43:02 2015 UTC,"My question is what exactly are these 'logs' used for?   ... You answered your own question with:   If this is to check errors when app is in production How exactly is someone going to get meaningful data out of this 1000s of lines?   The answer is very carefully and however you want to. No seriously. Some people tail files on their server to look for recent errors. Some people use grep to search for issues. Other people use log file aggregation and analysis tools to not store these errors to disk, but to a Service usually backed by a NoSQL datastore. And then use this service to send out automated message when issues arise.  TLDR; People use them, all the time. Usually to help keep their 24/7 uptime."
PHP,3b3y3i,_tenken,1 point,Thu Jun 25 19:52:13 2015 UTC,I just googled and now it became clear  https://www.google.com/search?q=laravel+log+analyzer                           thank you so much for the help :)
PHP,3b3y3i,Drakie,2,Thu Jun 25 20:00:26 2015 UTC,"if something breaks in an important application (not a simple blog or small business website) then you're going to need as much data about what went wrong and/or what was happening just before it went wrong.   logging as much useful data as possible can be very valuable!  it wouldn't be the first time that some crazy bad bug occurred and I had to first add more logging, deploy to live and then wait for it to happen again before I could fix it!   however the disadvantage to logging a lot of data that isn't a real error is that it's hard to dig through the logs to find the actual errors.   personally I let exceptions be logged to our slack channel (email could work too) so that I'm notified when something bad happens and then I can start digging through all the information in the log files."
PHP,3b3y3i,Irythros,1 point,Thu Jun 25 20:02:46 2015 UTC,thank you! I understand it now :)
PHP,3b3y3i,liveflex8,1 point,Thu Jun 25 20:12:55 2015 UTC,If this is to check errors when app is in production      Correct.   How exactly is someone going to get meaningful data out of this 1000s of lines?   Usually you know around the time an error happens.  Then you can correlate it with other events around the same time.  Other options include making your own logging class/integration to send off logs to a logging server like Graylog.  That makes it searchable in a nice interface and you can search for any piece of data you want however you want it which is what I do.  I receive about 2 million messages per day on it and finding a specific users action takes all of 5 seconds.
PHP,3b3y3i,NeuroXc,1 point,Thu Jun 25 20:36:13 2015 UTC,"There's a log analysis tool built specifically for Laravel (although it works with any other source as well) that you may want to take a look at: www.understand.io. It makes getting ""meaningful analysis out of 1000's"" (or even millions) of lines really easy.  [disclaimer - I work there]"
PHP,3b3y3i,r0ck0,1 point,Fri Jun 26 08:11:20 2015 UTC,"Where I work (a university), we send all of our logs to a centralized Logstash server. Our help desk needs to be able to assist users who have issues with the applications, and logging any potentially relevant data helps with this.  Of course, the default (error-only) logging doesn't do much for this in production. But we use Monolog (Laravel uses this as the provider for its Log class as well) to log any other useful information, such as validation errors, that the help desk might need to know to help our users."
PHP,3b21bg,zulusx,4,Thu Jun 25 09:41:12 2015 UTC,holy shit eclipse..
PHP,3b21bg,creatiff,-6,Thu Jun 25 13:38:32 2015 UTC,"Maybe it's just me, but it seems like all the shitty PHP developers I've met recently are still using Eclipse."
PHP,3b21bg,btcMike,2,Thu Jun 25 10:01:40 2015 UTC,"Not sure if /s or being a jerk...  I don't think there's a correlation between skill and IDE of choice, but I can't prove it one way or another. Can you?  Just because you don't find Eclipse useful doesn't mean others don't. There are all types of developers using all sorts of IDEs. I started writing PHP using Notepad because I didn't know there was anything else out there. If I had found Eclipse at the beginning, I'd probably still be using it."
PHP,3b21bg,uz3l4c,0,Thu Jun 25 14:03:20 2015 UTC,"Ok the comment was a bit tongue-in-cheek.  Seriously though, any of the expert PHP developers I've ever met, uses either: vim, emacs, sublime or phpstorm.  Those still using eclipse are the ones that haven't been keeping up with the latest IDE technologies and probably still using PHP 5.2."
PHP,3b21bg,btcMike,1 point,Fri Jun 26 01:05:32 2015 UTC,I consider myself a solid programmer. I'm not dependant on eclipse but unfortunately due to our company sticking to subversion.. im totally dependant on subclipse. There simply isn’t (imo) a better svn handler out there. I merge between multiple branches from dev through to production and it just makes it seamless.   The only thing I'm tied down to dev wise is the necessity of code hinting. I would use any software that provides me the necessary productivity tools.    The tool itself has no impact on my ability to be a good coder. Just a faster coder.
PHP,3azwgq,boreasaurus,6,Wed Jun 24 21:09:35 2015 UTC,"I am not an expert with this and don't proclaim to have the ""one true answer"", but in my experience of running many small sites on a common CMS platform, each with 90% same functionality but some customizations (not as complex as you, but kinda similar)...  I tend to prefer the ""many copies of the app"" approach that you've been taking. Functionality that can apply to many of the clients can go into the core app, but yeah have separate modules or override code for the client-specific custom stuff.  The reason I prefer this way is because then the code of each customized app makes sense according to that particular client's needs (that is, the code is understandable in terms of how it serves the business goals, as opposed to serving an abstract architecture), and also the codebase is smaller. These 2 factors (code serving biz goals and smaller codebar) are the most important things (in my opinion) that help keep code maintainable. The alternative is you lump all custom code into 1 big codebase and have lots of switches... it's just going to be a total mess and depending on the customizations you have might not even be possible to separate out in a clean way.  In terms of the big downside you mention (having to update a bunch of apps for even the simplest of core bugfixes) is, I believe, an easier problem to solve than the alternative. What I'd look into for solving this is:   Implement a version control strategy that facilitates it. If you're using git, maybe have one repo with the core app, and then use submodules or ""subtree"" for the individual client apps. Or utilize some complex branching strategy if you want everything to live in 1 repo. Changes to the core app can be merged into all client apps fairly easily... BUT you'll want to make sure you have some tests for each client app just in case a core fix breaks some custom functionality. Automate the shit out of this... for example you could have each client app running on an internal staging server, and continuous integration automatically pulls updates to the core repo and then runs automated tests on them. If they pass, you can be somewhat confident that the core fix is safe to push live for that client (and if not, then that's some more tests you will write so it doesn't happen again in the future)... so if you're feeling confident with the system you could then automate the deployment from stage to live server if/when the tests pass.   It's going to be somewhat complicated to set up and educate your developers on, but will pay off in terms of helping manage the complexity over time. As with all complicated systems, start out slow, simple, and manual... then gradually automate things as you get confident and/or bored with them.  Best of luck!"
PHP,3azwgq,shedsquatch,3,Wed Jun 24 22:31:55 2015 UTC,"As with all complicated systems, start out slow, simple, and manual... then gradually automate things as you get confident and/or bored with them.   I think this is the most relevant advise that really applies across the board. I recently wrote an app that I wanted lots of customizations on and the abstraction was making everything way too complex. I quickly abandoned the customization side of it and just ""got the job done"" (while adhering to most of the ""best practices""). I'm now adding in the features I wanted slowly because the app is up and running. I now have time to breath and properly plan out the customization without the deadline lingering."
PHP,3azwgq,gripejones,2,Wed Jun 24 23:08:45 2015 UTC,"The best way to configure your application isn't peppering it with switches that enable or disable client-specific features, but providing suitable extension points (i.e. open/closed principle and so on buzzwords).  As an example, instead of having a giant switch case block in your core that selects from a number of templates depending on the clientId, you can pass in a template factory to your application. Now your core doesn't care who the client is, and doesn't have to choose the templates for them, it just has its templates 'injected' from outside.  This concept can be extended to most of the customization that you'd need in order to manage multiple clients.  Regarding copy-the-core or share-the-core, if you automate copying the core and remove the hassle of doing it manually, you'd be able to be more objective about the remaining differences between both models.  Having shared core can benefit your opcode cache and so on when hosting multiple clients per machine, but also can break all your clients at once when you deploy a bad fix. It's not a bad idea to be able to test on a small percentage of clients before deploying in full. Depending on the scope of your operations this can mean choosing either model (if you have 100 machines you can share core, but deploy to a small % of the machines).  Also there's something else to consider: splitting your app into independently deployed services (not split by clients, but split by functionality). This gives you most flexibility, but also requires most skill."
PHP,3azwgq,amenadiel,2,Thu Jun 25 08:22:40 2015 UTC,"I used to work in a SaaS company with a similar scenario. When I came to this company each client had its own deploy, and at least a dozen versions coexisted. Each one of them lived in a  folder under /var/www/html in the  form {subdomain}.domain.con  I can't say I solved the whole workflow, but we introduced a few practices that became widely adopted in the company so I guess they didn't suck.  I  converted the hundreds of vhosts to just one with a wildcard, setting the  document root to equal the HTTP_HOST. Classic example of convention over configuration.  I made a common app deploy for the customers that were up to date. Then, instead of a real {client}.domain.com folder, I turned them into symlinks pointing to the deploy. It worked fine and I soon did the same for every codebase. This meant passing from 200+ deploys to 12 deploys and 200+ symlinks. Creating a new client became just a matter of creating a symlink. It became trivial to point a client's symlink to a different version.  We automated deploys to use capistrano. Its folder structure allowed to easily keep production and feature deploys in an easy to understand tree structure.  I started using Slim Framework whose hooks allowed me to call for arbitrary named hooks at certain  parts of the code.  You can declare functions as suscribers to a given hook and they'll be called in  due time. If no functions are suscribed to a hook, calling it has no effect.  I made a plugins folder, and inside it there were PHP files, each one containing a snippet of code suscribing to a hook. Each client had a plugins table marking each plugin as active or inactive. At boot time, each active plugin was included.  I hope it helps."
PHP,3azwgq,davidf81,1 point,Sat Jul 4 22:41:37 2015 UTC,"As you work through it, always be asking ""how can I support this in core?"", and refactoring appropriately, so as to expand your system capabilities in conjunction with real world demand - and then sandboxing all custom functionality in such a way as to allow you to still freely update the core codebase for that project (this could be as simple as different physical directories). You're effectively refactoring into a package system that's well suited to your implementation, rather than picking a package format up front and shoehorning."
PHP,3azwgq,1von,1 point,Thu Jun 25 01:25:46 2015 UTC,"We currently have the same business setup as yours - a core platform with several customizations for each client. Luckily for us we use Symfony which provides bundle inheritance   http://symfony.com/doc/current/cookbook/bundles/inheritance.html  This allows us to maintain our core platform while having the flexibility to customize for clients.  So for example a client wants some customization in the Inventory module we just extend the CoreInventoryBundle to ClientXInventoryBundle then put all the changes there. Then any useful features that are developed there are folded to the core platform in the future. And as usual core versioning for each client is handled in composer.  I'm not sure if Laravel has anything like this out of the box. You might have to cobble up several packages to emulate this functionality but this might give you an idea on how to structure your platform.   The downside of our architecture is that we have an entire standalone application for each client, but maintenance is just a matter of updating the composer file and running update. My suggestion would be to have a single instance for the clients that has no customizations and a standalone application for each that has. This would make maintenance a lot easier."
PHP,3azwgq,silentk446,1 point,Thu Jun 25 03:42:36 2015 UTC,I built something along these same technical lines a few years ago. It's basically a choice between multi-tenancy and single-tenancy. At the time I posted on SE Programmers. Hopefully this'll help a bit: http://programmers.stackexchange.com/questions/175313/one-codebase-lots-of-hosted-services-similar-to-a-basecamp-style-service-p
PHP,3azwgq,irphunky,1 point,Thu Jun 25 08:05:48 2015 UTC,"Think the approach and complexity will depend on what you allow to be unique to a customer or configurable per customer.  We run a large rental platform here and we offer our clients the ability to do this kind of bespoke work, although the majority of the time it is purely visual changes or slightly ""tweaked"" flows.   We use a template hierarchy structure in our views that allow us to easily override any view for a client, so long as a dev has componentized the views well enough this is extremely flexible and removes any client specific business logic from our views.  Sadly the backend isn't quite as elegant :("
PHP,3aycco,ircmaxell,-4,Wed Jun 24 14:12:19 2015 UTC,"All this talks about php 7, what happened to 6?"
PHP,3aycco,random314,3,Wed Jun 24 15:34:27 2015 UTC,http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6
PHP,3aycco,McGlockenshire,3,Wed Jun 24 16:54:53 2015 UTC,"Too many people jumped on the ""I want to write the first PHP6 book so everyone buys it"" bandwagon."
PHP,3aycco,ceejayoz,2,Wed Jun 24 19:29:41 2015 UTC,"lol, I checked out those first two books for fun in the Amazon preview thingie.. first one talks about PHP 5 (yes, 5) like it's new and scary, but that ""it's okay because this book doesn't cover OOP"".  Book #2 teaches OOP but closes all class files with ?> among other horrible stuff.  No wonder there's so much shitty code out there."
PHP,3aycco,prewk,4,Wed Jun 24 20:27:59 2015 UTC,If an unnecessary closing tag is your biggest problem you're in pretty damn good shape.
PHP,3aycco,Firehed,1 point,Thu Jun 25 03:10:47 2015 UTC,"Yeah sure, I reacted because it was literally in the first class example the book had. In a book about ""PHP 6"".  It's full of other horrible practices as well, and seems very outdated."
PHP,3aycco,prewk,2,Thu Jun 25 07:32:31 2015 UTC,"Yeah, I'm not surprised. I see blog posts going back to at least 2007, and imagine the first books were dated similarly. Best practices have changed a lot in 8 years (namely, they've been established)"
PHP,3aycco,Firehed,-2,Thu Jun 25 07:44:26 2015 UTC,I still don't agree with the Throwable interface. I think Throwable is more confusing than using BaseException.
PHP,3aycco,againor,10,Wed Jun 24 16:25:32 2015 UTC,An interface defines a contract. The Throwable makes sense here.
PHP,3aycco,gearvOsh,1 point,Wed Jun 24 17:29:36 2015 UTC,"I disagree. And maybe that's Python coloring my view. In Python, all exceptions extend from the common ancestor: BaseException. There's just a few exceptions that extend directory from it:   KeyboardInterrupt SystemExit GeneratorExit Exception   And then all other exceptions extend from the Exception class. This allows some exceptions to be ""special"" in that they won't be caught by the insidious except Exception as e pattern but still fit into the hierarchy (which looks like this in case you're curious).  Now, it's just as easy to dismiss Python's implementation in this discussion because Python doesn't have things like interfaces and traits -- we use abstract classes and mixins to fill that void."
PHP,3aycco,kurashu89,2,Thu Jun 25 01:30:36 2015 UTC,"That's exactly what this RFC replaced.   Functionally, the end result is about the same, but the hierarchy is a bit cleaner. You can catch Throwable like you'd have previously caught BaseException, and your previous catch (Exception $e) (or equivalent except Exception as e) doesn't change scope from the sibling-level introductions.  The only material user-land change is that your ""oh shit"" case changes from catch (BaseException $e) to catch (Throwable $e) - everything else works the same way.  As a general rule (and this is not anything specific to PHP), your type-hinting should prefer interfaces over concrete classes, as it leads to more testable code. catch/except blocks are roughly a type hint[1], so this is just an implementation of that principle.  Because interfaces aren't a first-class concept in Python, it's forced to use the BaseException approach for the catch-all scenario. Ruby has a similar limitation.  [1] In practice, it's closer to traditional overloading, with an implementation that can be though of as a series of instanceof checks."
PHP,3aycco,Firehed,1 point,Thu Jun 25 03:26:31 2015 UTC,"It's not that interfaces aren't first class in Python. You can emulate them with abstract classes. Sure, at a conceptual level, abstract  != interface but an abstract class that holds no state and has no implementation is functionally the same as an interface. Because of that and multiple inheritance, Python doesn't need interfaces.  I suppose an Interface metaclass would be possible, but there's much more interesting things I could do with a metaclass.  However, that's distracting from the point. If all your exceptions are going to inherent from exception which implements the Throwable interface and the interface won't be used anywhere else (would you implement Throwable for a nonexception - I cant think of a good usecase), what's the need for the interface?  I'm not arguing against interfaces. They're really useful with or without multiple inheritance. I just think in this case, it's over engineering."
PHP,3aycco,kurashu89,2,Thu Jun 25 04:09:14 2015 UTC,"It's not that interfaces aren't first class in Python. You can emulate them with abstract classes. Sure, at a conceptual level, abstract != interface but an abstract class that holds no state and has no implementation is functionally the same as an interface. Because of that and multiple inheritance, Python doesn't need interfaces.   They're not the same thing, and serve two completely different purposes.  Interfaces are a contract. No more, no less.  If something accepts an object implementing Foo, you're guaranteed that all of the methods in the Foo interface exist (and are public).  Abstract classes are designed to be a base class that does contain state and some methods. There's of course nothing forcing you to do so, but it's a much more powerful concept. To use the stupid, over-used animal example:  abstract class Animal {   abstract protected function getSound();   public function speak() {     echo $this->getSound();   } } class Frog extends Animal {   protected function getSound() {     return 'ribbit';   } }   As you rightly point out, you can absolutely achieve the idea of an interface by having all methods in the base class be abstract (and hint to this base class).  However, in larger systems, this approach becomes limiting when you need to add another abstraction layer, and this RFC is the prime example: the only way to cleanly add something ""next to"" the base class is to shoehorn in an additional class underneath it and add even more stuff into the hierarchy, whether it belongs there or not. This is in contrast to an interface, where you just have the other class implement the interface and be on your merry way.  To think of it another way, an interface defines your API. It should not change (outside of major releases if you follow SemVer). You're not free to rename its methods without unleashing hell, so hopefully you've actually designed a proper system.  The public abstract methods of an abstract class implicitly give you the same thing, but an interface makes it explicit. When you're creating a platform, explicit is always better than implicit.   If all your exceptions are going to inherent from exception which implements the Throwable interface and the interface won't be used anywhere else    They don't, though! If you'll look back to the original post, the new class of engine errors do not extend from Exception. I'd hazard a guess that internally they look pretty different as well, though I can't really bothered to decipher PHP's source code to confirm either way.   (would you implement Throwable for a nonexception - I cant think of a good usecase)   No, you would not. The goal of the Throwable interface is to define what an exception looks like (though, semantically, I'd argue Catchable may be a better name, especially with the functionality it offers). Again, it's simply being explicit, over the previous implicit approach.   I just think in this case, it's over engineering.   I'll politely disagree with your opinion here. And I'd personally prefer to have an over-engineered language feature over an under-engineered one any day (coughPHP4cough)  It's certainly not the Pythonic way (nor the Ruby way), but it's neither Python nor Ruby."
PHP,3aycco,Firehed,1 point,Thu Jun 25 05:34:32 2015 UTC,"The benefits of this RFC outweigh such a small use case IMO. For all we know, we could possible get new sibling exceptions, to how Python does it."
PHP,3aycco,gearvOsh,5,Thu Jun 25 02:50:29 2015 UTC,"I find the interface way more intuitive than having Exception extend BaseException. Plus, I frequently use an interface to denote library-specific exceptions and this makes my life slightly easier: I can extend the Throwable interface with my own, rather than re-defining PHP's exception methods."
PHP,3aycco,ThePsion5,2,Wed Jun 24 16:48:02 2015 UTC,"While user-defined classes cannot implement Throwable, it is worth noting that another interface can extend Throwable. That interface can be implemented by a class extending Exception or Error.  interface PackageThrowable extends Throwable {}  class PackageException extends Exception implements PackageThrowable {}  try {     throw new PackageException('Message'); } catch (PackageThrowable $e) {     echo $e, ""\n""; }"
PHP,3aycco,trowski2002,1 point,Wed Jun 24 19:11:56 2015 UTC,"it is worth noting that another interface can extend Throwable   Right, that's what I meant by extending it in this case."
PHP,3aycco,ThePsion5,2,Wed Jun 24 19:25:50 2015 UTC,"Yep, just wanted to make it clearer for anyone reading, since Throwable can't be implemented by regular user classes. I might add that example to the article."
PHP,3ay1cn,deletive-expleted,8,Wed Jun 24 12:26:56 2015 UTC,"It's not the only way to do it, but I design my service APIs in such a way, so I can expose them to the public. ""Can I make this public"" is a good test for how well it's designed IMO.  While the internal logic might be either of the code snippets you posted, the public API would be something like this:  $result = $domain->bids->create([     'listingId' => $listingId,      'amount' => $amount,      'description' => $description,      'startDate' => $startDate ]);  $domain->bids->accept([     'id' => $result['id'],     'userId' => $userId, ]);   Notice I deliberately avoid having any object references in the API interface. This means:   I don't have to interact with the repository manually by ""finding"" objects to pass to an API. I pass an id, and the API will do the find()-ing if necessary in order to validate it. If the API takes in simple assoc arrays and returns simple assoc arrays, you can expose it as an AJAX service 1:1 without any work (I'll show this a bit later).   Now, if you want more static typing you can wrap your API calls in Command objects. Those are Data Transfer Objects (DTO) which exist only to describe an API call and are not part of your domain (they have no methods that take an action):  $result = $domain->bids->execute((new CreateBid)     ->listingId($listingId)     ->amount($amount)     ->description($description)     ->startDate($startDate) );  $domain->bids->execute((new AcceptBid)     ->id($result->id())     ->userId($userId) );   This gets you autocomplete and so on. It's nice but I consider it optional. You can start with arrays and add it later as an enhancement if you need to.  Also notice I kept all bid-related activity on the ""bids"" endpoint (the ""accept"" call). The ""users"" endpoint should preferably have only actions related to user management: sign in, sign out, edit profile, change email and password etc.  Here's the same API when used in AJAX context:  $.post('/api/domain/bids/create/', {     listingId: listingId,      amount: amount,      description: description,      startDate: startDate }).done(function (result) {     $.post('/api/domain/bids/accept/', {         id: result.id,         userId: userId,     }); });   It's basically the same thing (using jQuery here, but, of course, that's a detail). It's really nice to be able to consume the same APIs from PHP controllers and JavaScript controllers, and it's even nicer that you don't have to put effort in creating and maintaining separate APIs for both. Exposing any endpoint via JSON can be done in a reusable way with a bit of reflection and a json_encode() call. Notice how the API URLs in JavaScript map 1:1 to endpoint methods.  P.S.: In a real example, all API calls will have an additional field: authorization token, which both PHP controllers and JavaScript requests should send."
PHP,3ay1cn,nashkara,3,Wed Jun 24 13:12:30 2015 UTC,Wouldn't a POST to '/api/domain/bids' imply the '/create' part already?
PHP,3ay1cn,nashkara,-2,Wed Jun 24 14:41:19 2015 UTC,"If you want to do ""pop REST"" - sure. However HTTP doesn't constrain us to that interpretation. What I follow is:   Prefer GET (alternatively PUT or POST) for nullipotent actions (cacheable, no side-effects, i.e. no domain state updates). Prefer PUT (alternatively POST) for idempotent actions (applying the action twice has the same effect as applying it once, for ex. setting a value of an entity). Use POST for any other actions (not nullipotent, not idempotent).   This is compliant with HTTP, and hence is properly interpreted by HTTP intermediaries.  What you refer to I call ""pop REST"", a literal mapping of CRUD terms to HTTP verbs, which the REST paper doesn't talk about, yet it's a popular trend right now.  HTTP being less perfect than we're willing to acknowledge, using the HTTP method as the only and canonical action identifier comes with a number of issues, some of which are hard technical limitations:   Some servers won't accept PUT, DELETE, PATCH requests, or require special configuration. Some intermediaries won't treat PUT, DELETE, PATCH correctly (say Varnish may use PUT for write-through caching; it's optional, but it's against the HTTP spec). GET requests can't contain a body, so you can run out of space when encoding a complex query in the URL. DELETE responses can't contain a body, so you can't send information about the deleted resource.   And there's also the fact that mapping everything to CRUD, its mental model doesn't scale well for complex APIs that should remain comprehensible by humans. It helps to be explicit about the action taken, either via the URL or passing a field like ""action"", rather than inventing confusing resource nouns to try and express a non-CRUD verb.   The important thing to realize is: it doesn't matter to an HTTP client. HTTP doesn't assign any meaning to the words we use in URLs so what we put there is entirely subjective. The big arguments you see online about ""verbs vs. nouns in URLs"" are essentially fabricated out of thin air, and amount to little more than a ""tabs or spaces in code"" type of debate. To HTTP (and REST) a URL is an opaque identifier. An action can be a resource. Anything can be a resource. And the URL is the ""variable name"" pointing to that resource.  BTW, case in point, how'd you map ""accept bid"" in pop REST :)?"
PHP,3ay1cn,nashkara,3,Wed Jun 24 14:55:07 2015 UTC,"As I have little time to reply right now this will be brief.  I don't disagree with your sentiment at all honestly.   I've spent a lot of time thinking about API design over the years and I like the idea of RESTful design, but it's also impractical in some cases and you hoop-jump to make things work.   What I was trying to point out was while your example looks like it's trying to have RESTful styled resource endpoints, you are also using RPC style calls. In this case, why mix the two? Why not embrace that RPC aspect or the REST aspect exclusively?"
PHP,3ay1cn,nashkara,-2,Wed Jun 24 15:54:37 2015 UTC,"Because engineering is about designing according to goals, and not according to trends.  I do understand people emotionally associate RPC with solutions like SOAP and CORBA, while REST is associated with the web (which it's modeled on). But that separation seems artificial.    With RPC, you have a client-server model, where the client calls procedures (functions, methods) on a server. In general they represent commands and queries. Commands may manipulate state, queries may fetch state representations. With REST, you have a client-server model, where the client calls procedures (HTTP methods) on a server, that focus on manipulating and querying resources. Which encapsulate state... but sometimes also encapsulate a command-queue, i.e. a procedure (many REST APIs do the ""POST command-to-do to /commands-queue/"" trick when CRUD fails them).   The mindset of those is slightly different but they're entirely equivalent. The one distinction is that RPC doesn't talk about a uniform interface, while REST does. But I do follow that interface and gain benefits from it (like caching) - I don't violate it.  Instead of me guessing, I'll just ask: what should I do, in your opinion, so I ""embrace RPC"". And I'll answer why I don't do it, or why I do it."
PHP,3ay1cn,nashkara,2,Wed Jun 24 16:17:38 2015 UTC,I think you should choose the one that works best for your design goals.  But I also think mixing the two styles is... inelegant.
PHP,3ay1cn,SomeRandomBuddy,0,Wed Jun 24 16:31:02 2015 UTC,"Well ok, but can you clarify how would I ""unmix"" the two styles. I have an idea what mainstream RESTafarians want an API to be like and I addressed why I don't match that verbatim. What about the other option - what should I do in your opinion, in order to ""embrace RPC""?"
PHP,3az35m,abdul0010,9,Wed Jun 24 17:33:37 2015 UTC,"Someone else linked to the OWASP cheat sheet, and that is what I'd recommend for an in-depth overview. However, one can easily boil down the majority (not all, but most) security risks to one simple concept:  DON'T TRUST USER INPUT  What does this mean? It basically means any time you accept input from the user (usually via a form POST, but could be the url or the cookie), you must be careful not to trust that it doesn't contain naughty things. What are ""naughty things""? Basically text that can be interpreted as code that will get run on your server. For example:  1) SQL Injection attacks: you have a form that submits some fields. One of those fields is ""email"", then in your php code you take that form data (via $_POST) and look up a record in the database based on the email address (for example, to see if this user already exists or if the email address is already in use by someone else)... so maybe you have a SQL query like so: ""SELECT * FROM users WHERE email = '{$_POST['email']}'""-- assuming your user enters a valid email address then there is no problem here (for example, SELECT * FROM users WHERE email = 'example@domain.com'). But remember that we never trust user input, because if someone entered john@me.com'; DELETE FROM users now your sql query winds up being: SELECT * FROM users WHERE email = 'john@me.com'; DELETE FROM users and BOOM, all of your user data is now deleted. To work around this specific attack (which is still considered the #1 most common vulnerability I believe) you should use what's known as ""query parameterization"", where you pass in the variables as a separate step and some code ensures that nothing fishy is going on.  2) Cross-Site Scripting attacks (XSS): Let's say you have a form where users can update their profile info, and one of the fields is ""bio"" where they can enter some info about themselves. Then on the front-end of your website you have a page that lists your users' names and bios (let's assume this is a social network or a dating site of some kind). So on the front-end of your site you have some code like this:  <div class=""user-bio"">     <?php echo $bio; ?> </div>   If your user entered something like ""I like long walks on the beach and playing with my dog"", then there's no problem here. But what if they entered <script>alert('YOU HAVE BEEN HACKED!');</script>... now that script tag will be outputted on the profile page and every time someone views that page the script will run. This example doesn't actually do any harm to anyone (other than scaring people and making you look unprofessional), but the real danger of this attack is that people can run ANY javascript they want this way, for example some javascript that redirects them to another site that looks just like yours and has them re-enter their username and password, or their credit card info... or perhaps some code that sends user's info stored in their cookie directly to somewhere else that uses it for nefarious purposes, etc. etc... So remember the golden rule: don't trust user input and in this case to avoid this specific attack, you make sure you use the htmlspecialchars php function when outputting user-provided data to the browser:  <div class=""user-bio"">     <?php echo htmlspecialchars($bio); ?> </div>   3) Cross-site request forgery (CSRF): This is where someone posts to a form that they shouldn't be (maybe it's a form that only logged-in users are supposed to have access to, but someone has somehow gotten a user's session id via their cookie... if for example your legitimate user was using an unencrypted wifi hotspot in a public place)... so you don't want to trust that the person who POSTed some data is necessarily the person you think POSTed the data. The workaround for this is to output a token of some kind and include that in a hidden field, then on the server when checking the POST'ed data you ensure the token exists. The tokens include some kind of timestamp so they can only work for a relatively short amount of time... doesn't offer 100% protection but does reduce a lot of possibilities. Actually implementing these tokens is a bit more complicated then I can get into in this already-longwinded comment, but any web framework or CMS worth its salt will include this functionality for you.  There are tons more possible attacks, but I'd say those are the ""big 3"" and they all are expressions of the core idea of ""don't trust user data"".  I will leave you with one more that is unrelated: never store user passwords in your database as plaintext. If someone got into your database then they have all the users' passwords! Instead you should hash them so even if someone gets into the database the passwords aren't useful. Definitely read into this more if you do need to store user passwords, because there are different hashing methods and some are broken while others are considered more robust and future-proof (for example, don't use md5, but bcrypt seems to be ok? I think? It changes from year to year). This is another function of any good framework or CMS, so not something you need to know intimately... but make sure it's taken care of somewhere along the line.  That's all I got for now. Good luck!"
PHP,3az35m,shedsquatch,1 point,Wed Jun 24 22:06:43 2015 UTC,"As an extension to  DON'T TRUST USER INPUT  I would add that because anything in an HTTP request can be easily forged, you should treat all parts of the request as user input.  For example, if you're simply logging the user agent on each request - make sure you sanitize that! It could be a very simple User-Agent: Bobby (WebKit, like Gecko) '; DROP TABLES that destroys a good day's work restoring backups and patching code."
PHP,3az35m,mr_deleeuw,5,Thu Jun 25 21:54:09 2015 UTC,Have a look at this: https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet
PHP,3az35m,cykelpop,4,Wed Jun 24 21:33:51 2015 UTC,"That's a very broad question. You'll probably get more information by narrowing it down to a specific category of security.  To somewhat answer your question though, i'd say you need to focus on input/output filtering. You don't want to accept malicious data, and you definitely don't want to serve malicious data to your users."
PHP,3az35m,tjdavenport,1 point,Wed Jun 24 18:03:17 2015 UTC,"The key is that data is not malicious, until you decide to interpret it in a context where it can be ;)"
PHP,3az35m,whorestolemywizardom,3,Wed Jun 24 19:29:54 2015 UTC,"At which point, the data can be labeled malicious and we've come full circle and you probably have autism."
PHP,3az35m,geggleto,1 point,Thu Jun 25 00:21:47 2015 UTC,"At which point, the data can be labeled malicious and we've come full circle...   At which point you can label it malicious, but it's no longer just ""data"", it's a specific type of data we can talk about.  Some think that certain traits in a string demonstrate it being malicious. Like it containing certain words, or combination of characters mimicking HTML tags and so on. So then they try to filter out or deny input that has those traits.  But I can type <script>alert(""foo"")</script> here and Reddit doesn't freak out on me. Because it treats what I'm typing as text, and not HTML. It isn't malicious until Reddit decides to use what I type as HTML.  Look for people discussing data ""sanitization"". I've noticed if people use this term, chances are they have this kind of blacklisting approach, which tends to backfire a lot in terms of both user experience and security guarantees.   ...and you probably have autism.   No, just being an idiot with opinion."
PHP,3az35m,xcodula,0,Thu Jun 25 05:38:55 2015 UTC,thanks for your replay .... security in form input which goes to the database
PHP,3aytt2,drsii,5,Wed Jun 24 16:25:22 2015 UTC,"Glad to see it. I agree with some of the others that the Indiegogo thing is a little odd (at first I thought it was a contribution to be able to make it open source). I wasn't sure of the future of these two tools so I put together one that's designed to use the same interface and includes lots of the features Sentry does with plans for some others in the future: Gatekeeper. Oh, and it's open source too ;)"
PHP,3aytt2,enygmadae,2,Wed Jun 24 23:18:36 2015 UTC,not entirely sure whats with the indiegogo ... this leaves me feeling very unwell.
PHP,3aytt2,geggleto,1 point,Wed Jun 24 16:56:05 2015 UTC,"Hi Geggieto,   Can you expand on your concerns here? I know some developers are very passionate about open source and that some believe that code libraries should always be open source. We've been providing proprietary libraries for the better part of 2 years now. I try to open source as least 1-2 packages per quarter though.  Thing is I invest a considerable amount of time and money into our open source products but one area that is always an issue is justifying the training material costs beyond basic documentation. With web application security such an important topic is such a campaign out of the question? What fears do anticipate from campaigns like these?"
PHP,3aytt2,geggleto,6,Wed Jun 24 17:14:01 2015 UTC,I think my main reservation is that as a developer I care about security and I get that you are trying to recoup some development costs. However what happens if your code requires updates and you don't meet your targets? Does the code go unpatched? Is it going to be forgotten in the near feature since you have milked all the money out of it?  I would feel much better if it just had of been a donate button.
PHP,3aytt2,dracony,1 point,Wed Jun 24 18:03:31 2015 UTC,"I understand, but I think this is a happy medium. We also have a pretty long track record for keeping our packages up to date, accepting PRs, releasing new versions. With the paid premiums we'll also maintain a vested interest. This way Sentinel is free and we have a chance to advertise, raise funds for cool features, create training material. Is donating to open source a bad thing? If there was just a donate button the library would you donate?  From experience this is not the case. Sentry, predecessor to Sentinel had a donate button for years. We collected around 1k in that time. I put at least 60-80k on top of sweat equity into it.  At least this way those that wish to support the project can simply just donate to the cause, or donate a little more and get some perks."
PHP,3aytt2,852050,2,Wed Jun 24 19:54:03 2015 UTC,"How come an oauth server is a stretch goal for 75 000 $ ? There are literally tons of oauth servers written for PHP, and bridging one should not require that much effort to justify the sum"
PHP,3ayr6c,Bravat,5,Wed Jun 24 16:07:18 2015 UTC,"https://www.rocketship.it  BUT you could spend some time and do it all yourself.  UPS, FedEx, USPS all have their own API's publicly available.  They use SOAP calls last time I looked, which aren't hard to do yourself, and you will gain added functionality by writing it yourself.  It will take quite a bit more time, but you can totally do it.  I did this a few years back on a project and it worked just fine."
PHP,3ayr6c,pyr0t3chnician,1 point,Wed Jun 24 16:38:17 2015 UTC,I don't have a lot of time to invest for this task. This is why I look for fast and simple solution.
PHP,3ayr6c,lincarnate,1 point,Wed Jun 24 16:49:28 2015 UTC,"Seconding the RocketShipIt recommendation, I've used it on a large project and it worked great. The only downside for OP will be the price. I think it's ~$250 per carrier."
PHP,3ayr6c,marcrosoft,3,Thu Jun 25 00:40:04 2015 UTC,RocketShipIt creator here: Thank you for the recommendation!  We currently offer a 50% discount on additional carriers.  For basic Rates and Tracking you can get all carriers (and future supported carriers) for $145.  One advantage of going with RocketShipIt over other SaaS solutions is the request is directly generated and sent from your server to the carrier which provides transparency and fast response times.
PHP,3ayr6c,throwaway88vn321,3,Fri Jun 26 20:11:08 2015 UTC,https://www.easypost.com
PHP,3ayr6c,throwaway88vn321,1 point,Wed Jun 24 16:11:52 2015 UTC,"I saw this one, and it looks like a great choice, and I will go with it if there is nothing free out there :)"
PHP,3ayr6c,chadthefurman,2,Wed Jun 24 16:24:01 2015 UTC,"$0.05/package is worth paying for, IMO."
PHP,3ayr6c,cajogos,4,Wed Jun 24 17:12:41 2015 UTC,I came here to learn how to ship APIs better...
PHP,3avx2t,jonjomckay,7,Tue Jun 23 22:49:30 2015 UTC,"The remote coding capability sounds really great. I've never used Hack, but I'll give the IDE a shot with a PHP project and see if it offers anything else that PhpStorm doesn't have.  Edit: After trying it, Nuclide (and Atom) are nothing more than a vim (or emacs if you swing that way :P) alternative."
PHP,3avx2t,bga9,5,Wed Jun 24 03:12:35 2015 UTC,"Well it's an editor, not an IDE, so you will be missing a TON of features."
PHP,3avx2t,gearvOsh,0,Wed Jun 24 03:36:01 2015 UTC,"Facebook open sources Nuclide, their Hack IDE   Uh, pretty sure it is, in fact, an IDE.  (Although actually assessing it, I'd say it ranks somewhere in the middle)"
PHP,3avx2t,Firehed,3,Wed Jun 24 04:11:33 2015 UTC,"It's Atom with a ton of packages. I've been using Nuclide for a few weeks and it's still missing tons of features from PHPStorm that I use. So yeah, somewhere in the ""middle""."
PHP,3avx2t,gearvOsh,5,Wed Jun 24 05:12:46 2015 UTC,So it's like both a crappy IDE and a powerful editor?
PHP,3avx2t,outadoc,1 point,Wed Jun 24 15:55:23 2015 UTC,"Haha, that's a perfect way to put it."
PHP,3avx2t,gearvOsh,2,Wed Jun 24 17:02:26 2015 UTC,"Likewise, although I'm coming from the other extreme (vim). I think it has huge potential but it currently suffers from being in its infancy. A bunch of stuff is straight-up buggy, although the stuff central to Facebook's workflow was unsurprisingly much more solid  (changing php to hh instantly got me Hack's type checking, for example)  Give it a few months to stabilize and let an ecosystem develop and I think we have something interesting."
PHP,3avx2t,Firehed,3,Wed Jun 24 09:35:53 2015 UTC,So this has to be related to Nucleus but I'm puzzled.. In what way...
PHP,3avx2t,fobin78,2,Wed Jun 24 05:08:46 2015 UTC,It's an extension of Atom. Therefore it's NuclIDE.
PHP,3avx2t,amcsi,3,Wed Jun 24 09:11:01 2015 UTC,Doesn't PhpStorm have hack support now?
PHP,3avx2t,AcousticDan,6,Wed Jun 24 01:55:21 2015 UTC,No it is on hold: http://blog.jetbrains.com/phpstorm/2015/06/hack-language-support-in-phpstorm-postponed/
PHP,3avx2t,Almsgiver,1 point,Wed Jun 24 02:14:56 2015 UTC,"Oh cool, makes sense."
PHP,3avx2t,AcousticDan,3,Wed Jun 24 02:45:37 2015 UTC,"Like a lot of ""new IDEs"" it's basically a variation of PHPStorm-like functionality. I am really surprised there are so few comments in that code (maybe that's just for the presentation). Comments and understanding unfamiliar/old code, is still a major barrier that nobody seems to attack, despite plenty of opportunity. An additional view composed of a second scrollpane that holds comments for a set of text markers in a separate /docs/comments directory would go a long way in helping collaborate on existing code."
PHP,3avx2t,Jack9,1 point,Wed Jun 24 03:07:54 2015 UTC,"""Comments rot. "" - Uncle Bob  If you're using / needing comments, means your code isn't showing its intent like it should."
PHP,3avx2t,Hafuu,3,Wed Jun 24 04:30:39 2015 UTC,"I don't believe that's a collaborative model, but a feature of the typical unmaintained solo project. Every non-trivial project has documentation, so there's no reason to avoid separate comment files...which were abandoned at some point in history as a strategy, without any scientific analysis of efficacy."
PHP,3avx2t,Jack9,1 point,Wed Jun 24 05:01:10 2015 UTC,"That's true about external documentation, if and only if, it's kept up to date. I was talking about inline comments. I'm working on projects with multiple developers, we don't write inline comments, ever."
PHP,3avx2t,Hafuu,3,Wed Jun 24 06:56:52 2015 UTC,"Honest question, why not?  I personally find inline comments about the reasoning behind code helpful. Sure, you should be able to read and reason about the code by itself. Sometimes just knowing WHAT the coder did doesn't explain WHY they did it in the first place. Maybe 1 week/month/year/decade later it looks like pointless code that can/should be culled. But, in reality, it's actually got a purpose.  Also, I find that as I start a new method that writing out what I want it to do in comments useful in collecting my thoughts fully on how to implement the method. Adding code to each of those steps results in documented code.  Of course, I tend to prefer verbose coding over terse for the same reasons. Removing information, just because it's deemed unimportant right now, makes working on things harder in the future."
PHP,3avx2t,nashkara,1 point,Wed Jun 24 13:32:56 2015 UTC,"I forgot where I read this, I think it was a comment on Reddit. Paraphrasing:   When I read old code I hate when I've been such an idiot, I haven't written any comments that explain what the hell was I doing! But I've learned. I now write code so clean, I don't even have to add any comments to explain what I'm doing!"
PHP,3avx2t,nashkara,1 point,Wed Jun 24 13:57:57 2015 UTC,Hahahahahahahaha.  Exactly.  I read code I wrote even a week ago sometimes and shake my head in shame and bewilderment.
PHP,3avx2t,ohsothisisreddit,2,Wed Jun 24 14:32:13 2015 UTC,"Yay, job security! :D"
PHP,3avx2t,assertchris,2,Wed Jun 24 10:46:02 2015 UTC,"Hmm...   ""Tests rot. "" - Uncle Bob  If you're using / needing tests, means your code isn't fulfilling its intent like it should.   But I guess uncle Bob wouldn't say this because he loves tests. Interesting how we can put a spin on everything to confirm our bias, isn't it?"
PHP,3avx2t,feketegy,1 point,Wed Jun 24 05:18:49 2015 UTC,"Too late, dev groupthink is too strong now.  Just give it a couple years, these same people will be decrying the lack of documentation again."
PHP,3b0d6e,enygmadae,1 point,Wed Jun 24 23:19:37 2015 UTC,"For those wondering, Invoke is a route-based authentication/authorization solution that makes it easier to check for things like groups and permissions too: Invoke on GitHub"
PHP,3ay01l,mproud,1 point,Wed Jun 24 12:12:28 2015 UTC,"Perhaps I am wrong, then!  I have downloaded Laravel. I am extremely new to it, but I guess I thought needing to “serve it” sounded like I had to have a running process, which is obviously what I want to avoid."
PHP,3ay01l,pyr0t3chnician,2,Wed Jun 24 13:33:58 2015 UTC,"The ""server"" commands in a lot of these frameworks are just PHP's local server, and should only be used for ease of development or testing, not in production."
PHP,3ay01l,sonix2,1 point,Wed Jun 24 15:46:36 2015 UTC,That makes quite a bit of sense. Thanks!
PHP,3ay01l,mythix_dnb,2,Wed Jun 24 16:43:07 2015 UTC,You can go with Slim without any issues and I'm sure you can actually use just about any other framework since you can disable any cron based processing.
PHP,3ay01l,Chevrin,2,Wed Jun 24 18:04:22 2015 UTC,"Non-persistent web app framework with shared hosting?   Hmmmmmmmmm   The most popular web frameworks seem to have processes which are constantly running.   hmmmmmmmmmmmmmmmmmmmmmm    This does not make real sense to me. What do you mean ""persistent process""? it's just apache running PHP, this has nothing to do with the framework you use."
PHP,3ay01l,mythix_dnb,1 point,Wed Jun 24 12:19:43 2015 UTC,"I’m on Dreamhost. I know they don’t allow Node or Django or CouchDB, for example.  I know this is extremely vague, but their Acceptable Use policy states “any script/process/etc that adversely affects the ability of any other customer to satisfactorily use their provided services is forbidden.”  Perhaps I’m wrong, as others have chimed in saying frameworks like Laravel aren’t always running."
PHP,3ay01l,CheckeredMichael,2,Wed Jun 24 15:23:49 2015 UTC,"I run symfony based applications on Dreamhost.  One of them gets about 60k users a month and performs just fine.  Getting a VPS that you have to manage yourself may be overkill for you right now.  Here are a few things that might be helpful.   You may run out of memory if you try to run Composer commands on a Dreamhost shared server.  My workaround is to run Composer related commands in my local vm, gzip the vendor folder, then transfer it to the server via SFTP and unzip it. Make sure to update your config to point to whatever MySQL database hostname you setup in your Dreamhost control panel.  Generally, you cannot access your MySQL db from localhost and many configurations automatically put localhost in as the default. They support git so depending on if you use bitbucket, github, etc, you can likely create a deployment key and have your website a working copy of a github repo.  This would allow you to pull just a delta of your code changes, switch branches, etc. without needing to sftp your entire project when you make any changes. Switch your default version of PHP to whatever the latest dreamhost supports, their default I think is php 5.4 but they support 5.6 if you select it in the control panel."
PHP,3ay01l,CheckeredMichael,1 point,Wed Jun 24 15:43:54 2015 UTC,"node and databases are services that are constantly running, just like apache is constantly running.  apache only runs PHP code when it's requested, the php creates a response and apache sends that back. in between requests PHP is not running, it's not persistent in anyway just by itself.  There is no ""php daemon"" so to speak, it's just an executable, e.g.: when you run php myscrip.php the executable runs the file and stops after it has finished.  Node runs more like a service, and does for javascript what apache does for php (as a very high level example). it's bound to a port and keeps listening to that port for incoming requests. (the same as apache binds and listens to port 80)  That being said, if you really want, you could also make these kind of applications with PHP (like reactphp), these would probably be prohibited on your hosting environment. but these are very special frameworks or use cases.    EDIT: Have a look at the Symfony2 documentation, it's rather good, and many, other frameworks (laravel, drupal8, ...) are built using the symfony HTTP components as a base."
PHP,3ay01l,Xanza,1 point,Thu Jun 25 06:42:35 2015 UTC,"Okay, this is very promising then. It seems some of the best frameworks available are based on Symphony, so I’m happy to hear I should be able to use them without issue."
PHP,3ay01l,btcMike,1 point,Wed Jun 24 17:48:19 2015 UTC,"I think that a lot of frameworks should work on shared, just remember to composer install locally then upload the vendor folder alongside your project."
PHP,3axq10,xpxo,2,Wed Jun 24 10:01:12 2015 UTC,"If you'd like to build a chat application you should take a look at WebSockets and Ratchet. This is not exactly like Facebook Messenger, but it will do the job for a relatively simple chat application."
PHP,3axq10,dev10,2,Wed Jun 24 10:23:53 2015 UTC,+1 for Ratchet
PHP,3axq10,evohans,1 point,Thu Jun 25 03:28:46 2015 UTC,Thank you!
PHP,3axq10,pyr0t3chnician,4,Wed Jun 24 14:45:18 2015 UTC,"You have three options: Ajax polling every few seconds or minutes, Ajax long polling, or Websockets.  Websockets have fairly universal support at this point, and some websocket libraries even provide a flash socket fall back.  Ajax polling is simple to implement, but causes a lot of overhead traffic.  1 user would be making 10-20 requests a minute, so you would run out of resources fairly quickly if you had a lot of users.  The upside is that your code is simple and you can configure keep-alive on the server to handle it, but again, not recommended.  Ajax long polling is essentially sending a request to the server, the server sits in a loop until something happens or a few minutes pass.  If something happens, it immediately sends back the result.  The client processes the result and reopens another long polling session.  If the loop expires, same thing, null is returned, a new request is made.  This is what Facebook used for a long time prior to using sockets.  It works great, but is more difficult to configure.  You have to worry about blocking processes (sessions especially) that cause issues with the connection locking up.  Finally websockets are great and I use them.  You can use Ratchet to create them in PHP, or you can use any other language.  Essentially it is a process that is constantly running (like a webserver) that looks at a specific port, receives and processes traffic and responds.  The websocket server has a lot of security protocols and handshakes, so using a packaged library does help.  It is fairly universal and runs on any browser (http://caniuse.com/#feat=websockets).  Like I said above, some client libraries even provide a fallback to a flash socket that can interact with your websocket server.  I like Ratchet, but it can be a little overwhelming at first.  I also use Node for a few websocket servers.  If it is just chat, Node would be very very simple to get up and running.  If you are doing more interactions and storing stuff in databases, Ratchet may be easier for you.  Either way, I suggest using Websockets over the other two methods."
PHP,3axq10,ocramius,1 point,Wed Jun 24 16:56:05 2015 UTC,"Wow! Thanks for so much information! Very helpful, I'll get learning tonight!"
PHP,3axq10,dev10,2,Wed Jun 24 17:46:06 2015 UTC,Why trying to re-invent the wheel?   http://www.igniterealtime.org/projects/openfire/ https://www.ejabberd.im/ http://strophe.im/strophejs/   Have fun!
PHP,3axq10,ocramius,6,Wed Jun 24 10:48:48 2015 UTC,Because I would like to.
PHP,3axq10,ToddWellingtom,12,Wed Jun 24 14:44:31 2015 UTC,And that is the correct attitude when you want to learn things.
PHP,3azwc4,unclepocket,3,Wed Jun 24 21:08:42 2015 UTC,"Don't concentrate on multiple languages, but more on the concepts and a single language. Once you learn one language it is pretty transferable to other languages to a certain extent.  If you try to take on to much you will overload and may end up as a jack of all trades and master of none."
PHP,3azwc4,NigelGreenway,1 point,Wed Jun 24 21:35:23 2015 UTC,"i guess so, but php doesn't have many benefits compared to other languages right?(i hope i'm wrong)"
PHP,3azwc4,xcodula,4,Wed Jun 24 21:39:57 2015 UTC,"PHP's OOP is basically lifted from Java, so the way you'll organize your code in a high level is similar.  Unlike Nigel, I'd suggest you do check out other languages. Java, C#, Erlang, Haskell, C++, Python, Node.JS (JavaScript), Rust, Go and so on.  You don't need to try and learn them in depth, not all at least, of course. But you can see what are the general principles and see common patterns between them all. Watch presentations, skim a few books, read some blog posts, make a Hello World, try things.  Another things that'll help you learn is simply working on larger projects. You can try helping open source projects you use by sending pull requests for bug-fixes and enhancements. Github makes this easy these days."
PHP,3azwc4,ToddWellingtom,1 point,Wed Jun 24 21:47:25 2015 UTC,i'm using code academy at the moment to learn php. Is that a reliable source? if not can you suggest me some websites and sources?
PHP,3azwc4,aleste2,2,Wed Jun 24 22:31:35 2015 UTC,"Sources like code academy can be a nice way to get started, I don't have a strong opinion either way, but they won't get you too far. Basically any source that claims to tutor you, teach you, also tries to keep things simple and formulaic and produce simple rules that a beginner would understand.  The best way to get to an advanced level, I've found, is you shouldn't be afraid to get a dive from the deep end. When I said presentations I meant what you can see on InfoQ, and from various conferences published on YouTube and Vimeo. And involve yourself in communities discussing things at an advanced level. Here, on the various subreddits, on IRC if you want, blogs, and if you can, local communities you have in your region etc.  Here's the trick: it doesn't matter if you don't get what's being discussed. In fact, that's a good sign. Just keep at it, and over time your brain magically picks up knowledge and will begin to figure things out. It's how we're meant to learn.  Sometimes, when I haven't explored a topic, say, the ""actor model"", I'd go to InfoQ and start watching presentations about it. I won't get it. I'll keep at it. Then a couple of weeks or so I go back to the first presentation I didn't understand much... And suddenly I realize - I understand every concept demonstrated, and I get every point the presenter is trying to hit. That's the effect you're after."
PHP,3azwc4,Maurandk,1 point,Thu Jun 25 05:25:39 2015 UTC,"There's nothing wrong with PHP, it gets the job done and there are some good frameworks built for the language. I would suggest to stick with PHP but hone in on design patterns and best practices. Branch out from the mid tier and learn the other ends of the stack such as SQL and frontend stuff like css and javascript. Also learn the tools available for PHP like composer or PHPUnit. If you've taken the time to lay down the foundation, just keep building on that. Don't jump around with languages right now. It's not about the language anyways.  It's the frameworks, patterns, tools, and configuration stuff."
PHP,3azwc4,liamwong,1 point,Wed Jun 24 23:13:13 2015 UTC,"It depends on what you want to do.  If you want to stick with web development, then JavaScript would probably make a lot of sense.  If you like to run scripts/programs from the command line, then Python might be fun.   If you want to get into mobile development then it would be Java for Android, and Objective C (or maybe Swift?) for iOS.  From a related-skills perspective, a decent working knowledge of SQL and a relational database like MySQL or PostgreSQL probably wouldn't hurt.  Avoid ORM's early on and really get to know the SQL.  Look to an ORM only after you have a decent understanding of what's going on under the hood.    Just my two cents.  Good luck! :)"
PHP,3ax8w6,napolux,6,Wed Jun 24 06:05:48 2015 UTC,"There really aren't any pros and cons. You should be writing stateless code anyway. The state is handled largely in your datastore - eg redis, mysql. The ""cloud"" isn't some magical thing. It's the same codebase running on as many machines as it takes to serve the number of requests you get every month, behind a load balancer. At a certain point, it makes more sense to scale horizontally, as opposed to vertically. With virtualization so prominent, 20x 1gb servers are bound to cost a lot less than a single 20gb machine. One important thing that you'll need to look into before adopting that infrastructure is distributed PHP session support. In a cloud-based environment, you'll need to use a central session store, since multiple requests (for a single session) could hit multiple servers. I typically use redis for this."
PHP,3ax8w6,SomeRandomBuddy,3,Wed Jun 24 06:24:51 2015 UTC,"I can't point you to an article, but from my experience, digital ocean offers one of the best quality vps services at one of the most affordable rates."
PHP,3ax8w6,jaitaiwan,1 point,Wed Jun 24 16:04:05 2015 UTC,"While true, if you don't have the sysadmin skills to setup, configure, and maintain the VPS... things will get bad quickly."
PHP,3ax8w6,SBGamesCone,1 point,Wed Jun 24 21:02:02 2015 UTC,"Have you tried looking into something like OpenShift from RedHat? It's a great compromise between buying your own VPS and going with a fully managed service like Heroku - allowing you control over your instance, but still scaling with you as you need it to, and not having a load of setup for PHP."
PHP,3ax8w6,just-a-peter,1 point,Wed Jun 24 11:40:15 2015 UTC,"co-founder of fortrabbit here, just lurking and learning what makes you tick."
PHP,3ax8w6,esherone,1 point,Fri Jun 26 07:34:05 2015 UTC,"Nothing, really. You sell yourself as ""PHP as a Service"". I would like to detach from PHP and being able to use ""* as a Service"". ;-)  I will start with php and then move to whatever language I want, so a more generic service is probably a better choice."
PHP,3axe7c,ICJ,3,Wed Jun 24 07:10:01 2015 UTC,"I don't really understand what you mean by doing the same mistake.. but:  Do you really think, that your framework is that great that your (serious) competitors would choose it over the thousands of alternatives (no offense)?  And a framework alone doesn't make a great web developer."
PHP,3axe7c,leipsfur,1 point,Wed Jun 24 07:19:12 2015 UTC,I am trying to prevent or avoid a competitor from taking the application and using it as for their own site. I am talking about the application and my experience not the core framework itself. I am realistic and i know there are tons of talented developers out there that far exceed my talents but the reality is many competitors within the esports industry cannot afford to pay developers. I do not want to risk throwing the application up on git and helping the competition.
PHP,3axe7c,leipsfur,1 point,Wed Jun 24 07:29:18 2015 UTC,"Oh, I misunderstood you. I thought you were talking about sharing only the framework without application specific code."
PHP,3axe7c,djmattyg007,3,Wed Jun 24 08:13:44 2015 UTC,"When you say ""posted on git"" do you mean Github? Git is a tool, completely independent of Github."
PHP,3axe7c,just-a-peter,1 point,Wed Jun 24 09:42:09 2015 UTC,Yes i meant github.
PHP,3axe7c,scootstah,2,Wed Jun 24 10:08:19 2015 UTC,"Surprised this hasn't been mentioned yet, but TEST! Your code looks fine, a lot better than most of the stuff out there, so that's good. You mostly seem to be sticking to PSR-2 and variable names are OK (little confusing in some places.) The overall flow of the application seems to be fine, but I haven't tested it to see if it actually functions correctly.   However, there are no tests in there at all, and that screams bugs. If you're not familiar with unit testing in PHP, acquaint yourself with PHPUnit - it's really easy to get started writing unit tests - tests that cover one specific part of the code. In your example, that might be a test for checking the regex in your router works as you expect it to. By doing that, and running the test suite before you push the application out, it means you know if any changes you make elsewhere in the code affect anything else (you'd be surprised how many bugs you catch with failing unit tests.)  Testing is really interesting to learn about, and will definitely be useful in future - because once you know how to test, and what to test for, you can write tests about everything in every language. TDD (Test-Driven Development) is where you write code based on tests. It doesn't really matter if you write the tests before or after, but you aim to make your code as testable as possible, so lots of little units that do one thing, with predictable results.  Once you've done that, and you're in love with PHPUnit, take a look at something called 'Behat'. It's a lot like unit testing, except instead of testing the code, you test the server and it's behaviour (Behaviour-Driven Development / BDD). Depending on the type of application you're making, it might be more of less useful, but it's another really cool bit of software. Instead of unit testing, Behat is a functional testing tool. It tests functionality - whether or not your code actually does what you say it's going to do. For example, if you promise me that a request to http://YOURSITE.com/pages.php will return a list of pages, I can write a Behat 'feature' to check that it does. I'd write something like   Given I am a normal user  And I have logged in to your CMS  When I do a request to pages.php  Then I should get a response code of 200  And the response should have a div called 'page-list'   If you can write a full suite of tests, both unit and functional, you'll find that your code is a lot more consistent, and bug-free, and due to the way that you write tests you'll actually need to move your code around / refactor it so that it can be tested - which makes you think more about the design of your code.   Sorry if you already knew all that and just haven't included your tests in the repo, but that's most of the information I wish I had when I started my first project like this - testing would have saved me so many hours of bug-hunting!  Great start, and good luck!"
PHP,3axe7c,CheckeredMichael,1 point,Wed Jun 24 11:36:39 2015 UTC,"Thank you for the feedback. The application is no where near finished i have been searching for online resources or tutorials to find better ways of doing things, etc. Would jumping straight into testing be the ideal route to take or continue tutorials, etc. finish the application then testing? I have glanced at phpunit and have a few tutorials bookmarked, but i have been prioritizing grasping oop and building the application to gain a bit of experience. Are there any resources you would recommend in particular for continuing learning/growing? Maybe some with realistic code examples, etc. - I know this question is unrelated to testing, and i apologize just trying to extract as much knowledge/help out of everyone as possible :)"
PHP,3axe7c,h64,1 point,Wed Jun 24 16:04:27 2015 UTC,"Adding tests to a finished product is not trivial, but it can be done.  I would recommend you go look into testing right now, maybe do some side projects while you learn that, and then return to this project. Any new functionality from here on out should be built with tests at the start, and then you can slowly add tests for the rest of your platform as you go on."
PHP,3axe7c,autowikibot,1 point,Thu Jun 25 15:15:58 2015 UTC,"If you could put the barebones framework on git then I'm sure we could review it and see how you work. You don't need to have a whole application up on git for us to see your workings.  If you're refactoring a spaghetti jungle into an oop friendly framework then I would recommend this book. https://leanpub.com/mlaphp  I personally haven't read it yet, but it's been in my sights for a while now. :)  Also, you should check out the vast amount of web development books on there to learn even more PHP goodness.  Your sites look nice, but on your design website it looks like you are undercharging. I would take a guess that it's because of your experience, but if you can offer something like your framework as a selling point then I would start to charge more. :)"
PHP,3axe7c,ciaranmcnulty,1 point,Wed Jun 24 08:05:36 2015 UTC,I am going to be uploading the 'framework' with a controller example shortly. I have kept my eye on that book for a while now and it will be my next book purchase.
PHP,3axe7c,codercaleb,1 point,Wed Jun 24 08:16:24 2015 UTC,Buy a copy of the gang of four's Design Patterns and read it front to back. https://en.wikipedia.org/wiki/Design_Patterns
PHP,3axe7c,codercaleb,1 point,Wed Jun 24 10:38:03 2015 UTC,"Design Patterns:       Design Patterns: Elements of Reusable Object-Oriented Software is a software engineering book describing recurring solutions to common problems in software design. The book's authors are Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk.    Image i     Relevant: Design pattern | Software design pattern | Structural pattern | Perl Design Patterns Book   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
PHP,3axe7c,codercaleb,1 point,Wed Jun 24 10:38:15 2015 UTC,DDD / CQRS :-)
PHP,3awfgs,rszrama,2,Wed Jun 24 01:23:49 2015 UTC,Loved Slim since the very beginning. Time to refresh my knowledge
PHP,3au2ym,stevejburge,10,Tue Jun 23 14:51:03 2015 UTC,Magento's security policy isn't the only thing that needs to be overhauled.  Their extension approval process is downright abysmal
PHP,3au2ym,flowstate,2,Tue Jun 23 17:28:42 2015 UTC,Then good news (in theory) as at Magento Live today they said they are overhauling Connect with a big focus on code quality for extensions
PHP,3au2ym,boneio,10,Tue Jun 23 18:38:41 2015 UTC,Not to mention their upgrade systems are awful.
PHP,3au2ym,Lighnix,8,Tue Jun 23 15:08:00 2015 UTC,"For the uninformed, what's their upgrade/patch process like?"
PHP,3au2ym,CaptainDjango,13,Tue Jun 23 16:41:39 2015 UTC,"Magento patches are usually distributed as a sh file (behind a loginwall) that contains both the code to apply a patch and the patch itself. You drop it in the Magento root folder, run it, it reads itself and applies a patch to your installation.  On top of that, their update notifications are a joke. They push out these notifications, but they can't detect whether you already have a particular patch installed. So even after installing the patches after the first notice, you still get spammed with further notices about the same patch with increasing urgency. Exactly what you want your client to see after logging into the backend."
PHP,3au2ym,DCoder1337,-1,Tue Jun 23 18:17:47 2015 UTC,"Well, Magento itself is distributed through a login wall, so if you have the code, technically you already have the account. So it shouldn't be that big of a deal."
PHP,3au2ym,djmattyg007,5,Tue Jun 23 22:43:05 2015 UTC,Good question. One of the common complaints after the Shoplift hack was that Magento hadn't documented the upgrade/patch process at all.  They do now have this PDF: https://info2.magento.com/rs/magentoenterprise/images/Installing-a-Patch-for-Magento-Community-Edition.pdf
PHP,3au2ym,Lighnix,2,Tue Jun 23 16:52:55 2015 UTC,Security patch process is to download a .sh file and run it on your server. I would hope any large software like magento would have an auto updater.
PHP,3au2ym,YellowSharkMT,3,Tue Jun 23 21:12:54 2015 UTC,Imagine all the fun that goes along with running an installation/upgrade script on your production database...
PHP,3au2ym,geggleto,11,Tue Jun 23 17:13:22 2015 UTC,and they say wordpress is bad.
PHP,3au2ym,Zaemz,6,Tue Jun 23 17:13:00 2015 UTC,"I only worked with Magento for a short time, but it's a clusterfuck."
PHP,3au2ym,djmattyg007,3,Tue Jun 23 21:01:51 2015 UTC,"I would much rather work with Magento than Wordpress. The Wordpress codebase is a clusterfuck.  That said, Magento has always failed hard at releases. We live in hope that Magento 2 will be better."
PHP,3au2ym,DCoder1337,1 point,Tue Jun 23 22:45:16 2015 UTC,"We live in hope that Magento 2 will be better.   The last time I looked at Magento 2, I saw this (the initial comment is about Magento 1, Magento 2 specifics start a few replies down): https://www.reddit.com/r/PHP/comments/33crra/magento_willingly_distributing_unsafe_php_code/cqmboei?context=4"
PHP,3au2ym,djmattyg007,0,Wed Jun 24 04:22:17 2015 UTC,"What's your point? You can disagree with the philosophy behind using __call like that, but that doesn't make it invalid.  And that has nothing to do with releases."
PHP,3au2ym,DCoder1337,2,Wed Jun 24 09:40:01 2015 UTC,"I was talking in the more general sense, not just releases - in my opinion, wishing for a better Magento is futile.  I do think their use of __call() without adding phpdoc magic method annotations is disgusting, but I agree that it's subjective. Combining the autoloader with code generation is a much bigger WTF, though."
PHP,3au2ym,djmattyg007,0,Wed Jun 24 10:22:48 2015 UTC,"They have added @method PHPDoc annotations in some places, just not all. Nothing is perfect. I think the issue of shitty releases is much more important."
PHP,3au2ym,detectretract,3,Wed Jun 24 14:41:50 2015 UTC,"""Everything I need to know about Islam I learned on 9/11."" ~ ""Everything I need to know about Magento I learned from a hello world example."""
PHP,3au2ym,piotrekkaminski,6,Wed Jun 24 05:10:17 2015 UTC,"The quoted article (from zdnet) is written in such a way that it sounds the issues are in Magento software, while if you dig into actual reports:  1) 1 issue with a theme (from 3rd party) you can download from some site 2) 2 issues related to private messages and forms on Magento Connect website  All the issues were fixed since then."
PHP,3au2ym,mmmpls,2,Tue Jun 23 22:24:28 2015 UTC,"I was impressed originally with Magento's ease of startup for simple ecommerce sites and actually included it in some technology recos for some clients.  I've only used it / worked with it on a development plaything level, but I'll have to check back in 6 months and see if they've updated their policies before including it any more."
PHP,3au2ym,h64,3,Tue Jun 23 21:11:21 2015 UTC,Magento is garbage.
PHP,3au2ym,mglinski,3,Wed Jun 24 10:36:16 2015 UTC,Stop  Using  Magento
PHP,3au2ym,itsmegoddamnit,2,Tue Jun 23 21:47:57 2015 UTC,Any decent self hosted alternatives?
PHP,3au2ym,mattindustries,0,Tue Jun 23 21:59:40 2015 UTC,"I use Prestashop, not sure how it compares in its entirety, but it feels better.   EDIT: Sure, downvote me, but at least give an explanation or alternative."
PHP,3au2ym,mglinski,-7,Wed Jun 24 00:22:59 2015 UTC,"http://www.woothemes.com/woocommerce/  In most cases you wont need to self host. If you do for some reason, just use woocommerce. If your actually making money selling things, a hosted solution is usually more bang for your buck."
PHP,3au2ym,itsmegoddamnit,4,Tue Jun 23 22:23:16 2015 UTC,Going from one bad codebase to another isn't much of an improvement.
PHP,3au2ym,mglinski,1 point,Wed Jun 24 01:17:13 2015 UTC,"There is a theme here, no hosted php shops are good codebases. Just use the one that is the least effort."
PHP,3au2ym,EquinoxMist,-1,Wed Jun 24 06:39:36 2015 UTC,"I don't understand the hatred shown towards Magento.  Yes the release policy is bizarre,  however the code is not that bad to work with.  Certainly much better than wordpress.  I feel sometimes people hate it because they don't understand it and it scares them.  Yes it is slow,  yes it can be cumbersome to change something small.  However  this is the downside to having such a powerful system, that is incredibly flexible."
PHP,3au2ym,CapnWarhol,0,Wed Jun 24 08:30:38 2015 UTC,"Magento: It's all surface area, baby!"
PHP,3az8a0,codesharer,2,Wed Jun 24 18:10:08 2015 UTC,This should definitely be in /r/lumen.  Nice post though. :)
PHP,3az8a0,CheckeredMichael,0,Thu Jun 25 10:57:40 2015 UTC,thank you :)
PHP,3az8a0,Bloompire,1 point,Thu Jun 25 14:08:42 2015 UTC,Is this Vue a viable choice? There is strong competition in this area...
PHP,3au41k,BingoLarsson,16,Tue Jun 23 14:59:42 2015 UTC,This is a collection of known design patterns and some sample code how to implement them in PHP.     https://github.com/domnikl/DesignPatternsPHP
PHP,3au41k,deizel,3,Tue Jun 23 17:17:37 2015 UTC,"Dependency Injection, in particular, is quite handy when porting legacy PHP applications. Fabien wrote an excellent series on it: http://fabien.potencier.org/do-you-need-a-dependency-injection-container.html"
PHP,3au41k,RobLoach,3,Wed Jun 24 05:00:16 2015 UTC,"Since nobody seems to be giving you any specific answers, I would guess that there are some more common patterns that may be useful. I'm not an expert, but I think some common use-case patterns would be: abstract factory, factory method, and singleton(used in error logging... mostly). Behavioral patterns depend on the situation, including things like: Chain of Responsibility, Iterator, Observer, Template method.  I would choose some of these to get started with some projects to test this out with. But honestly, some of the bigger concepts used in frameworks like laravel already have exposed you to some of the methods if you look into the source or understand the behind-the-scenes implementation. I think it is beneficial to figure out which patterns align with these standards. Of course, some patterns eventually become a preference amongst most programmers until they become a standard, just like programming language preferences.  I would appreciate any extra tips as well because I don't have any professional experience with PHP either."
PHP,3au41k,agmarkis,2,Tue Jun 23 16:58:51 2015 UTC,"singleton(used in error logging... mostly).   Thought I'd add - I'd recommend a slightly different approach to debug logging (I assume that's what you mean):  function __construct() {     if (DEBUG) $this->log = Debug::getLog(__CLASS__); }   Then in your methods:  function something() {     if ($this->log) $this->log->verbose('Something happened.'); }   This allows you to filter log messages by class & namespace easily, which becomes necessary when everything is logging and the noise is just too much (not to mention the performance hit which may become serious with heavy logging even just during development)."
PHP,3au41k,Cookizza,9,Tue Jun 23 17:27:44 2015 UTC,"That's like learning English, and asking ""which words should I learn"".  The best way is to be curious and expose yourself to an environment of peers who use those patterns and talk about them. Also watch plenty of presentations like on InfoQ.com, YouTube and Vimeo, where people share techniques and experience.  You can, of course, check the (in)famous Gang Of Four ""Design Patterns"" book because it has coined many of the popular ones.   But it's truly like natural language. We do try our best to use the same meaning when we talk patterns to each other, but there's no definitive list, no canon, no law: it's constantly evolving. The only way to learn it is to live it.  I have to say, in the web developer & scripting communities (not just PHP), you're slightly disadvantaged about learning architecture at depth, because people tend to have more superficial understanding about it all, and the use of patterns is more buzz-wordy, people like the way pattern names sound, so they use them to sound authoritative, whether they get it or not. This happens in all communities, but I do find it more the case with the communities of PHP, Python, Node.JS and Ruby.  So one of the best way to get a good feel for it all is to also keep in touch with people who program in Java, C++, C#, Objective-C, Go, Haskell, Erlang, Rust and so on. No need to specialize deeply in any of those, but see what they think, how they work, what they know, and over time your brain will learn to tell apart true wisdom from B.S.  EDIT: P.S.: The best way to learn patterns isn't to ask ""which pattern should I learn"", but to describe a problem, and ask people ""how should I solve this"". Patterns will naturally get involved in the conversation."
PHP,3au41k,erik240,6,Tue Jun 23 15:33:57 2015 UTC,"I find the pattern of starting a project and finishing it to be a great one  ....sorry for the sarcasm, but really, you should focus on building functional, real-world applications or functionalities. This is the best experience."
PHP,3au41k,nobrandheroes,2,Tue Jun 23 16:07:24 2015 UTC,"Design patterns are about building functional, real-world software in a way that can be reasoned about and communicated about with other developers. They are a set of solutions for known, common problems encapsulated in a common, known definition."
PHP,3au41k,fesor,1 point,Wed Jun 24 14:40:42 2015 UTC,"Short answer: Probably not. Just read up on what they all do, and when you look at a given situation evaluate if there is one that can be used.  Long answer: Learn them all? Really, after a few years at this, I've only really used Adapter and Factory. I don't know Laravel(I've used Cake) but I don't imagine there is as much need with a framework as there would be if you are straight PHP."
PHP,3au41k,fesor,1 point,Tue Jun 23 17:04:16 2015 UTC,I think you should watch https://www.youtube.com/watch?v=JV7fiM8r3nc
PHP,3au41k,fesor,3,Tue Jun 23 15:30:26 2015 UTC,"So what's the purpose of this video exactly? ""Those pattern names aren't that good, use mine, which I just came up with and only I use.""  Pattern names are about communicating code structure and intent to another programmer. Merging them because they have the same code structure, but different intent represents a gigantic missing-the-point of patterns. And coming up with one's own NIH name alternatives for familiar ones we all use represents another."
PHP,3au41k,fesor,1 point,Tue Jun 23 16:30:14 2015 UTC,"The main purpose of this video is to show, that patterns is just an communication tool. If you already respect SOLID and GRASP, then you (probably) already use all this patterns."
PHP,3atawy,kepplerpl,72,Tue Jun 23 09:52:16 2015 UTC,"one common misconception in the field is that junior devs get ""mentored"" and learn from ""seniors"".  the reality i think is that seniors are just juniors peppered with years of experience dealing with all kinds of crap and problems thrown at them. the learning is entirely up to you.   always think that every bad project that you get thrown in to is a low hanging feuit for you to pick by making things better. there's a lot of value in that."
PHP,3atawy,magicpretzel,10,Tue Jun 23 11:23:37 2015 UTC,"the reality is that seniors are just juniors peppered with years of experience dealing with all kinds of crap and problems thrown at them   this is a universal truth right here  As to OP, the transition from junior to senior doesn't happen while a senior is holding your hand, it happens when you're 10 levels deep in code deciphering strange rituals that God himself preferred to forget."
PHP,3atawy,mahelious,12,Tue Jun 23 20:23:08 2015 UTC,This is so true. If you haven't learned anything that's your problem and not because it's an old legacy project.
PHP,3atawy,lithstud,8,Tue Jun 23 16:44:47 2015 UTC,"This, a thousand times.  In 15 years, I've only worked at a couple of places that actively encouraged real mentoring. Even then, you're talking about something that happens on specific, management thought up projects under a limited timeframe and very infrequently. Pairing with a senior developer sounds fantastic as a way to learn, but from a business perspective, it's putting twice as many resources (and potentially a resource that's billed out at a higher rate) on the same problem.  Learning from other developers is more like... yelling over cube walls or shooting out an IM about a specific problem.  If I had expected to learn from classes, conferences and actual hand holding from other developers, I wouldn't have gotten very far. That sounds like a negative thing, but most developers I know are bored out of their minds a couple of days into some extended training on a framework or particular piece of software. Learning and adapting on the job is one of the most important skills for a developer to have.  The other thing that gets overlooked a lot is the types of knowledge available. OP seems to want to learn more about newer version of PHP or specific frameworks or something, rather than the domain knowledge of the company. From a boring business perspective, having that knowledge of their legacy system is extremely valuable. If it's existed for a decade, it's important. Knowing where in that old school mess to go when something goes off the rails is worth a lot more to the mortals in the company than knowing the ins and outs of Shiny Fictional Framework's newest release.  Development can be really boring. You can have to use a boring framework, work on a boring project, deal with a boring client or solve an obvious problem. There is no type of software company where this isn't the case. Game development can be boring. Working on social media can be boring. Creating websites for celebrities can be boring. Trust me on all of those. It's not all eureka moments and leveling up your brain.  Anyway, bottom line, the talking pretzel is right. Senior developers are junior developers who pulled themselves up by their bootstraps."
PHP,3atawy,jbarket,2,Tue Jun 23 19:02:41 2015 UTC,"I have mentored plenty of people with less experience than I have. Its a real thing.  Learning is always up to you, mentoring isn't school, its not a class. Its guidance. A very junior developer trying to make things ""better"" on his own with little or no guidance is very likely to only make things worse. Not there fault, its the fault of management and senior developers for leaving that kind of task to that developer without the help they need.  The remark that everyone is a junior is a good one, but I feel a its a bit misguided in the way you mean it here.Everyone doesn't know most things. Everyone is lacking experience in most things because there are so many things you could know. Everyone has a lot more to learn. There are not many people who are generically ""senior"". In that sense, you are correct. Often times when companies are looking for ""junior"" developers, they still expect to get someone with tons of experience - by ""junior"" the mean ""we want to pay you less"".  I do not support this idea of some super-dev who just knows everything and can do anything. That is a fantasy, and perhaps what you've seen is simply senior devs within a domain, who admit to not knowing everything. Thats a good thing.  However, there are people who have enormous amounts of meaningful experience within a domain. Its the difference between technical knowledge and practical experience. Those people can offer guidance to people with less experience in that domain, and they should. A good team will have developers who are senior in for the major domains of the project. From there its a gradient of experience down to the most junior people. Everyone should be learning from everyone else. This is not a pipe dream, and its not wrong to want that. Its the way it should be, but it can be hard to find.  I'll admit that I personally didn't receive much guidance. I did get some, what I got was more like direction. ""You should look into this technology/technique to solve that problem."" - that sort of thing, it was helpful. You have to learn on your own but you need to be able to be checked and guided by those senior level people.  Again, don't expect classes and lessons. You need to do the leg work, but junior devs (and everyone else) should feel free to ask stupid questions and ask for help in how to solve problems."
PHP,3atawy,eddiemoya,71,Tue Jun 23 17:02:13 2015 UTC,"Senior dev here.   I'm disturbed by the number of people telling you to ""suck it up"" and ""deal with it"". Its cynical, and unhelpful for your career. Conversely the people telling you that you should refactor the project just makes me laugh.  Half the people here expect you to redactor a 10 year old project, as a junior, on your own.   Look, I'm no genius here but I have enough experience with different kinds of teams to infer some things about your job from what you've said.   It's been 10 years, they haven't given people time or direction to update/refactor it in the past. That, or they have and its not really led to much improvement.  The project needs to be completely rebuilt and replaced. Anything less would just be shining a turd. Weak senior leadership and/or management. I assume some of the people you ask to find files are considered senior. Those people have either not cared to fix or even document the framework, or have never been given the time. This is really common I believe. Even if it could be refactored, it probably shouldn't be you leading that effort, as a junior. It should be more experienced developers who you would work with and learn from.  There's a reason you took "" junior"" position, and it wasn't just so you could take a smaller pay check home.   If you want to give them the benefit of the doubt, try to convince them to start a new project dedicated to rebuilding the project. None of this ""fixes here and there when we we have time for maintenance"", it'll just never happen.  It's hard to give advice about quitting. Me, I would quit. However I'm in a point in my career, and I live in a city where I can get another good paying job with minimal effort. Not everyone is that lucky or even simply that confident, its a scary thing to quit.  Look for your new job now. Unless you love the place you work, always be looking. Get an offer letter from the new job before quitting.  Remember that unless you're desperate for work, an interview is a two way thing. Interview them back. Now you have some thing interesting to ask when ask if you have any questions. Ask about your role, their framework, their documentation.  Good luck."
PHP,3atawy,eddiemoya,7,Tue Jun 23 13:19:12 2015 UTC,"Great advice, very professional, and should be top comment."
PHP,3atawy,hoticeberg,16,Tue Jun 23 15:25:46 2015 UTC,very professional   Thanks! You'd never know I did that on my phone while sitting naked in a bathtub.
PHP,3atawy,eddiemoya,5,Tue Jun 23 17:03:41 2015 UTC,Reddit in a nutshell.
PHP,3atawy,hoticeberg,7,Tue Jun 23 20:00:10 2015 UTC,"I'm not on my own 'per se', there's me and another guy(senior I guess). I see the point that other people are trying to make, but on the other hand I also understand I'm not qualified to even dream of refactoring this site.  I may be a slow learner, or just dumb to begin with, but I really do know when something is beyond my pay grade, so to speak.  Assuming you're speaking truthfully in your reply, I'll take your advice into consideration."
PHP,3atawy,HeDares,5,Tue Jun 23 13:26:00 2015 UTC,"<Also a senior dev.  If it was me i would be out of their in a flash, the the like guy above said it much easier for a senior to get a job than a junior. If your not happy then i would start contacting agency.  Something most people seem to overlook is personal happiness at work, if your not happy change it your going to spend 1/3 of your life being un happy otherwise."
PHP,3atawy,eddiemoya,2,Tue Jun 23 15:08:48 2015 UTC,"Yes! Personally enjoying your job is not everyone can hope for, but in our industry its possible.  Let me get something clear though - I also don't want to instill in people this idea of a perfect job where everything is awesome and you love the work and the company. A job is ultimately a job, and your doing it not as a passion, but to pay your bills. They are hiring you (with few exceptions) so they can turn a profit on what you build. If you enjoy learning, then thats what you need to look for - just keep looking for places that are doing something you haven't done before. You don't need to love the company or have a hard on for that specific domain, just keep on learning."
PHP,3atawy,eddiemoya,3,Tue Jun 23 17:06:50 2015 UTC,"I made some inferences from my experience and your description. I take it there is not a current ongoing effort to refactor or rebuilt the application. If there were you would be learning some more modern techniques, there would be more interesting work, etc. Given that situation, to suggest you take the initiative to rebuild/refactor the application means you would at least start that effort alone, although if you succeeded in convincing them they might all join in. If you could convince them of that it would be great, but this is what I meant by you doing it alone. In either case from the sounds of it, I would not be hopeful in regards to getting a new project started.  If you weren't hired for the purpose of refactoring the application, they probably aren't going to give you the time to do it. They needed someone to fix bugs and do whatever it is your already doing - thats what they will insist you do.  Others do have a point that you should make the best of your current situation. You should look for things to improve and better ways to do things where you can, learn what to avoid and how things got so bad. If you find something especially bad, do some research on how that problem can be avoided. Even if you don't get the chance to make those changes it will at least educate you. You can learn from the mistakes in this project - from the business to the management to the development team to the codebase itself. Try to learn about why this is the way it is, and why it can't be fixed. This can be a silver lining to a dark cloud, but it doesn't stop the rain.  I suggest you take advantage of your situation to find a new job. Don't simply quit, but start your search while still employed. This will give you leverage if you wish to negotiate, and it will allow you to be more picky when accepting jobs, since your already employed you don't need the job. I know this isn't the case for everyone, especially someone who's new - and it of course depends on where you live. Just putting yourself out there doesn't hurt though. Worst case scenario, you dont find a new job and just stay there anyhow. Best case,  your phone rings off the hook with new job openings.  Like I said before, just remember to question your perspective employer (management as well as developers) about the work the team does, how there documentation works. Ask the developers who interview you what new interesting things they have learned or worked on while at the company, ask them what frustrations they face, and how they have been/are being fixed.   In our industry we can be more picky than others, its a privilege not everyone has so take advantage. Remember in your next job search that its a two way deal - they have to want you, but you also have to want to work for them.   Again, good luck."
PHP,3atawy,jb2386,1 point,Tue Jun 23 16:39:47 2015 UTC,"Dude make your career what you want. There are other places out there that'll let you learn the way you want, so just go for it."
PHP,3atawy,Shadowhand,-3,Wed Jun 24 07:18:40 2015 UTC,"The fact that you think this is ""below your pay grade"" appears to be largely a statement of ego. The project you are assigned to sounds like a perfect learning experience on how to reactor a huge code base. Pick up a copy of Modernizing Legacy PHP Applications and learn everything you can from this code!"
PHP,3atawy,poopsquisher,8,Tue Jun 23 19:14:07 2015 UTC,"The fact that you think this is ""below your pay grade"" appears to be largely a statement of ego.    ""Beyond my pay grade"" as the OP says usually means exactly the opposite of what you're thinking."
PHP,3atawy,Shadowhand,1 point,Tue Jun 23 20:03:14 2015 UTC,And that's what I get for trying to read a serious comment thread on my phone. My apologies to OP.
PHP,3atawy,Firehed,1 point,Wed Jun 24 05:35:39 2015 UTC,"By and large, I agree with this (my last full-time position was as a Sr Architect; I do consulting now). I'm naturally a bit weary about any sort of rewrite (especially given the state of things), and it sounds like that may be near-impossible both practically and politically anyways.  I think the key take-away from OP is this:   Now, I don't particularly mind that, however I'm literally not learning anything new   In any SWE job, and especially in a junior-level one, this is a huge red-flag. Anyone can bang out copy-pasta all day long; in fact, that's almost certainly how the codebase you've been assigned to got into its current state. Learning and understanding how to work more efficiently is how you make career progress, and doing that comes in many forms (SOLID design principles are generally huge here)  In your position, I too would start looking for something new. I get the impression that talking to management about improving your current situation won't be very productive, though it probably won't hurt to ask. If it's a huge financial hardship or job availability is tough where you're located, try to cut down your spending now so you can buy yourself a bit of cushion. If the company isn't willing to help with your career progress, I wouldn't feel terribly guilty about looking for alternatives on their dime.  Do you know what you're looking for? Skills you want to learn (or apply)? Any particular industry?  You're already a part of an industry that comes probably #2 in ageism just behind porn (at least that's the case here in Silicon Valley). Getting good at PHP4 is so deeply beyond irrelevant that you really are actively hurting yourself in the long term. Recent PHP5 releases, even while it will always take some flak for its legacy, actually will have you learning skills that translate well to other software. It's the difference between being a PHP developer and a software developer that happens to be writing in PHP, and you should strive be the latter.  If you want any more specific advice, including interviewing tips, feel free to PM me. One of these days I'll write up a series of posts on what I was doing while interviewing people, but until then I'm happy to do one-offs."
PHP,3atawy,irphunky,12,Wed Jun 24 01:24:05 2015 UTC,"Although frustrating, sounds like it will help you improve your debugging ability by continuing to work on this project.  Don't just quit (unless it really is destroying your soul) but nothing stopping you looking for the next step while plodding on through it.  Have you asked your manager if you could refactor it as part of your involvement?  Sadly not every job/project is enjoyable."
PHP,3atawy,Division_By_Zer0,7,Tue Jun 23 10:09:07 2015 UTC,"Exactly. If the OP can refactor it, then it will be a VERY valuable experience. And remember OP - things like that happen. Nobody like that, but we can't quit the job very time we get assigned to project that sucks big time. :-) There are surely some lessons for You to squeeze out of it. Learn them and in the meantime, look around for other opportunities, if this one won't get any better."
PHP,3atawy,ratbastid,1 point,Tue Jun 23 10:29:13 2015 UTC,"I don't mind that it's frustrating. It's part of the job. I do mind however, that since I've been, I've learned nothing, and I mean nothing."
PHP,3atawy,willmorgan,27,Tue Jun 23 10:14:57 2015 UTC,"You've learned nothing flashy and shiny and cutting edge.  You've learned A TON about classic techniques of bug tracking, logical thinking, mental code modeling, etc.  The reality of the world is, at least 80% of the work professional programmers do is maintenance work. You've been handed a learning GOLD MINE."
PHP,3atawy,gerbs,6,Tue Jun 23 12:15:52 2015 UTC,Can you describe what you think you might learn at a better job?
PHP,3atawy,Disgruntled__Goat,4,Tue Jun 23 10:28:58 2015 UTC,"Maybe the OP can work in a place with a modern codebase and senior devs who can help mentor him.  Better than staying stuck in the trenches with an ancient, legacy codebase with no peer support."
PHP,3atawy,p4_thomas,3,Tue Jun 23 12:15:23 2015 UTC,He does have a senior dev to mentor him.
PHP,3atawy,irphunky,3,Tue Jun 23 15:44:50 2015 UTC,Pretty sure you've learnt how awful ancient apps can be :D
PHP,3atawy,gerbs,4,Tue Jun 23 10:51:36 2015 UTC,"And the importance of documentation and, ideally, a testable architecture and unit tests."
PHP,3atawy,xtrategist,6,Tue Jun 23 16:25:20 2015 UTC,"You say your don't mind that it's frustrating, yet want to quit?  You say your not learning, yet have to ask how to find something?  If i'm honest, it actually reads to me that due to the legacy nature of the project that you're struggling slightly and find it frustrating because you feel you shouldn't be. It shouldn't take you an hour to locate a file no matter how bad the codebase, you should be able to read through and follow the flow yourself and if you can't then that is something to learn."
PHP,3atawy,dohpaz42,2,Tue Jun 23 10:56:46 2015 UTC,How do you plan to explain to wherever you want to work next that you quit a job after less than a few months because you got stuck working on some legacy code and didn't like it?
PHP,3atawy,Unomagan,51,Tue Jun 23 15:44:06 2015 UTC,"Suck it up,  bust your arse and prove you are ready for something better.  Document, fix, rewrite, improve. Whatever,  it's your opportunity to show what you got and you want to quit?  Is there a reason you can't look at newer and more exciting approaches to bring back into this old code base?    As a lot of the other replies state,  as a programmer (especially php).  Maintaining and migrating old code bases is going to be a big part of your future."
PHP,3atawy,Cryp71c,12,Tue Jun 23 10:36:11 2015 UTC,Was going to suggest the same thing. Just because it doesn't have all of the bells and whistles doesn't mean there isn't an opportunity to refactor. Refactoring isn't exclusive to any specific version of a language. In fact you may learn more on an older language as you will have to get creative in how you tackle certain problems.   Also unit test. Great time to really shine here. Good luck!  Edit: a few more thoughts:  Profile the code and identify bottlenecks and other areas of improvement  Start identifying the areas of code that won't be upgradable and rewrite them so an upgrade could be possible  this way you could spearhead a campaign to upgrade this old clunker to a newer bersion
PHP,3atawy,lowdownfool,7,Tue Jun 23 11:22:26 2015 UTC,"You both assume he will get / have the time to do stuff like that. I can tell you from my own experience: Sometimes you have, sometimes not. Usually not.   He could add new functions all day and just bug fix.   If that is the case: RUN!"
PHP,3atawy,512austin,4,Tue Jun 23 12:19:40 2015 UTC,"Unless they're hiring (or only able to keep) terrible programmers, have you guys stopped to think why that application is still using 4.x and hasn't matured up to at least the lowest of the 5.x line? Either they've had a string of terrible developers who didn't actually want to improve that codebase, or it can't be changed due to original implementation and architectural choices. I've worked on apps written in the low 5.x lines that were old enough that refactoring was a terrible choice...not only would it have been an enormous effort, but the code base was congested and interwoven enough that even minor changes anywhere except in fringe functionality would introduce massive new defects."
PHP,3atawy,root88,1 point,Tue Jun 23 12:39:13 2015 UTC,Another possibility is that they have been understaffed and hiring a junior to make sense of the mess is what they needed.  I'm currently the sole developer at a company with a 4.x legacy codebase..... shoot me.
PHP,3atawy,Cryp71c,4,Tue Jun 23 14:21:21 2015 UTC,That's exactly what I see them doing. Have a low cost Jr. sift through the mess that they've reaped over the years by not giving a shit.
PHP,3atawy,root88,3,Tue Jun 23 14:29:56 2015 UTC,"If it makes you feel any better, I am migrating 15 year old classic ASP to PHP. Most of the logic isn't even in ASP, it is in a dozen stored procedures that call each other. All throughout that string of SP's are random bits of html floating around. Some of the html is in the ASP, some is in the SP's, and some is in the DB itself. In the middle of one of the procs are a ton of dynamically generated HTML tables that are all named with just letters with no explaination. Table A,B,C...AA,AB,AC... all the way up to table DA. We can't just throw it all away because there are super complicated business rules that no one knows and are not documented anywhere.  Luckily, my boss understands how completely screwed everything is.  The crazy thing is that this site has 3,000,000 users in its lifetime and they don't complain that often."
PHP,3atawy,TheSpoom,3,Tue Jun 23 16:50:56 2015 UTC,"Again, I've been in that situation before too. In my instances it turned out to be because they were a software company that didn't value developers... So we were always overloaded, didn't have enough resources, and often working long hours or in highly stressful conditions."
PHP,3atawy,jthess32,2,Tue Jun 23 14:50:24 2015 UTC,"Out company laid off some people and our boss was replaced by an economics guy. He didn't know anything about programming at all. This very first thing that we did was explain technical debt to him. It's something that most business people can understand. It's like long term economic planning. It really made our jobs a lot easier when they let us develop with the big picture in mind, instead of just duct taping everything that is broken and moving on."
PHP,3atawy,chazmuzz,2,Tue Jun 23 16:56:18 2015 UTC,Management in a project with this kind of history will view such actions as nothing but a waste of time.  I wouldn't be surprised if they didn't even let him bill for them.
PHP,3atawy,Zenobius,3,Tue Jun 23 16:37:12 2015 UTC,"I'm all about character building and learning important but un-fun things.  Still, let's not piss on OP's leg and tell him it's raining.  First, /u/xtrategist is right on some things.  Working on old codebases can teach you a lot of things you might not know and this might be valuable.  You'll know best what's teaching you (and what you want to learn).  If you were brought in to a company which needed someone to suck it up and was giving back to that someone in other ways (mentorship, pay, other opportunities), that's one thing.    But hard things aren't good to do just because they're hard.  And there's no reason to ""prove you can take it"" unless that clearly leads to an opportunity you want."
PHP,3atawy,shivenigma,6,Tue Jun 23 16:32:11 2015 UTC,"This happened to me many times when I was just starting.   It's a smart move from your managers, because progress will be slow for any developer on that project.   It's simply cheaper to have you working on it than to put their more experienced, higher paid devs on it.  It's quite normal, from my experience"
PHP,3atawy,MattTheProgrammer,6,Tue Jun 23 09:59:43 2015 UTC,"I still rember my first two jobs in Poland (yeah), in Altkom and Implix (now GetResponse but on other project).  There is a lot to get to know about debugging projects and code. There is a lot to get to know about refactoring.  The issue here is: is your PM is willing to give you more time to understand/debug/refactor the code, or do you have to just fix bugs?  It latter then search for new project/job. If you can refactor/change the code big time - it's in my opinion (and I've been programming for 23yrs and in PHP for 13yrs, and I had a lot of projects just like that) a big learning experience. A lot of people just makes some PHP web project for learning, here you have a project that is live, and you know you can write it better. So give it all you can and do it. You'll learn a lot more then just starting from scratch for a new project.  If you have any problems give me a shoutout, we can talk on other platforms about that issue. As a Junior you can learn a lot about how projects should be written just by refactoring old code. You should also have some mentor in the company to help you, but you can also have that mentor out-of-office if your contract says so (else you can just ask arbitary questions ;-) )."
PHP,3atawy,chmod777,7,Tue Jun 23 11:42:53 2015 UTC,"In my personal experience and opinion juniors always get this kind of projects mostly, it's really a great opportunity for you to learn how to debug, how to organize, how to write good quality code. Remember, you learn more from mistakes than success.. Now this is someone else's mistake, why don't you learn from it? I accept, it sucks. often you'll think about shouting at your manager and quitting the job (I was there). But It'll be a good experience for you. Go with it."
PHP,3atawy,fleshintogear,7,Tue Jun 23 11:53:41 2015 UTC,"My current employer is on cutting edge ASP.NET MVC stack and maintains bleeding edge on all tech in the office. That said, I am leaving this organization for a PHP/MySQL shop in desperate need of developers willing to slog through the thick of an outdated code base to make it better and update it. I am already established in my career and understand the value of making my way through other people's code (good or bad) in order to learn a thing or two to improve my own skills.   As others have already stated: Do not quit this job. You just started your career and you have now gone from ""green field"" development of your own projects to a ""brown field"" project that needs some rehabilitation in order to bring new life to it. This type of development is why many developers get paid big bucks to work on legacy systems. Do take this opportunity and run with it. If your management team is favorable and you have a good report with them, or are at least working toward that, these are the intangibles that you may not find if you jump ship now.  I've worked on project teams where the team has been awesome but the project has sucked as well as the other way around. I'd take a shit project with a great team any day of the week over a decent project with a shit team. A great team will allow you to bounce ideas around and share experience among your peers to make the shit project better. A great project does not have the same effect on the shitty team ;)"
PHP,3atawy,Brauhl,4,Tue Jun 23 13:56:53 2015 UTC,you're going to have a short career if you bail every time you need to update/fix/work on a legacy project.
PHP,3atawy,soucy,4,Tue Jun 23 12:47:47 2015 UTC,"I may be way off here, but I thought the whole idea behind being a junior was to learn new things, not get stuck on a 10 year old project.   You don't get to pick and choose at this point. There is probably plenty to learn on a legacy project."
PHP,3atawy,Xpertbot,3,Tue Jun 23 13:46:26 2015 UTC,"if you're not going to stay, find a different job THEN quit."
PHP,3atawy,Undertoad,3,Tue Jun 23 12:10:08 2015 UTC,Maybe they want to see what you can do.  It's one thing to hack away at your own code it's another to be able to fix code someone else has written coming at the problem with a completely different mindset.  If you can't even do this or complain about doing it why would they put you on a more important project?
PHP,3atawy,mchandleraz,3,Tue Jun 23 12:26:26 2015 UTC,I started as an intern for a small but well established company then became a junior and my daily job for 2 years was maintaining the legacy admin. Today I start a new job as the full stack developer for another company and I get to decide what to use and when to use it. Legacy code will be part of your life as a developer the rest of your career its with experience and new projects that you get to have fun.
PHP,3atawy,AllenJB83,3,Tue Jun 23 12:44:19 2015 UTC,"See, I would LOVE LOVE LOVE this job. I haven't done serious employable coding since PHP 4 but would love to get back into it.  If anyone in Philly needs a PHP 4 code maintainer with Linux admin skills and a support background..."
PHP,3atawy,I_Like_Spaghetti,3,Tue Jun 23 14:50:17 2015 UTC,Are you one of my coworkers?
PHP,3atawy,irphunky,6,Tue Jun 23 15:01:17 2015 UTC,"It's not clear from your post, but do you have the opportunity to ""fix"" this codebase? Documenting and modernising legacy projects is in itself valuable experience in my opinion.  While I obviously wouldn't advise you to continue doing a job you hate, I think that to say it's not possible to learn anything new working on legacy projects is wrong.  Any company that's been around for any significant amount of time will likely have legacy projects, so you could end up working on old code at your next job too. Alternative work can often be just as boring - pumping out template sites, doing the same things over and over - so even if you're working on ""new"" code, it might not be any more fun.  Another task you could take upon yourself is to begin writing a specification with a view to rewriting the project from scratch, document how much time you have to spend chasing the spaghetti strands and then make a business case for rewriting the project.  Another angle to take is that rewrites don't always have to be performed 'from scratch'. Because of the fact that HTTP is stateless, it can often be possible to perform rewrites alongside the existing codebase by implementing redirects / iframes to rewritten functionality. It's often trivial to get old and new code sharing the same session data and database connections where necessary. Using this method you can slowly modernise the codebase."
PHP,3atawy,shivenigma,1 point,Tue Jun 23 10:08:25 2015 UTC,(ง ͠° ͟ل͜ ͡°)ง
PHP,3atawy,CheckeredMichael,1 point,Tue Jun 23 10:11:07 2015 UTC,"""fix"" is not the exact word I'd use here. Rather make it less broken. I don't mind that I'm stuck on an old project, I do mind that I've learned nothing new in my time here. The only things that challenge me a bit are the things I do in private, which I do enjoy. Here I feel like I'm kicking water uphill just for sports. It doesn't go anywhere."
PHP,3atawy,egisspegis,9,Tue Jun 23 10:18:15 2015 UTC,"""fix"" is not the exact word I'd use here. Rather make it less broken. I don't mind that I'm stuck on an old project, I do mind that I've learned nothing new in my time here.   If you have the chance to upgrade a 4.x codebase to PHP 5.6 and refactor the worst parts of it to something better, that might as well be the most educational experience in your life. It's easy to keep starting over clean, it doesn't require skill.   If you're given mandate to improve the codebase, it's an interesting challenge. If not, that's something else."
PHP,3atawy,AllenJB83,3,Tue Jun 23 10:26:15 2015 UTC,"Not sure if I should trust you username or not.   But really now, you make a fair point."
PHP,3atawy,tarantulus,3,Tue Jun 23 10:27:50 2015 UTC,"You should, most posts i've read of his/hers are accurate and to the point."
PHP,3atawy,mbthegreat,2,Tue Jun 23 10:50:38 2015 UTC,me too noticed him so many times.. very accurate
PHP,3atawy,tarantulus,2,Tue Jun 23 11:57:31 2015 UTC,Yeah his opinions are mostly valid. I've yet to see a bad post from /u/idiot-with-opinion.
PHP,3atawy,512austin,2,Tue Jun 23 12:08:08 2015 UTC,This. If you're allowed to do that (by your managament or whatever) it would be quite unique experience and you would learn a lot.
PHP,3atawy,gratefuldaed,3,Tue Jun 23 11:18:41 2015 UTC,"I could be wrong here, but from your comments throughout this post it sounds a bit like you're expecting the company to shove new knowledge down your throat.   This (in my experience) isn't how things work in development - (most) companies want you to learn and investigate things, but they don't know what you need / want to learn and will expect you to either perform self-directed on-the-job learning or for you to ask when you want to go on courses / conferences. If you want (or already own privately) programming / reference books and think they'd be useful to use at work, ask the company to buy office copies.  If nothing else, you can learn some new stuff and go to some fun conferences on the company dime before you jump ship."
PHP,3atawy,ekiwok_,7,Tue Jun 23 12:53:38 2015 UTC,"I thought the whole idea behind being a junior was to learn new things, not get stuck on a 10 year old project.   You think they're going to put a fresh junior on their latest and greatest greenfield project? are you deranged?   you learn from dealing with old, buggy, shit code how to be a good dev, then you get to play with the new shinies. Put your time in kid, take your lumps, you've a long way to go."
PHP,3atawy,redditDevil,3,Tue Jun 23 12:29:26 2015 UTC,"Except, if you've never worked on the new and shiny, how do you know what's good? Spotting bad is easy enough, knowing what to do about it is another matter."
PHP,3atawy,random314,0,Tue Jun 23 16:26:15 2015 UTC,"Reading? It's not right to expect your employer to spoon feed you, take some initiative and find avenues of improvement, then if you reach a point where training will be beneficial your employer can step in."
PHP,3atawy,random314,5,Tue Jun 23 17:26:40 2015 UTC,Tbh I'd be worried about him picking up bad habits from dealing with old shitty code all day. Or rather from reading it all day.
PHP,3atawy,lastrites17,2,Tue Jun 23 14:33:33 2015 UTC,I'm looking at revising 4.x to 5.6 as well. Not too excited about it.
PHP,3atawy,lastrites17,2,Tue Jun 23 11:15:30 2015 UTC,"Are you hired for maintenance or delivery? There is huge difference and I think most developers do not like to be in maintenance, but some prefer it over delivery.  Difference is that if you are hired for maintenance than it may be difficult for you to grow and gain new skills. Except debugging you will probably not gain experience. Specially if it's authored framework that was developed under pressure to deliver without focus on clear code, design patterns and OOP principles like SOLID. Then maybe you should consider another opportunities.  If except maintaining you also may deliver new functionalities than probably you may do some work to fix things that bothers you. You won't refactor everything but you still may write new modules better, write good documentation and tests, maybe convince administrators to add vagrant/docker and/or tests.  Unfortunately I think that it is really common to assign juniors to old projects because developers with more experience are eligible for developing new projects. Of course it clearly shows that there are problems with company but as bad as it sounds many companies does not think about their codebase and clearly does not care what are you doing when you are at work as long as clients pay for it.  If you want to grow up as developer and don't need a lot of money right now I highly recommend starting from small companies. They have more time for their employees and cannot afford for them struggling with broken undocumented code all day."
PHP,3atawy,codercaleb,2,Tue Jun 23 11:55:09 2015 UTC,"I agree with everyone saying this is a learning opportunity. If you want support in that learning, I would suggest asking your management to provide you books on modernizing legacy apps. I would suggest: https://leanpub.com/mlaphp. Alternatively, ask management (or just do it without permission) to watch video presentations on the same topic.    This could be a good starting point: http://m.youtube.com/watch?v=65NrzJ_5j58. Other books are suggested in this presentation."
PHP,3atawy,Draders,2,Tue Jun 23 12:33:34 2015 UTC,Refactoring is a skill all in it self. People have written books on that.
PHP,3atawy,codercaleb,0,Tue Jun 23 13:10:06 2015 UTC,"I've been writing code for 3 months, I don't think I'm qualified to even read those books, let alone refactor such a huge site."
PHP,3atawy,d3vzilla,3,Tue Jun 23 13:13:49 2015 UTC,"Sure you're qualified to read those books. Nothing like working of a solid foundation. Sadly many php developers are notoriously known for lacking those, giving php in general a bad name. So read your books and do it right from the start."
PHP,3atawy,lazyneko,2,Tue Jun 23 15:15:01 2015 UTC,"Wait, have you been writing code for 3 months...total? Or at this job?  If it's the former, then this is a great place for you to start. I started by writing my own terrible legacy-ish code, then refactoring it as I learned more.  If you are a trained PHP dev, this is a terrible waste of your time and, I don't think, as helpful as some optimists are making it out to be. Especially since the skills involved are much less likely to transfer to other languages and therefore job opportunities."
PHP,3atawy,domdest,3,Tue Jun 23 13:45:11 2015 UTC,For 3 months total.
PHP,3atawy,MorrisonLevi,3,Tue Jun 23 13:51:59 2015 UTC,"Somethings to focus on while you find a better job:  -Read up on OOP and design patterns and try to think (even if you can't put them into practice) about how they'd apply to the PHP4 mess you've inherited  -Document the codebase! At least make the mess more manageable for whoever succeeds you, and improve a critical skill  -Improve your attitude. Not your desire to quit this shitty job, which is actually a good sign, but your responses throughout this thread of your incapability to do various things with your situation. You can refactor, rewrite, whatever, it will be difficult and probably not very good at first. Just make that attitude readjustment."
PHP,3atawy,lithstud,1 point,Tue Jun 23 14:20:15 2015 UTC,"Then honestly, you may be in a good place.  As u/lastrites17 says above and below, you have an excellent opportunity here. When I started dabbling in php around 2004 and 2005 it was all the simple stuff like <?php echo $_POST['foo']; ?>, but you've been handed a gold-mine that I never was: you have the ability to through and find things like that and and refactor them so that use proper a security practice (or whatever the code needs).  Speaking of gold mines, at least you're not working 12 hours a day for a dollar in a dark, cold and cramped gold mine, all the while breathing in gold dust and get lung problems."
PHP,3atawy,codercaleb,1 point,Tue Jun 23 17:10:13 2015 UTC,<?php echo $_POST['foo']; ?>   I hope that post value was sanitized before you did that :D
PHP,3atawy,Uncled1023,1 point,Tue Jun 23 17:30:46 2015 UTC,That's what I'm saying. I started there and learned slowly on top of that. Sanitation was the next step in this case.
PHP,3atawy,mahelious,1 point,Tue Jun 23 21:16:44 2015 UTC,"Then you are extremely fortunate, and definitely have a lot to learn. It took me years to land a junior position and I would have loved to have been picked up at such an early stage (although I appreciate it would be overwhelming, no doubt).  It might not be what you had in mind, but try and improve the code piece by piece, whilst picking up your pay check, and learning throughout. Perhaps in a year's time you'll be able to completely transition into a modern OOP style, or earn the right to rewrite it?"
PHP,3atawy,mglinski,2,Sat Jun 27 11:15:19 2015 UTC,"I think you need to be more responsible for your own education. For starters, you should get to the point where you don't need to ask other people. When I was a junior working on a similarly aged legacy project, I rarely had to ask anyone where stuff is, and that codebase was pretty bad too. It sounds like you may need to become acquainted with better tooling and there's no better time for that than when you're being paid to do so with a real test case in front of you.  Start asking yourself how you would rewrite the code. How would the code look in a modern framework? What would be the steps in migrating the code from where it is now to something more modern?"
PHP,3atawy,rarenaninja,2,Tue Jun 23 13:24:01 2015 UTC,"If you're going to find a new job, do it before you quit. Don't job hunt while unemployed if you can help it."
PHP,3atawy,Cryp71c,2,Tue Jun 23 14:31:45 2015 UTC,"Do you enjoy your job most of the time? If no, can you afford to quit (as in, you and your dependents will be fine while you look for a new job)? If yes then quit else stick with it until you can afford to quit."
PHP,3atawy,iCupid,2,Tue Jun 23 15:50:24 2015 UTC,We also had a new guy a month ago. A legacy project was his first one and he did not like it because it wasn't laravel or anything like that. So he left after his first week.. For example I don't care whether it's an old project or new cool project. (since it pays me well no matter what) http://replygif.net/i/718.gif
PHP,3atawy,lonnyk,1 point,Tue Jun 23 16:43:14 2015 UTC,"Great point. A lot of us ""millenials"" just can't wait for anything anymore. And I say that as a 27-year-old."
PHP,3atawy,boismaxi,2,Tue Jun 23 17:11:37 2015 UTC,"When I first joined, I started working on the main code-base, which was very old.  It is good to get acquainted with the work before creating anything new.  Also, old code-bases are always fun to refactor and improve upon."
PHP,3atawy,xjake88x,2,Tue Jun 23 16:51:22 2015 UTC,"When you go to look for your next job, your prospective employers first question will be ""why did you leave your last job?""  You have the option now to choose what the answer will be.  You can either say  A) the work was boring and hard and I didn't feel like doing it; or  B) after converting a legacy system into a new framework, erasing technical debt, adding appropriate functionality and commenting the damn thing so the next developer will know how it all works, I felt ready to move on to a more complex challenge.  Think carefully about how your experience at this job will inform your next one and you will know what to do."
PHP,3atawy,512austin,2,Tue Jun 23 20:26:50 2015 UTC,"I missed this great post, but... fuck that shit. Line up a new job and when you tell them why you left, show them the date that PHP 4.4 was EOL and ask them why they don't give a shit about their employes.  Don't listen to these people telling you that having to learn about shit programming patterns from 9 years ago is good for your career. Fuck that shit. Your company is not gonna pay you convert it, if they were willing to do that, t would have been done 6,5,4,3,2, or 1 years ago.  Your time in php will be fraught with dumb legacy code if you let it. Some of it can't be avoided., but I would never work for a company on 8-10 year old php code as a junior developer. That shit is cancer, and getting paid junior developer levels of money to do it is akin to robbery. They are robbing you of your youth and your drive to learn. You should be spending time practicing learning design patterns, clean coding principals, and software architecture.   You are at least smart enough to know when your getting the short end of the stick. If you really want to do php and not be pidgin-holed for 5 years maintaining a php 4.4. app, get the fuck out of there."
PHP,3atawy,illmatix,2,Tue Jun 23 21:26:11 2015 UTC,"I've been doing software development for about three years, and when I started I was in a similar position to yourself. An old codebase written in PHP4, with no autoloader, full of copypasta, with at least three different naming conventions, zero composer packages and namespaces not allowed, no ORM. The database was crap, some tables were essentially a spreadsheet imported via phpmyadmin. I worked on it for 1.5 years, a lot of that was incremental refactoring to avoid code duplication. Now and then we'd run into database tables no one knew existed (original devs long gone). What helped everyone was weekly meetings that would run one to four hours discussing what we were working on and what our sticking points were. Myself, I enjoyed the refactoring even though I knew it was largely grunt work. I've of the files I had to work on was 20k lines and froze Netbeans. Eventually I added some non trivial functionality via a class that extended the one in that file. Honestly I learned a LOT more than I thought I had. I'm the most careful dev at my current job and the most unlikely to break existing functionality significantly. I can debug other devs' issues without looking at their monitor. I'm thrown into any project because they know I'll slog through regardless of framework, cms or legacy code. The codebase I inherited three months ago has shrunk by about half and is well on its way to be testable. But all of the modern tooling I learned myself, and I'm not sure how much I would've appreciated it if I wasn't aware of the alternative. If you can't hang in there, do what you have to do. But there's more to shining a turd than most people think."
PHP,3atawy,mikebiox,2,Wed Jun 24 02:11:45 2015 UTC,"I've seen some others' posts and I entirely disagree with them. ""Stick it out"" is not an appropriate mentality. That being said, I would follow some of their advice and identify ways to improve the code (refactor, redesign) and make those suggestions to your management. More than likely, one of the following will eventually occur:   let you try to improve the code base in some meaningful way tell you it can't be done right now and hand you a list of bugs/defects/features they need deny you outright and tell you that major refactoring of that old codebase isn't going to happen   I'm inclined to believe - based on first hand experience in the same situation you're in right now - that eventually they will either pull a 2 or a 3. And when/if they do, start looking for another job. I suspect that the reason you're stuck working with an ancient 4.x application that might need so much work is because no one from the management level has allowed any significant improvement / refactoring work to occur on that project. That's a huge red flag for a bad, will-become-worse, work environment."
PHP,3atawy,thatguy454,1 point,Tue Jun 23 12:44:22 2015 UTC,one man's trash is another man's treasure. Some of us are unfortunate enough to even find a job.
PHP,3atawy,dericofilho,1 point,Tue Jun 23 10:58:57 2015 UTC,"I can't give you advice but I can share w you my opinions.   IMO you should always be learning and if you're not you are wasting your time. Also, the point of work is to prosper, not be miserable. If you can't come up w a reason for being there then you shouldn't be there. Seriously - what is the point of you being there?  Finding a place that is good is more difficult than you think it will be. You'll need to be more finite in your decisions in the future.  Also, advice is personal. If you ask for advice from people you don't know about something they arent living then you'll get a bunch of opinions masked as advice."
PHP,3atawy,no1youknowz,1 point,Tue Jun 23 12:51:09 2015 UTC,It is normal to search for a new Job if you are not happy.
PHP,3atawy,nobrandheroes,1 point,Tue Jun 23 14:26:40 2015 UTC,"Don't quit without a new job lined up, but find something new ASAP!! If you want to have a career in programming working on modern technology under modern standards, there is PLENTY of room in the industry for you!! Also it doesn't even look great on your resume to see that you've spent years working on such old technology. Companies are constantly searching for talent, and end up wasting money training/orienting people who don't work out, all in search for competent junior devs. Junior devs are definitely hot right now because small businesses who can't afford to shell out $100-200k/year salaries still want to find people with potential that they can afford."
PHP,3atawy,Toast42,1 point,Tue Jun 23 14:31:57 2015 UTC,"If you're being pushed to deliver quickly, quit. If you're just maintaining it, it could be a good learning experience.   The thing you gotta watch out for as a jr is to not pick up any sloppy habits. Best practices probably aren't completely natural to you yet. If you're being pushed to deliver you might regress and end up hindering your development.   But if they're giving you basically paid time to learn because no one else wants to deal with that codebase, I'd take that all day."
PHP,3atawy,ljohnso16,1 point,Tue Jun 23 14:37:26 2015 UTC,"I'm not sure how well you know linux or if you even work on it but maybe some grep fu might help reduce the time it takes to find the file you're looking to edit. While you do this and make the updates the expect of you, start mapping out how you see the project fitting together. Use uml diagrams to build the picture of how it all fits together. Heck there might even be software out there that can generate this for you.   One of the biggest things as a junior is sometimes you have to do shitty work to build a reputation and be able to suggest alternatives."
PHP,3atawy,omniuni,1 point,Tue Jun 23 17:20:54 2015 UTC,"Lots of advice on here already, but I would look for a new job, then quit. I find (and I've been told) that it's easier to find a job when you have a job.  If it takes you a few months to get a job, no worries, you are still racking up experience (as far as what it looks like on a resume)."
PHP,3atawy,UnnecessaryQuoteness,1 point,Tue Jun 23 17:28:21 2015 UTC,"You have the option to completely own this project, re-write it from the ground up, or even start again completely. I got given some utter shite projects when I was a junior, you just have to put up with it and make sure you learn from everything, even if it's how not to code something. Also, you can still ask colleagues for advice and such, so it's not like you're stuck.  The problem is at junior level, you'll never get put on the new super-fancy tech project until you've proven that you can do the shit stuff first. I ended up having to work stupid hours and do allsorts to get my title removed, but now I've done all that and it's totally worth it."
PHP,3atawy,h64,1 point,Tue Jun 23 18:01:35 2015 UTC,"Despite of all that's being said here, if you stay in a project you hate, eventually you're gonna quit-and-stay or just quit...   This may help you: http://c2.com/cgi/wiki?QuitSuddenly http://c2.com/cgi/wiki?FraidyCats And of course:  http://c2.com/cgi/wiki?CareerLimitingMove"
PHP,3atawy,Danack,1 point,Tue Jun 23 18:25:22 2015 UTC,"Read through most of the comments, but I don't think this was explicitly implied.  So you are a junior dev and have been assigned a 4.x project, it's 10 years old and you don't like it.  As a very senior  dev.  I think if I returned into the employment sector and was assigned the same project, I don't think I'd like it either.  But, you really have been given a blessing in disguise and if you stop the tantrum, you'd see it for what it is.  Here's the deal.  If I was searching for a developer, I'd never hire a junior dev.  I don't have the time to train someone, I want someone who is already capable of hitting the ground running in many different areas, such as dba, devops, front/back end development and linux sys-admin.  So looking for another job may sound great, but you may end up in a worse place than now.  What I would do if I was in your position is jot down what you want.  Do you want to learn Laravel, do you want to learn jquery, do you want to lean sql?  What is it you want.  Write those down.  Once you have a basic understanding, then go learn it.  There is nothing stopping you from teaching yourself when you are at home to get to a certain comfort level and knowing how to develop apps with that stack.  Sure its going to take at least 6 months to be proficient, but it's an investment in you and will translate to dollars in the future.  Here's the best part.  After some time at work, you are going to get comfortable with their codebase.  You are going to be able to do maintenance and allow yourself to know every facet of the code and how it all works (and doesn't).  Now at home, you start to create a brand new stack.  You create your new version of this application.  You develop a working version, something that's new, easily maintainable, code that is documented, something that is a dream to work with.  Go back, have a meeting with your manager and senior dev.  Highlight all of the CONS of working with this 4.x php application.  Tell the mgr, it's costing him major dollars in whatever areas.  Tell him, his servers are not secure, his application is not secure yada, yada, yada.  I'm sure the senior dev will back you up.  The mgr obviously tell you.  Well, we can't afford to build a new version, we can't afford the time, yada yada.  You'll then show him a URL locally of the working application, built in new code.  Now his reaction is key to you staying.  If he understands and wants to bring in management to implement a transition to the new code, you'll have some work cut out to properly test, switch over to the new system and then ensure no gotchas.  Within a few months, you'll have a new stack and you'll be happy with work and you did them a big favour.  Hey, maybe in the next review meeting you can ask for more money.    If he doesn't understand what you have done.  If he berates you for doing this and he then buries it.  LEAVE!!!!!  Find another job who will appreciate what you have learnt.  You can then show another employer, that you can WORK for the company.  As an employer, I would love to have someone who can not only learn new technologies, but then develop stuff and bring it in to the company.  Not only have you saved me dollars in company time, you demonstrate that you care about your own tech stack and the companies.  Look at facebook/google, there have been lots of tech that a developer started that was then taken on by the company as a whole.  This is what I would do and quitting I think is the bad play here."
PHP,3atawy,liamwong,1 point,Tue Jun 23 18:46:58 2015 UTC,"I really think, more times than not, being a PHP dev is a mess and overly difficult. You're under resourced, and the language moves so fast, old code is always going to look bad.  My approach at my current gig is to try to improve things so that work is my eventual replacement. Perhaps a similar mindset will benefit you.  With that said: - Learn everything you can, you really should be studying at home at this point in your career. - PHP4 rules out integrating modern tools, so if you can, write some of them from scratch. - Create a library - Perhaps rewrite the entire thing on the side? - Until you start thinking that you are a great programmer, you are probably a better programmer than you think"
PHP,3atawy,billcube,1 point,Tue Jun 23 19:12:44 2015 UTC,"Just start fixing everything as time allows.  Don't ask permission, just do it.    Also, find a job then quit.  Order of operations is very important here."
PHP,3atawy,ebjoker4,1 point,Tue Jun 23 19:37:02 2015 UTC,"not sure about the 10 year old project, but i started a jr job with drupal and i felt the same it was all insanity nothing made sense and none of our client sites had any documentation, for me made it worse everyone was to busy to help right away. I was searching through code the same way, but u will get used to it, sometimes u have to search around for stuff, if u want some bonus points offer a differnt approach to the 10 year old project, maybe a better more rapid development framework."
PHP,3awmsc,SomeRandomBuddy,3,Wed Jun 24 02:27:18 2015 UTC,"I use various composer libraries. Not all of them say they are explicitly compatible with HHVM. Am I likely to run into trouble?     Most PHP code should run on HHVM just fine. However, there still are specific functions, or extensions not implemented. All you really need to do is test.    If a library is labeled HHVM compatible, but not written in hack, can I use it along side hack code?     Yes.    Is it more worthwhile to use Hack instead of PHP 7 (which seems to be coming along)?     Hack offers an array of new functionality, like generics, collections, async, etc. So if you want/need to use those, then yes, Hack is the better choice. If not, PHP7 is fine.    I'm mostly interested in hack due to the typing and async operations.    Refer to my previous comment. So yes, use Hack!  If you have any questions, let me know. I've been building a modular framework in Hack, so I hope my knowledge is good ;)  https://github.com/titon/framework"
PHP,3awmsc,gearvOsh,1 point,Wed Jun 24 05:17:38 2015 UTC,Thanks for the informative answer. What's the most reliable hack-compatible redis client?
PHP,3awmsc,gearvOsh,1 point,Wed Jun 24 06:52:59 2015 UTC,"Well HHVM has Redis support built-in, but a Hack specific one? Don't know of one."
PHP,3awmsc,eatingthenight2,1 point,Wed Jun 24 17:10:08 2015 UTC,one i just got caught by was hack seems to not port php function aliases. For example mysql_numrows is not available. Pretty fun when tracking down @mysql_numrows() in the source code :| but overall it lowered my application from 60ms to 40ms response time when under heavy load ~5k rpm.
PHP,3awmsc,gearvOsh,1 point,Thu Jun 25 06:00:13 2015 UTC,It might be caused by that function/extension being deprecated.
PHP,3awmsc,eatingthenight2,1 point,Thu Jun 25 06:21:48 2015 UTC,no if you look in the existing documentation for hhvm plugins they didn't port that function over. they have the rest of the deprecated functions though. unfortunately i'm not able to upgrade it to pdo at this time or i would.
PHP,3awmsc,craigerator,1 point,Thu Jun 25 06:39:08 2015 UTC,"According to Newrelic, our time in PHP code dropped by ~85%.  Database time stayed the same, as you'd expect, but switching to HHVM was a cheap win.  We did encounter a few issues along the way, though:   HHVM's default sort works a little differently from the standard PHP sort.  HHVM is a little more strict about code style, so some of the crappier code needed minor cleanup before deployment. I had to write a bit of code to make Newrelic aware of our internal routes. There is no official HHVM extension for Newrelic.  The unofficial one is okay, but it lacks a few of the features that you'd get with the standard PHP one.   Most PHP code I've encountered worked out of the box with HHVM, and all of the code that we've written worked exactly as expected.  Just be sure to run HHVM in your development environment, and test all the things before deployment."
PHP,3avr20,coderstephen,2,Tue Jun 23 22:02:06 2015 UTC,It sounds like you're planning something I'm going to be super interested about...
PHP,3avr20,assertchris,1 point,Wed Jun 24 06:07:23 2015 UTC,"I kind of thought that you might be interested. I decided to post a mysterious blog post about the topic here. And yes, I'm planning something big."
PHP,3avr20,mrjking,1 point,Wed Jun 24 18:40:06 2015 UTC,"So, for those who might be wondering, this would be in the context of asynchronous PHP,  like ReactPHP. I'm kind of curious if promises are a good idea for the PHP ecosystem or not."
PHP,3aso31,velmu3k,1 point,Tue Jun 23 04:49:51 2015 UTC,"H20 looks impressive, but FastCGI support was just added in the 1.3 release this past week (June 17th). Have you had any issues with stability?"
PHP,3aso31,Adduc,1 point,Tue Jun 23 14:54:52 2015 UTC,So far not - it's been very stable. But it's an experimental setup anyhow. I'm only running H2O for this specific site for stability testing / learning.
PHP,3aso31,fred_emmott,1 point,Tue Jun 23 15:41:56 2015 UTC,Is there a story behind https://www.symfony.fi/favicon.ico ?
PHP,3aso31,fred_emmott,1 point,Tue Jun 23 18:53:36 2015 UTC,"Sure, but not that exciting. I've had that favicon on my personal site for the longest time - for nostalgia. It's lovely when people have no clue what it is.  Each time I notice a 404 for favicon.ico on my services I just pull a ""curl -O http://janit.iki.fi/favicon.ico"" to get rid of it."
PHP,3apu3y,tpunt,6,Mon Jun 22 15:06:36 2015 UTC,Null Coalesce Operator is awesome.
PHP,3apu3y,destraht,5,Mon Jun 22 17:20:01 2015 UTC,After the speed increases it's my favorite feature. Can't wait to replace all the old isset() ? : (isset() ? : ) shit spaghetti.
PHP,3apu3y,umegastar,4,Mon Jun 22 21:26:25 2015 UTC,"Would you consider merging this with php.net's work-in-progress PHP 7 migration guide (one of the docs guys has a Git repo for it: https://github.com/Sobak/php7-migration-guide), and ultimately in to the docs proper?"
PHP,3apu3y,salathe,2,Mon Jun 22 17:04:00 2015 UTC,Yeah sure. I'll drop you an email about this in an hour or two :)
PHP,3apu3y,SobakPL,2,Mon Jun 22 17:48:54 2015 UTC,"Feel free to contact me (sobak at php dot net or whatever) if you need help, eg with the docbook syntax. Thanks for this detailed reference, I'll definitely use it."
PHP,3apu3y,coderstephen,3,Tue Jun 23 06:51:14 2015 UTC,"What's with the 'string'->toUpper(); example under Uniform Variable Syntax? Is it just a misleading example demonstrating the parser, or am I missing a huge new String class?"
PHP,3apu3y,bwoebi,3,Mon Jun 22 15:46:35 2015 UTC,"It's demonstrating a new parser capability that is not, yet, utilized (for strings).  But... let's say I know /u/nikic/ is itching to do it."
PHP,3apu3y,coderstephen,2,Mon Jun 22 16:14:39 2015 UTC,"You are? I currently know of no plans to really do it. It was experimented with it, but there is no plan to do it in the future."
PHP,3apu3y,drrck2403,1 point,Mon Jun 22 22:58:48 2015 UTC,"Ah, I see. Nice to have that there, then."
PHP,3apu3y,nikic,3,Mon Jun 22 16:23:38 2015 UTC,Can anyone tl;dr me the reasoning behind choosing invariant return types over covariant ones?
PHP,3apu3y,drrck2403,6,Mon Jun 22 17:44:51 2015 UTC,"It's a purely technical decision. To enforce invariance it is sufficient to know the class name, while enforcing covariance requires actually knowing the class, which means we have to autoload it during class binding. From there we can get into all kinds of fun stuff, like circular dependencies: Class A hints class B, and class B hints class A.  It's nothing that can't be solved, but it was dropped from the initial proposal to avoid these difficulties."
PHP,3apu3y,credomane,3,Mon Jun 22 17:59:30 2015 UTC,"Okay, that's what I was hoping (that it was technical).  Thanks!"
PHP,3apu3y,Rocky1138,1 point,Mon Jun 22 18:13:20 2015 UTC,"Hopefully this change to number strings will fix one of the more annoying quirks of PHP in regards to strings. Hope this is for all strings that are numbers too. Such as strings that are binary, octal numbers and whatever '0e' is viewed as. I'm a firm believer that PHP should treat strings as strings, period. If your string is a number of some sort and you want php to view it as a number you should have to run it through a conversion function. Such as '234'.toInteger(), .toFloat() or .toNumber(). With the latter return a int or float as needed.  Also anyone know what type of number '0e' is seen as? I would have said octal but all the talk only seems to talk about '0e' and not say '0a'. See this Stack Overflow for what I'm talking about it you don't already know."
PHP,3apu3y,angdejan,3,Mon Jun 22 16:35:55 2015 UTC,"""E"" is for exponent from a number's scientific notation so it's not related to 0x 0b and so on.  1e2 = 100   And PHP7 doesn't fix that. People will have to learn to use the right operators (and I do agree in an ideal world this wouldn't be needed, but I don't exactly blame PHP for the current behavior)."
PHP,3apu3y,rafa_eg,1 point,Mon Jun 22 16:46:33 2015 UTC,That's a nice repo you got there...
PHP,3apu3y,stubborn_d0nkey,1 point,Tue Jun 23 01:54:21 2015 UTC,"Why can't a method return null if something else is declared as a return type? For example, if we have a method that gets user's data from database by id and returns User object if the user is found and null otherwise. Am I misunderstanding something?"
PHP,3ascii,cpt_snacks,2,Tue Jun 23 03:00:01 2015 UTC,"It would help if you pasted some code, or even pseudo code, than trying to explain what you're doing, because that explanation is vague.  Choosing which class to register based on your config is not wrong, switch works for a small number of options, for larger number of options you can use a hashmap, or ideally you'd just have configuration in code when applicable: just make and pass the class instance in (you can do it lazily on demand with a closure), avoid using an abstract option to choose which class you pass in."
PHP,3ascii,SuddenlyOutOfNoWhere,1 point,Tue Jun 23 04:25:29 2015 UTC,"Sure, here is some pseudo code to demonstrate what I'm doing:  In config/services.php:  <?php  // ... 'team_host' => 'bitbucket',   Then in app/providers/SomeServiceProvider.php:  <?php  switch($app['team_host']) {   case 'bitbucket':     $this->app->bind('Full\Namespace\TeamHost', function ($app) {       return new Bitbucket($guzzle);     });   break;    // etc... }   So the Bitbucket class uses the Guzzle client to make HTTP requests to the API. It will implement an interface that defines common methods, ie one to pull the user's email address.  I also figure I should mention that I'm using Socialite to authenticate with Bitbucket in this scenario."
PHP,3ascii,SuddenlyOutOfNoWhere,1 point,Tue Jun 23 17:26:30 2015 UTC,"I gotta say the ""$app"" container aspect of Laravel is not very well designed. It's essentially global vars in disguise, and like with global vars, it's best to put as few items (... if any, but that's longer to explain) in it as possible.  If you need a user-facing config file, where one can simply put ""bitbucket"" or ""github"" that's ok, but maybe you don't need to put in in $app.  If you can't avoid it, you can probably at least namespace all configuration keys under $app['config']['team_host'] so there's less chance one of your config keys might conflict with a service name later on.  Other than this, as I mentioned above: switch, hashmap or other way, picking one of several classes (including at runtime) to implement a given interface / contract as a dependency is common and a good practice."
PHP,3ascii,baileylo,1 point,Tue Jun 23 17:37:18 2015 UTC,"Good call! I actually do have it namespaced in the actual code I've written, but I appreciate the feedback.  Do you have any suggestions as to alternative ways I could do this?"
PHP,3ascii,baileylo,1 point,Tue Jun 23 17:39:28 2015 UTC,"A web framework doesn't have to be hard-coupled to a container like Laravel is. Showing web pages and composing dependencies are two distinct concerns and mixing them causes issues like I mentioned above.  The trouble is that if you decide to not use $app's container, you'd be fighting Laravel at every step. There are ways to do it but it's a long topic.  The pragmatic alternative is like I said - keep the number of objects in $app small. And to add... keep your services and business logic separate from the framework. A web framework should only ever touch controllers and templates.  EDIT: BTW, I might have forgotten to mention Laravel fans don't like me much."
PHP,3ascii,baileylo,1 point,Wed Jun 24 05:25:32 2015 UTC,"Haha, I'm not particularly married to Laravel so that's alright by me. Thanks for the food for thought."
PHP,3ascii,baileylo,1 point,Wed Jun 24 16:03:25 2015 UTC,You should use an interface which defines. Your abstract class may implement some parts of your interface. Others can be implemented in the actual implementation of github class or alike.
PHP,3ascii,baileylo,1 point,Tue Jun 23 06:32:24 2015 UTC,"Ok, thanks for the tip. Am I wrong in assuming that this is so the classes can be substituted more easily?"
PHP,3ascii,cundd,1 point,Tue Jun 23 17:17:30 2015 UTC,"Yes, you are right. Using interfaces covers substitution. Look at Google for interfaces and factory patterns to learn about the concepts."
PHP,3ascii,anlutro,1 point,Tue Jun 23 21:12:17 2015 UTC,"Is it correct to use a switch statement in the service provider to determine which class to register?   I think there are better ways than using a switch statement.   The abstract class is responsible for instantiating a Guzzle client   The guzzle client is a dependency and should be injected in.  Something similar to this is how I might do it:  <?php  class SomeServiceProvider extends ServiceProvider {     public function register()     {         $this->app->bind('github', function () {             return new GitHub(new GuzzleHttp\Client());         });          $this->app->bind('bitbucket', function () {             return new BitBucket(new GuzzleHttp\Client())         });          $this->app->bind(GitServer::class, $this->app->config->get('something.gitserver'));     } }   This obviously copied after Laravel, but whatever."
PHP,3ascii,anlutro,1 point,Tue Jun 23 05:25:47 2015 UTC,"I think there are better ways than using a switch statement.   Do any ideas come to mind? Thanks for the tip on dependency injection - that does make sense now that I think about it!  Would it make sense to register that dependency in the same service provider, or should I separate it into another one?"
PHP,3aqmgu,trollfromtn,4,Mon Jun 22 18:41:11 2015 UTC,"At my current job we deal with HIPAA and privacy-minded clients who prohibit us from using github or bitbucket.  What we've done instead of set up self-hosted Stash instances so we meet all our contractual requirements while also keeping the benefits of a mature code hosting platform.  You can go that route, or use something else like gitlab, gitorious, etc. Or, hell, you can just have a plain git repo on a private server if you're not working with a 3+ developer team.  Github and Bitbucket haven't had any security breaches that I am aware of. Set up 2fa and you should be golden, unless either one of them get hacked. But then, what if gmail gets hacked? Dropbox? You have to place a certain amount of faith in this 3rd party services to use the, right?"
PHP,3aqmgu,jtreminio,1 point,Mon Jun 22 18:50:25 2015 UTC,These are all good options.  Thank you for the suggestions.  This particular client does deal with HIPAA but thankfully the projects I'm involved with don't deal with any customer data.  I'm going to look into Gitlab as I've heard great things.
PHP,3aqmgu,shampine,5,Mon Jun 22 19:02:14 2015 UTC,Gitlab is fantastic and since the switch from self compiled to omnibus you can have it setup and running on a self hosted server in less than 5 minutes. I highly recommend it.  We run ours on a 8GB Digital Ocean VPS with over 300 repos.
PHP,3aqmgu,Firehed,3,Mon Jun 22 20:44:35 2015 UTC,I'd suggest taking a look at Phabricator as well - it's a self-host able project like Gitlab that came out of Facebook. It has good tooling for code reviews and such; all the components integrate with each other nicely.
PHP,3aqmgu,gripejones,1 point,Mon Jun 22 23:58:17 2015 UTC,I also deal with HIPAA. I appreciate your comments. I've just being using a local repository for the time being.
PHP,3aqmgu,Xanza,0,Mon Jun 22 20:43:19 2015 UTC,I've also worked with clients that are scared for HIPAA violations. My solution was a simple in-house server that ran Git as a service behind a router. They seem to be pretty happy with it.
PHP,3aqmgu,sdgoij,3,Tue Jun 23 04:50:33 2015 UTC,"It's the same as an email provider, so it depends how much YOU and/or YOUR CLIENT trust the 3rd party providing the service (private repos). I think, in general, Github or Bitbucket (and other private repository providers) are trusted parties. They don't care (=wont look at your data/code) what you push there and should have (internal)policies to assure your data is not abused (stolen) by their employees. And they make sure your data is safe for uninvited preying eyes.  If you, or your client are still not sure, go for a self hosted solution like http://gogs.io/, https://github.com/takezoe/gitbucket or maybe https://about.gitlab.com/downloads/  Hope this helps."
PHP,3aqmgu,c12,2,Mon Jun 22 19:11:53 2015 UTC,At least with emails you can use digital signatures to sign outgoing emails and even encrypt them if the content requires it - so less trust needs to be given to the email service provider.  Also Github do seem to provide an enterprise solution which is essentially a self hosted version of github for a price for those who love the features of github but wish to retain 100% control over how and where the data is stored.
PHP,3aqmgu,DrummerOfFenrir,1 point,Tue Jun 23 08:21:02 2015 UTC,Helps a lot.  I appreciate it!
PHP,3aqmgu,DrummerOfFenrir,2,Mon Jun 22 19:44:48 2015 UTC,"If you have $5 a month, digital ocean has ready to go gitlab instances, you can fire it up in minutes."
PHP,3aqmgu,ralfTn,2,Tue Jun 23 02:24:21 2015 UTC,Awesome.. I'm already using digital ocean but didn't realize they had these gitlab instances.  Thanks
PHP,3aqmgu,detheridge02,2,Thu Jun 25 20:03:59 2015 UTC,"Yup, I already had DO also, and when I found out, I cancelled my private github subscription and moved all my personal stuff into my gitlab. It's pretty awesome."
PHP,3arx4m,mrMuffins_,1 point,Tue Jun 23 00:45:41 2015 UTC,"This is my first library, I'm open to suggestions!"
PHP,3apte0,Disgruntled__Goat,1 point,Mon Jun 22 15:00:11 2015 UTC,"Can I propose that instead of this fragile system of template decorators, you maybe just have the plugins be widgets (simple functions, even) which people paste into their template.  Of course I don't have enough context to say if it's a good idea, but hardcoding template chunks as methods and overriding them in other classes also doesn't seem like a good idea out of context."
PHP,3apte0,simensen,1 point,Mon Jun 22 16:22:21 2015 UTC,"I'm not sure where you were using eval before, but I don't see any reason why you would need to use eval. Yes, one downside of the decorator pattern is that you have to implement all of the methods, but there are ways around that. For example, you can create a passthru implementation that just proxies everything, and then extend that (in my example, I called it ThemePlugin).  interface Theme {     public function header();     public function body();     public function footer(); }  class BaseTheme implements Theme {     public function header()     {         echo '<header>'.$this->sitename.'</header>';     }      public function body()     {         echo '<main>'.$this->content.'</main>';     }      public function footer()     {         echo '<footer>'.$this->footer.'</footer>';     } }  abstract ThemePlugin implements Theme {     private $theme;     public function __construct(Theme $theme)     {         $this->theme = $theme;     }     protected function getTheme()     {         return $this->theme;     }     public function header()     {         $this->theme->header();     }      public function body()     {         $this->theme->body();     }      public function footer()     {         $this->theme->footer();     } }  class HeaderPlugin extends ThemePlugin {     private $sitename;     public function __construct($sitename)     {         $this->sitename = $sitename;     }     public function header()     {         echo '<header><img src=""..."">'.$this->sitename.'</header>';     } }  class FooterPlugin extends ThemePlugin {     public function footer()     {         echo '<div>Twitter/Facebook buttons</div>';         parent::footer();     } }  function applyPlugin(Theme $theme, $pluginClass) {     if (is_callable($pluginClass)) {         // If the plugin class is actually a callable,         // we should pass the theme to the callable         // and the callable is expected to return         // a Theme instance.         return $pluginClass($theme);     }      // In the simple case, just pass in a class that     // accepts a Theme as its first constructor arg.     return new $pluginClass($theme); }  $theme = new BaseTheme();  $theme = applyPlugin(function (Theme $theme) {     // We are passed the theme we need to wrap. This     // let's us do things like send other args to     // the plugin we want to apply.     return new HeaderPlugin($theme, 'Awesome Site'); });  $theme = applyPlugin('FooterPlugin');  $theme->header(); $theme->body(); $theme->footer();"
PHP,3apte0,simensen,1 point,Mon Jun 22 16:23:34 2015 UTC,"I'm not following the logic of your applyPlugin function. You're calling it twice with different parameters. Were you supposed to pass $theme as the first parameter?  Also, does that let multiple plugins override the same function? Isn't the parent::footer() going to call through to ThemePlugin::footer() and not (for example) SecondFooterPlugin::footer() ?"
PHP,3apte0,Chippiewall,1 point,Mon Jun 22 17:01:33 2015 UTC,"Were you supposed to pass $theme as the first parameter?   Yeah, that was a bug, my bad. Should have been:  $theme = new BaseTheme();  $theme = applyPlugin($theme, function (Theme $theme) {     // We are passed the theme we need to wrap. This     // let's us do things like send other args to     // the plugin we want to apply.     return new HeaderPlugin($theme, 'Awesome Site'); });  $theme = applyPlugin($theme, 'FooterPlugin');  $theme->header(); $theme->body(); $theme->footer();    Also, does that let multiple plugins override the same function? Isn't the parent::footer() going to call through to ThemePlugin::footer() and not (for example) SecondFooterPlugin::footer() ?   Yes, each plugin plugin will be able to override whichever functions they want to. Any function not implemented by any plugin will fall through to the BaseTheme implementation."
PHP,3apte0,adrianmiu,1 point,Tue Jun 30 15:29:36 2015 UTC,"Yes, one downside of the decorator pattern is that you have to implement all of the methods, but there are ways around that.    cough __call() cough"
PHP,3apte0,dennisbirkholz,1 point,Mon Jun 22 19:00:11 2015 UTC,I suggest using decorators. I've build a library for these situations https://github.com/siriusphp/stratum It's still a WIP but I think the code is simple enough to understand the concept and build your system (or contribute to my library :) )
PHP,3apte0,scootstah,1 point,Mon Jun 22 18:39:04 2015 UTC,"I would create an interface for each possible override like the following:  interface HeaderPluginInterface {     function header($previousContent); }  interface BodyPluginInterface {     function body($previousContent); }  interface FooterPluginInterface {     function footer($previousContent); }   A plugin now implements only the methods it really changes. A plugin would then look like:  class FooterPlugin implements FooterPluginInterface {     public function footer($previousContent)     {         return '<div>Special footer text</div>' . $previousContent;     } }   You then just register all plugins in a big list of plugins and work thru them until your output is created:  $plugins = []; $plugins[] = new BasicTheme(); $plugins[] = new HeaderPlugin(); $plugins[] = new BodyPlugin(); $plugins[] = new FooterPlugin();  $headerContent = 'Page title'; $bodyContent = 'Simple default body'; $footerContent = 'Footer';  foreach ($plugins as $plugin) {     if ($plugin instanceof HeaderPluginInterface) {         $headerContent = $plugin->header($headerContent);     }     ... }  echo $headerContent;   I think you get the idea. You may want to pass an additional parameter to the plugin functions that holds all current page context, wrap all that stuff in a class, ..."
PHP,3apte0,scootstah,1 point,Tue Jun 23 21:38:39 2015 UTC,"Someone suggested the Decorator pattern before but I don't think that offers the flexibility you have here, where you can completely replace a function (HeaderPlugin) as well as simply adding a bit of code (FooterPlugin).   Actually, that is more-or-less the whole point of the Decorator pattern. Your second code sample is a basic example of the Decorator pattern.  Have you looked at a template engine, such as Twig? Twig supports inheritance and block overrides out of the box, so you should be able to achieve this kind of system fairly easily."
PHP,3apte0,scootstah,1 point,Mon Jun 22 16:02:44 2015 UTC,"Actually, that is more-or-less the whole point of the Decorator pattern. Your second code sample is a basic example of the Decorator pattern.   So how would I do this without eval? If you have two separate plugins how can you make both extended methods run?   Have you looked at a template engine, such as Twig? Twig supports inheritance and block overrides out of the box, so you should be able to achieve this kind of system fairly easily.   I've used Twig before but I'm not sure if it would help here. How would you actually load the override (and multiple overrides)? Can you just load a bunch of them in sequence and have them override the previous one?"
PHP,3apte0,scootstah,1 point,Mon Jun 22 16:17:48 2015 UTC,"If you have two separate plugins how can you make both extended methods run?   Do you mean multiple plugins that each extend the same component, such as header? In that case you need to come up with some logic for how you want to handle that. That's specific to your use case. You could add the outputs together, add the outputs in the order that the plugins were registered, only take the final output, etc.  Twig allows you to easily set a parent template and then override the blocks in child templates. But, you still end up with the same logic problem - what do you do if two templates override the same block?"
PHP,3ar4xi,upAndComingDev,3,Mon Jun 22 20:57:20 2015 UTC,"In my experience, interviewers vary wildly.  You never know what the hell they're going to throw at you.  The big growing trend I've heard of is FizzBuzz.  There's a debate about how good a question that is, but regardless, there's a potential you'll encounter it.  Honestly, it's pretty simple, and I'd be psyched if I ever got it.  But Google it and be familiar just in case."
PHP,3ar4xi,gizram84,1 point,Mon Jun 22 22:57:10 2015 UTC,"I had a FizzBuzz interview. I told him I'd heard of it, and he upped the ante with FizzBuzzPop."
PHP,3ar4xi,omniac,2,Tue Jun 23 00:58:19 2015 UTC,"Wait.. Are you serious? If he knows you understand fizzbuzz, and he tests you on fizzbuzzpop, the only thing you're being tested on is additional multiplication.."
PHP,3ar4xi,gizram84,1 point,Tue Jun 23 01:28:44 2015 UTC,Yes but it does show that you actually understand fizzbuzz and aren't just memorizing it. Fizzbuzz and Fizzbuzzpop are not very hard because they test whether you can write simple functions not whether you are a good programmer.
PHP,3ar4xi,matart,1 point,Tue Jun 23 03:07:33 2015 UTC,And you might be surprised how many people fail on such a simple addition.  It is the difference between having memorized a solution and understanding the solution.
PHP,3ar4xi,sfc1971,2,Tue Jun 23 14:26:54 2015 UTC,"True..  I don't actually know what fizzbuzzpop is, but I assume it just adds an additional dividend to test.."
PHP,3ar4xi,gizram84,1 point,Tue Jun 23 14:31:59 2015 UTC,"It is. Just a way to make you think about what you wrote. Doesn't have to be an additional dividend test, could be any conditional.  One thing is that if I add more tests/conditions, some acceptable fizzbuzz solutions become complicated or at least ask for a more complex but more versatile solition.  One often used solution has you repeat the condition:  first you check the condition to see if you print the word, then you check it with the other conditions if you print the number instead (other option is to set a variable).  Now if I keep adding tests, repeating the tests becomes a lot of work and error prone... so maybe you need to have the tests in a function. What if I keep changing my mind about which tests should be active, maybe the list of test functions to call should be dynamic.  All simple follow up questions to test not if you are a good developer perse but just to see if you understand the basics of programming."
PHP,3ar4xi,sfc1971,1 point,Tue Jun 23 14:56:12 2015 UTC,"Yea, this is good stuff.  I like how it makes you think.  I'm going to use some of this in the future.  Thanks."
PHP,3ar4xi,gizram84,1 point,Tue Jun 23 14:59:50 2015 UTC,Your right. My first interview with fizzbuzz threw me for a loop because I thought there was more to it. Don't over think!
PHP,3ar4xi,rkaz246,3,Tue Jun 23 01:11:09 2015 UTC,"That tends to be what I look for in a Junior position too so I typically gear my questions that way. I'll come up with a sentence and ask them to construct a google query that would find the answer without using any of the words in the sentence.   I also like to know something they messed up, or could have done better, or some kind of bug and how it was resolved in their last project and what they did to fix it.   I get really excited if they tell me about how they learned something and what they did to test that instead of just taking some ones word for it. Like, maybe indexes in their SQL database. Did some one tell them ""Oh yeah just slap indexes on everything"" or did they actually run some before and after tests? How did they do that?  If there is some kind of casual talk at any point drawing attention to how you figured something out certainly can't hurt. If they do ask you a question you don't know the answer to ask them the answer after the interview when they ask if you have any questions. Also, yes ask them questions even if you don't have any. Ask about corporate culture or what they like to do for fun outside of work even.   Really just know your basics as well as you can and don't sweat too much of the larger stuff. If anyone expects you to have seen all the stuff you're most certainly going to see in your career in just 2 years you don't want to work for them anyways.   EDIT: Also don't get flustered if you don't know something, just be confident in what you do know and be aware there is a ton you don't know. Thats not a weakness, being aware of that is what allows you to grow and learn. They may simply keep asking questions until they reach the point you don't know the answer anymore."
PHP,3ar4xi,SilentEchoes,2,Mon Jun 22 21:21:25 2015 UTC,I'll come up with a sentence and ask them to construct a google query that would find the answer without using any of the words in the sentence.   What does this tell you about a candidate? How do you assess their ability to do the job based on this question?
PHP,3ar4xi,beatryder,5,Mon Jun 22 22:15:53 2015 UTC,Easy.  It shows how someone can think outside of the box to solve a problem.  Sometimes you need you need to phrase a question differently to get the best result.
PHP,3ar4xi,ehansen,2,Tue Jun 23 09:25:40 2015 UTC,"It tells you you won't have to handhold them through their education. Very important for adding juniors to a team, as non-motivated or self-help oriented candidates are a drain on your more productive team members."
PHP,3ar4xi,rszrama,2,Wed Jun 24 02:56:03 2015 UTC,"Every interviewer is different.  1) Don't be afraid to say ""I'm not sure, but I think I would start with X"" - This shows that you know what you don't know, and that you can think creatively on the spot to find a solution  2) Know some of the PHP gotchas. Google it, you'll find some. Like never use sizeof() or count() in a for(;;) loop unless you are changing the size of the array on the fly.  3) If the question seems like a trick question, it probably is, so ask for more information.  4) Ask for clarification if you have any doubts, even if you think it might be a stupid question.  5) If you're not sure the relevance of a question to the job. Ask. I once interviewed for a PHP job (at a big social media company, no not facebook), and the interviewer asked me to write a Fibonacci generator in Java, which I had just told him I had no professional experience with (I learned some in Uni, but never liked it)."
PHP,3ar4xi,beatryder,2,Mon Jun 22 22:14:05 2015 UTC,"The reason Fibonacci generator gets asked at interviews is to see how you think about caching. Fibonacci sequence by itself is pretty trivial, but the follow up is usually something like: ""Ok, now print me the Fibonacci sequence to the 8th, 12th, and 23rd digit"" and if your code doesn't cache, you'd be computing the first 8 digits in the sequence 3 times."
PHP,3ar4xi,chiisana,2,Tue Jun 23 04:01:57 2015 UTC,"That would be correct in most organizations, my (where I drive interviews) included. You are absolutely correct in that when I see that from a candidate, I debate whether or not that counts as a premature optimization, or doing something redundant.   However, the reason I listed and the follow up question comes directly from Facebook's technical interview prep course. I'd expect similar trains of thought from other major social media companies, where some of the algorithm could be hit hundreds of thousands of times per second, and such kind of micro optimizations could result in savings of racks full of equipment."
PHP,3ar4xi,chiisana,2,Tue Jun 23 06:55:32 2015 UTC,"Whoops... I accidentally deleted my comment up there :P  tl;dr For those reading the thread, I was saying choices like caching depend on performance requirements, constraints and use context, and when the interviewee isn't given those, you can't expect them to start guessing interviewer's intent out of thin air. Caching might even be premature optimization if nothing calls for it."
PHP,3ar4xi,applechuck,1 point,Tue Jun 23 08:15:18 2015 UTC,It really depends on the interviewer.  Some companies go with the terrible approach of asking you to solve problems that will never be faced. To prepare for that sign up on ODesk with a temporary email and do the PHP skills tests. ( EDIT: The ODesk tests are terrible but I've seen similar questions during interviews. )  Great companies will ask you to explain concepts or how certain tools fit with each other. The first phone interview is usually used to filter out potential candidates.  Be prepared to explain concepts behind REST and how they integrate with Laravel. I was once asked to code a PHP REST client for their API ( they already had one ) to see my thought process ( coding portion was limited to 1 hour ).
PHP,3amn9t,suphper,8,Sun Jun 21 18:48:32 2015 UTC,"I am sorry to see it fall from grace, but it got disrupted by github and a better freemium model and not using the BS download ads. So they kind of did it to themselves. Heck even Google couldn't compete with Google code."
PHP,3amn9t,rentnil,2,Sun Jun 21 23:27:13 2015 UTC,"Not only that, but the Git implementation leaves a lot to be desired, according to admins at the project I work with (Java-based)."
PHP,3amn9t,codercaleb,2,Mon Jun 22 02:40:29 2015 UTC,Sourceforge on the web side is considerably slower and the user experience really has not improved that much recently.
PHP,3amn9t,rentnil,7,Mon Jun 22 15:18:56 2015 UTC,"They'll ""present third party offers only ... where it is explicitly approved by the project developer, or if the project is already bundling third party offers.""?  So the cynic in me thinks that this means they can keep making people download the malware they've already bundled with projects! Whatever though, the time to avoid SF was a long time ago, and there's definitely no reason to go back."
PHP,3amn9t,freosam,3,Sun Jun 21 23:26:16 2015 UTC,"Cynic?   ... or if the project is already bundling third party offers.   Dude, you just know how to read, that doesn't make you a cynic."
PHP,3amn9t,SolarBear,3,Mon Jun 22 13:16:14 2015 UTC,Codebase is missing in the list https://www.codebasehq.com/
PHP,3amn9t,gustix,1 point,Mon Jun 22 10:40:29 2015 UTC,"Nice list, thank you.  I'm mostly only aware of Github and Gitlab and I'm not tied to either... any personal recommandations of other services? Any killer features I should be aware of?"
PHP,3amn9t,SolarBear,3,Mon Jun 22 13:17:59 2015 UTC,"Bitbucket allows you to have free private repos whereas on github they come at a price. So I use Bitbucket for my private stuff (.dotfiles, .vim, .tmux, etc) and github for public repos."
PHP,3amn9t,bga9,1 point,Mon Jun 22 14:07:38 2015 UTC,"I just noticed this: http://i.imgur.com/hrzL9N2.png  I distinctively recall I was able to access them directly a few days ago when the 'MySQL at SF is hijacked' thread was happening. I'm guessing this is going to be one of the final nails in the coffin for SF, unless they really clean up their act, and somehow earn the community's trust back."
PHP,3amn9t,chiisana,-4,Tue Jun 23 03:55:11 2015 UTC,Ugh... My projects do not even come with installers.  Fuck all if I am going to transfer all of what I have to a new host on my amazing 2.5Mbps download and .14Mbps upload bandwidth.
PHP,3apl6y,bl_nk,3,Mon Jun 22 13:48:54 2015 UTC,"If it's working fine... Don't fix what isn't broken.  Now when you want to implement new features or change existing functions, this is a great time for refactoring. You can setup a test to validate the output before you do anything. Now you start your refactor/changeset. The unit test should tell you if you broke something. Rinse repeat. The more you do this, the more parts of your application gets covered. Start small and build out.  A good starting point is this video: http://verraes.net/2013/09/extract-till-you-drop/"
PHP,3apl6y,n0xie,2,Mon Jun 22 14:05:50 2015 UTC,"Thanks for the input, you see our problem is twofold, our team does not have experience writing tests and at the very least we're in search of an experienced tutor (which I believe I found already, we've already arranged a meeting) and the existing system has stability issues in its most complicated parts - when updates are made, something else breaks and we need to at least cover those places.   Again, however, we need experience which we don't have to refactor these parts correctly to be ready for testing and not bite off more than we can chew.   I will watch the lecture you linked, thanks again for pointing the way."
PHP,3apl6y,n0xie,2,Tue Jun 23 11:16:33 2015 UTC,"Well these 'breakage' points are excellent places to start adding unit tests. This is basically how we do bug fixing:   piece of code is giving output A where output B is expected add test that gives input that leads to output A and assert that the output is B test fails refactor/fix code test fails? repeat! test passes? you are done.   Now you have proven in code that you actually fixed the bug. Go to the next bug. Rinse repeat.   During this process you will encounter code that is hard(-er) to test. Usually this a red flag that your code is too coupled or too complex, or that it simply does too many things. Hard to test code is usually difficult code to reason about. So extract it into smaller pieces so that it's easier to reason about it. (this is what most of the lecture is about).   When you have a few tests this can be scary thing to refactor/rewrite entire portions of your application, but as your test coverage grows, this will become easier: you have regression tests in place to verify if you accidentally broke something somewhere.  Once you adopt this way of adding tests, your test coverage will grow organically, and will most likely automatically expose the most problematic areas of your application: no point in writing a bunch of tests for code that never changes or is working as expected. This means that the parts that are important or changes the most are well covered which is exactly what you are aiming for.  Remember what Fowler said:    Once a team is afraid to refactor to keep their code healthy they are on downward spiral with no pretty end."
PHP,3apl6y,tjdavenport,2,Tue Jun 23 11:36:32 2015 UTC,"This is beautiful advice, I'm already almost used to tutorials that assume that you already know what you're trying to learn, it's simple explanations like yours that are frustratingly rare in anything IT.  Have another gold, I really appreciate it!"
PHP,3apl6y,tjdavenport,1 point,Tue Jun 23 11:51:42 2015 UTC,"I've recently started implemented testing into several of our legacy projects so I can provide some insight here. The first thing you're going to need to do, obviously, is learn how to write unit tests. One thing we did was assign a single test per developer per week on simple helper classes that are easily testable. On Mondays we would share our implementations, discuss roadblocks that were encountered, etc. Once you and your team are comfortable writing simple tests you can start to write them with all of your new features and bug fixes.  I definitely wouldn't shoot for 90 - 100% test coverage just for the sake of high test coverage. Start slow. Take on small chunks at a time. Make a decision as a team to always test future development. You'll slowly see your coverage and confidence grow. If your code is truly written well, you won't need to refactor much if anything at all to start testing.  Edited in response to comments from idiot-with-opinion"
PHP,3apl6y,tjdavenport,3,Mon Jun 22 14:21:28 2015 UTC,"I'd like to point out that Test Driven Development doesn't mean just to have tests. So by adding tests on existing libraries, you're not learning TDD, you're just learning to write tests on existing libraries.  Not that I find TDD particularly useful for a lot of what web development is. There are more cases when TDD produces bad results than good ones. One case when it produces good results is writing data transform pipelines, parsers, compilers. Hmm, and that's about it.  But anyway, like I often like to say, don't use terms that you don't know the meaning of."
PHP,3apl6y,tjdavenport,1 point,Mon Jun 22 14:33:31 2015 UTC,I'm not at all suggesting to write tests for the sake of having tests. I'm suggesting that you start with simple classes so you can learn the basics before approaching complicated pieces. I certainly wouldn't want someone who doesn't understand assertions or fixtures writing tests for a compiler.
PHP,3apl6y,tjdavenport,3,Mon Jun 22 14:44:43 2015 UTC,"My point was, the flow of TDD is to write a test, then write the code testable by it. This prevents a developer from writing code which is untestable. Which brings its own set of issues, but I won't go there.  Practicing for this by writing tests for existing libraries is the exact opposite flow of that, and getting stuck on a piece of untestable (or hard to test) code is far more likely."
PHP,3apl6y,AlpineCoder,1 point,Mon Jun 22 14:58:33 2015 UTC,"I disagree with your opinion of what the flow of TDD is. You won't always have the luxury of writing tests for new code. In a lot of situations (such as the one described by OP) you'll be maintaining code that's already written. Obviously writing tests for these situations will be more difficult, but I don't think you can describe the flow of TDD as test -> code because of this. In my opinion, the 'flow' is to write tests so whatever code you're working with is easier to manage in the future. The end goal is the same regardless of when the tested code is created."
PHP,3an0m3,funkyfly,3,Sun Jun 21 20:44:36 2015 UTC,"Having checked them all out, here is the list of the ones that aren't just a recap of stuff you can read on blogs or probably already know:   Gordon Skinner - Hexagonal Architecture in DDD Jenny Wong - Integrating Communities Bastian Hoffmann - Bring your PHP application to the next level with React.JS Stephan Höchdorfer - The NoSQL Store everyone ignores: PostgreSQL   These are the really good ones. Others not so much ( just recapping stuff that has been recapped to death e.g. ""Building RESTful APIs with Laravel 5's Doc Block-based Controller Annotations"" is just recapping the tutorial for the most part )"
PHP,3an0m3,dracony,1 point,Mon Jun 22 12:58:48 2015 UTC,Thank you. And thanks for pointing out that my last name was actually butchered. Didn`t realize it :P
PHP,3an0m3,shochdoerfer,1 point,Tue Jun 23 05:25:45 2015 UTC,That's 32 videos totalling a tad over 26 hours. Have fun!
PHP,3anngq,rekryck,3,Mon Jun 22 00:10:09 2015 UTC,"I must be really fucking dumb, because I don't understand this.  In Laravel, you can send e-mails like this:  Mail::send('emails.welcome', $data, function ($message) {     $message->from('us@example.com', 'Laravel');      $message->to('foo@example.com')->cc('bar@example.com'); });   How the hell does the send method access $message if you don't return $message inside the anonymous function? I tried reading the code and it didn't help."
PHP,3anngq,pyr0t3chnician,7,Mon Jun 22 12:44:02 2015 UTC,"Nah, not dumb, it is just how anonymous functions with objects work.  The Mail::send function creates a message object, and then executes the callback function.  The function adds the properties to the object you passed in.  Try this example:  $foo = new StdClass(); $foo->numbers = '123'; $myFunc = function ($bar){     $bar->letters ='abc'; };  echo $foo->numbers.""\n""; $myFunc($foo); echo $foo->letters.""\n"";   The output is what you would expect (and what Laravel does): '123' and 'abc'.  Now this is where it gets tricky:  $foo = 'bar'; $myFunc = function($v){     $v = 'foo'; }; echo $foo.""\n""; $myFunc($foo); echo $foo.""\n"";   This outputs ""bar bar"", not ""bar foo"".  It also does not work for arrays:  $foo = []; $myFunc = function($v){     $v[] = 'foo'; }; var_dump($foo).""\n""; $myFunc($foo); var_dump($foo).""\n"";   $foo = [""foo""=>""bar""]; $myFunc = function($v){     $v[""foo""] = 'foo'; }; var_dump($foo).""\n""; $myFunc($foo); var_dump($foo).""\n"";   Outputs empty array twice and array with foo=bar twice.  The only way to get it to work the same as objects is to pass a reference (function(&$v)) instead and then it would work the same."
PHP,3anngq,rekryck,2,Mon Jun 22 13:19:24 2015 UTC,"Alright, I finally get it. Thank you very much."
PHP,3anngq,zogot,4,Mon Jun 22 13:33:22 2015 UTC,"Simply: Objects are references.  You can pass an object into a function, have that function modify that object and without that function returning $object it'll correctly have the modifications.  See this: http://codepad.viper-7.com/Q6Ivcg  Read more here: http://stackoverflow.com/questions/2715026/are-php5-objects-passed-by-reference"
PHP,3anngq,rekryck,1 point,Mon Jun 22 13:08:59 2015 UTC,"But in that example, where exactly would $message be instantiated to be passed as a parameter like that?"
PHP,3anngq,pyr0t3chnician,2,Mon Jun 22 13:21:45 2015 UTC,"Source:  public function send($view, array $data, $callback) {     $this->forceReconnection();     // First we need to parse the view, which could either be a string or an array     // containing both an HTML and plain text versions of the view which should     // be used when sending an e-mail. We will extract both of them out here.     list($view, $plain, $raw) = $this->parseView($view);     $data['message'] = $message = $this->createMessage();     $this->callMessageBuilder($callback, $message);     // Once we have retrieved the view content for the e-mail we will set the body     // of this message using the HTML type, which will provide a simple wrapper     // to creating view based emails that are able to receive arrays of data.     $this->addContent($message, $view, $plain, $raw, $data);     if (isset($this->to['address'])) {         $message->to($this->to['address'], $this->to['name'], true);     }     $message = $message->getSwiftMessage();     return $this->sendSwiftMessage($message); }   The line $data['message'] = $message = $this->createMessage(); is where it is initialized."
PHP,3anngq,Wanicode,1 point,Mon Jun 22 13:25:49 2015 UTC,"For this you don't have to understand Laravel in particular, but object oriented programming with php in general.  Objects are always(?) passed by reference.   So you just change the $message object in the callback-function and the changes stay, even outside of the functions scope.  Search google for ""php object reference"" for more information on this matter.  Hope i could help."
PHP,3anngq,whowanna,1 point,Mon Jun 22 13:09:29 2015 UTC,"Not always. According to the documentation, function arguments can be passed by value (default), by reference, or default arguments."
PHP,3anngq,frazzlet,3,Mon Jun 22 15:00:14 2015 UTC,"Pass by value is the default for non-objects, but objects are always passed by reference."
PHP,3anngq,whowanna,1 point,Mon Jun 22 18:12:44 2015 UTC,"Of course I'm wrong. But also in the documentation it says:   One of the key-points of PHP 5 OOP that is often mentioned is that ""objects are passed by references by default"". This is not completely true. This section rectifies that general thought using some examples."
PHP,3anngq,-mung-,2,Mon Jun 22 20:19:41 2015 UTC,Is there any good reason why the guy hosting a site I work on ignores my requests to stick the php error log somewhere where I can clear it myself? Nginx server. It used to be apache so I was able to circumvent the problem with an .htaccess file. Now I can't.
PHP,3anngq,drewinthehead,5,Mon Jun 22 06:09:45 2015 UTC,"Why do you need to clear it? Presuming there's only one log, this could result in the loss of important logging information from the host's point of view.  Maybe a good compromise would be to have the log rotate more frequently."
PHP,3anngq,drewinthehead,1 point,Mon Jun 22 07:20:13 2015 UTC,"The host needing to see application-level errors (which PHP errors are) assumes they plan to do something about it. Except, it's none of their business to do something about it, but whoever has uploaded and is managing the code."
PHP,3anngq,hophacker,2,Mon Jun 22 15:06:21 2015 UTC,Until that customer contacts the host's helpdesk to ask why their server isn't working. At that point the host will want to look at the logs to be able to demonstrate that it's the customer's code and not the hosting configuration at fault.
PHP,3anngq,mattvb91,2,Mon Jun 22 16:21:40 2015 UTC,"It's important to get the chain of responsibility right here:   The customer contacts the developer.  Only then, if there's a problem, the developer contacts the host.   Having errors in the log doesn't indemnify the host anyway, because the host can screw up the PHP config and that'll produce errors in the log. Only the developer knows who messed up, because they're tracking the app state and its dependencies."
PHP,3anngq,pyr0t3chnician,2,Mon Jun 22 16:25:01 2015 UTC,"You can change the location of the log file at runtime with:  ini_set('error_log', $filepath)"
PHP,3anngq,relyon,2,Mon Jun 22 15:04:07 2015 UTC,"No need to clear it out, tail -f is your friend!"
PHP,3anngq,relyon,1 point,Mon Jun 22 19:59:24 2015 UTC,"Recently started working on a project with a smaller team who were not sure about which framework to use and left that decision until now. Their current approach is MVA (Model View Action?!) over MVC due to it being simpler?   MVC you have a controller with all the actions contained within it and then view files relating to each action. Their MVA approach consists of EACH action being inside its own class WITHIN the view folder?! Does anyone have some links to MVA approach that I could read up on? I cant find much on it?  So for example in their MVA approach if they have a ""User"" object. Their view directory would contain dedicated directories for each action (edit, add, delete). Inside that would be the actual action.php class AND the view.php file?   Its actually confusing typing this out. They don't use a ""controller"" directory at all. Their controllers/action are kept within the view folder.  Has anyone come across this before?"
PHP,3anngq,asdrubalivan,2,Mon Jun 22 09:10:47 2015 UTC,"It sounds like it could be called the MVP design pattern (Model View Presenter).  Basically the Model is used to retrieve data from the database, the Presenter interacts with the model and converts data for the View to display.  The View would have no interaction with the Model, only the Presenter.  BUT all that being said, it sounds like there would be a lot of repeated code and very large class sizes doing it with each ""Action"" split out into individual files, but I am just guessing as I haven't used that design pattern before.  Ultimately, if it works and you understand it, just run with it."
PHP,3anngq,asdrubalivan,1 point,Mon Jun 22 12:52:00 2015 UTC,"Making a validation library where each validator is a own class, how can I manage there dependencies without having to couple a dependency injection container?"
PHP,3anngq,ec_joe,1 point,Mon Jun 22 10:34:32 2015 UTC,"A factory.  BTW, what kind of dependencies would a validator have?"
PHP,3anngq,evohans,1 point,Mon Jun 22 15:17:08 2015 UTC,"Could be a database. Well, I guess I could have a factory that resolves anonymous factories and if no dependencies , instantiate a class."
PHP,3anngq,ec_joe,1 point,Mon Jun 22 15:58:38 2015 UTC,"You can create a reusable factory interface without specifying the constructor (typically constructors shouldn't be in an interface).  Then your concrete factory can implement this interface, and have a constructor taking in any dependencies you need.  Then only the concrete factory will be coupled to your DI container or whatever you have, and not the validators.  Every validator type gets a method (say in Oprah's voice).  $validators->user() $validators->post() etc. Where $validators is the factory.  I guess it might help to give more examples of what your validators validate and what is in the scope of a reusable library and what's in the scope of a project-specific dependencies and validations."
PHP,3anngq,evohans,1 point,Mon Jun 22 16:03:57 2015 UTC,"Reactive programming with PHP (Similar to Meteor framework), is it currently possible?"
PHP,3anngq,ec_joe,1 point,Mon Jun 22 12:35:57 2015 UTC,"I'll assume you mean long-running event-publishing applications that push updates to the client, instead of making the clients poll.  It's possible, but it's not a very popular paradigm for PHP, so libraries like React.PHP just aren't as mature as they could be.  Depending on your app and existing codebase, I'd offer different solutions. So what are you doing that you believe needs reactive programming?"
PHP,3anngq,dlegatt,1 point,Mon Jun 22 15:22:24 2015 UTC,"No, I'm not really developing an app that needs this currently using PHP. But, it would be interesting to see if such thing is possible. I will check out React PHP though"
PHP,3anngq,Almsgiver,3,Mon Jun 22 15:30:51 2015 UTC,"In this case I'll just add PHP can be part of a larger ecosystem, so you can have some code in PHP and you can have a push event-based system written in Node.JS (for ex.). I don't see it as an either-or proposition.   That said React.PHP can handle a lot of tasks you throw at it, the issue is that it doesn't have a large enough community to create a rich asynchronous library ecosystem around it to match what PHP has in terms of synchronous libraries. Some components are present, many lacking."
PHP,3anngq,dlegatt,1 point,Mon Jun 22 15:34:02 2015 UTC,"How would you go about building an ecommerce site (not a simple t-shirt store like most ""demo"" sites)?  I am struggling to find a system (similar to magento for example) which is not riddled with bugs & hacks to get around things that should be there in the first place."
PHP,3anngq,omarito2412,1 point,Mon Jun 22 14:34:02 2015 UTC,"Building an ecommerce site vs. using ecommerce packaged software, both are two different things.  Are you looking for a pre-built CMS?  Or do you want to learn how to build one from scratch.  I assume you're looking for a CMS, and OpenCart does a pretty good job, however I'm quite fond of 3dcart"
PHP,3anngq,anlutro,1 point,Mon Jun 22 15:05:26 2015 UTC,"Want a CMS really. Something that is easy enough for a client to understand...  Pretty much considered openCart a write off because... it's free.   What is the templating like? Is it OOP?  Support is something I'd love to have, pretty sure the main dev is a massive dick to everyone.  Last I looked seemed pretty old fashioned back end (not that it is really an issue).  Might look into that further though. See what's going now.  3dcart seems to be paid monthly for hosting, not really something I am interested in."
PHP,3anngq,omarito2412,1 point,Mon Jun 22 15:51:45 2015 UTC,You can be one of those guys and just use Wordpress + WooCommerce haha.
PHP,3anngq,anlutro,1 point,Mon Jun 22 15:54:12 2015 UTC,Oh god no
PHP,3anngq,omarito2412,1 point,Tue Jun 23 07:11:23 2015 UTC,"Trying to use phpseclib to replace the SSH2 dll on my server so i can move to php 5.6 and up.  I use SSH to log into Sonicwall firewalls and export configuration files.    Logging in via SSH isnt like remoting to a linux box.  Putty, for instance, asks for a username when you first connect, but the sonicwall ignores that, shows its welcome banner, and then asks for a username and password.    I am able to connect currently using the following code:  $connection = ssh2_connect($host); ssh2_auth_none($connection,$user); $shell = ssh2_shell($connection,'vt102',null,80,40,SSH2_TERM_UNIT_CHARS); fwrite($shell, $user.""\n""); fwrite($shell, $pass.""\n""); // etc   I tried the following with phpseclib:  $ssh = new \Net_SSH2('172.17.1.99'); $ssh->login(""admin""); $ssh->read('User:'); $ssh->write('admin'); $ssh->read('Password:'); $ssh->write('password');   But something is getting hung up and i get nothing until my execution timeout hits."
PHP,3anngq,webboy89860,1 point,Mon Jun 22 20:56:09 2015 UTC,"In the example they have a newline after the username and password, have you tried that?  http://phpseclib.sourceforge.net/ssh/auth.html#noauth"
PHP,3anngq,teuna,1 point,Tue Jun 23 07:30:24 2015 UTC,"Staring at my code so long i didnt even realize i was missing the \n, thanks!"
PHP,3anngq,webboy89860,1 point,Tue Jun 23 13:12:24 2015 UTC,"Laravel newbie here  In a little practice project I built a REST API using Laravel for an AngularJS SPA, anyway my app had a problem, Laravel takes all the routing and shows 404 according to its rules and I didn't want that. Found a solution on laracasts that did a Route::any and the route was {path?} It works but I don't understand this route, what does this match exactly? Thanks."
PHP,3anngq,wafflesareforever,1 point,Mon Jun 22 21:16:54 2015 UTC,"Laravel's router returns a 404 if there was no route found for the request. You (probably) added a route that matches all URLs and HTTP methods, thereby preventing a 404 from happening unless you manually do it."
PHP,3ap2ep,punani_tsunami,3,Mon Jun 22 10:03:50 2015 UTC,Remote development is overkill in this case I think. Have a look at DB Migration tools that should be what your after. So you would check in migrations into your vcs and when switching to another machine just pull in the changes and let your migration manager update your db structure.   Cant actually recommend any off the top of my head as ive always just written my own very simple migration managers that just consisted off up/down functions holding the raw sql changes.
PHP,3ap2ep,mattvb91,3,Mon Jun 22 10:23:40 2015 UTC,"Not used it myself yet, but was planning on using https://phinx.org/"
PHP,3ap2ep,irphunky,1 point,Mon Jun 22 11:14:55 2015 UTC,That definitely looks very interesting! Will have a look into this too.
PHP,3ap2ep,mattvb91,1 point,Mon Jun 22 14:07:36 2015 UTC,Phinx is awesome for database migrations.  For test data we use a custom fixture generator coupled with a phinx + phpunit testing environment.
PHP,3ap2ep,applechuck,3,Mon Jun 22 20:58:54 2015 UTC,Vagrantttttttttttttttt
PHP,3ap2ep,geggleto,1 point,Tue Jun 23 14:10:21 2015 UTC,"If one of your machines is a laptop then using VMWare / VirtualBox is very suitable for this. Run the VM on your laptop, and then get a new IP address from your other site when you switch locations. I work like this - desktop in office, desktop at home, laptop stays the same throughout. I also use Gitlab to make switching between desktops as painless as possible."
PHP,3ap005,foolandhismoney,5,Mon Jun 22 09:26:18 2015 UTC,"Install and setup times have to be very fast these days to be competitive....   Really, I mean really ?   That does not make sense; Next to the development time of anything worth deploying, installation time is totally insignificant, always.  Seriously, don't deploy anything using the built-in webserver.   If zero configuration is what is required by the client, then it's your job to strive to achieve it, but don't achieve it by using substandard software, it will bite you on the face."
PHP,3ap005,krakjoe,-3,Mon Jun 22 13:30:07 2015 UTC,Did you miss the bit where I said an Enterprise product?
PHP,3ap005,Jonny_Axehandle,1 point,Mon Jun 22 14:24:39 2015 UTC,"That's a meaningless buzzword. wait a tic:   Question was for an Enterprise product, not a public web page. 5-20 users would be max load in production   Ok in that context I guess it makes sense, though ""Intranet"" would be more accurate."
PHP,3ap005,BubuX,1 point,Mon Jun 22 19:15:28 2015 UTC,Yea and no. Most enterprise products are offered as cloud solutions as as well on-premise these days.
PHP,3ap005,liamwong,2,Tue Jun 23 11:19:15 2015 UTC,"You might want to look into containers such as Vagrant, Docker or classic virtual machines. That's what I would do.  Don't quote me on this but if you have something really small you might get away with PHP's built-in server and SQLite which is bundled in PHP."
PHP,3ap005,vimishor,1 point,Mon Jun 22 09:39:41 2015 UTC,"I would probably say 5-20 simultaneous web users would be normal. Would PHP's be limited only by load, or are there some missing features I should be worried about?"
PHP,3ap005,BubuX,1 point,Mon Jun 22 14:29:05 2015 UTC,at this level you should worried about your IQ level bro
PHP,3ap005,vimishor,2,Tue Jun 23 09:01:35 2015 UTC,"Its funny, you can really tell the seniority of developers in this thread. Two people cant comprehend that time-to-value might be key for an enterprise products. I guess all they know are bespoke website requirements, and cant conceive that product requirements might differ.  Two other people gave me enough keywords to search on to find some technical options.  I decided to look at Silverstripe + SQLite and NGinx to deliver a PHP front end of a enterprise product as an alternative to a Java stack."
PHP,3ap005,malkusch,1 point,Tue Jun 23 11:29:01 2015 UTC,You might want to look into containers such as Vagrant [...]   Since when ?
PHP,3ap005,BlueScreenJunky,1 point,Mon Jun 22 14:37:39 2015 UTC,"""Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team."" If this doesn't look like a container of some sorts then I can't help you. Discussing personal interpretations is pointless imho."
PHP,3ap005,malkusch,2,Thu Jun 25 09:46:03 2015 UTC,"When you will take the time to understand how vagrant works (even at a high-level), you will see that it is just a high-level wrapper for different virtualization software."
PHP,3ap005,__constructor,2,Thu Jun 25 10:23:03 2015 UTC,Is there any CMS or framework that comes with an integrated web sever   php -S   and DB that is lightening quick to install   SQLite?
PHP,3ap005,__constructor,2,Mon Jun 22 09:59:17 2015 UTC,"+1 for SQLite  I'm not so sure about php -S though, it's not really meant to be used in production, and you might run into performance issues if the service is to be accessed by a lot of users simultaneously."
PHP,3ap005,drrck2403,1 point,Mon Jun 22 11:36:16 2015 UTC,"I'm not so sure about php -S though, it's not really meant to be used in production   I understood OP's question was about a development environment. I totally agree that php is nothing for production."
PHP,3ap005,drrck2403,1 point,Mon Jun 22 12:25:22 2015 UTC,"Question was for an Enterprise product, not a public web page. 5-20 users would be max load in production"
PHP,3ap005,drrck2403,1 point,Mon Jun 22 14:30:46 2015 UTC,"I'd recommend LightHTTPD and SQLite if sheer install speed is what you're looking for.  You're getting a lot of weird responses here because you weren't very specific about why you need this particular setup, and without reading all the comments where you've explained so far, it sounds really questionable. Even after reading them, and understanding where you're coming from, it still sounds ill-advised.  I really don't think you understand your market. I've been privvy to a lot of small-business metrics in my position, and ease of setup for web properties in general is most often rated as incredibly low importance. Unless you're looking at a business of 2-3 people, most places are going to have either a contractor or in-house IT to do their software setups."
PHP,3akqsb,idunnomyusername,27,Sun Jun 21 03:59:32 2015 UTC,"I'm gonna be slightly OT here (and yet not): does anyone notice the whole way PHP is handled has become a lot more mature in recent couple of years?  We get fast releases with sane features, the worst legacy stuff is carefully deprecated and removed.  And there are also all the ""little things"", like PHP.net getting a revamp so it doesn't look like ass (and recently the same happened with Packagist), and this clean presentation of supported versions and the roadmap ahead.  Maybe it's the sobering effect of PHP6's failure and competition from HHVM that did this, I don't know. But I like it.  PHP doesn't feel like a ghetto anymore."
PHP,3akqsb,justaphpguy,2,Sun Jun 21 10:20:01 2015 UTC,"I do.  A few more years ago I almost gave up PHP. But somehow there was a turning tide which gave me back my faith. One of those things definitely is composer; pear was such an abomination I'm happy someone proved we aren't stuck with it.  But otoh, at least for me, it's not about just PHP anymore. My stack uses technologies where best fit, NodeJS one of them too.  It's incredible how one can benefit from knowing multiple ecosystems.  And I'm glad PHP is one of them.  Yet, it doesn't feel to me that PHP is leading in some way. It's still catching up (albeit the gap is getting smaller) and most of the ecosystem is learnt from other languages (python,  ruby, java, etc.). Nothing bad per see but I couldn't point to a single technical thing which I consider unique and innovative in PHP compared against others."
PHP,3akqsb,mellett68,2,Sun Jun 21 13:53:55 2015 UTC,"I agree, it feels less lolphp and more a 'proper' language for developing in.   My main criticism is that it's taken too long to get around to this way of thinking which puts PHP at a disadvantage to other modern web languages.  I'm grateful to the people making efforts to improve the language with proposals and new tooling, since I'm stuck doing PHP for a living, at least it can be a bit bearable this way."
PHP,3akqsb,amcsi,1 point,Sun Jun 21 14:48:58 2015 UTC,"Couldn't it be that ever since they moved to Git, it's become a lot more easy to contribute code to the PHP project?"
PHP,3akqsb,drewinthehead,1 point,Mon Jun 22 14:54:30 2015 UTC,Good point.
PHP,3akqsb,ultio,10,Mon Jun 22 14:56:22 2015 UTC,"The other big implication hidden in this is that PHP 5.4 hits EOL in two months.  We tend to support the most recently EOL'd version as our minimum requirement (self hosted PHP CMS) so that means we get to bump to a minimum of 5.4 - in theory. We'll have a take a look at the current state of shared hosting, but end-of-lifing is one of the most helpful tools in getting people to update."
PHP,3akqsb,mrbarry1024,3,Sun Jun 21 09:28:29 2015 UTC,"Plenty of my customers are still running on PHP 5.3 with the post-EOL updates from Canonical which will continue to be provided until 2019 (!!). It's very expensive and risky to upgrade PHP for very large projects when everything works fine and general security through unofficial updates can be ensured. I am sure the same will be the case with PHP 5.4, which will receive unofficial support until 2020. It's not a situation I personally like, but companies really hate risks."
PHP,3akqsb,silentk446,3,Sun Jun 21 13:05:45 2015 UTC,Our Web host had to be asked multiple times to update our php. The best they could upgrade us to was 5.4.   We were on 5.2 and this was last month.
PHP,3akqsb,mrbarry1024,1 point,Sun Jun 21 16:58:56 2015 UTC,"No offense, but why the hell are you still with such a shitty host? Any decent host should either:  A) Allow you to select from a range of PHP versions per site - this is possible on shared hosting) B) Offered to move you to another of their servers, running an up to date version of PHP.  The fact they did neither screams shitty GoDaddy/BlueHost/JustHost/HostGator type of hosting companies."
PHP,3akqsb,destraht,1 point,Mon Jun 22 12:33:17 2015 UTC,"None taken, but unfortunately it's not my decision."
PHP,3akqsb,dean_c,2,Mon Jun 22 15:00:35 2015 UTC,Maybe all of these distros should put a few bits together and have official PHP extended longer.
PHP,3akqsb,silentk446,1 point,Sun Jun 21 16:07:55 2015 UTC,Don't most of the major nix distributions back port fixes for EOL PHP? We recently encountered a server running 5.3.x which is now EOL but emailing the sysadmin he said that Debian is back porting security fixes so nothing to worry about.
PHP,3akqsb,dean_c,1 point,Sun Jun 21 14:05:20 2015 UTC,"They do in some cases. Debian is doing so for 5.3, however it's got a few quirks along with it."
PHP,3akqsb,rydan,1 point,Mon Jun 22 12:37:13 2015 UTC,What quirks?
PHP,3akqsb,sarciszewski,7,Mon Jun 22 13:16:25 2015 UTC,But what about Ubuntu 14.04 LTS?
PHP,3akqsb,malkusch,4,Sun Jun 21 10:21:11 2015 UTC,"Hooray! Now only 5.6 (and, soon, 7.0) will be actively supported."
PHP,3akqsb,sarciszewski,6,Sun Jun 21 08:27:29 2015 UTC,And probably in 10 years the users might also want to start using PHP-5.6 http://w3techs.com/technologies/details/pl-php/5/all
PHP,3akqsb,maetthu,7,Sun Jun 21 08:57:48 2015 UTC,"If WordPress, CodeIgniter, etc. all committed to keeping up with supported versions of PHP and pressuring shared hosting providers to do the right thing for their customers, this would be less of a problem.  (As for everyone else who's running insecure versions of PHP, I say, ""Screw 'em, let them get pwned."" Natural selection, etc.)"
PHP,3akqsb,jlablah,10,Sun Jun 21 09:52:46 2015 UTC,I have the feeling that PHP7 will be suspiciously quickly adopted by shared hosting providers.  Hint: handle twice as many sites on the same amount of hardware.
PHP,3akqsb,sarciszewski,2,Sun Jun 21 10:34:51 2015 UTC,"I don't think adaption rate will be influenced by that. It mainly depends on the support of the distributions (most of which usually lag behind dramatically) bcz having bleeding edge versions is usually too high a risk for such a low-margin business like shared hosting. It also depends on how many customers you will piss off bcz their 10-year old CMS the son of a friend once coded in PHP4 won't work anymore or if the company sells additional services for more demanding customers which actually require a bleeding edge environment. Those shared hosting providers who offer a selection of PHP versions will probably add PHP 7 to the list of available versions, but I don't think the PHP version necrophilia of the vast majority will change anytime soon."
PHP,3akqsb,jlablah,1 point,Sun Jun 21 14:56:49 2015 UTC,PHP 5.5 was released 2 years ago. That's a very short time frame. 5 years minimum.
PHP,3akqsb,sarciszewski,6,Sun Jun 21 13:03:34 2015 UTC,PHP 5.5 was released 2 years ago. That's a very short time frame. 5 years minimum.   ...   5 years minimum.   5 years minimum WHAT?
PHP,3akqsb,rmas,1 point,Sun Jun 21 13:43:48 2015 UTC,"You need 5 years LTS release. Just because if I write a PHP 5.5 application, I should be able to wait 5 years to upgrade it."
PHP,3akqsb,AllenJB83,1 point,Mon Jun 22 05:18:32 2015 UTC,Why? What's so damn hard about running apt-get dist-upgrade once a year?
PHP,3akqsb,anlutro,1 point,Mon Jun 22 10:23:06 2015 UTC,While PHP is quite good with backwards-compatibility - there's still some issues - 5.5 and 5.6 examples.
PHP,3akqsb,BornInTheCCCP,2,Tue Jun 23 17:34:13 2015 UTC,"It's a point release, which means mostly new features and fixes.   The entire PHP 5 release cycle has been 10 years, and while there have been some notable backwards compatibility breakages, for the most part a very good job has been done of keeping code running (and this situation has been much improved in the more recent point releases due to the developers adopting tougher standards about what they'll change in a point release).   Heck, you can even run large amounts of PHP 4 code on PHP 5 if you turn off / ignore the deprecation and notice level errors."
PHP,3akqsb,jedrekk,2,Sun Jun 21 14:37:15 2015 UTC,"Now is not 10 years ago. Things have changed, and update cycles are faster than ever for the whole industry, including PHP."
PHP,3akqsb,Cysioland,3,Sun Jun 21 10:06:36 2015 UTC,"Whoa, that's soon. While I appreciate the fast release cycle, a lot of people will just stick with whatever their official linux distribution repositories provide, most of which are at a slow(er) release cycle.  Is it really so difficult to git merge changes from PHP 5.x into PHP 5.(x+1) that you have to stop supporting it?  Keep in mind that unofficial PHP repositories (including your linux distribution's official repository) may backport bugfixes and security fixes to unsupported versions."
PHP,3akqsb,Cysioland,4,Sun Jun 21 08:58:45 2015 UTC,It is too soon to drop support.   Is it really so difficult to git merge changes from PHP 5.x into PHP 5.(x+1) that you have to stop supporting it?   If it only was just that...
PHP,3akqsb,jedrekk,2,Sun Jun 21 09:20:37 2015 UTC,"And my biggest client's shared host (the biggest one in Poland, home.pl) is still running 5.2.  Yay."
PHP,3akqsb,TheGingerDog,2,Sun Jun 21 11:47:37 2015 UTC,"Hackers must love your host.  Honestly though, why can't you convince your client to move away."
PHP,3akqsb,dave1010,1 point,Sun Jun 21 11:53:59 2015 UTC,Because that host is cheap.
PHP,3akqsb,TheGingerDog,3,Sun Jun 21 14:15:15 2015 UTC,"A full virtual private server at Digital Ocean, for example, is $5/month. How much cheaper can it get?  You can install anything on a VPS, even PHP7 alpha 1 (if you're nuts).   The only real reasons for running PHP 5.2 mid-2015 are laziness and indifference."
PHP,3akqsb,General_Pie,1 point,Sun Jun 21 14:19:03 2015 UTC,"As low as $0.67 per month with that provider (shared, of course)."
PHP,3akqsb,dangoodspeed,1 point,Sun Jun 21 15:02:28 2015 UTC,Because as far as they're concerned It Works.
PHP,3akqsb,omerida,1 point,Mon Jun 22 06:11:55 2015 UTC,$work seem stuck on 5.2 as well .....   It would be nice if PHP decided to have an LTS release which they'd support for an extended period; this would presumably help corporate adoption.
PHP,3akqsb,dangoodspeed,2,Mon Jun 22 05:34:17 2015 UTC,Note: this is active support from PHP. If you use a distro's provided PHP version then you're very likely to at least be getting security patches for a while now. It's still a good idea to upgrade though.  RHEL 4.8 was released in 2009 and is getting security support until March 2017. It came with PHP 4.3.9.
PHP,3akqsb,omerida,2,Sun Jun 21 17:25:03 2015 UTC,"Yeah, but the important question is how well can a distro support any old software package that's no longer being supported upstream?   Over time backporting security fixes must presumably become harder as the sources diverge."
PHP,3akqsb,dangoodspeed,1 point,Mon Jun 22 05:32:43 2015 UTC,"Wow, and I thought I was doing well moving our sites onto 5.5. It's the official version for 14.04, are the Ubuntu repositories going to be updated too? Otherwise this seems quite premature to be dropping support."
PHP,3amanv,xpxo,2,Sun Jun 21 16:55:50 2015 UTC,"While it's not quite the same as one-on-one skype, there are plenty of online chat channels dedicated to programming (general, language channels and framework specific channels). I'd recommend taking a look at Freenode IRC and ChatOverflow*  A quick google for ""webdev freenode channels"" turns up a starters guide from TutsPlus which may help you get started - Oddly they omit the PHP channel ##php (while on IRC most channels start with a single '#', on Freenode ""unofficial"" channels - which aren't run by the owning organisation - start with '##', but that doesn't mean they're any less helpful).  .* Some channels on ChatOverflow do require you to have a minimum StackOverflow score"
PHP,3amanv,AllenJB83,1 point,Sun Jun 21 17:56:10 2015 UTC,Thank you Allen! Sorry for taking a while to reply. I'll use the IRC's! Thanks!
PHP,3amanv,AllenJB83,1 point,Mon Jun 22 08:13:56 2015 UTC,"For some reason I can't connect to the PHP IRC detailed in the side bar, any particular reason why?"
PHP,3amanv,Penderis,1 point,Mon Jun 22 12:16:47 2015 UTC,"Without knowing what message you received when you tried to join the channel, it's hard to tell. If you get directed to another channel, read the channel topic (/topic) as this may help you)  It looks like the channel currently requires you to be registered and logged in with Nickserv (some channels do this to reduce the amount of spam / undesirables they get). I found a guide to help you register at https://meta.wikimedia.org/wiki/IRC/Instructions"
PHP,3amanv,Cysioland,1 point,Mon Jun 22 13:07:19 2015 UTC,What the heck is PhpIgnite.
PHP,3amanv,Pardalean,1 point,Sun Jun 21 16:58:10 2015 UTC,"I messed up! Corrected it :). Haha, apologies."
PHP,3amanv,ehansen,6,Sun Jun 21 17:00:56 2015 UTC,"Heh ;) BTW, this framework isn't considered quite... state of the art. I'd suggest you shop a bit more for frameworks to learn."
PHP,3amanv,lordofworms,-2,Sun Jun 21 17:05:42 2015 UTC,"Framework wise you cannot go wrong with laravel then as you progress understanding symfony , as for connecting follow the right people on twitter and interact on the the slack channels , laravel again has a great one."
PHP,3amanv,rawfan,15,Sun Jun 21 17:59:07 2015 UTC,Framework wise you cannot go wrong with laravel   You guys are this subreddit's Jehovah's Witnesses.
PHP,3amanv,omarito2412,9,Sun Jun 21 19:07:46 2015 UTC,"Excuse me, do you have the time to talk about our Lord and Savior, Taylor Otwell?"
PHP,3amanv,lordofworms,2,Sun Jun 21 20:29:06 2015 UTC,Framework wise you cannot go wrong with laravel Symfony2   FTFY
PHP,3amanv,rawfan,1 point,Mon Jun 22 14:36:44 2015 UTC,"Hi Penderis, I've just checked out Laravel, is it worth purchasing a subscription to their tutorial series, or is there enough documentation and tutorials online for free?"
PHP,3amanv,lordofworms,2,Sun Jun 21 20:40:59 2015 UTC,I just picked up Laravel by reading the docs and coding.  Their tutorial site is nice but you can get the same quality content from YouTube as far as I am concerned.
PHP,3aktof,nolvorite,35,Sun Jun 21 04:33:15 2015 UTC,"Making PHPMyAdmin as secure as possible?   Remove PMA from your system, and use a proper tool like Sequel Pro or MySQL Workbench to connect via SSH tunnel."
PHP,3aktof,jtreminio,3,Sun Jun 21 04:42:23 2015 UTC,"I wouldn't discourage PMA use, if used properly. Some people prefer it to Workbench/command line. That being said, if Sequel Pro was cross platform I would probably use that."
PHP,3aktof,meshnet_derp,2,Sun Jun 21 04:50:53 2015 UTC,"Sqlyog is SO much better, but also not cross platform."
PHP,3aktof,aequasi08,1 point,Sun Jun 21 06:12:48 2015 UTC,"I use that as well, you cant edit user permissions with it though, afaik."
PHP,3aktof,CriticDanger,3,Sun Jun 21 06:21:28 2015 UTC,"Yeah you can. User Manager, IIRC"
PHP,3aktof,aequasi08,1 point,Sun Jun 21 07:22:34 2015 UTC,Never had any problems using it via wine
PHP,3aktof,giggsey,1 point,Sun Jun 21 19:41:46 2015 UTC,"Its not the greatest, plus, i don't like using wine on OS X, let alone linux."
PHP,3aktof,aequasi08,0,Sun Jun 21 19:52:19 2015 UTC,"I wouldn't discourage PMA use, if used properly.   Physically impossible given how insecure it is."
PHP,3aktof,silentk446,7,Tue Jun 23 12:22:19 2015 UTC,"MySQL Workbench is one of the buggiest tools I've ever used. Crashes left and right, the ""search"".... doesn't search at all, and there are times where it will flat out refuse to write changes to a database it's clearly connected to and clearly has the right privileges. Sequel Pro is several orders of magnitude better - the main problem is it's OSX only, and doesn't support SQLite.  The only good, universal solution for SQL DB management is to become a command line ninja."
PHP,3aktof,dadkab0ns,3,Sun Jun 21 06:08:47 2015 UTC,"I agree there. The workbench crashes regulary while making schemes too, which is not that much fun. Any alternative, btw? Mostly for designing databases, not so much administration."
PHP,3aktof,DSchalla,1 point,Sun Jun 21 10:35:26 2015 UTC,Can't say I've had a problem with crashes. I use it on both my Windows 7 work computer and my Linux home computer. Could it be some kind of issue with OSX?
PHP,3aktof,maiorano84,1 point,Sun Jun 21 18:04:13 2015 UTC,"I used it on Ubuntu 12.04, 12.10, 14.04, and 14.10, and Yosemite. Same bugs and problems throughout."
PHP,3aktof,dadkab0ns,1 point,Mon Jun 22 04:19:04 2015 UTC,Weird. I'll keep an eye out.
PHP,3aktof,maiorano84,1 point,Mon Jun 22 13:14:16 2015 UTC,I use it on OS X and it's very buggy at times.
PHP,3aktof,silentk446,1 point,Tue Jun 23 12:22:51 2015 UTC,I've found HeidiSQL to be pretty reliable actually.  I like that when it's working showing data and such you can actually see what the heck SQL it's using down in the logging area.  Plus I like the table size being so obvious.  Reminds me not to run too open ended queries on the big tables.
PHP,3aktof,AceBacker,2,Mon Jun 22 19:57:39 2015 UTC,I like SQLYOG myself.
PHP,3aktof,geggleto,5,Mon Jun 22 18:45:57 2015 UTC,"Regarding self-signed certificates... as long as each of your users will verify the certificate fingerprint manually - yes, it is just fine.  The actual cryptography is the same.  When you purchase a certificate, you are just purchasing the CA's signature.  The keys remain the same."
PHP,3aktof,randallfini,4,Sun Jun 21 05:30:20 2015 UTC,"I run PMA with mysql/mariadb skip networking enabled, along with a custom alias and I use apache require ip directives to limit access to my ip address.      A self-signed cert is sufficient."
PHP,3aktof,meshnet_derp,3,Sun Jun 21 04:44:42 2015 UTC,"I don't use PhyMyadmin, so I can't offer advice there, but why go with self-signed certs? Just get a free one from startssl.com. They work just fine."
PHP,3aktof,English_Professor_66,2,Sun Jun 21 15:16:44 2015 UTC,"Use MySql Workbench... With that said we do have phpMyAdmin still running for one server... To secure if: SSL, firewalled off from outside world, and protected by our SSO."
PHP,3aktof,shyne151,2,Sun Jun 21 04:44:32 2015 UTC,"F PHPMYADMIN. If you're going to use it, setup phpmyadmin on a bastion, limit to only vpn, no public exposure period when using phpmyadmin, too risky. then atleast you know anyone using the tool is on your local internal network."
PHP,3aktof,compubomb,2,Sun Jun 21 08:16:02 2015 UTC,One thing I do is set up phpmyadmin locally and then use a ssh tunnel to connect. Self signed is fine.
PHP,3aktof,fallsgeek,2,Sun Jun 21 10:22:08 2015 UTC,Any specific reasons for using PMA?
PHP,3aktof,dmunro,2,Sun Jun 21 15:38:30 2015 UTC,I don't know what that gives you that the cli doesn't. Can you enlighten me?
PHP,3aktof,dmunro,1 point,Sun Jun 21 16:25:13 2015 UTC,Remove phpmyadmin. Start using HeidiSQL
PHP,3aktof,piegus,1 point,Sun Jun 21 18:46:23 2015 UTC,"Apparently there's a quite a bit of exploits one can do to hack into an installed phpmyadmin   No, there are not. It's been a long time since PMA had a serious vulnerability that can be exploited.  But if you're paranoid, the simplest and fastest way to secure it is to but it behind http auth  SSL won't help, but if you want a cert get a free one from StartSSL"
PHP,3aktof,_rs,1 point,Sun Jun 21 06:19:47 2015 UTC,"At the very least, password protect the directory on the server with a secure username and password that's unique from your phpmyadmin login credentials. Digitalocean has a good easy tutorial. I wouldn't say don't use it......just make sure, like everything, it's up to date on security patches etc."
PHP,3aktof,AestheticalGains,1 point,Mon Jun 22 12:40:11 2015 UTC,This is what I do.  I also use a virtual host to a domain that doesn't exist and have the ip address hardcoded in my hosts file.
PHP,3aktof,rydan,1 point,Sun Jun 21 05:47:54 2015 UTC,"how to secure it? stop using it and use ssh, thats the way!"
PHP,3aktof,preDB,1 point,Sun Jun 21 10:12:23 2015 UTC,Just use MySQL console :)
PHP,3alen7,konradkar,6,Sun Jun 21 10:14:16 2015 UTC,"They have hundreds, maybe thousands of sites per instance. These are all paying customers, each with varying quality of code. One slip-up, one outdated function call, and an upgrade could break a client's site, losing the provider many customers.  Additionally, there's the fact that upgrading such an environment is no easy task, infrastructure-wise. Sure, you can just plug in a new PHP version, but who's going to test all the client sites and make sure they still work?   Financially, the ordeal is just not viable to them. Their customers are generally low-priority entities like websites for florists, butchers, pets, or simply used as email relays. That kind of stuff will keep working long into the death of ancient PHP versions, and as long as they can maintain that status quo, they can keep their income levels high with zero additional expenses. Upgrading would be an expense, and is by default uninteresting to them.  I'm not sure why they don't opt to power up new servers with newer versions, but that's more or less the explanation for why they don't upgrade the old ones."
PHP,3alen7,suphper,2,Sun Jun 21 10:39:25 2015 UTC,"This might be a dumb question, but I don't know any better; Isn't it possible to install all the different dot versions of php 5 and allow some switch in the panel or something? Let the dinosaurs keep running on whatever their running, but also allow new users to have the latest and greatest?"
PHP,3alen7,DrummerOfFenrir,2,Sun Jun 21 18:15:18 2015 UTC,"It is. Hostgator, for example, allows running multiple versions of PHP on their servers. But most hosts will opt not to do this because a) it's an investment and thereby a cost and b) they don't care enough to do this, they don't feel existentially threatened so they don't need to up their game.  In addition, configuring several different versions of PHP implies maintenance of several different versions of PHP, and thus overhead and probably a bigger and/or more skilled team.  It all comes down to them providing the bare minimum on which they can turn a profit."
PHP,3alen7,suphper,1 point,Sun Jun 21 18:44:08 2015 UTC,"That makes sense, I always am thinking in small scale. My server has all the versions, but then again, it only has one user"
PHP,3alen7,DrummerOfFenrir,1 point,Sun Jun 21 19:27:10 2015 UTC,"I work for a large hosting company and this is exactly what we offer. We currently offer PHP 5.2, 5.4 and 5.6. I'm not sure why we missed 5.3.  We generally end up deploying security fixes and new releases within 3-5 working days of release. This is mostly the time it takes us to build and repackage them before then deploying them across the hosting estate (hundreds of servers)."
PHP,3alen7,Murray-Mint,1 point,Mon Jun 22 13:11:02 2015 UTC,"Very cool, it's nice hearing that you care instead of the hosting company just saying ""5.3 is what we have, deal with it or go away"""
PHP,3alen7,DrummerOfFenrir,3,Mon Jun 22 15:12:02 2015 UTC,"I cannot speak for hosting companies, but I think a large majority are under the impression ""why fix what's not broken"". Those who need shared hosting are normally inexperienced towards the software stack that's running, they simply want their site to run. Those who are more advanced will actively search for a provider that uses a more up to date stack, or run their own servers. If you think of the larger shared hosts as an enterprise, then it's not odd for them to support one version for 5 - 10 years.  Another thing to consider is PHP 5.3/5.4 are still actively back-ported (security fixes) by both Red Hat and Debian. Debian 6 (Squeeze) has an EOL of 2016 and Debian 7 (Wheezy) has an EOL of 2018. I don't use Red Hat so I'm unsure whether they support updates throughout the whole 10 year LTS."
PHP,3alen7,iamtelephone,1 point,Sun Jun 21 10:37:01 2015 UTC,"We pay for managed co-location meaning we have the benefit of there being someone on the end of the phone to fix issues 24/7. Due to the unfortunate reality that we have a lot of legacy client websites written in 5.3 that do not have the budget to redevelop, our server is running 5.3 - fortunately as you say Red Hat do back-port security related fixes.   However what made me laugh recently was when the heart bleed issue became public, a lot of clients got in touch regarding it - when we got in touch with the man on the end of the phone to ask about if we had been at risk he replied with ""oh, don't worry about that, your version is too old to have the issue.""  I started typing all this, and have now expended the effort, so I am going to click save even if its a ramble; for those interested we now develop for 5.5 and have been updating any 5.3 client work to 5.5 during spare hours so we can eventually drop that server in favor of aws."
PHP,3alen7,c12,2,Mon Jun 22 07:43:35 2015 UTC,"As someone who actually runs a host.. our customers can always choose which host they want to be on. The PHP 5.4 or the PHP 5.2 server. They can migrate at will.  We currently have > 95% of customers choosing to use the PHP 5.2 servers. We've had many conversations with many customers and the short answer is they would take their business elsewhere before moving to a newer platform.  So rather than slagging off hosts that ""don't do their job"", maybe people want to ask developers why their code is stuck on PHP 5.2."
PHP,3alen7,disclosure5,2,Mon Jun 22 01:28:41 2015 UTC,"A good measure of a host is not what version of PHP their old servers are running, but which version then put on a new account. Typically it's a bad idea to upgrade an account if the customer isn't asking for that upgrade. But are they deploying new accounts with 5.3 or 5.6? That's the key."
PHP,3alen7,drewinthehead,4,Mon Jun 22 07:31:53 2015 UTC,"Could anyone explain me like I'm five: while PHP 5.2 and 5.3 are totally outdated, still little less than half sites (at least based on WordPress https://wordpress.org/about/stats/ ) are hosted on these versions.   You're looking at the bottom of the barrel (and yes, it's a thick bottom). I have clients with more unassuming needs who host at shared hosts. I've not seen 5.2 and 5.3 in a long time. It's mostly 5.5 and 5.6. Worst I've seen is 5.4.   Why? Why hosting companies simply not update their servers to 5.6 or 5.5?   Some people are just not good at their job. That's why. And many people lack the knowledge to tell who's bad.  The issue of backward compatibility is often cited. You don't have to auto-switch everyone to the latest PHP, but you can at least show them big honking warnings both over email and in the panel and give them a grace period for switching. But again, if you're bad at your job, you prefer to do nothing, just get the cash and ignore your customers' security.   Is there any drawbacks of this move?   Endless developer frustration aside, you're open to all unfixed vulnerabilities from 5.2 onward."
PHP,3alen7,cyrusol,2,Sun Jun 21 12:06:30 2015 UTC,The real question is why a PHP version only has a lifetime of about 3 years. That's way too short.
PHP,3alen7,aleste2,3,Sun Jun 21 11:46:08 2015 UTC,"The real question is why a PHP version only has a lifetime of about 3 years. That's way too short.   Yes, it's too damn short! As a serious enterprise user, who needs the comfort and reliability of a Long Term Support version, if only you could buy one!  http://www.zend.com/en/support-center/support/php-long-term-support"
PHP,3alen7,rafa_eg,1 point,Sun Jun 21 12:07:45 2015 UTC,Not much difference from Java.
PHP,3alen7,cyrusol,2,Mon Jun 22 11:24:40 2015 UTC,"Within a given major release, no it's not. PHP has been quite reasonable with backwards compatibility breaks from 5.4 onwards. We had no trouble upgrading some larger apps (with components ageing back to php 4) that were running fine on 5.4 all the way up to 5.6 without code changes (yes, that's anectdotal). If you've written code that will not run on later versions you always have the option to use some distribution backports (debian still supports 5.4 till 2018, afaik) or pay Zend or Red Hat to have access to enterprise level support for older versions.   edit: Removed the last edit...(sic)"
PHP,3alen7,amazingmikeyc,2,Sun Jun 21 15:49:21 2015 UTC,"My coworkers can not update to PHP 5.6 - it won't work with Magento <1.9, but don't ask me, I don't know the actual errors. We already use the Debian backport for PHP 5.4. Still, the only sane lifetime for production environments that shall last is 10 years like for CentOS / RHEL."
PHP,3alen7,cyrusol,1 point,Sun Jun 21 16:22:02 2015 UTC,It's expensive to do support though... you spend all your time fixing out weird security bugs and obscure stuff - which may have been fixed in newer versions - when you could be out there optimising the parser & making the language better (and thus get more users!).
PHP,3alen7,NeoArc,1 point,Mon Jun 22 13:18:05 2015 UTC,"PHP's problem is not not attracting enough new developers, it is keeping experienced people / long-term users from switching to other platforms that are more suited for serious production environments. But I get your point. There isn't a big company like Oracle or MS or Apple backing PHP.  Imo we (my company) should actually upgrade to Magento 1.9 (which should work flawlessly with PHP 5.6) on our client's systems, but I'm unable to persuade our management (""the costs"", ""the risks""). And imo we also should adopt PHP 7 and Magento 2 and ZF 2 (or soon 3) as early as possible but ""early adopters have higher risks"", ""systems are immature"" etc."
PHP,3alen7,tw2113,1 point,Mon Jun 22 13:32:20 2015 UTC,"Some shared hostings have an option to choose the PHP version globally. (Some even let you choose different PHP versions for your subdomains/parked domains).  Not every shared hosting does this, and not every user is aware of this behavior in their CPanel accounts."
PHP,3alen7,XeonProductions,1 point,Sun Jun 21 14:51:19 2015 UTC,"My biggest hope is that the hosting providers at least provide the newest versions, whether or not the users use them quite yet. That last part is up to the user/agencies hired to help"
PHP,3alcgi,malkusch,3,Sun Jun 21 09:30:54 2015 UTC,"Abstract classes should be treated, in most cases, as a tool to reuse common code between types within a project. Same goes for traits.  You should avoid designs where someone from library A has to extend a class (abstract or not) from library B in order to use library A. An interface in its place makes a lot less assumptions and serves the same purpose.  And whenever you have to provide some abstract class to save on boilerplate, make sure you don't typehint on the abstract class elsewhere, have a separate interface it implements and typehint on that. I.e. make the abstract class use optional.  The reason is that library authors often assume ""but of course this interface will be implemented this way"", and then couple of months in, turns out, you can have a better, lighter implementation, but you're stuck to a heavy abstract class with a bunch of final methods (another sin) that you can't modify.  As for whether you must always have interface, abstract, concrete, of course not. It depends how exposed that type is to library clients, and how it's reused (if it is).  Give examples so we don't discuss abstract (heh...) points."
PHP,3alcgi,ForeverAlot,2,Sun Jun 21 10:12:02 2015 UTC,"final methods (another sin)   I have the impression that PHP land is not aware of the final modifier, as I can't remember seeing that in any code.  Anyway, why is final a sin? What about designing for subclassing?"
PHP,3alcgi,Meefims,2,Sun Jun 21 13:06:43 2015 UTC,"PHP has final classes, and it is good practice to mark them so although you will see nearly no one do it. Subclassing does need to be designed for."
PHP,3alcgi,Terr_,3,Sun Jun 21 17:26:13 2015 UTC,"I'm using the word ""sin"" tongue in cheek, of course if I think hard I can come up with a good example of using it.  But using ""final"" is usually due to one of two reasons:   Performance optimization - the compiler can produce simpler code for final methods due to a static guarantee the method won't be overridden. This applies to languages like Java and Swift, but not PHP. This might change if PHP adopts JIT. The author is trying to enforce restriction on a given interface, because it can be abused contrary to intentions, and they can't figure out how to factor their system so this isn't needed. This usually comes down to inexperience.   What's an essential need of final for you, I'm curious?"
PHP,3ah7jq,suphper,21,Sat Jun 20 03:49:09 2015 UTC,$_SERVER['PHP_SELF'] is used where used.   ???
PHP,3ah7jq,mrjking,9,Sat Jun 20 04:49:24 2015 UTC,Check?
PHP,3ah7jq,longshot,6,Sat Jun 20 05:30:44 2015 UTC,"Check mate, phpists."
PHP,3ah7jq,i_like_iOS,19,Sat Jun 20 08:36:21 2015 UTC,"Passwords stored safely.   Plaintext in the database is safe, right? Right guys? I used base64 encryption to make it safe. I would really recommend to describe those things further like:   Password stored hashed by password_hash with bcrypt or similar modern algorithm.   Otherwise I think the idea is not bad. Just a bit vague."
PHP,3ah7jq,DSchalla,3,Sat Jun 20 09:20:11 2015 UTC,"omg noob, rot13 is far more secure"
PHP,3ah7jq,Headchopperz,1 point,Sat Jun 20 21:24:55 2015 UTC,Very vague
PHP,3ah7jq,JoeyD473,11,Mon Jun 22 19:12:07 2015 UTC,"MD5 is not used   There's no point in enumerating only this when all of the SHA functions are comparatively as weak as MD5 next to bcrypt. Just say ""bcrypt is used with an appropriate cost, don't use other hashing mechanisms"" because there is effectively no safe alternative in PHP."
PHP,3ah7jq,phpdevster,14,Sat Jun 20 04:20:04 2015 UTC,There are so many uses for md5 functions beyond just passwords. I use it all the time to generate unique array keys for data sets that doubles as a checksum.
PHP,3ah7jq,cillosis,3,Sat Jun 20 14:35:05 2015 UTC,"I never said don't use it for other things. The context of ""MD5 is not used"" is in an article called ""Security Checklist"", in a section called ""Authentication"". The context clearly implies you shouldn't use MD5 as it relates to security and authentication, which is true. MD5 for non-security applications is perfectly fine..."
PHP,3ah7jq,phpdevster,2,Sat Jun 20 22:45:35 2015 UTC,"That's still not a great idea, it's quite easy to create MD5 collisions."
PHP,3ah7jq,Sacro,7,Sat Jun 20 17:09:34 2015 UTC,"I agree but I don't use it for anything critical and if a collision were to occur, its usually not the end of the world for my use cases. In case anyone is curious: http://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value"
PHP,3ah7jq,cillosis,1 point,Sat Jun 20 17:28:56 2015 UTC,md5 for etags <3
PHP,3ah7jq,geggleto,6,Mon Jun 22 18:47:46 2015 UTC,"""Strong passwords are used.""  What constitutes a strong password and why not check for that?"
PHP,3ah7jq,jpswade,3,Sat Jun 20 10:19:54 2015 UTC,"It would be nice if the number of requirements went down the longer the password got.   Longer than 10? Ok you don't need specials.   Longer than 15? Lowercase and numbers ok.   Longer than 20? Your horse is correct, anything goes!"
PHP,3ah7jq,xuu0,2,Sat Jun 20 12:13:10 2015 UTC,"Longer than 20? Your horse is correct, anything goes!   Even ""aaaaaaaaaaaaaaaaaaaaa""?"
PHP,3ah7jq,ganjamensch,1 point,Sat Jun 20 13:22:44 2015 UTC,"Sure. Why not? Not many dictionary tools will have it.. At least not yet. . Forcing the user to have crazy requirements only makes it harder for the user to remember.   Allowing bad parties to bruit force against your web app with out taking steps to slow or stop them is the real problem. Remember, they have to expose themselves at every attempt. They don't have the liberty to run millions of attempts per second on a hash file. (That's a whole different problem if they have access to your system)  To rely on the users password as the first line of defense is the wrong way to go about account security. If one really cared about the security of their users accounts:   Put limits on the number of bad attempts from unrecognized IPs (especially when it's outside the users country!) Have lockouts with increasing timeouts on unrecognized IPs.  Notify the user of potential attacks out of band to make sure it's not a false positive.  Have options for real multi factor. (TOTP is trivial to setup)"
PHP,3ah7jq,xuu0,1 point,Sat Jun 20 20:32:59 2015 UTC,"It should be secure, but every time you have to type the password it's absolutly painfull, like...  ""Dammit, is it the 20th 'a', isn't it?"""
PHP,3ah7jq,Auburus,1 point,Sat Jun 20 22:41:06 2015 UTC,"A sufficiently long string consisting of a random distribution of lowercase a and uppercase A is secure enough to use, in conjunction with a KDF function, as an AES key.  Using only the same character is security through obscurity; it takes 94 tries for an attacker to guess your character, times the upper limit on the allowed lengths. Even up to 1000, you end up with only about 216 possible combinations. For comparison, that's about the entropy of a random 3-character password using the full keyboard keyspace.  Isn't entropy fun?"
PHP,3ah7jq,sarciszewski,1 point,Sat Jun 20 23:05:40 2015 UTC,Nope. That's not how it works. The length of a password or passphrase doesn't make for the low entropy.
PHP,3ah7jq,mrjinpengyou,5,Sat Jun 20 17:55:18 2015 UTC,"Defenders think in lists. Attackers think in graphs. As long as this is true, attackers win."
PHP,3ah7jq,sarciszewski,4,Sat Jun 20 19:43:20 2015 UTC,"This looks awfully similar to my checklist that I posted in 2009... in fact, all the categories are the same and it looks to be a (much reduced and much edited) copy of my checklist.  That said, my checklist is six years old now and I would read the checklist with that in mind."
PHP,3ah7jq,sk89q,6,Sat Jun 20 21:08:45 2015 UTC,"Would you mind if I created an updated version on github that updates yours and fixes the vagueness of the OP. Credit will be given, of course."
PHP,3ah7jq,theukoctopus,2,Sat Jun 20 23:44:36 2015 UTC,Don't mind. Here's a proper license: https://github.com/sk89q/php-security-checklist/blob/master/README.md
PHP,3ah7jq,sk89q,1 point,Sun Jun 21 09:14:24 2015 UTC,Should I keep it as a fork or merge it back into yours upon updating?
PHP,3ah7jq,theukoctopus,3,Sun Jun 21 09:33:42 2015 UTC,Up to you.
PHP,3ah7jq,sk89q,1 point,Sun Jun 21 15:47:37 2015 UTC,Ill PR it back to you once I've made some meaningful changes
PHP,3ah7jq,theukoctopus,1 point,Sun Jun 21 15:55:48 2015 UTC,"Yeah, unfortunately that's because of two things:   the basic attack methods and technology hasn't changed all that much (the same problems are still problems...hell, XSS is 11+ years old and is still a major issue) PHP doesn't have controls build in for a lot of this stuff. No validation, error checking, etc. There's a lot of good things a framework can do to help here but even then there's still a long way to go.   Checklists are great and all, but as was mentioned further down attackers don't think in checklists and I think they provide a false sense of security to developers that may not know better. ""I've checked them all off, I'm secure...right?"". It's a good place to start and I'm glad your list gives more context than just a one line statement. That's a really good thing."
PHP,3ah7jq,enygmadae,1 point,Mon Jun 22 10:00:18 2015 UTC,"While you can't get a sense of security from completing a checklist, there's still value in actually crossing things off a checklist. Each missed item in a checklist provides another path for an attacker to follow in the greater graph."
PHP,3ah7jq,sk89q,2,Mon Jun 22 17:54:56 2015 UTC,"""3th-party""?"
PHP,3ah7jq,dangoodspeed,2,Sat Jun 20 05:25:36 2015 UTC,Yeth
PHP,3ah7jq,duniyadnd,7,Sat Jun 20 13:07:57 2015 UTC,Q: what thinks the unthinkable? A: An itheburg
PHP,3ah7jq,technical_guy,8,Sat Jun 20 22:50:20 2015 UTC,Please avoid SSL. Use TLS instead.
PHP,3ah7jq,fmargaine,2,Sat Jun 20 12:09:36 2015 UTC,"You are correct. I think, as pointed out in many of the other comments here, the list if terribly vague.   What they mean to say is present over HTTPS (assuming correct tls version and cert hash strength) instead of HTTP"
PHP,3ah7jq,psych0fish,3,Sat Jun 20 17:31:36 2015 UTC,Email addresses are validated.   How is this related to securiy?
PHP,3ah7jq,i_like_iOS,6,Sat Jun 20 08:37:34 2015 UTC,How else am I supposed to send your password back to you in plain text?
PHP,3ah7jq,mrjinpengyou,3,Sat Jun 20 17:56:11 2015 UTC,Gotta verify its real to secure funds in my account when I sell them to spammers!
PHP,3ah7jq,xuu0,3,Sat Jun 20 12:07:24 2015 UTC,How about replacing all of this with  Use a respected framework ... Check
PHP,3ah7jq,olsanikin,3,Sat Jun 20 12:40:23 2015 UTC,"Perhaps ""investigate well-tested community components before making decision to DIY"".  There are good reasons for DIY, but often I find those reasons were ""I learned this 9 years ago"", or ""this way is OK"".    I don't necessarily mind projects where they've rolled something in-house - again, there may be valid reasons (legal, performance, time to market, etc).  But I like to know they were aware of other options, had done at least cursory investigation first, then made informed decision before the DIY.  This doesn't have to be ""learn entire framework X before starting"", but taking a bit of time to research community components (phpleague, auraphp, just browsing packagist, etc) can make you aware of modern practices that'll keep you ahead of the game re: security.  Not always - there are some duds out there, but the community curation factor tends to weed out obviously bad stuff.  And if someone's not bothered to make their library in to something consumable by composer, they possibly haven't been keeping it up to date WRT to security practices anyway."
PHP,3ah7jq,mgkimsal,2,Sat Jun 20 16:51:50 2015 UTC,"Sometimes you don't have that choice, lets assume a bigger company wants to develop a own system of any kind, I have seen that they don't want to use any established framework for legal reasons. Please don't ask me why, I am aware that it doesn't make sense, yet it can happen and then its a good thing when you got some kind of guidelines IMHO."
PHP,3ah7jq,DSchalla,1 point,Sat Jun 20 12:53:54 2015 UTC,"Frameworks can make secure practices easier, but throwing a framework at a newbie or someone that doesn't consider security important won't suddenly make their code secure."
PHP,3af4aa,omerida,2,Fri Jun 19 16:51:16 2015 UTC,The site says it's focus is on Ruby and I couldn't find any php engines. Is this related to php at all?
PHP,3af4aa,bga9,2,Fri Jun 19 19:59:13 2015 UTC,"I found it without issue   In addition, we’re proud to release eight new static analysis engines that you can start using with Code Climate today:   Gofmt, Govet and Golint - The official style, bug and lint checkers from the Go team CoffeeLint - Style checking for the CoffeeScript dialect of JavaScript CSSLint - Style checking for all CSS stylesheets Rubocop - Style and quality checks for Ruby code (including support for RRuby 2.2+) ESLint - Linting and style checking for your modern EcmaScript/JavaScript code Bundler Audit - Find security vulnerabilities in your Ruby dependencies PHP CodeSniffer - Style checking for PHP"
PHP,3af4aa,twtmc,3,Fri Jun 19 20:04:56 2015 UTC,"As far as I'm aware, PHP CodeSniffer has existed far longer than Code Climate. Do you have any link to the related static analysis engine, specifically the PHP CodeSniffer (if it is an engine they wrote themselves)?"
PHP,3af4aa,tomzx,2,Fri Jun 19 23:49:00 2015 UTC,"Wow, I must be blind."
PHP,3af4aa,bga9,1 point,Fri Jun 19 20:56:44 2015 UTC,"I just imported one of my php projects from Github and within minutes, I found out how many issues I get to fix!"
PHP,3af4aa,DrummerOfFenrir,1 point,Sat Jun 20 01:53:10 2015 UTC,Examples (click on PHP): https://codeclimate.com/oss
PHP,3af4aa,Schlaefer,1 point,Sat Jun 20 11:58:26 2015 UTC,Awesome! Too bad their installation instructions don't work for me on OS X
PHP,3af4aa,kkirsche,2,Fri Jun 19 23:29:48 2015 UTC,"What happened when you went through the instructions? Did you use the Docker instructions or the brew instructions? I work for Code Climate, and I am a PHP developer. We definitely scan PHP, and I wrote the PHP_Codesniffer engine that will be released soon, so if you have any questions on the new platform, I am happy to help."
PHP,3af4aa,e3betht,1 point,Sat Jun 20 12:56:53 2015 UTC,I tried both sets actually with the same result. I've opened an issue on the home brew repo to ultimately see if anyone can help identify why it isn't working but I didn't get a response yet on the issue. It tells me boot2docker needs to be started but it's installed and started using the instructions it gave both on the repo and when it failed to install. https://github.com/codeclimate/homebrew-formulae/issues/3
PHP,3af4aa,kkirsche,3,Sat Jun 20 13:13:14 2015 UTC,"Have you updated your .bash_profile file with the three export values from boot2docker? That tripped me up when I first tried to run our install. If you run: ""boot2docker up"", does it say ""Your environment variables are already set correctly.""? Feel free to send us a support ticket at: http://www.codeclimate.com/help if you would like to troubleshoot this privately, otherwise, I'm happy to keep working on it here. Whichever you prefer."
PHP,3af4aa,e3betht,1 point,Sat Jun 20 14:28:58 2015 UTC,Ah it was the environment variables. I'll try to send a PR to update the read me to ensure its clear
PHP,3af4aa,kkirsche,1 point,Sat Jun 20 16:26:26 2015 UTC,"Oh, and THANKS! You are awesome for helping out"
PHP,3aepik,ircmaxell,2,Fri Jun 19 14:54:10 2015 UTC,"Holy shit:   With opcache the memory usage is 32 MiB, but without opcache usage rises to a whopping 390 MB, because each element of $array will get a new copy of ['foo'] in this case."
PHP,3ainps,silentstawk,6,Sat Jun 20 15:42:16 2015 UTC,"I know the basics of PHP and I need to become an expert in a short amount of time   http://abstrusegoose.com/249  There's no ""shortcut"" to becoming good at programming. You get out of it what you put into it, it's that simple.  You can become ""passable"" fairly quickly. As in, you can roll your face on your keyboard and sometimes the computer will do what you were thinking, but oftentimes it will do exactly what you told it to do which is not what you were thinking.   I dabbled in PHP  The interview is on Monday   Don't try to come off as anything more than you are. Competent technical interviewers can sniff out bullshitters (of which you'd be one) and toss them out before they ever reach the next step.  Good luck, but this position may not be the one you land."
PHP,3ainps,jtreminio,2,Sat Jun 20 16:04:10 2015 UTC,"Thank you, I respect your honesty.  I don't intend on actually becoming an ""expert."" I simply need to improve my working knowledge of the language so that I can keep up while I learn on the job. I have a good foundation in programming in general as I know C++, C, MATLAB very well (required for my major). So i know what you mean about the computer will do exactly as you tell it.  It's just that his is my first feasible avenue into a meaningful internship in my field and to have the best chance I'm going to need to start off with some PHP mSQL knowledge because that's what they're looking for."
PHP,3ainps,bakuretsu,1 point,Sat Jun 20 16:17:22 2015 UTC,"If you know C/C++ already, the missing pieces are mostly syntax and function names, which you'll learn by rote, and Internet fundamentals. PHP is a web language and when I interview programmers I ask questions about how the Internet works.   Make sure you know how PHP fits into the puzzle that makes a web application function. It doesn't hurt to know about HTTP, DNS, load balancing, caching, and typical systems used to do those things."
PHP,3ainps,OrangeredStilton,1 point,Sat Jun 20 16:52:50 2015 UTC,"See this is what I was looking for. ""What is missing from my current programming knowledge to make me a competent PHP programmer?"" would have been a more appropriate title for this question. Thank you for the info; I will be well versed in those subjects by Monday. THANKS!  EDIT: I also know HTTP well so that helps."
PHP,3aekr0,relyon,2,Fri Jun 19 14:13:17 2015 UTC,"How do you deal with relationships? That's exactly the task of the Object Mapper.   Think about you example of a blog post. The blog post in the database contains the posts information. Comments are stored in the comments table which probably has a foreign key to the posts. The task of your object mapper is to translate this foreign key constraint into - for example here - an object composition. A post object would have an array of comments. It would be the data mappers task to fill this array when the post is loaded. Where do you keep the query? Keep it in the object mapper or extract it into a repository if you need it elsewhere.   Also would I need a interface for each mapper so I can easily test with an array mapper instead of database?   Give the object mapper a database-connection object per dependency injection. Then you could mock the db-connection your object mapper users in your tests. But seriously use a library.   When do I need a mapper or repository? I am just lost and want to get it right.   Unless you implement you own ORM you don't need to build a mapper by yourself. Libraries like Doctrine do that job for you. As I already wrote the object mapper deals with the necessities to translate you object model into rows or documents in your database. Repositories on the other hand represent the object relations. As a simple example: If you wanted to show all comments for posts in a certain category you would put that query into a repository. Repositories are hard. In my experience they either end up as huge overblown classes which have a method for every query imaginable or they do basically nothing except providing a findBy  method and could easily be replaced by a number of functions because they just abstract complex queries that are only useful in one or two rare special cases. Also I noticed, that repositories can become bottlenecks, as you can easily forget that they can hide complex queries. As the application runs and more data is added this can become a problem."
PHP,3aekr0,phpuser123456,1 point,Fri Jun 19 16:34:31 2015 UTC,"I believe there are two approaches, based on my understanding of DDD:  A. Create separate repositories for each entity, with the ability to load them based on the related entity. Example:  $blog = $blogRepo->findById($blogId);  $blogPosts = $postRepo->getPostsByBlog($blog);  //alternatively  $blogPosts = $postRepo->getPostsByBlogId($blogId);   B. Allow your repository to (optionally?) load related entities:  $blogWithPosts = $blogRepo->includePosts()->includePostComments()->findById($blogId);   Keep in mind that tags seem more like Value Objects as opposed to Entities, and as such they might not need their own repository even if they have their own database table."
PHP,3aekr0,ThePsion5,1 point,Fri Jun 19 16:44:33 2015 UTC,"I asked a similar question recently and was given 2 solutions that helped my understanding of the pattern.   Do one query for each relation. Keep closely related tables under the same mapper.   At first I was seduced by the second solution but decided to take the performance hit and went with the first instead as my code was ""cleaner"" that way. My mappers extend an abstract mapper and it does pretty much everything (query, map...), entity mappers then only define table name, table fields and entity relations while still allowing me to override any base mapper methods or add custom ones).  In your example that means you'd have a mapper for each of your ""entities"", PostMapper, CategoryMapper, CommentMapper... each one responsible for querying the database and mapping the results to entity objects.  Then you could have another layer responsible for mapping the relation between your entities, I'm not sure how it's called :D, I've seen it called composition, repository or just ""service"", say you have a PostService object, you inject all the mappers needed to build a Post entity object with all its relations.  But what I do instead is I have some kind of Service Locator / Registry that holds the DB connection and my already instantiated mappers and can make new mappers too (and store them in the ""registry""). I inject this ""service locator"" inside my mappers and build the relations right there in my mapObject() method.  I think the data mapper themselves are very simple components but they bring many problems that you have to be careful about like the N+1 query problem... but also very cool stuff like lazy-loaded proxy objects and Identity Map  look into these projects:   Spot ORM fluentpdo Aura.Marshal   and articles from Alejandro Gervasio on sitepoint  have fun! ^"
PHP,3aekr0,teuna,1 point,Sat Jun 20 00:05:31 2015 UTC,"The diagram in this example is possibly a bit misleading - you don't need to have separate mapper objects for every table. It's ok to have one mapper for several connected tables. So this is where you can deal with relationships.  Your mapper will need to be given some configuration: the names of your tables, how do you want to refer to them, what class you want to hydrate them as (in case you use objects, I often stick to arrays at the mapper level, though), and what relationships are defined.  For example you can enter ""User"", ""Posts"", and enter relationship ""one-to-many"" from ""User.id"" to ""Posts.userId"".  When you select a user, I'd strongly suggest you're explicit in your mapper call if you want the relationship fetched and what filters you want on it (which will render to WHERE, LIMIT, ORDER, HAVING, GROUPBY clauses).  Always fetching lazily (i.e. never on first go) or eagerly (fetching everything every time) may seem like you save a few keystrokes when doing a mapper query, but it's more headache and pain than you can imagine down the road. Let the mapper map, but tell it exactly what you need, don't make it second-guess you.  As for mapper or repository. A mapper is a design pattern. A repository is a DDD component which may be implemented via that pattern. So it's the same thing, in a nutshell."
PHP,3aekr0,chrisguitarguy,0,Fri Jun 19 16:45:10 2015 UTC,"As for mapper or repository. A mapper is a design pattern. A repository is a DDD component which may be implemented via that pattern. So it's the same thing, in a nutshell.   That's a really great description of the difference/similarity between the two."
PHP,3aekr0,n0xie,-7,Fri Jun 19 20:29:04 2015 UTC,Take a look at Doctrine
PHP,3aekr0,n0xie,0,Fri Jun 19 15:09:10 2015 UTC,Why am I being downvoted for this? Doctrine has the best example(s) of how to implement the DataMapper pattern properly.
PHP,3aekr0,maiorano84,2,Sun Jun 21 07:21:40 2015 UTC,"Because your answer is lazy, and does nothing to directly address OP's question.  Why don't you explain HOW Doctrine implements the DataMapper pattern, and WHY it does it well? Why don't you highlight specific pieces of its source code?"
PHP,3aekr0,n0xie,1 point,Mon Jun 22 21:51:32 2015 UTC,"The Doctrine Docs explain anything and everything way better regarding DataMapper than I ever could. Why would you I try to condense in a few lines, what is in fact complicated and has several trade-offs associated with it?"
PHP,3aekr0,maiorano84,1 point,Tue Jun 23 06:57:43 2015 UTC,"Nobody expects you to do it in a few lines. In fact, you should explain it as thoroughly as possible, or at least provide direct links to the resources that do.  You know that this is a complicated subject, so what makes you think a single link to a project's homepage answers the question? You even JUST said that there are trade-offs associated with using the DataMapper pattern. Why didn't you mention them in your original answer?  Does the Doctrine documentation go over those trade-offs? What are those trade-offs? Are there any other articles that support this?  And no, Doctrine doesn't have the best examples of how to implement the DataMapper pattern properly. Doctrine has the best examples of using Doctrine properly, and it just happens to use the DataMapper pattern.  You asked why you're getting downvoted; that's my answer. And it's a lot more than a single link."
PHP,3acq9o,bga9,6,Fri Jun 19 01:19:57 2015 UTC,"That's a good idea and really well realized! I have a bit of feedback: having ""tests"" for patterns is probably not that useful. In fact, I outright think it's just adding noise to each page. I think that effort could go into having a more detailed description and example of uses (in plain English) as it applies to typical PHP applications. The code examples could be shorter and sweeter as not to overwhelm people new to them.   For example about ""needs more description"" I think it'll help people put things in context if the Facade pattern says things like ""a way to expose third party dependencies from Packagist (and elsewhere) in your app without high coupling; so you can port easier to the next version or another library if the first one gets abandoned"" etc. And for example on ""shorter code examples"", aside from removing tests, I think the Decorator example could go without an abstract class implementing just the constructor (instead that should be just the Decorator class with both the constructor and renderData() implementation). And the Multiton, as another example, has __clone, __sleep and __wakeup so it can't be serialized and cloned, which... just feels like a random concern to have about a multiton."
PHP,3acq9o,xjake88x,6,Fri Jun 19 02:01:26 2015 UTC,"Even though the tests aren't very relevant, I like them because it shows some interesting ways people use PHPUnit in the wild."
PHP,3acq9o,c12,2,Fri Jun 19 06:24:19 2015 UTC,"I though that was the purpose of including them, its basically saying ""here is a design pattern, and here is how you can test it"""
PHP,3acq9o,avindra,6,Fri Jun 19 11:45:41 2015 UTC,It's not my site. I just found it informative and wanted to share it.  I think the tests are just examples of how to write unit tests for each pattern.
PHP,3acq9o,c12,3,Fri Jun 19 02:07:20 2015 UTC,"All right, thanks for sharing :) Good thing it's on Github.  Regarding the tests, it's a bad idea despite your point because:   A unit test should mostly focus on testing concrete functionality, which obviously you can't demonstrate in an abstract code example. A unit != a class, so it's unlikely you'll be testing every pattern you implement as a unit (if you do it right, that is)."
PHP,3acq9o,phpdevster,2,Fri Jun 19 02:11:41 2015 UTC,"You're right, I hadn't really looked at the test examples - they're only testing the implementation - not very helpful."
PHP,3acq9o,jacekpl,2,Fri Jun 19 02:33:22 2015 UTC,"Been embracing design patterns lately. The code does ending looking a bit contrived at times, but having paradigms to work within reduces a lot of cognitive load.  Plus, when your code follows standards, you can add awesome tooling like automatic documentation and unit testing."
PHP,3acq9o,teuna,2,Fri Jun 19 05:16:11 2015 UTC,I really like using design patterns largely because they answer the question of what something should be called and where it should go :)
PHP,3acq9o,phpdevster,3,Fri Jun 19 11:46:39 2015 UTC,"I disagree with the API signature of the DataMapper. A DataMapper is not a poor-man's repository - it shouldn't have methods like findByID() and findAll(). It's SOLE purpose is to prepare data for insertion into the data store abstraction layer, and to prepare data taken from a data store abstraction layer for a factory to construct the object out of.  The DataMapper shouldn't even be responsible for newing up an object - that should be handled by a factory that the DataMapper uses.  Thus a Repository would wrap a DAL to fetch raw data, feed it into a Mapper, which feeds it to a Factory, which then returns the properly constructed object. The Repository can then optionally cache the object for cloning.  To persist, the Repository would take an existing fully formed object, update its cache if applicable, pass the object to the DataMapper for deconstruction, and then pass that deconstructed data to the DAL for persistence (or the DataMapper could do that directly, not really important)."
PHP,3acq9o,phpdevster,3,Fri Jun 19 16:52:03 2015 UTC,Will you make a PR with that?:)
PHP,3acq9o,maiorano84,1 point,Fri Jun 19 20:17:29 2015 UTC,"now I'm really confused, this means that I could feed any (valid) data to a factory and it would return me a constructed object  I'm confused because I asked not long ago why the mapObject() method in the datamapper example shown is protected, making it public would achieve the same thing an (external) factory would, wouldn't it?  It's hard to learn OO when potentialy good programmers don't say the same thing."
PHP,3acq9o,dracony,3,Sat Jun 20 22:08:59 2015 UTC,"It comes down to re-usability. If the Mapper object has other dependencies, then to use it as a factory means pulling those dependencies along with it. A factory, meanwhile, should be a completely standalone class that's easy to pull in any place you need to do object construction.  Further, mapObject()'s existence in the Mapper context implies that it's a specialized kind of factory - one where the source of data is a specific kind of data store. A factory is meant to be more generic than that."
PHP,3acq9o,dracony,1 point,Sat Jun 20 22:49:14 2015 UTC,This is a pretty awesome reference
PHP,3acq9o,phpisthebest,1 point,Fri Jun 19 01:33:09 2015 UTC,Bookmarked. This is a fantastic resource.
PHP,3adin9,zphalcon,2,Fri Jun 19 06:03:14 2015 UTC,phalcontip.com   Just one?
PHP,3adin9,ThePsion5,1 point,Fri Jun 19 13:29:54 2015 UTC,Yes
PHP,3aesj9,gsmaciel3,3,Fri Jun 19 15:18:57 2015 UTC,"I may be downvoted to hell for recommending this, but I've actually had pretty good luck with building large sites like this on ExpressionEngine.  It's based on the old CodeIgniter framework and has a pretty good collection of third-party add-ons that are well tested.  EE stores pages as templates in the database or you can save them as files.  If you want static content you just paste it into the templates, otherwise you can create channels to store one or more content types.  Basically think of it as a custom post type in Wordpress.  You define all the fields, then make one or more channel entries.  You then drop loop code into your templates to output and format those entries.  You can mix and match just about anything.  For permissions you can create custom groups and define access on a template-by-template basis.  Templates can also be saved as versions in the database to easily go back after a screw-up by one of your editors.  I've also heard from fellow devs having good results with the following, but I haven't used them:  Craft (https://buildwithcraft.com/) ProcessWire (https://processwire.com/) Bolt (https://bolt.cm/)  Definitely see what others are using though, and in a crunch you can always roll your own in Laravel."
PHP,3aesj9,kodiashi,1 point,Fri Jun 19 15:58:23 2015 UTC,"in a crunch ... roll your own   ಠ_ಠ  EE is a good CMS platform. It might not be bleeding edge code-wise, but it is stable, well-supported, and has a large community. It is a good platform for starting small and building upon it to do more custom things."
PHP,3aesj9,akeniscool,3,Fri Jun 19 16:40:27 2015 UTC,"That doesn't sound like that big of a project. In any case you'll have to update the server to something with a newer PHP version (e.g. Ubuntu 14.04).  If you're interested in picking up a framework while doing the job, I recommend Laravel. If you only care about CMS, pick a suitable Drupal distribution."
PHP,3aesj9,rawfan,2,Mon Jun 22 10:30:10 2015 UTC,You could get this done in like an hour with Drupal. Seriously.
PHP,3aesj9,fleshintogear,8,Fri Jun 19 17:19:14 2015 UTC,Nothing is ever done in an hour using Drupal. Seriously.
PHP,3aesj9,EveryNameIsTakenBro,2,Fri Jun 19 18:14:28 2015 UTC,You could do it vanilla or use a distribution.  https://www.drupal.org/project/cms  The longest part will be transitioning the theme.
PHP,3aesj9,fleshintogear,1 point,Fri Jun 19 18:48:53 2015 UTC,"Then install WYSIWYG. Which one though? OK now views. The list goes on. Drupal is a fine platform but it is a  power house. Takes some time to get a first setup just the way you want it, especially if you are not familiar with Drush."
PHP,3aesj9,EveryNameIsTakenBro,1 point,Fri Jun 19 18:54:43 2015 UTC,I second that
PHP,3aesj9,buzzTroll,1 point,Sat Jun 20 02:20:38 2015 UTC,ProcessWire. It's stupidly easy to use and is ideal for lots of different content types.
PHP,3ae4qp,CarlR,2,Fri Jun 19 11:23:48 2015 UTC,"Is there a recommended way to handle such a large database, with multiple users needing to have their own data in relation to each word? Again, perhaps there an out of the box solution, or some kind of template I can hack for this situation?   You have a table of Users with primary key ""id"", let's say, and table Words with primary key also ""id"".  You need a third table, with compound primary key [userId, wordId] and a third column for your number (and as many more as you want).  When you select rows in that table, always select by the entire compound key, whether for reading, writing or deleting and you'll be ok. The userId should come, of course, from the current session user.  In general when I have user-scoped data, I always include userId = $theCurrentUserId in my queries. Even when the userId is not part of the primary key, so just selecting by the primary key would be sufficient, include the condition that the userId matches anyway. Better be safe than sorry. By always including that condition you treat every user's data as if it was a separate table."
PHP,3ae4qp,enygmadae,1 point,Sun Jun 21 19:34:07 2015 UTC,"Thank you for going over this in detail for me. After p_barker's advice I had been doing lots of reading on relationships and lookup tables. Your explanation really helped fill in the blanks for the kinds of tables I need to set up. Also the use of including userId = $theCurrentUserId sounds very interesting, I definitely appreciate double checks & extra security. I will give it a shot if I can get that far.  At the moment I am struggling to set all of this up in Laravel though. I think I have set up migrations properly, but I can't get my head around models. All the tutorials I find are for older versions and seem to use different code for this. It seems in laravel 5 I need to use something like ""use class Word extends Eloquent"", something with Illuminate and something with implements.  I am going through some laracasts to hopefully figure out this step! :)"
PHP,3ae4qp,BareNakedCoder,1 point,Mon Jun 22 17:29:23 2015 UTC,"There's a project I've worked up to help make user management a bit simpler, Gatekeeper, and it now includes an ""examples/"" directory with a simple login form. It sounds like you need more than just a login form as you state that they ""can only effect their own column"" values. Gatekeeper also provides simple role-based (permissions) access control too, so it might be something to check out."
PHP,3ae4qp,p_barker,1 point,Fri Jun 19 11:43:58 2015 UTC,"Thank you for showing me Gatekeeper. After some reading of both Gatekeeper and Laravel I've decided to go with Laravel, just because of the sheer size and popularity of the framework. I feel a beginner like me will need a larger community, and the support of things like laracasts, and the extra functionality."
PHP,3ae4qp,p_barker,1 point,Fri Jun 19 14:16:29 2015 UTC,"Take a look at the Google Identity Toolkit.  It will handle sign in for your web site.  Users can use their Google, Facebook, Yahoo, PayPal, etc id."
PHP,3ae4qp,rawfan,1 point,Fri Jun 19 16:33:19 2015 UTC,"thanks, i've just got round to taking a look at this. it is very interesting, but I wouldn't want to use it as a primary login method for my project. Maybe I will try and add it as an additional option later, if that is possible"
PHP,3ae4qp,Maurandk,-1,Mon Jun 22 17:07:25 2015 UTC,"For the first question I would recommend Laravel. Simple to setup and has user auth almost out of the box. For more info see this in the docs: http://laravel.com/docs/5.0/authentication  For the database, I would assume the words table has an auto increment ID column. Create a lookup table with columns for the user ID, the word ID and the word number or rank (1 to 10).  A one to many relationship from user to words. One to one for (userID + wordID)  to rank.  100k+ rows in a table is not overly large. With proper indexing is should be able to handle CRUD quickly."
PHP,3ae4qp,mrargh,1 point,Fri Jun 19 12:12:57 2015 UTC,"Hi p-barker. Thank you so much for your advice. Laravel did pop up in my research, I just wasn't sure what it was capable of, and whether it was worth the time of learning it. Thank you so much for linking to the relevant documentation. Now I am confident that it was worth some serious time learning! :)  The database words table does indeed have an auto increment ID column. I am relatively new to database design. (maybe it showed). But I think I follow the logic here. I will experiment with lookup tables, and relationships then hopefully I will be confident enough to implement your solution.  Again, my sincere thanks!"
PHP,3aeqjb,malkusch,1 point,Fri Jun 19 15:02:44 2015 UTC,This is interesting but I can't see any practical use for it
PHP,3aeqjb,ehansen,1 point,Fri Jun 19 18:47:33 2015 UTC,It's basically for traffic shaping at application level. I'm finalizing a facade around that in https://github.com/bandwidth-throttle/bandwidth-throttle Maybe that brings a bit light to usage.
PHP,3aeqjb,ehansen,1 point,Fri Jun 19 19:15:06 2015 UTC,"Wouldn't this be more beneficial once SDN picks up?  I'm just trying to figure out why someone would use it is all, not trying to bring down the code or anything."
PHP,3aeqjb,ehansen,1 point,Fri Jun 19 21:17:32 2015 UTC,To be honest I dunno what you mean. But it might be usefull if business logic requires traffic shaping. You might want to have that rule beside the rest of your logic instead of using an obscured infrastructure configuration.
PHP,3aeqjb,mrjking,1 point,Fri Jun 19 21:26:12 2015 UTC,"Yeah but for traffic shaping/throttling you're better off performance wise and such to have it controlled much deeper down the OSI layer.  Its like using a screw driver to hammer in a nail.  Its possible, it gets the job done, but its not the most effective tool for the job."
PHP,3aeqjb,ehansen,1 point,Fri Jun 19 21:30:09 2015 UTC,"Yeah but for traffic shaping/throttling you're better off performance wise and such to have it controlled much deeper down the OSI layer.   The problem isn't the layer level, but more that PHP isn't async. In Node.JS such throttling for a stream would be mostly free (despite it's at the same OSI layer). But for PHP, it's like shooting yourself in the foot a bit.  As for OSI, things move down the OSI model when you have the scale, budget and return of investment justify it. I once told a client ""I need 120 million USD to produce the machines that will fab the silicon wafers implementing your blog, it's more effective to burn on-chip than to use PHP."" He stopped answering my calls."
PHP,3aeqjb,mrjking,1 point,Sat Jun 20 13:10:52 2015 UTC,"It can useful if you're using an API that gives you X requests per minute, and you don't want to go over that. It allows for bursts while still staying under your limit."
PHP,3aeqjb,mrjking,1 point,Sat Jun 20 04:45:33 2015 UTC,Yeah but the app would or should already announce in some fashion how many requests are available in a given session
PHP,3aeqjb,groenengoud,1 point,Sat Jun 20 12:49:25 2015 UTC,"Not necessarily. If you're developing a website using a third party API to get data, the users do not care if they cause you to go over your limit. The majority of users don't even know what an API is."
PHP,3aeqjb,groenengoud,-4,Sat Jun 20 19:47:30 2015 UTC,"Is it just me who cracks up when they see a GitHub repo with 1-2 small classes, but all package attributes: full PHPDoc comments, tests, travis integration, readme and so on.  Just the fluff is several times the code itself.  Maybe it's just me."
PHP,3aatjp,suphper,12,Thu Jun 18 16:26:22 2015 UTC,so package
PHP,3aatjp,pushad,14,Thu Jun 18 19:10:56 2015 UTC,Many duck
PHP,3aatjp,that-other-username,8,Thu Jun 18 19:21:31 2015 UTC,Such go
PHP,3aatjp,bopp,1 point,Thu Jun 18 19:58:47 2015 UTC,is search
PHP,3aatjp,imbetter911,2,Thu Jun 18 22:05:51 2015 UTC,"Kind of wish it had some descriptive text for the best result, instead of a listing like that."
PHP,3aatjp,cpayan,1 point,Thu Jun 18 23:00:14 2015 UTC,You can make or improve those and we'd love any feedback on the process: http://duckduckhack.com/
PHP,3aatjp,_zekiel,2,Fri Jun 19 02:38:07 2015 UTC,"From the department of ""oddly specific search engine features""."
PHP,3aatjp,CliffEdgeOrg,2,Thu Jun 25 05:43:28 2015 UTC,"Actually, it is community contributed addon: https://duck.co/ia/view/packagist"
PHP,3aatjp,Pardalean,1 point,Fri Jun 19 05:49:11 2015 UTC,"Not much of a feature, but I made it my default search engine anyway."
PHP,3a9yh4,MikhailVink,17,Thu Jun 18 11:59:46 2015 UTC,Hopefully this means that the team will have more time to focus on implementing first-class support for PHP 7.
PHP,3a9yh4,theodorejb,6,Thu Jun 18 13:15:50 2015 UTC,"Yeah, or a Javascript parser that does not hang the main UI thread when selecting something."
PHP,3a9yh4,Wesleye,2,Thu Jun 18 14:12:45 2015 UTC,"WebStorm team has reworked JavaScript support from the scratch, so all the changes are coming in PhpStorm 9 (https://www.jetbrains.com/phpstorm/nextversion/)"
PHP,3a9yh4,Wesleye,1 point,Fri Jun 19 10:09:13 2015 UTC,"Cool, good to hear. Is that already available in the EAP version?"
PHP,3a9yh4,trcullen,2,Fri Jun 19 14:32:03 2015 UTC,"Yes, in fact. We've already supported PHP 7's return type hints in PhpStorm 9, and will enhance support (and add support for other features) in near future."
PHP,3a9yh4,jvwatzman,9,Fri Jun 19 10:14:26 2015 UTC,"""We’re unable to deliver the level of functionality & quality expected from an IDE by JetBrains, with the currently available Hack tooling APIs.""  This. I also asked for hacklang support and six months ago would have moaned about this decision. But, having developed jointly on PHP/HHVM over the last 12 months, Jetbrains is right. The tooling isn't stable enough to invest a lot on right now. The facebook team has done some truly amazing work on getting HHVM where it is today and it has done a lot for progressing PHP, PHP7 will be an epic step forward. But, yeah, writing hacklang has become slightly less enticing with the new PHP7 features combined with the rock-solid PHP tooling. I'm really excited as to what the facebook team will have for us over the next six months..."
PHP,3a9yh4,mnapoli,8,Thu Jun 18 13:10:25 2015 UTC,"Hey, engineer working on Hack here. Genuinely curious what issues you've run into integrating Hack tooling. I'm sure there are rough edges, but I'd love to fix them -- would you mind to (preferably) file GitHub issues for the problems you ran into, or (otherwise) elaborate somewhat here?"
PHP,3a9yh4,assertchris,-2,Thu Jun 18 20:15:14 2015 UTC,"That's a bit of a double standard, isn't it.  Where are the ""PHP tooling APIs""? It doesn't have any."
PHP,3a9yh4,freebit,3,Thu Jun 18 15:59:53 2015 UTC,At the same time PHP and Hack do not have the same user base so I can understand that JetBrains doesn't want to invest a huge amount of effort/money into it right now.
PHP,3a9yh4,infectuz,2,Thu Jun 18 17:37:04 2015 UTC,HackStorm incoming...
PHP,3a9yh4,mnapoli,5,Thu Jun 18 23:22:18 2015 UTC,I agree with Jetbrains. Php7 is the future.
PHP,3a9yh4,mnapoli,3,Thu Jun 18 16:42:41 2015 UTC,"haven't used hack, anyone has impressions?"
PHP,3a9yh4,mnapoli,2,Thu Jun 18 13:03:23 2015 UTC,"Hack exists because Facebook had a ton of PHP code, a monolithic architecture (not as much as of last 2-3 years, but previously) and they didn't like where PHP is going.  It's basically their insurance they have their fate in their hands.  As a third party developer, relying on Hack has the opposite result: your fate is in Facebook's hands.  It has a quite more fleshed out type system, but with PHP7 the gap is starting to close in many important areas. And if you don't drive yourself in a corner like Facebook did years ago, you can also introduce other languages in your app as microservices you can connect to from PHP.  tl;dr It has nice things, but it's strategically dangerous & the benefits are not substantial (anymore). I wouldn't."
PHP,3a9yh4,akeniscool,3,Thu Jun 18 16:05:41 2015 UTC,Most developers have about as much control on PHP as they have on Hack (i.e. very very little).
PHP,3a9yh4,mnapoli,-1,Thu Jun 18 17:38:34 2015 UTC,"I don't have to explain the RFC voting process controlling PHP, I hope, but in short - you're wrong."
PHP,3a9yh4,akeniscool,3,Thu Jun 18 17:42:24 2015 UTC,"I don't get to vote on RFCs, like most developers. That's what I meant by I have very very little control. I just hope the majority of internals makes the best decisions (not always the case), just like I can hope Facebook's Hack team makes the best decisions for Hack."
PHP,3a9yh4,mnapoli,-2,Thu Jun 18 17:45:10 2015 UTC,"Anyone, including you, can propose RFCs and patches. If you propose RFCs and patches regularly, you'll be able to vote. You're complaining that you can't take an active role in the process... because you're inactive.  The trajectory Hack and HHVM are following shows they're narrowly following Facebook's interests, and many not that well designed features are haphazardly added into the language, sort of like how PHP was back in its early years.    I can hope Facebook's Hack team makes the best decisions for Hack.   No, Facebook's Hack team makes the best decisions for Facebook. I'm not saying they shouldn't, it's their project, their rules. It's generous enough that they have opened the source at all. But don't fool yourself.  Facebook cares about your interests as a Hack user even less than it cares for its social network users."
PHP,3a9yh4,headzoo,6,Thu Jun 18 17:49:36 2015 UTC,"No, Facebook's Hack team makes the best decisions for Facebook.   Just like internals voters make the best decisions for themselves, and we see over and over fights over what each one wants and what they deem not useful for them (so they refuse it for others).   If you propose RFCs and patches regularly, you'll be able to vote.   Yes you are right.  However let's look at the bigger picture. Your complaint about Hack seems to be:   your fate is in Facebook's hands.   Even if I had a vote in internals, only 1/100 of PHP's fate would be in my hands. I get a vote, but that's still a very diluted power. And even then, let's be realistic: we don't expect the 100 000 (rand()) PHP developers in the world to get a vote in internals. If everybody did, everybody would have a say, but each vote would be minimal. Democracy is still ""tyranny of the majority"".  Anyway, all this to say that realistically, PHP's fate isn't in my hands. Just maybe a tiny tiny percent more than Hack. But to me it's negligible.  I find it more interesting that PHP gets leaded by conflicting interests and political maneuvers, whereas Hack gets leaded by a team with a goal.  Also, what is the difference with, e.g., Go? Or Java? (maybe there is, this is an honest question)"
PHP,3a9yh4,headzoo,0,Thu Jun 18 18:03:14 2015 UTC,"Even if I had a vote in internals, only 1/100 of PHP's fate would be in my hands. I get a vote, but that's still a very diluted power.   This has never and will never be a valid argument for not voting."
PHP,3a9yh4,jvwatzman,1 point,Thu Jun 18 18:20:34 2015 UTC,"I'm not saying that. I'm saying I don't realistically have the fate of PHP in my hands, at least not significantly more than other languages."
PHP,3a9yh4,mnapoli,0,Thu Jun 18 19:37:59 2015 UTC,"I'm only refuting the statement I quoted. I don't disagree with the idea that it's difficult for most developers to have any control over a product's direction (be it PHP, Hack, or others). But your argument is presented as ""I haven't taken any action, so that's why I can't do anything"", as /u/idiot-with-opinion also expressed. We might even share your opinions, but not how they've been portrayed here so far.  That and I hate people who make that excuse for why they don't vote for politics, so I felt compelled to reply. :)"
PHP,3a9yh4,jvwatzman,-3,Thu Jun 18 22:07:28 2015 UTC,"Java is controlled by multiple parties, and the JVM has multiple implementations based on an extensive specification. I won't write books here, search for it and learn.  If the many broken Hack extensions and suspiciously Facebook-centric featureset can't convince you, neither will my arguments. Guess which Hack extensions work fine, BTW. Those Facebook uses. Case in point.  I think Hack/HHVM does have legitimate uses outside Facebook, but it's highly specific and somewhat risky. The feeling I get is with you it's more a case of shiny attracting you without thinking the consequences through. Everyone deserves what's coming to them."
PHP,3a9yh4,jvwatzman,1 point,Thu Jun 18 18:16:18 2015 UTC,We could have a nice and constructive discussion.
PHP,3a9yh4,nikic,1 point,Thu Jun 18 19:39:42 2015 UTC,"I'm so nice and constructive in this thread already, I bring shame to my nickname."
PHP,3abamh,RegsStandup,8,Thu Jun 18 18:30:25 2015 UTC,"Have a look at session, header redirect, and mysql."
PHP,3abamh,darkhorn,2,Thu Jun 18 18:43:28 2015 UTC,"This is a very broad request and the application/website you wish to build seems like it will be pretty complex and large. Also you would be competing with a bunch of other companies who already dominate this area (unless your just doing this for fun?)  Start first by coming up with some key objective. Make them real/attainable/possible objectives possibly with micro-goals on the way. I always find that if i come up with unreasonable/grandiose/complex objectives that I will get lost and lose valuable time running in circles.  Once you have those sorted out, begin to work on them based on a self given priority (or your bosses if you have one)  Do as much research as you can on your own for each objective so that you can get the best understanding. If you get stuck THEN ask questions. Make sure the question is precise and detailed so that people can know exactly what you're asking. This way they will be able to give you a precise and detailed answer.  For you I would start first by figuring out what type of server and frontend/backend language/frameworks you want to use.  Once that is done break up what all you want to be included in the website. If you want to keep track of users then I would start there as it seems the rest of your application is going to be user driven interactions. You will want to set up some sort of database to keep track of your users. One BIG BIG BIG thing you will need to worry about with users is security ESPECIALLY since you want to deal with their files and handle remote desktop!  After you have a decent SECURE user system set up then begin to work on the actual application.  Just my 2cents  good luck  also as u/geggleto stated, r/webdev is the place for a question such as this.  If you decide to go with PHP as your language you should look to /r/PHPhelp for help and keep up to date on cool new things in the PHP community here at r/PHP"
PHP,3abamh,schlocke,1 point,Thu Jun 18 19:46:22 2015 UTC,If you want a login/register system you are using a database anyway. So why not store the information that the users can access in the database and assign the data to the specific users? So only the user who created the information can see it?
PHP,3abamh,tzfrs,1 point,Thu Jun 18 18:43:45 2015 UTC,"I'm working under someone right now, and he doesn't want a database for the passwords. He wants ""a simple way."""
PHP,3abamh,mbdjd,4,Thu Jun 18 19:00:15 2015 UTC,"The ""simple way"" is to use a database. Doing this any other way is going to be a massive clusterfuck."
PHP,3abamh,davzie,4,Thu Jun 18 19:38:01 2015 UTC,Hahaha. By not using a database this will be the opposite of simple if you plan to build this out to do lots of things. Sure you could make the passwords sit in a JSON object in a file somewhere but then what about storing user specific data that they will then see? You can't avoid having a database here really mate.
PHP,3abamh,tzfrs,1 point,Thu Jun 18 19:40:58 2015 UTC,You could save the data as json to a textfile for each users.
PHP,3abamh,pee-ayche-pee,1 point,Thu Jun 18 19:26:21 2015 UTC,Is this for training/learning/demonstration/actually homework?
PHP,3abamh,dlegatt,0,Thu Jun 18 20:45:27 2015 UTC,This is something my boss wants to do so we can demonstrate what our service will look like. Also learning for me cause I want to learn how to create a secure user registration system using mysql and php.
PHP,3abamh,__constructor,1 point,Thu Jun 18 21:11:00 2015 UTC,"If it is just for demonstration, would SQLite be OK? Or is the final project going to be without any kind of database?  An app like this almost needs a database, otherwise you'll spend most of your time working around the fact that you don't have one."
PHP,3abamh,__constructor,0,Thu Jun 18 21:55:31 2015 UTC,"Well he wants to get something that people can use now. Meaning, he's going to show it to people and try to get them to buy it while I work on trying to make a better system."
PHP,3abamh,dlegatt,10,Thu Jun 18 22:08:39 2015 UTC,Your boss sounds like a dangerous idiot with no business sense or understanding of the technology he wants to sell. I would start looking for other jobs.
PHP,3abamh,brd_is_the_wrd2,1 point,Thu Jun 18 22:54:26 2015 UTC,"I'm just using this to get experience I can put on my resume. I'm currently go to college and taking any computer course I can get my hands on. I want to work with security/monitoring servers/some database, but I'm not too sure how to get a job with no experience. I met him cause he's my roommates dad's friend."
PHP,3abamh,geggleto,3,Thu Jun 18 23:52:03 2015 UTC,"Good luck. Even in your position, I wouldn't consider the job worth it.  If you want to get a job with no real world experience, look for Junior Developer positions. Some places will hire people with very little knowledge at all and expected them to learn on the job."
PHP,3abamh,NeoArc,3,Fri Jun 19 01:53:04 2015 UTC,"Installing a database server and configuring php, be it mysql, mssql, or postgresql, takes literally 10 minutes. A database schema to do what you described would take two hours maybe to sketch out and refine. There is no reason not to use a db for this project. And your boss needs to learn the difference between a tech demo and a shipping product."
PHP,3abamh,zushiba,0,Fri Jun 19 02:01:13 2015 UTC,Selling a product that doesn't exist is fraud.
PHP,3abamh,zushiba,-4,Sat Jun 20 09:45:01 2015 UTC,This really isn't the place for these types of questions ... maybe http://www.reddit.com/r/webdev
PHP,3a6sl3,zooboole,33,Wed Jun 17 17:56:34 2015 UTC,"Its so strange that the PHP community shits on the idea of building desktop apps with PHP,   But the node community..... well, the node community is happy to do anything that JS wasnt initially designed to do."
PHP,3a6sl3,aequasi08,6,Wed Jun 17 23:26:38 2015 UTC,"When PHP-GTK was still being actively updated, it wasn't really that bad. The docs were the biggest pain. I tried updating them, but Docbook is a major PITA. It got me into working on the main docs project, though.  I built a little hotel reservation system with PHP-GTK, and it was pretty rock-solid stable. It wasn't great on memory, of course, but neither are the competitors built in VB. >.>"
PHP,3a6sl3,frozenfire,1 point,Thu Jun 18 00:44:34 2015 UTC,I'd love to make something just for shits and giggles.
PHP,3a6sl3,aequasi08,2,Thu Jun 18 01:13:32 2015 UTC,"I encourage you to. At the very least, if you don't know much about how GTK works, it'll teach you a whole lot. That's valuable transferable knowledge."
PHP,3a6sl3,frozenfire,1 point,Thu Jun 18 01:55:50 2015 UTC,"uh oh, VB? you mean VB.NET or VB6? :O"
PHP,3a6sl3,dika46,2,Fri Jun 19 15:26:44 2015 UTC,"The last reservation system I worked with was ROS2000 by Digital Rez. I believe it was built in VB6. It's been too long to remember, though."
PHP,3a6sl3,frozenfire,4,Fri Jun 19 15:50:31 2015 UTC,I've yet to see a single well made php-gtk desktop app.  They've all been crap.  I'd love to see an example of something worth studying.
PHP,3a6sl3,pitiless,1 point,Thu Jun 18 01:43:56 2015 UTC,"It's possible - many moons ago I wrote a really nice Point-of-Sale solution using PHP-GTK.  The problem is that extension is effectively dead and has been for years. I relied on the pyGTK and native C documentation to do most of what I did, and between that, various bugs and the difficulty of debugging such apps it wasn't exactly a great experience."
PHP,3a6sl3,aequasi08,2,Thu Jun 18 17:00:06 2015 UTC,"I think you missed the point. JS wasn't designed to run server side code. And in GTK, PHP is used no differently than on a website, just without the HTTP requests."
PHP,3a6sl3,IceTheBountyHunter,21,Thu Jun 18 15:43:15 2015 UTC,Difficulty: Biginner   ಠ_ಠ
PHP,3a6sl3,Ickle_Chris,20,Thu Jun 18 15:46:02 2015 UTC,"Keep at it, youll be an expurt in no time!"
PHP,3a6sl3,Garethp,19,Wed Jun 17 22:27:36 2015 UTC,"When all you have is a hammer, everything starts looking like a nail, huh?"
PHP,3a6sl3,drrck2403,2,Wed Jun 17 22:51:53 2015 UTC,"What is... the most misused mantra in all of software development?  I'll take Haterade for 1000, Alex."
PHP,3a6sl3,adamn90,3,Wed Jun 17 22:04:22 2015 UTC,I used Nightrain on a project recently and was really happy with it. Tie it together with a flat file database and your'e good to go with an executable site that you can run from a USB stick.
PHP,3a6sl3,cajogos,3,Thu Jun 18 20:27:22 2015 UTC,"Even though I don't see why anyone would want to take this approach, I still feel like having a go at it lol"
PHP,3a6sl3,suphper,2,Thu Jun 18 11:42:09 2015 UTC,"There are also alternatives but none are good (including this one). It's all one big hack with caveats thrown in for good measure.  Bottom line, if your app is so simple it can be made in this (single process, only internal data storage with SQLite, memory hog surroundings due to Chrome) then you'd be better off making it in a proper desktop oriented language - you'd finally have a good use case to learn it and it wouldn't take long."
PHP,3a6sl3,aleste2,1 point,Thu Jun 18 11:59:33 2015 UTC,"People with Nodw.js + webkit are happy doing the same thing. PHP developers are hating this.  Maybe PHP community doesn't like fun, after all."
PHP,3a6sl3,GlowInTheDarkDonkey,1 point,Thu Jun 18 05:37:25 2015 UTC,"No.  Just... no.  With all of the hassle there is with dealing with php + javascript + css + html just to create something user-friendly why the fuck would I choose to use all of that to make something that pretends to be a desktop app but which isn't?  Fuck that.  The time it takes me to get anywhere significant with web-based projects would take FAR less time to do in a language that compiles for the OS you are wanting to run your project on.  No fucking-around trying to style shit just to get some damn button to sit in the right position.  Just pick that fucker up in the IDE GUI and drop it pixel-perfect where you want it.  Done.  No fucking-around with AJAX to try and make your page respond fluidly to user actions without doing an entire page reload.  Just find the right event handler and dump your code in it.  No mental context switching as you switch languages back and forth.  Nothing.  Why would you use stuff that is intended to hackishly recreate a desktop app experience through sheer will and the sacrifice of sanity instead of actually creating a legit desktop app?  This is the type of embarrassing nonsense that the PHP community cops shit about.  This is the definition of doing things the hardest fucking way possible.  This is just wrong, and encourages wrong behavior and thinking.  If it's designed as an online app then upload the damn thing online and stop pretending to be a desktop app."
PHP,3a6sl3,Jack9,3,Sun Jun 21 13:29:05 2015 UTC,"This is the definition of doing things the hardest fucking way possible   Your problem of getting a specific UI is not THE problem. Of course an HTML solution is going to suck, if you aren't particularly skilled and hate CSS (which I do). People who ARE good at these things, have no trouble at all. That's YOUR characterization and you might be competent enough to notice that.  I am interested in what languages you think, trivial desktop applications are produced in and why a PHP/Web developer would be compelled to use it."
PHP,3a6sl3,GlowInTheDarkDonkey,-2,Thu Jun 18 04:17:26 2015 UTC,"People who ARE good at these things, have no trouble at all.   That doesn't address the fact that it's as simple as picking-up an object and dropping it on your form in any GUI and it existing literally where you drop it, as opposed to having to fuck at ALL with css to do... anything.  Or is there some Dreamweaver-like utility that I'm not aware of which will let you design a page with simple drag and drop and then let you build code off event handlers for everything? If you need to load a graphic for some object as it's background then press the button and load the image and it's now a part of the resources for the project.  No fucking around trying to figure-out the correct tree-structure to drop your css and theme images into and then figuring-out how best to style it so it sits in the correct position.  No matter how you look at it there's always going to be more work involved with attempting to recreate a desktop experience with something that is a web app.  Web apps are, after all, nothing more than a very poor facsimile of a native application.   I am interested in what languages you think, trivial desktop applications are produced in and why a PHP/Web developer would be compelled to use it.    That's such an open ended question.  Literally any language that compiles to a native exe, or provides native controls and a gui to design the window.  If you are using a language intended to compile to some OS you'll usually find a plethora of objects you can drag and drop onto a form and then drop code into their event handlers.  It's been a long time since I've written anything in Delphi, but I'd still choose that any day of the year over this threads PHP abomination.  It's absurd to entertain the idea that bundling a web app which aims to emulate a desktop app into a package which itself then emulates a desktop app is somehow going to be anywhere near good enough or worth the time to waste on it.  Upload the files and stop dressing up the web-app to be something it's not.  I can't believe you would even ask the question.  Why WOULD you choose to use this stuff to try and recreate the online experience instead of just writing an actual program that deals with regular system messages and events.  You are just bundling all of this overhead for a far inferior experience that requires more time and effort to create."
PHP,3a6sl3,coderstephen,3,Thu Jun 18 05:59:56 2015 UTC,"I don't think it's the best idea ever either, but you don't have to go bashing around just because you don't like it. Some people must like the concept, or we wouldn't have a history of things like it, like NW.js, AppJS, Windows Runtime (which many Windows Store apps use HTML/JS), and good ol' HTAs which have been around for a long time.   That doesn't address the fact that it's as simple as picking-up an object and dropping it on your form in any GUI and it existing literally where you drop it, as opposed to having to fuck at ALL with css to do... anything.   Assuming you do have a drag-and-drop form builder, which there are several for HTML/CSS as well as for Windows Forms, GTK, etc.   No fucking around trying to figure-out the correct tree-structure to drop your css and theme images into and then figuring-out how best to style it so it sits in the correct position.   Clearly you've never worked with GTK; it's all about the widget tree. ;)   Web apps are, after all, nothing more than a very poor facsimile of a native application.   Not really. They are just different. A dog is a very poor facsimile of a cat."
PHP,3a6sl3,GlowInTheDarkDonkey,-1,Thu Jun 18 06:27:11 2015 UTC,"And how much overhead is there with all of this?  Are we now at a point where we just don't care about bloat in our programs and it's more important that we try to shoe-horn these languages into circumstances they were not designed at all for?  If that's the case then let me know so I can update my stance on things like this because as far as I know it is still relevant.  It's like things have swung the other direction from being razor sharp in asm, and now we are on the other end where we are packing a whole bunch of shit just to run a bit of php and js on something that's not the browser.  This all seems inelegant and a regression."
PHP,3a6sl3,coderstephen,3,Thu Jun 18 07:26:17 2015 UTC,"I agree that this has a lot of overhead that could be avoided, both in development time and processing power. But when you're making a simple, one-screen program for a tiny company's internal use, it doesn't really make a difference if the program takes 11 ms or 200 ms to open."
PHP,3a6sl3,GlowInTheDarkDonkey,-2,Thu Jun 18 07:40:29 2015 UTC,"I'm not so much offended by the running time, rather all of the shit needed to run the server and chrome and whatever else.  Instead of a couple of kb filesize you get what... I'm guessing a few meg?  And then the memory it takes on top of that.  There's something chronically wrong there.  It screams to me ""hey we are really stretching the limits of what is reasonable here and should take a moment to think if this is worth it or if there's already better options out there"".  It's obnoxiously wasteful and trying to shoehorn something that belongs elsewhere onto the desktop.  I can't get around the fact that it should just get uploaded somewhere and be done with it, else write an actual desktop app, not this emulated bullshit."
PHP,3a6sl3,irphunky,2,Thu Jun 18 07:48:38 2015 UTC,"We have corp clients that use our sass project that refuse to update call centre staffs PC from IE6/7.  I've proposed using something like this (CEF really) as away of giving us the ability to drop support for legacy browsers while keeping these clients happy.  Yes its stupid, but they don't want to budge and they're a big enough chunk of our revenue to block it for us."
PHP,3a6sl3,GlowInTheDarkDonkey,-2,Thu Jun 18 08:26:06 2015 UTC,"I'm not saying people won't find a use for this stuff.  My fear is that they will.  But it should be abundantly obvious that they SHOULDN'T.  And as you demonstrated here this may be a shit solution to a shit situation because of dumb people.  It's not a rational solution to any rational situation.  I use php.  PHPStorm is open right this very minute on my screen.  I would say I almost like PHP and have few issues with it.  But this ""desktop application with PHP"" concept where it is just packaging a web app into a browser+server combo exe is pretty fucking dumb IMO."
PHP,3a6sl3,drrck2403,1 point,Thu Jun 18 07:02:10 2015 UTC,"Dumb like a fox.  I mean, Docker is basically the same exact premise in different clothing, and you'd be burned at the stake for saying these kinds of things about that.  Even your browser itself is using the same premise.  It's practically a VM these days.  Don't be so quick to dismiss PHP as a platform.  The arguments against it are all completely superficial at this point.  They boil down to ""it feels weird"" rather than anything substantial or objectively and demonstrably inferior."
PHP,3a6sl3,Jack9,0,Thu Jun 18 07:08:08 2015 UTC,"That's such an open ended question   You suggested it was straightforward. Saying there are a lot of simpler choices, is disingenuous.   Literally any language that compiles to a native exe, or provides native controls and a gui to design the window.   So your answer is ""probably Delphi"". Looking at: http://stackoverflow.com/questions/1415267/how-do-i-make-the-scroll-bars-show-up-on-a-tscrollbox, I'm not able to determine it's much different from managing CSS, at all.  A better choice would be RealBasic (which is basically free VB). Of course both Delphi and RB come with HUGE performance penalties for anything non-trivial and the programs are less portable (the binaries aren't at all for any of these, but I can port the PHP).   This is a problem with the ecosystem, which is orthogonal to how we got here."
PHP,3a6sl3,dohpaz42,1 point,Thu Jun 18 20:36:57 2015 UTC,"So really it is just a launcher that bundles your app and launches a local web server to run it in your web browser of choice? Totally a desktop app, sure. 👍"
PHP,3a6sl3,cichli,15,Thu Jun 18 20:41:01 2015 UTC,"The post recommends using the embedded Chrome (CEF) version. That way you'll know your app will look and behave the same on any computer, it doesn't matter what browsers or version you have already.  Popcorn Time does essentially the same, except it's embedded Chrome+Javascript. From what I can tell it's becoming more common. IIRC the Atom editor too.  Negative vibes in here.."
PHP,3a6sl3,Kratzyyy,1 point,Wed Jun 17 22:35:59 2015 UTC,Spotify also.
PHP,3a6sl3,cube-drone,2,Wed Jun 17 22:42:48 2015 UTC,Yes
PHP,3a6sl3,filmdc,-3,Thu Jul 9 07:06:44 2015 UTC,"Is PHPOcean like... DigitalOcean, but, you know, the shallow end?"
PHP,3a6sl3,SeerUD,0,Thu Jun 18 07:42:21 2015 UTC,"phpOcean is a place any programmer can teach and share what he knows with others. Not necessarily professionals, but just passionate."
PHP,3a6sl3,dika46,0,Wed Jun 17 22:26:13 2015 UTC,"This would be cool if I could connect to external data sources like an already existing MySQL or MSSQL...anyone know if that's possible, or is this container completely isolated?"
PHP,3a6sl3,mikeyio,4,Thu Jun 18 07:27:40 2015 UTC,Use an API?
PHP,3a6sl3,kikikol,1 point,Thu Jun 18 02:37:02 2015 UTC,"filmdc, it's possible check this out: https://code.google.com/p/phpdesktop/wiki/KnowledgeBase#Can_I_use_MySQL?"
PHP,3a9r5z,tfidry,5,Thu Jun 18 10:24:09 2015 UTC,Who is still die()ing? Xdebug is the way to go :D
PHP,3a9r5z,PatrickBauer89,1 point,Thu Jun 18 12:41:41 2015 UTC,Doesn't stop you using xdebug in dev with a decent IDE
PHP,3a9r5z,mrargh,-4,Thu Jun 18 14:15:24 2015 UTC,seriously. how the fuck do you get anything done?
PHP,3a9r5z,fleshintogear,1 point,Thu Jun 18 15:42:47 2015 UTC,How do you mean?
PHP,3a9r5z,mrargh,-1,Thu Jun 18 18:26:39 2015 UTC,"honestly, i still prefer die()ing more often than not. Xdebug adds huge slowdowns into my code, and really doesn't help me debug that much faster."
PHP,3a9r5z,aequasi08,0,Thu Jun 18 20:23:51 2015 UTC,id say the problem isnt with xdebug then.
PHP,3a9r5z,fleshintogear,0,Thu Jun 18 15:48:07 2015 UTC,"xdebug has been proven to add huge slowdowns with code, thats definitely xdebugs problem. I really dont run into big enough problems for the use of xdebug that often. A simple die gets the job done in the same, if not less time, with no code slow down."
PHP,3a9r5z,aequasi08,1 point,Thu Jun 18 18:27:02 2015 UTC,How is xdebug slowing down your code? Are you running it in production or on your qa/staging servers?
PHP,3a9r5z,bga9,0,Thu Jun 18 18:30:26 2015 UTC,"Not sure exactly how, just makes it slower, by a large percentage.  I'm using it on development and rarely on qa/staging. Never on production."
PHP,3a9r5z,aequasi08,0,Fri Jun 19 00:56:17 2015 UTC,"Xdebug is a great tool and I love doing step by step debug with it. Still, to fully test a function/service PsySH is more suited for the task. And one thing we still lack when using Xdebug is the lack of interactive shell once the endpoint has been reached. That's something I really miss from nodejs and PsySH can of allow you to do that."
PHP,3a9r5z,davidf81,1 point,Fri Jun 19 01:29:38 2015 UTC,"I still don't see how this offers me something XDebug doesn't. Evaluate expression / console work just fine for me in PHPStorm via XDebug, even on the last line of execution. Seeing as there's no context to inspect after execution is over, what do you mean by ""once the endpoint has been reached""?"
PHP,3a9r5z,teuna,1 point,Thu Jun 18 15:48:13 2015 UTC,"My bad I was not clear enough. Yeah you have a shell where you can evaluate your expression once the breakpoint reached. But it's the basic PHP shell and doesn't do much and is kind of a pain to use. But that point is really personal so if you prefer Xdebug for that, I won't tell you to give it up and use PsySH instead. It's really just a matter of personal preference.  That being said, I'm not saying PsySH should replace Xdebug or a var_dump();die();. It's just that in some cases, those two are not suited for the job, for instance when you need to test something in a service or doing something in a PHP shell. If you don't met such cases, good for you and stick with Xdebug!  Well now to the main point: I thread was not much about the use cases but more on the fact than PsySH exists, has already been ported to some frameworks like eZ Publish, ZF, Drupal, Laravel and so on, but not to Symfony yet. Now it's done.  If you wish to see if it's really usefull for you, I recommend to checkout PsyshBundle doc or the offical website psysh.org which contains some slides about debugging in PHP."
PHP,3a9r5z,meandthebean,3,Fri Jun 19 14:59:07 2015 UTC,"REPL is nice, but it isn't effective when you have to type and modify anything longer than a line.   Which, frankly, is almost always the case in modern PHP, unless you're just testing basic APIs like ""how exactly did substr() work with negative indexes damn it"" (a REPL favorite of mine...).  I personally have an ""eval box"" which is a developer webpage where the left half is a code editor, and the right half shows the results of running it.  I can copy paste entire classes and modify them and run the result.  It's surprisingly similar to Swift's playgrounds... they stole my precious."
PHP,3a9r5z,haydenk1337,1 point,Fri Jun 19 17:04:47 2015 UTC,"I have a run-php folder on my devbox, it's great for simple stuff but also for a bit more complex stuff"
PHP,3a9r5z,Jonny_Axehandle,1 point,Thu Jun 18 15:56:19 2015 UTC,"Why? You can easily load folders or retrieve services. To me it seems an ""eval box"" is far more limited in both functionalities and usability. Or maybe it's just me that don't see how your eval box really works."
PHP,3aanxa,th3fallenon3,1 point,Thu Jun 18 15:45:12 2015 UTC,Looks cool! I was looking for such a Slack team before but didn't find any of interest at chitchats.co. I think I might join. Thanks for the post.
PHP,3aa5al,phpuser123456,2,Thu Jun 18 13:07:16 2015 UTC,I wrote a blog post recently about setting up and using Jenkins for PHP projects - http://www.reddit.com/r/PHP/comments/333z9p/setup_jenkins_and_test_a_php_project/
PHP,3aa5al,alex_bilbie,1 point,Thu Jun 18 16:58:04 2015 UTC,"Seems very nice, thanks."
PHP,3aa5al,Shadow14l,-2,Fri Jun 19 07:22:42 2015 UTC,Use a paid 3rd party service like Travis CI or CircleCI instead of Jenkins.
PHP,3aa5al,Shadow14l,1 point,Thu Jun 18 16:27:37 2015 UTC,"It would certainly be easier, but it is against the companies policy."
PHP,3a72gn,ProtoJazz,31,Wed Jun 17 19:05:51 2015 UTC,Check out PHP the Right Way (http://www.phptherightway.com/) next.  Cheers! =C=
PHP,3a72gn,calevans,3,Wed Jun 17 19:27:02 2015 UTC,"I always find it weird that they call passing objects to your method ""dependency injection"" like it's this crazy complex design pattern. It's like the first thing you learn how to do when you write a function, before you even learn about classes. You just pass stuff.  I've always thought of DI as automatic DI. As in some mechanism is passing those objects in for you."
PHP,3a72gn,mahacctissoawsum,10,Thu Jun 18 01:01:47 2015 UTC,"There's a bit of a subtle cognitive difference though: sure a method can take parameters, and sure those parameters can be objects sometimes, but the point is to remove any dependencies from the class and pass those as constructor arguments. The difference is generally between:  function calc(Number x, Number y) {     $calc = new Calculator();     return $calc->op(x, y); }   and   function calc(CalculatorInterface $calc, Number x, Number y) {     return $calc->op(x, y); }   obviously the example is contrived, but it shows the ideas that you should be internalizing when you hear dependency injection as opposed to just passing parameters."
PHP,3a72gn,ebonwumon,3,Thu Jun 18 01:35:32 2015 UTC,"obviously the example is contrived   Not enough yet. We need to take it to eleven:  function calc(DeveloperInterface $john, PHPInterface $php, Number $x, Number $y) {       Hey, John, am I calling late? I know it's 2AM. I have this great idea about a calculator. }"
PHP,3a72gn,ThePsion5,1 point,Thu Jun 18 18:03:26 2015 UTC,"Needs more Java!  function calc(DeveloperFactoryInterface $devFactory, ProgrammingLanguageFactoryBuilder $codeFactory Number $x, Number $y) {     $language = $codeFactory->language('PHP')->expertise(1, 6)->build();     $sucker = $devFactory->create($language, 'John');     $sucker->placeEmail('Okay, I've got a great idea, I just need a partner to help with the implementation. You'll be paid in exposure and a share of the profits once we hit it big!'); }"
PHP,3a72gn,mahacctissoawsum,1 point,Fri Jun 19 13:28:40 2015 UTC,"Too contrived.  I wouldn't even fret constructing an object or two inside my method. Like what if its easier to write my ""calc"" method using a ""Point"" object instead of ""x"" and ""y"". Should I force the caller to give me a Point instead to simplify my algorithm? No, who gives a crap? That's an implementation detail -- that's none of their concern. I'll construct it inside the class. And I'll use the exact implementation that I need, not some arbitrary bastardized IPoint that they decide on.  You only need to let them pass in objects where there's a reasonable use-case to override something."
PHP,3a72gn,--frymaster--,5,Sun Jun 28 07:29:26 2015 UTC,"actually, the important pattern you should be looking at is dependency inversion. it's the 'd' in 'solid' programming.  basically, it states that you should be passing to methods abstractions of parameters rather than concrete parameters. the reasoning behind that is to make, among other things, refactoring easier, faster and less error-prone.  let's say that you have a method that accepts an argument of the class Apple. maybe it looks like add(Apple $apple). it works great. then the client suddenly decides that you also want to expand your wares to handle oranges as well. ugh.  with dependency inversion, you would create an interface called Fruit and make your class Apple implement fruit. then your method can be written like add(Fruit $apple). then when the client demands expanding to include oranges you can whip up a class called Orange that implements fruit and your add() method will magically continue to work without modification.   dependency inversion really helps writing bullet-proof code!"
PHP,3a72gn,Nicoon,5,Thu Jun 18 05:20:33 2015 UTC,"actually, the important pattern you should be looking at is dependency inversion. it's the 'd' in 'solid'programming.   Actually, Dependency Inversion is a principle. Dependency Injection is the pattern. Another pattern compatible with DIP is dependency injection's retard cousin Service Location, but we don't talk about him"
PHP,3a72gn,--frymaster--,3,Thu Jun 18 13:54:43 2015 UTC,you are both correct and hilarious. i admit that i scampered through my comment.
PHP,3a72gn,mahacctissoawsum,1 point,Thu Jun 18 14:36:09 2015 UTC,"with dependency inversion, you would create an interface called Fruit   Why an interface? I never understood this point. What's wrong with an abstract class? Maybe every Fruit has a method that'll be implemented the same way in 99% of use-cases. Why create an interface, and then create an abstract class based on that interface which defines the exact same methods again but implements a few of them?"
PHP,3a72gn,GSlayerBrian,2,Sun Jun 28 07:02:10 2015 UTC,"It always sounded like some sort of hacky exploit to me. We're taught ""injection = bad"" so I have a bit of a mental stigma against ""dependency injection.""  There should be some simpler term for it. As you say, isn't providing objects instanced by other Classes as an argument to a Class just a standard part of object-oriented programming? I don't know why it needs to be called something as scary sounding as ""dependency injection."""
PHP,3a72gn,GlowInTheDarkDonkey,3,Thu Jun 18 02:53:12 2015 UTC,"Because it's not at all about passing any old thing to any old function.  It's about entirely removing the need for the method to create other objects it needs, and instead you provide that TO your object as a param... and in this way your code can function exactly the same EXCEPT that it also allows you to write tests for the methods and provide mock/fakey/dummy/whatever objects INSTEAD of what your actual program normally passes.  This is why it's called ""dependency"" injection.  The ""injection"" part is the least important word of the two.  You are providing all the tools the methods ""depend"" on, so that you can swap them for something else when running unit tests.  The difference is that if you have a class that retrieves shit from a database and then other classes use it to retrieve various data then if your various class methods THEMSELVES create an instance of your db object then that's locked-in stone, whereas if you pass as a parameter your db object to your various methods for those methods to use then you are able to also write a test for your methods that passes something that looks, tastes, smells, and behaves just like your actual db class except it IS NOT your actual db class and instead can be just returning fake data and not hitting your db at all.  If you have a whole shit-load of tests that would all require hitting the database, or even modifying it, then that's horrific to test for if you all of your methods reach-out and instantiate their own instance of your ACTUAL db class, as opposed to you providing to those methods some object which may or may not be the actual db class or may or may not instead be your mocked-up class that behaves similarly but which just returns fake data.  Sure, it means providing a few more params for every method call, and seems like a fuck-around.  It is, but the trade-off is that you can write tests that pass mock objects instead of the legit objects your program actually uses.  So, you get to completely engineer the expected return values from your mock objects and use those expected values to test your methods."
PHP,3a72gn,GSlayerBrian,2,Thu Jun 18 03:47:28 2015 UTC,http://giphy.com/gifs/3oEdva8PnecPoI1ugM
PHP,3a72gn,nevvermind1,1 point,Thu Jun 18 03:53:26 2015 UTC,"omg, the most expressive follow up ever. too funny. where are those scenes from?"
PHP,3a72gn,GSlayerBrian,1 point,Thu Jun 18 23:17:12 2015 UTC,I think it's Tim & Eric.
PHP,3a72gn,mahacctissoawsum,1 point,Fri Jun 19 02:49:33 2015 UTC,"Oy, you're trying to complicate it again.  If I don't pass this DB in, how's the class going to instantiate it? Am I going to pass in my username, host, password and database name instead so that my class can instantiate it? Wait, that's 4 params. Fuck that, I'll just force the developer to give me the DB object and they can deal with that shit; it makes my life easier and simpler. Oh what's that? I'm inadvertently doing ""dependency injection""? No, I'm just doing what's simple and logical.  Okay fine, to be fair there are two other options. I could nab my database object out of global space. That makes my class a lot less flexible. Or pass in some ""container"" bullshit which I might be able to pull a DB object out of. I don't know why I'd ever want to add that extra layer of abstraction which only muddies things up though.  I've done the global thing. It's a bitch to pass along a DB object through 10 different layers to get it where you need it otherwise. Especially when you think you don't need it anymore after layer 5 and then realize oh shit, there's this one weird case on layer 8 that needs it. Yeah, okay, maybe there's something wrong here and you got your responsibilities messed up, but ehhh...we've got deadlines.  Even Laravel uses global databases up the wazoo. Every one of their ""facades"" references some global somewhere.   And anyway, how often are you going to mock a database object? Really? Everyone uses this example, but has anyone ever mocked a database in practice? Like, what, you built an entire engine that parses SQL and returns fake data? Or even if you don't go to the SQL level -- just something that understands the whacky ORM syntax which pretty much translates directly into SQL anyway?  You'd mock models for sure, but I can't think of a scenario where you'd mock a database. At best you'd just create a database full of test data and just use a real DB object."
PHP,3a72gn,djcraze,1 point,Sun Jun 28 07:17:57 2015 UTC,I thought that too.
PHP,3a72gn,mrjking,1 point,Thu Jun 18 01:11:07 2015 UTC,"It's not about passing objects to any method, it's usually the constructor (getter/setters work too but less common). It's so the class doesn't instantiate anything for itself, you usually rely upon a factory to create the dependencies. This makes it easier to test and possibly change the dependencies later."
PHP,3a72gn,mahacctissoawsum,1 point,Thu Jun 18 03:07:54 2015 UTC,I also don't understand factories. Why? Why on earth do I want a factory? What's wrong with the good old new operator?
PHP,3a72gn,Kyle_At_Work,1 point,Sun Jun 28 07:03:21 2015 UTC,"Automatic DI is called Inversion of Control, and DI is a part of it (of course), but DI is not necessarily automatic."
PHP,3a72gn,aequasi08,9,Thu Jun 18 13:13:57 2015 UTC,"if you are used to Java and C#, i would really check out Symfony (symfony.com) instead of laravel, as you will be more at home."
PHP,3a72gn,BlueScreenJunky,9,Wed Jun 17 20:50:22 2015 UTC,"Definitely look into a framework like Laravel.  Also have a look at composer and packagist which are the de facto dependency manager and package repository for PHP. It might seem a bit complicated at first (at least to me), but once you get it it makes your life so much easier !"
PHP,3a72gn,mythix_dnb,7,Wed Jun 17 19:35:58 2015 UTC,"I would reccomend symfony. Laravel is built using symfony components, so why not start at the source, right?  syntactic sugar only gets in the way of learning."
PHP,3a72gn,Top19,8,Thu Jun 18 07:51:41 2015 UTC,"I would definitely start on a framework. I was determined for the longest time to not use a framework, but if you look at any PHP job it will require a framework (not saying you want a job in PHP, but this is a good indication of what you need to know). Also don't get too worried about which framework you learn. Every framework will have libraries, routes, a controller, a config file, a model / data layer, so the important thing is just to get started on one.      Personally, I would pick Laravel. The main reason for this, besides how popular it's become lately, is you can then sign up for Laracasts, whose lessons tend to require Laravel. Laracasts will teach you to be a great developer (how to use Vagrant, code patterns, unit tests, etc) and nothing can really match it since it's entirely PHP focused (and quite cheap!)."
PHP,3a72gn,rawfan,2,Wed Jun 17 19:19:17 2015 UTC,"Technically I already have a job working with php. Php is not the focus, but a potential upcoming element. I just started a new job where one of my responsibilities is to upload and maintain some externally developed sites. And later on potentially update them. Thankfully they are somewhat simple and mostly forms and a database connection   I look into laravel, sounds neat"
PHP,3a72gn,mahelious,1 point,Wed Jun 17 19:24:22 2015 UTC,Let me stress the awesomeness of laracasts. You'll love it.
PHP,3a72gn,shif,4,Mon Jun 22 10:36:06 2015 UTC,"Learning a framework like Cake or Symfony will be useful.  They are extremely powerful tools and are widely used.  You may also want to review the php-fig PHP Standard Recommendations (PSRs) which have recently become very popular to inform how PHP projects ought to be built.  Finally meet some of your fellow coders: there is very likely a PHP Users Group or Meetup in your area, plan on going to a couple of meetings and getting involved.  Cheers!"
PHP,3a72gn,utotwel,5,Wed Jun 17 19:44:40 2015 UTC,"learn symfony if you want to have more freedom of choice, laravel if you want to develop faster but in a very opinionated way."
PHP,3a72gn,fenerli7,2,Wed Jun 17 21:56:13 2015 UTC,Laravel is no more opinionated than Symfony.
PHP,3a72gn,utotwel,2,Thu Jun 18 01:58:07 2015 UTC,"I had to do a quick search as I remember hearing something about this back when I was first looking at Laravel, and it happens to be a quote from yours truly.   Laravel [is] also more opinionated out of the box.   link to comment"
PHP,3a72gn,CaptainFydo,1 point,Thu Jul 2 14:32:12 2015 UTC,That was 2 years ago. Things change.
PHP,3a72gn,aequasi08,0,Thu Jul 2 14:50:50 2015 UTC,Agreed.  I have to use Symfony for an app at work and it feels so much more restricting than Laravel.
PHP,3a72gn,aequasi08,1 point,Thu Jun 18 02:50:49 2015 UTC,In what way?
PHP,3a72gn,utotwel,0,Thu Jun 18 18:17:02 2015 UTC,"Lets not throw around absolutes like they are candy. Laravel may very well be more opinionated. To say its not, is just your opinion :p"
PHP,3a72gn,erikbelusic,2,Thu Jun 18 18:17:34 2015 UTC,Meh. It's not.
PHP,3a72gn,mwjt42,2,Fri Jun 19 00:30:50 2015 UTC,^ that. I'm usually Overwhelmed by all the different options I have for doing the same thing
PHP,3a72gn,sturmhauke,2,Fri Jun 19 01:47:38 2015 UTC,"Awesome-PHP is the go-to repository for all amazing things developed for PHP:  https://github.com/ziadoz/awesome-php/blob/master/README.md  Plus another vote for Composer, Vagrant and Laravel (& Laracasts)"
PHP,3a72gn,Zatara7,2,Wed Jun 17 22:51:24 2015 UTC,"Zend is popular, if aging. It gets the job done, but it can be quite verbose. Cake is fast for basic CRUD apps, but also highly opinionated and somewhat inflexible."
PHP,3a72gn,zerostyle,1 point,Wed Jun 17 23:06:46 2015 UTC,"""All I really did was google ""how to do x in insert language here"" and copied code from the results."" sums up my college education and internship experience."
PHP,3a72gn,DxMonkey,1 point,Thu Jun 18 20:51:06 2015 UTC,I love the way it works as a preprocessor and can have pages of HTML with code embedded that get evaluated and dumped into the text.   Start using a proper framework like Laravel and learn to separate your logic from your views.
PHP,3a72gn,peterrushkin,1 point,Sun Jun 21 21:44:56 2015 UTC,"IMO, Laravel is quite nice.  Pros:    Easy to use - it's VERY similar to rails since it used it for inspiration  good documentation  friendliest community that's ever helped me   Cons:   Eloquent uses Active Record, which isn't good for unit testing Not used in almost any corporate/enterprises yet, so if you are learning to get a job just learn Symfony instead   Laracasts is great, though at times def went a bit over my head in the later sessions."
PHP,3a72gn,fleshintogear,-7,Thu Jun 18 00:17:27 2015 UTC,"I don't care what people say, Code Igniter 3 is really making some progress and I still love it.  Great framework."
PHP,3a72gn,peterrushkin,2,Wed Jun 17 23:22:05 2015 UTC,"Good luck passing any sort of competency test with PHP or even finding a great php job that needs you to know how things actually work.  CI 3 is just 2.4 at this point and is woefully behind Laravel/Symfony.  It doesn't help with the tards behind CI don't know what that are doing.  No wonder the majority of the community moved to Laravel.  Only the noobs are left.  Go look at CI forums and its horrible.  No one knows what they are doing, the basic of questions go unanswered.    As an employer, I really feel sorry for businesses who are hiring these guys.  With systems that probably dont work at all!"
PHP,3a72gn,DxMonkey,5,Thu Jun 18 00:46:07 2015 UTC,really making progress   fucking lol
PHP,3a72gn,fleshintogear,3,Thu Jun 18 03:29:28 2015 UTC,"i know right, talk about clueless"
PHP,3a72gn,DxMonkey,-2,Thu Jun 18 05:07:40 2015 UTC,"I was happy to see it in new hands and actually being worked on.  I never said I don't use Laravel or Symfony.  They are just other tools in the tool belt.  Get your neck beards out of knots.  For me, Code Igniter is what got me going in frameworks about 4 years ago.  Nobody was even talking about Laravel yet."
PHP,3a72gn,aequasi08,2,Thu Jun 18 10:43:32 2015 UTC,"Laravel was only just released 4 years ago, it's now the most popular alongside symfony."
PHP,3a72gn,DxMonkey,0,Thu Jun 18 11:04:03 2015 UTC,Exactly what I meant by that.
PHP,3a72gn,cookseancook,2,Thu Jun 18 11:11:30 2015 UTC,So why do you continue to use an outdated tool to do something that two other tools can do better?
PHP,3a72gn,fleshintogear,1 point,Thu Jun 18 18:20:16 2015 UTC,"Again, I never said I use anything, I said Code Igniter is a great framework to learn php stuff with.  Never once did I say that Laravel and Symfonary aren't better, or the best.  Others had already suggested them, so why beat a dead horse?  Laravel is especially great if you want dependency injection and for half of your project to be done for you (db migration and such).  I'm not sure how it helps this guy actually learn php, but it's whatevs.  I'd also like to note, and I've been doing this a long time, that the following is the cart from projects I've made money with.  Laravel:  $0.00  Code Igniter, Zend, Wordpress:  $Hundreds of thousands  Again, I'm not saying they are better for anything, just speaking as to what I've experienced, and what I've had to use in agencies and in-house employment."
PHP,3a72gn,mythix_dnb,-2,Fri Jun 19 13:27:31 2015 UTC,"Several comments are suggesting learning a popular php framework like symfony or laravel. I agree with that.  One alternative I would offer is to learn the ins and outs of a popular php platform, namely wordpress.   edit: like it or not, WP experience opens doors."
PHP,3a72gn,Compizfox,3,Wed Jun 17 22:55:01 2015 UTC,Good god no
PHP,3a72gn,Jonny_Axehandle,1 point,Thu Jun 18 03:28:13 2015 UTC,"look at it to see how not to do it, maybe."
PHP,3a72gn,Compizfox,-2,Thu Jun 18 07:55:12 2015 UTC,"Look into a proper templating engine like Smarty, learn how to design webapplications the MVC way.  Also learn OOP if you didn't already."
PHP,3a72gn,DrAEnigmatic,11,Wed Jun 17 23:04:23 2015 UTC,"Look into a proper templating engine like Smarty Twig, learn how to design webapplications the MVC way.   there i fixed it"
PHP,3a72gn,glasscalendar,1 point,Thu Jun 18 01:57:07 2015 UTC,"Why is Twig better than Smarty? Genuine question (I have no experience with Twig, only with Smarty)."
PHP,3a8j8o,_SynthesizerPatel_,3,Thu Jun 18 01:56:15 2015 UTC,"Note - I spoke there last year and am speaking there again.  I enjoyed php[world] last year, which was it's first year. It was kind of a nice break from the norm of most PHP-specific conferences like SunshinePHP, php[tek], LonestarPHP, etc, with the entire point being to get the different communities within PHP talking. There were a variety of tracks for people to attend that were specific to frameworks/CMSes but you could float between them at will.   It's put on by the same people as php[tek], and they know how to put on a good conference. The talks are usually pretty good, the food is excellent, and the after parties give everyone a chance to mingle and do things. There's not an emphasis on drinking (though drinks are provided, and Eli is a stickler for the beer selection) so it gives a chance for everyone to talk about the things they went to that day, catch up, network, and such without it being a huge drunk-fest.  The venue is nice. It's in Tyson Corner right next to a small shopping outlet, and a short walk from the Silver line, so getting places is pretty easy. The hotel itself has a nice sitting area ringed by the main rooms where everyone congregates for the hallway track.  If you work in any of the frameworks that are represented at [world], I think it's worthwhile to attend. You get a chance to talk to people off of your island and bounce ideas off of people you normally wouldn't. Last year I remember overhearing a conversation between Drupal and Wordpress devs about auto-updates and how to handle them, since that was a big thing Wordpress was pushing. There wasn't any turf wars going on and it really felt inclusive."
PHP,3a8j8o,dragonmantank,1 point,Thu Jun 18 02:39:17 2015 UTC,"There's not an emphasis on drinking (though drinks are provided, and Eli is a stickler for the beer selection)   That's wonderful to hear. I hate when there's an implied social pressure to imbibe alcohol. :)"
PHP,3a8j8o,sarciszewski,3,Thu Jun 18 13:29:54 2015 UTC,"From my experience, the following conferences, while they have open bars, generally don't focus on drinking as the main event for the evening. Almost all of them couple it with something else:   SunshinePHP MidwestPHP LonestarPHP php[tek] ZendCon php[world] TrueNorth MadisonPHP Conference   That's not an all-inclusive list obviously, just the ones that I've attended."
PHP,3a6o0s,juptrking,5,Wed Jun 17 17:25:50 2015 UTC,"I find particularly funny when I see developers unit testing internal abstractions. Thus:  public function a(){     if ($some && $complex && $evaluation) return true; }   is refactored into  public function a(){     if (significantName()) return true; } private function significantName(){     return $some && $complex && $evaluation; }   but then, they circumvent private significantName with Reflection to test have it tested, instead of addressing the coverage through the public interface (in this case, a())."
PHP,3a6o0s,dericofilho,1 point,Wed Jun 17 22:29:10 2015 UTC,"Agree, testing private methods using reflection is probably the worst thing you can do for coupling your tests with production code. Refactoring leave the tests green, all the behaviour is still tested, so why would you wan't to change the tests? If you do, you risk coupling your tests. Some might disagree but in my opinion that applies when extracting into a class as well. As we extract into private methods that are not tested directly, why would extracting into private classes be any different?"
PHP,3a95ux,piegus,1 point,Thu Jun 18 05:33:08 2015 UTC,"You can't in Symfony 2.5. You need Symfony 2.7 where you can use the choice_attr option: https://github.com/symfony/symfony/pull/14050  Upgrading to 2.7 is easy and worth it, since 2.7 is an LTS release. Just be careful for deprecation warnings!"
PHP,3a4my5,theodorejb,26,Wed Jun 17 04:52:32 2015 UTC,"Well, holy sh*t, that's much better.  I did think the naming was confusing when it was introduced, but I thought there's no hope of changing anything as the specs are locked.  But... I'm glad the rules were broken a bit here in order to fix this.  Great job!"
PHP,3a4my5,trowski2002,5,Wed Jun 17 07:03:53 2015 UTC,"Thank you, glad to hear people are happier with the new hierarchy! I spent a lot of time discussing the proposal and implementing the patch."
PHP,3a4my5,trowski2002,1 point,Wed Jun 17 13:51:32 2015 UTC,You're awesome!  BTW can you please say:   Will it be officially ok to implement Throwable in userland? Will it be officially ok to extend Error in userland?
PHP,3a4my5,trowski2002,3,Wed Jun 17 17:37:31 2015 UTC,"Throwable cannot be implemented in userland, but Error can be extended.  Throwable is not implementable for a couple reasons:   A thrown object needs to carry a stack trace, which the engine builds and adds to the object when it is created. A userland class would not automatically have this functionality, so it makes more sense to extend an existing exception class. (This behavior could be changed in the future to allow implementing Throwable, but would require a drastic redesign of PHP's exception handling system and seems unnecessary). By preventing userland implementing of Throwable, code can depend on all thrown objects either extending Exception or Error. If users could roll their own throwable classes, error handling would become more challenging."
PHP,3a4my5,Firehed,2,Wed Jun 17 19:22:17 2015 UTC,"Thanks for your answers!  You know, I've been thinking. Generating a stack trace is expensive, and not often needed (usually only when the exception bubbles to the top and has to be logged with its trace).  It probably would've been nice if throwable didn't have attributes like message, code and trace but just mark something that is throwable.  That would allow implementing lightweight objects to be thrown, without needing a stack trace in the first place. There are languages where you can throw anything. You can throw a string, a number, or any custom object. And only the exception types carry a stack trace.  Just thinking out loud... I realize this would mean we have to ""cast"" (i.e. check with instanceof) a Throwable before using any Error or Exception methods, so it has downsides as well."
PHP,3a4my5,Danack,2,Wed Jun 17 19:26:57 2015 UTC,"I considered this too, but what happens when a thrown string bubbles up to the top? Where did it come from? Sounds like a potential debugging nightmare. Throwable needs to have some methods or the thrown object wouldn't be very useful.  Building the stack trace isn't terribly expensive, especially in the big scheme of things. An app shouldn't be throwing exceptions so much that this really becomes a problem."
PHP,3a4my5,MorrisonLevi,3,Wed Jun 17 19:36:44 2015 UTC,"Yeah, the BaseException name always felt clumsy to me, really revealing that it was bolted on to fix an earlier issue. Much like any function with ""real"" in the name."
PHP,3a4my5,amcsi,3,Wed Jun 17 07:34:12 2015 UTC,"I'm glad the rules were broken a bit here in order to fix this.   The PHP release process is more what you'd call ""guidelines"" than actual rules.  In exactly the same way that Congress/Parliament can't trivially pass a law that limits future Congress/Parliaments, any RFC can overturn any decision that was made before.  The reason why this doesn't lead to chaos is that people are (currently) reasonably sensible about planning out releases ahead of time, as they aren't just idiots with opinions."
PHP,3a4my5,Firehed,1 point,Wed Jun 17 11:19:49 2015 UTC,"The reason why this doesn't lead to chaos is that people are (currently) reasonably sensible about planning out releases ahead of time, as they aren't just idiots with opinions.   Some of the best people I know are idiots with opinions."
PHP,3a4my5,ircmaxell,2,Wed Jun 17 12:08:32 2015 UTC,"I'm glad the rules were broken a bit here in order to fix this.   It was understood at least by some that the RFC that added this exception left room for renaming it, hence why it wasn't really a rule broken.  I don't like either hierarchy and naming scheme so I didn't vote. ""Hey, here are two bad options: pick one""… no thank you!"
PHP,3a4my5,Firehed,3,Wed Jun 17 16:00:30 2015 UTC,"""Hey, here are two bad options: pick one""… no thank you!   Eh come on, there's a precedent for this kind of naming (in fact... that literal naming and hierarchy):  http://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html  Notice what it says:   Instances of two subclasses [of Throwable], Error and Exception, are conventionally used to indicate that exceptional situations have occurred.   And in the case of Java, this hierarchy didn't happen due to BC concerns. AFAIK, it was like this from the very start. And yet, the design looks so intentional in PHP, as if it was like this from PHP 1.0.  Did... did I win you over? ;) Maybe not, but I just won myself over for a second time."
PHP,3a4my5,Danack,3,Wed Jun 17 16:31:56 2015 UTC,"I'm very happy for these changes, however hasn't the new feature freeze been closed down a long time ago for PHP 7 on the same day scalar type-hints were accepted?"
PHP,3a4my5,Danack,2,Wed Jun 17 10:20:52 2015 UTC,"IIRC, new submissions targeting 7.0 were frozen. Anything already submitted could still make it in even if voting was still pending."
PHP,3a4my5,trowski2002,10,Wed Jun 17 10:29:29 2015 UTC,"IIRC, new submissions targeting 7.0 were frozen. Anything already submitted could still make it in even if voting was still pending.   Incorrect. Votes had to be opened by the official freeze date (March 15).  The reason we voted on this and accepted it is that we all felt that we couldn't really release as-is without this sort of change. So we agreed to vote/accept this as a one-off because it was really needed, not just because it existed."
PHP,3a4my5,headzoo,1 point,Wed Jun 17 14:11:33 2015 UTC,"Well, you'd certainly know better than I would! Thank you for clarifying.  Knowing when to break the rules is half the battle, after all ;)"
PHP,3a4my5,trowski2002,1 point,Wed Jun 17 21:34:09 2015 UTC,"I wonder if we'll be able to extend \Error on our own. That wasn't mentioned.  In my current code I have an error handler mapping warnings and notices to classes that descend from (my) class Error and have names ending in *Error (no collision, because they're in a namespace, but similar naming logic).  I'd prefer for them to extend the native \Error now that we have it, so people catching \Exception don't end up catching a mapped warning."
PHP,3a8jge,againor,4,Thu Jun 18 01:58:11 2015 UTC,"Hello /u/againor !  I am actively developing few projects in Laravel while one is being quite bit large. And unfortunately it is nowhere near ideal, but still framework of my #1 choice. For bad sides:   total lack of any reasonable forms support, you have to use bad laravel/html addtional package from composer but if you have a lot of forms, you will end writing your own form system with themes, error displaying etc anyway.  while eloquent is quite good ""orm"" (actually active record), its great for small projects. For large projects it is quite hard to use repository pattern because you always have possibility of extracting db data anywhere on code. Also it uses a lot of magic methods which makes your models to provide zero IDE help and you either have your PMA, SQLYog or whatever open for looking up field names or you have to boilerplate-phpdoc-annotade every your model.  while facades are there, they do not have to be used. unfortunately, using facades makes your app too much ""global scoped"" and it provides no ide help either; while not using them sometimes limits you (for example there is no helper function replacement for view::share, db::raw and using cache and session through dependency injection is confusing because you must inject some not related interface).  form requests are very nice feature, but in larger projects, they are turning into huge boilerplate mess. we have in project over 400 form request classes, most of them having simple $this->Guard->check() on authorization rules  default folder structure is weird, forcing you to put all of your controllers into one dir and having a lot of basic directories like commands, http, providers, events. Putting your app there means you will have to jump between your business logic directories and laravel internals; I suggest creating a new directory in /app/ called lets say App and namespace it in composer.json  there are many incosistencies in using laravel; for example in view you want to use string from lang files, you have to write @lang( 'something.something' ) while if you want to use plural transation you are forced to make {{ trans_choice( xx , yy }}  writing action links in views are painful, blade lack some special syntax sugar like @action , @route annotations in views, you have all the time write {{ action( 'somethig\something\somecontroller@something' , [ 'a' => 5 , 'b' => $obj->z ] ) }}  earlier versions of laravel (4.2) were very quick and simple, but they are adding unnecessary complexity in version 5 requiring you to do a lot of boilerplate. if we have write that much boilerplate code in laravel now, why wouldnt we use symfony instead?  eloquent is full of quirks, pitfalls and hidden features. it is also badly documented. i do not like field/table name guessing in eloquent, eager loading is tricky, $dates and $casts looks like dirty hacks for me, defining accessor and mutators is weird, pivot tables works ok but you cannot specify relations in them which means you will have to manually select something by id using pivot table field   timestamp based migration system is really great, but unfortunately it does not include timestamp in migratino class name. so you may create migration with name update_user_table and after two weeks you may create another update_user_table migration, they will have different timestamps in files but actually their class names will be both UpdateUserTable; this means you may execute migrations one-by-one successfully, but making migration that contains both migrations will fail with php ""class already declared"" error    weird structure for resources, database, tests directories ; composer weird interaction with seeder and test classes, you will have to do a lot of composer dump-autoload's to make everything work properly   But Laravel has also some good sides:  eloquent is quite simple and declaring new models takes 10% of time we would use in symfony  blade is very readable and powerful templating engine  auto dependency injection is really great, automatically inserting dependencies for your classes, you only have to declare them in constructor  providers looks like nice feature to structure your application into smaller packages, if you have to reuse them in several projects  artisan commands are very useful"
PHP,3a8jge,Bloompire,7,Sun Jun 21 08:52:05 2015 UTC,"All over laravel I see static classes, and from what I have read it uses Service Location which is an anti-pattern. Good folks of /r/php do you think Laravel is a good PHP framework?   The reality distortion field you'll experience as Laravel fans explain away these static classes is amazing. Grab popcorn and enjoy the show.  But yes, in short, it's a bad idea. You can simply not use them (although the manual keeps telling you to), but you're still stuck with an app-global dependency container, which is almost as bad.  The right way to use Laravel and other frameworks, IMHO, is to use it power a thin web client, while keeping the bulk of your application (logic, models etc.) framework-independent in the form of services (as simple classes)."
PHP,3a8jge,djwdjwdjw,2,Thu Jun 18 18:37:32 2015 UTC,"Laravel seems like a modern replacement for CodeIgniter. Great for getting started but frustrating if you want to do things therightway. The facades feature (which is a misleading name) is an 'everything everywhere' convention no different to $this in CodeIgniter providing access to anything in the app. It can be avoided, but it's still teaching beginners bad habits."
PHP,3a8jge,rawfan,2,Thu Jun 18 21:49:30 2015 UTC,"Wow, just wow. I've been happily developing with Laravel for just over a year. Small, medium and larger projects alike. I haven't hit any problems so far. Especially no performance issues.  So seeing all the haters in this thread really confused me. None of them actually explained what exactly their problem is.  Use what you feel comfortable with, adjust when you hit problems."
PHP,3a8jge,erikbelusic,1 point,Wed Jun 24 10:16:14 2015 UTC,"I was under the impression that the main issue with service location pattern was that it's abstracted away a classes dependencies making room for runtime errors in compiled languages. Since php isn't compiled, less of an issue here? Not sure...."
PHP,3a8jge,silentk446,1 point,Fri Jun 19 03:01:33 2015 UTC,"It's good if you keep it up to date. If you miss a few updates, expect a pain in the arse of an upgrade. It's a framework that (in my opinion) has major backward compatibility breaking changes way too often."
PHP,3a8jge,c12,1 point,Thu Jun 18 12:28:06 2015 UTC,I am hoping this to be fixed now they have a LTS version
PHP,3a8jge,mbdjd,0,Thu Jun 18 13:59:55 2015 UTC,"Facades are really just a bit of Laravel syntactic sugar that allows for you to resolve an object out of the IoC container and call a method on it. I have not benchmarked magic method performance but I have never noticed a significant increase in execution time from using them, but even if you do, every single Facade has a documented class that you can choose to inject if you wish. Laravel does not force you to use Facades at any point."
PHP,3a8jge,rafamds,2,Thu Jun 18 07:34:26 2015 UTC,"The problem isn't the execution time, but the fact you reach out to a global static location in order to fetch your dependency.  This means if you have two components that need to be fed differently configured views, you can't: they'll both reach out to View:: and get the same view.  You can change it, but not independently for each component. You can only change it globally for both components. If that doesn't start any alarms in your head yet, it will over time."
PHP,3a8jge,codesharer,0,Fri Jun 19 16:59:46 2015 UTC,"The thing I like in Laravel is Eloquent. Eloquent is just very very powerfull, and the best thing is that you can use it on every php project you have, even if its not a Laravel project. I'm currently building my projects, using a micro-framework called Fat-Free Framework, together with Laravels Eloquent module, and its just amazing."
PHP,3a8jge,rafamds,3,Thu Jun 18 09:44:46 2015 UTC,Glad to see you know f3 too
PHP,3a8jge,rafamds,1 point,Thu Jun 18 10:25:38 2015 UTC,small but cool community :D
PHP,3a8jge,mattsah,1 point,Thu Jun 18 19:33:33 2015 UTC,"Watch it though, Eloquent is a memory hog and will cause huge performance issues for larger databases."
PHP,3a8jge,pan069,1 point,Sun Jun 21 21:48:21 2015 UTC,Do you have any alternative suggestion? I'm always open to new methods
PHP,3a8jge,lordofworms,2,Mon Jun 22 13:09:02 2015 UTC,For larger projects i wouldn't use an orm at all. Either use the data layer functionality itself or the db query builder directly.
PHP,3a8jge,mervman,1 point,Mon Jun 22 23:23:27 2015 UTC,"Well it's not really wrong.  It depends what the concern is.  The static methods are essentially a service locator with a more terse syntax.  You'd have to explain to me how calling $GLOBALS['Route']->get('/', function() { return 'whatever'; }) would differ from Route::get('/', function() { return 'whatever'; })."
PHP,3a8jge,pan069,1 point,Thu Jun 18 03:50:46 2015 UTC,"To me, the fact to how much confusion this whole ""static"" thing has led over time is already a good indicator on what an anti-pattern this actually is."
PHP,3a8jge,rafamds,0,Thu Jun 18 06:33:41 2015 UTC,Aren't magic methods much slower than calling normal methods?
PHP,3a8wet,argunner,4,Thu Jun 18 03:54:28 2015 UTC,Was this written as a learning exercise and posted here for feedback? Or is it intended as something that people would use?
PHP,3a8wet,meadsteve,3,Thu Jun 18 07:46:03 2015 UTC,very much doubt this is meant for any consumption
PHP,3a8wet,rob_d,1 point,Thu Jun 18 09:19:21 2015 UTC,"No its just for code review , for educational purpose"
PHP,3a8wet,meadsteve,4,Thu Jun 18 09:20:19 2015 UTC,Might be worth updating http://flouthoc.github.io/orc/ to state that it's not intended for production use then. I wouldn't want any beginners to accidentally use it.
PHP,3a4y0x,bramdevries,13,Wed Jun 17 06:55:37 2015 UTC,I signed up for the beta and went to link it to my GitHub profile but the access it's asking for is a bit crazy....read and write to all public and private repositories? No thanks. Full access to all personal data? Nope.gif.
PHP,3a4y0x,enygmadae,3,Wed Jun 17 13:10:14 2015 UTC,"Will review the data we're asking, thanks for the feedback!"
PHP,3a4y0x,SeerUD,2,Wed Jun 17 13:30:54 2015 UTC,"Looks interesting, will this support BitBucket?"
PHP,3a4y0x,dk01,1 point,Wed Jun 17 13:15:48 2015 UTC,"If there is a demand for it, we opted for Github first since we use it for our own projects and has a bigger user base."
PHP,3a4y0x,dk01,1 point,Wed Jun 17 13:31:34 2015 UTC,"Changehub is a product we've been developing internally at http://madewithlove.be. It allows you to manage project changelogs using Github pull requests written in the keepachangelog.com format.  The product is still in beta and being actively developed, we're looking for beta testers that can provide us with feedback about how to improve Changehub."
PHP,3a4y0x,dk01,1 point,Wed Jun 17 06:58:47 2015 UTC,Please support the Conventional Changelog format https://github.com/ajoslin/conventional-changelog
PHP,3a732q,RunningLowOnFucks,1 point,Wed Jun 17 19:09:59 2015 UTC,"Also icicle, but I haven't used either of them for production things (yet)."
PHP,3a732q,Shadowhand,1 point,Wed Jun 17 21:03:28 2015 UTC,how does icicle handle stuff like Doctrine? Can't find anything too explanatory about that
PHP,3a732q,Shadowhand,1 point,Fri Jun 19 14:50:16 2015 UTC,I'm not sure what you mean. Doctrine would work normally in Icicle.
PHP,3a219o,suphper,6,Tue Jun 16 16:48:32 2015 UTC,"Yay, more lists where we are just throwing anything that has php and oop in the title. If someone is going to do this, for all that is good in this world, leave of the garbage and just leave the good ones."
PHP,3a219o,blueshift9,2,Wed Jun 17 03:50:13 2015 UTC,Comprehensive   Meaning pointlessly long and likely containing many overlapping documents?
PHP,3a219o,jezmck,7,Tue Jun 16 21:58:31 2015 UTC,I don't think you are wrong. So many of these docs get posted all the damn time. It feels like people are just farming green commit squares sometimes.
PHP,3a219o,Danny00014,1 point,Wed Jun 17 02:59:42 2015 UTC,this is a huge list.. thanks
PHP,3a219o,_psampaz,1 point,Tue Jun 16 18:30:25 2015 UTC,Are these resources good for someone new to PHP?
PHP,3a219o,NateJagger,-1,Tue Jun 16 19:12:42 2015 UTC,"Most of them, yes"
PHP,3a219o,cam5,1 point,Tue Jun 16 19:58:55 2015 UTC,Gonna listen to Darkthrone while I peruse this. Br00tal.
PHP,3a219o,feketegy,0,Wed Jun 17 06:19:34 2015 UTC,Bravo
PHP,3a3lec,freebit,2,Tue Jun 16 23:27:00 2015 UTC,"Nice article, although I do find the suggestion that we use HTMLPurifier for casual HTML output escaping strange.  The use of this library suggests we're taking HTML from an untrusted party (as opposed to plain text that we can escape and decorate with HTML in out templates).  The HTMLPurifier site cites a legitimate use example: filtering HTML emails for XSS attacks. I can also think of a few other cases, but they're all very specific, and definitely not the norm when rendering a basic site template.  And the performance hit of parsing and rebuilding HTML on every page display as shown would be significant."
PHP,3a3lec,McGlockenshire,2,Wed Jun 17 00:04:14 2015 UTC,And the performance hit of parsing and rebuilding HTML on every page display as shown would be significant.   Down that road lies madness.  There's no reason to not store both the original content and the filtered content.  This also allows for the filtered content to be updated as the filter rules change.
PHP,3a3lec,sarciszewski,2,Wed Jun 17 17:12:25 2015 UTC,"Yeah, although if you think about it, you can also get away by only storing filtered content.  Let's say we have two cases. Widening the filter, or narrowing it down.   If I want to narrow it down, I can re-filter the filtered content. The filtering operation should be idempotent, so this is a valid approach. If I want to widen it, I may break BC with content which works correctly by accident, which breaks after widening the filter and including a part that breaks the solution. So I shouldn't really do it blindly in most cases - only with user consent, and typically after the user re-uploads some content (i.e. with human supervision).   But anyway, such discussion should always be led in the highly concrete use case of a specific project, because throwing easy rules at each other is where madness really lies."
PHP,3a3lec,sarciszewski,0,Wed Jun 17 17:18:42 2015 UTC,"But anyway, such discussion should always be led in the highly concrete use case of a specific project, because throwing easy rules at each other is where madness really lies.   Agreed. Trying to solve the 99% problem with a general statement is truly insane."
PHP,3a3lec,sarciszewski,1 point,Wed Jun 17 18:47:11 2015 UTC,"I was originally waiting for someone else's XSS filtering library to be ready for public release, but that hasn't happened yet. (Said library allegedly operates several times faster than HTML Purifier and is just as effective at stopping XSS.)"
PHP,3a3lec,sarciszewski,2,Wed Jun 17 00:30:42 2015 UTC,"All I do to prevent XSS in my sites is:  1) Encode text to HTML string literals via htmlentities($string, ENT_QUOTES, ""UTF-8"")  2) Encode data to pass in a script block via json_encode($data)  I don't think that's enough material for a library. Am I missing something?"
PHP,3a3lec,sarciszewski,1 point,Wed Jun 17 00:33:56 2015 UTC,"How do you allow users, with the strategy you've outlined to submit some HTML but not trigger XSS attacks?"
PHP,3a3lec,AlexanderNigma,2,Wed Jun 17 03:36:17 2015 UTC,"How do you allow users, with the strategy you've outlined to submit some HTML but not trigger XSS attacks?   As I said, I consider this scenario quite specific and highly unlikely (although not impossible), almost as unlikely as someone submitting Win32 GUI commands or iOS Cocoa API commands to me.  HTML is a client UI technology, it has a ton of surface area, so it'd be my last resort as a part of a service API and a domain format. Not just due to security - it'd be a poor design and a lot of effort to maintain, I'd prefer a format that matches my domain semantically, so I can understand it, adapt it to non-HTML clients as I need, etc.  So it depends why they submit HTML. What's the use case you have in mind (don't say ""a comment form"", heh)."
PHP,3a3lec,sarciszewski,2,Wed Jun 17 04:46:40 2015 UTC,"A comment form. A customizable profile page. Blog posts.   Et cetera. Strictly obliterating any HTML the user ever provides is a crippling form of security. Sure, XSS fails, but you lose a degree of freedom of expression.  You might decide to grab another encoding format, e.g. BBCode, Markdown, ReStructuredText, etc. but all that does is move the goal posts.  If you need to allow some HTML (but not any dangerous HTML), HTML Purifier is the way to go, until someone develops something better.  ""But why?"" It doesn't matter why. Some people have different requirements than you, and I'm telling them how to do it safely."
PHP,3a3lec,sarciszewski,3,Wed Jun 17 05:23:14 2015 UTC,"A more specific DSL doesn't just ""move goal-posts"", because those other formats don't have the baggage of 20 years of multiple browser vendors slapping their favorite stuff in it ad-hoc (some of which sticks to the spec, some not, and some does unofficially).  Let's say you expose an API. Would you pick an interface with several hundred methods, a dozen or two arguments each, which is purely presentational and you have no hope of understanding it, but which you must replicate verbatim to a client... and clients will interpret it slightly differently, depending on various factors.   Would you? That's what HTML is as your API interface. Every tag is a method. Every attribute is an argument. This also reflects on your ability to understand a content database made out of HTML. Avoiding HTML as a domain format is not a matter of security as I said (although it's a definite factor), it's a matter of good API design.  If you accept an HTML presentational blob, your system only sees an HTML presentational blob. You can filter it, extract basic text, but you know little else about it. Semantical tags, headings what not? Nope, more than half will be some monstrosity someone pasted from Word with inline font styles and the whole shebang, the others will be someone's improvisation on ""how to make it look like a heading without using the heading tags"" etc. It'll be a mess. You can't adapt it to a non-HTML environment, you can't reason about it, you can't improve it.  Parsing someone's ""legacy content"" from HTML blobs in a database to adapt it for modern standards is not fun. If you store HTML, you're creating someone's future ""legacy problem"" right there. When someone figures out the problem, they'll try to move to a semantic DSL, but a lot is lost in the transition from HTML to a DSL. You can't automate understanding the intent of a lot of the presentational code in the original HTML blob. With content-based projects like blogs and newspapers this means rewriting the article markup by hand (NY Times dealt with that stuff few years ago and wrote about it).  Figuring out what your domain is about takes more effort, but it's the right choice.  Oh and using HTML input for comments is downright asinine. HTML-like DSL? Maybe. But full-blown HTML - there's no excuse for being that lazy."
PHP,3a2pi9,php-developer,6,Tue Jun 16 19:33:51 2015 UTC,"Looks cool!  However, could this not be simply defeated by extracting the text and running it through a dictionary to find words of x many letters beginning and ending with the parts of the word you have.  Also, (though this is not a weakness) some CAPTCHAS would have more than one answer. E.g. wr_ng could be wring, wrung, or wrong."
PHP,3a2pi9,hlskn,3,Tue Jun 16 20:05:33 2015 UTC,"It could, and the letters are easily recognizable. Pair it with a corpus of words and their frequencies, and you can probably guess it on the first attempt 95% of the time.  Neat idea, but the current implementation isn't usable in production."
PHP,3a2pi9,fiskfisk,2,Tue Jun 16 20:17:54 2015 UTC,"Yes, it could be done. But I wanted to create a human-friendly captcha. If hacker wants break captcha, he will use anti-captcha services, so ..."
PHP,3a2pi9,urxiuiljiu,2,Tue Jun 16 21:39:42 2015 UTC,"Through decades of CAPTCHA, programmers have perfected creation of challenges that take bots milliseconds to solve, but are difficult for humans to get right."
PHP,3a2pi9,xjake88x,3,Wed Jun 17 07:54:53 2015 UTC,"Very clever idea. Just to play devil's advocate, what if a bot could detect the square block, and do a wildcard dictionary search?"
PHP,3a2pi9,NJ247,2,Tue Jun 16 20:05:36 2015 UTC,Would it not be better to have functions which return back values after generate is run instead of dumping into a results array:  $captcha->getImageObject(); $captcha->getCaptchaWord(); $captcha->getSkippedCharOffset();       So your generate turns into returning a boolean instead of an array to say it has worked or not.
PHP,3a2pi9,CliffEdgeOrg,1 point,Wed Jun 17 14:15:11 2015 UTC,what's the point of dispersion of the letters?
PHP,3a2pi9,OxEF,1 point,Tue Jun 16 20:05:42 2015 UTC,Pretty interesting!  It could be perfectly used for small sites.
PHP,3a2pi9,BG_MaSTeRMinD,1 point,Wed Jun 17 06:27:59 2015 UTC,I believe the best captcha-s are the ones with pictures where you have to drag and drop certain picture. Or even align them in certain order. Weakness in this were already pointed out by others.
PHP,3a4vlt,htmlcssjs,6,Wed Jun 17 06:26:38 2015 UTC,"I know this is going to sound very ""generic"", but I suggest checking out how to create a simple todo list. It will show you CRUD in it's most simple form.  You could also try creating a very small framework using components from Composer and autoloading in the classes.  If you wanted a contact form, then try and create that, get the form to email it over to you and save a copy in the database.  Key things you need to know when starting a project are... MySQLi/PDO functions (decide which one is best), Composer, PHP Classes, PHP methods. There's probably more to this, but I think that would be a good start."
PHP,3a4vlt,CheckeredMichael,1 point,Wed Jun 17 08:11:27 2015 UTC,"Thanks. I wonder if anyone has made a to do list and actually liked it more than the app counterparts and used it. It's a good idea, I'll look into it."
PHP,3a4vlt,0ba78683-dbdd-4a31-a,1 point,Wed Jun 17 12:06:07 2015 UTC,A few common projects for beginners:   Calculator Todo app URL shortener Content Management System Router Micro-framework Support portal Form library Wiki platform Time tracker/invoice generator
