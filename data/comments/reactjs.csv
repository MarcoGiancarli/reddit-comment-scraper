reactjs,3e6gq6,cymen,1 point,Wed Jul 22 09:17:43 2015 UTC,"It's pretty basic at the moment -- when components are deeply nested, it's a bit tricky to pick things apart. But it works well for a general overview and it's fun to play with on Facebook (worth a lot on Instagram too but everything is React-based there!)."
reactjs,3e5jo1,devnoid,3,Wed Jul 22 03:04:13 2015 UTC,"( this assumes you are using a flux pattern, and know more or less how to use jquery's ajax functions )  View -> Action -> Store -> Back to View  I will have a client-rendered view call an action , usually in componentDidMount --   The action will look something like :  getPeople: function () {     $.get( API.PEOPLE.INDEX  ).then( function ( response ) {         Dispatcher.handleAction({             actionType: PeopleViewConstants.GET_PEOPLE,             data: response,         });     }); },   The data is retrieved from the server through that request, which sends a promise to the store. The store emits a change event and voila, the data is now visible in your view that grabs the store's data whenever that change event is fired.  I do not know ( and would like to hear ) if this is best practice, but it's useful to me in that I know all of the AJAX requests I'm making are coming from the same part of the data flow and the same easily navigable /actions folder in my app.  I have another spot where I have a large call in a controller view that contains something like 12 child components. Each of the children gets their data passed down as a prop from the controller view, which calls the initial data through one of those ajax actions. At first, I had each child call their own specific data but having more than 11 event listeners ( from each of those children listening to the store for changes ) was giving me problems.   So you can do it either way, and if you're not using flux, passing ajax data as props works just fine. For me holding stuff in the actions is mostly an organization thing since there are so many calls in my app. But it's also nice in that it lets a store work through and manipulate the data recieved before the view gets its hand on it, to help make sure that once the user sees what you want them to, it's actually what you want them to see.   I do all ajax from the client, as long as it doesn't mean I have to store auth keys anywhere in public code. For things like twitter streams or other oauth services, I have my server do a cURL request ( I'm using PHP, not express ) then store that data on the server to be returned through a REST API called from client side.   As I've been typing this, I've been thinking harder about the question and realize that I don't really know how having an isomorphic app changes the answer. All of my views are rendered by the client, on top of a barebones page pushed out by the server ( this allows for code splitting, since I split my client side code into a few files and have the barebones layout include those sections as a script tag ) . But I hope that some of this is helpful."
reactjs,3e5jo1,synapticplastic,3,Wed Jul 22 05:13:36 2015 UTC,"I'm in the same boat as you, building my first universal JS app with express, react-router and React. Mine is pretty simple which is why I have decided not to use any flux libraries for now.  Instead, I made iniquest which lets you define a static method on your RouterHandler components prepareForRequest. This method returns a promise that resolves to a JavaScript object which will then be injected as the component's initial state before rendering on the server.  On the client, I can reuse request logic by extracting it into functions. On the server, iniquest will run a component's prepareForRequest method before rendering. On the client, I use componentDidMount to check if a component already has its state set (which should be the case if it was pre-rendered) if not, I just make the request again and update its state from there. Here is an example of this.  For cross-platform HTTP requests, I really love axios. It works on client and server out of the box and has an API similar to Angular's HTTP library.  Check out my sample application if you're interested: https://github.com/maximilianschmitt/full-stack-react"
reactjs,3e5jo1,Mackseraner,1 point,Wed Jul 22 09:40:18 2015 UTC,"I'll have to check this out! Without using iniquest or Flux, how would one do it the react-way (if that's even a term) through props? I think I need a better understand before adding in more complexity."
reactjs,3e5jo1,Mackseraner,1 point,Wed Jul 22 13:44:09 2015 UTC,"iniquest basically does just that: pass in initial state through props and parent components hand them down to child components. You can check out my sample app before I extracted iniquest into a library: https://github.com/maximilianschmitt/full-stack-react/tree/01344a2ec0c650771272afbb6146d707dfe9cf0d The approach is also documented in the readme.  Let me know if you have any questions, it took me quite some time to figure all this out."
reactjs,3e4mly,Powerdrift,4,Tue Jul 21 22:36:18 2015 UTC,When dealing with large amounts of related modules this is a recommended pattern. My only concern is your use of default exports instead of named exports. In other words I might prefer:  import { Notifications } from 'actions';  instead of   import Actions from 'actions';  This move away from a monolithic import helps clarify your module dependencies up front.
reactjs,3e4mly,velveteer,4,Wed Jul 22 00:10:33 2015 UTC,"In the time between posting this question and reading your reply, I did just that. Everything is looking much cleaner now.  Thanks for the reassurance! :)"
reactjs,3e4mly,oguzbilgic,1 point,Wed Jul 22 00:20:57 2015 UTC,I have a question based on this example. Is index.js really useful in this case? why not just import UserActions from 'actions/UsersActions';
reactjs,3e4mly,velveteer,1 point,Wed Jul 22 01:35:02 2015 UTC,"It is an aesthetic decision for many developers because it can help reduce long multi-lined imports (with ES6 destructuring especially), but ultimately the index.js paradigm comes from Node.   Since we have all of these action modules in the same folder we can export them under a single namespace. It becomes beneficial to use some kind of module interface pattern when your list of dependencies grows large or when you need to promote encapsulation."
reactjs,3e4mly,Walter_Bishop_PhD,1 point,Wed Jul 22 03:46:35 2015 UTC,This is a pretty common thing to do; ES7 even has a handy thing that you can use that works like this:  export Users from 'actions/UsersActions';   You'll need to enable the experimental transform es7.exportExtensions in Babel.  You can see React Router doing this here:  https://github.com/rackt/react-router/blob/master/modules/index.js
reactjs,3e1ywr,kunlun,5,Tue Jul 21 09:45:12 2015 UTC,I have not gone through it myself but people liked this one:  http://survivejs.com/
reactjs,3e1ywr,cc81,3,Tue Jul 21 11:06:13 2015 UTC,"If you're also going to use Flux, check this out."
reactjs,3e1ywr,teachMe,1 point,Tue Jul 21 12:25:25 2015 UTC,"Checkout the documentation, there are tutorials there. Also the Facebook Developers YouTube channel hosts some ReactJS videos, look: https://www.youtube.com/user/FacebookDevelopers/search?query=react"
reactjs,3e1ywr,feketegy,1 point,Tue Jul 21 11:03:26 2015 UTC,Download the official react docs/guides for offline use. They are really well written and cover everything
reactjs,3e1ywr,Glorious-G,1 point,Tue Jul 21 13:14:28 2015 UTC,Also Iook up node school. It kinda forces you to think. (Just a tad). It's pretty useful for when you want to learn new things
reactjs,3e1ywr,gb714us,1 point,Tue Jul 21 15:29:57 2015 UTC,You can try React Koans - a set of exercises which gently introduces main concepts of React - https://github.com/arkency/reactjs_koans
reactjs,3e1th9,notconstructive,1 point,Tue Jul 21 08:30:45 2015 UTC,I'm not connected to the authors at all but this seems to be one of the only commercially available templates that is fully reactjs.
reactjs,3e0tw8,Mackseraner,1 point,Tue Jul 21 02:15:47 2015 UTC,"I extracted this module from a sample app that I am building to explore a simple approach to universal React with Express and react-router.  A small sample application that uses iniquest can be found here: https://github.com/maximilianschmitt/full-stack-react  This is primarily a project to learn from for me, so I am grateful for any feedback I can get.  Thanks for taking the time to check it out! :)"
reactjs,3dzfx2,bchoii,2,Mon Jul 20 19:54:12 2015 UTC,Flux talk with the creator here  Youtube Channel for the recent React conference in Europe  pm if you have any direct questions :)
reactjs,3dzfx2,KungFuHermit,2,Tue Jul 21 02:22:48 2015 UTC,The Flux talk was extremely helpful. Thank you very much !
reactjs,3dzfx2,velveteer,3,Tue Jul 21 06:09:49 2015 UTC,"Your approach is not quite Flux but is a small implementation of the observer pattern. The main thing you need to realize here is that you are mutating the state directly in your components and firing an event after the fact. In the Flux pattern your components should never mutate state, instead they should fire off actions that update the state through a dispatched payload.   I should note that while your approach works it will become very difficult to manage at scale. Flux is a simple pattern when you realize the problem it is trying to solve, and a small example like a todo list will not helpfully illustrate its problem domain, even though it does help clarify concepts. I'm not trying to be condescending but I recommend that you read the brief Flux for Stupid People."
reactjs,3dzfx2,velveteer,1 point,Tue Jul 21 03:11:39 2015 UTC,"The main thing you need to realize here is that you are mutating the state directly in your components and firing an event after the fact. In the Flux pattern your components should never mutate state, instead they should fire off actions that update the state through a dispatched payload.   I'm not sure how to articulate my confusion, but I'm trying to understand where and why my method would stop working. What is the rationale or intent behind the design of ""components should never mutate state"" ?    In the Flux pattern ... , instead they should fire off actions that update the state through a dispatched payload.   Which is essentially another layer of abstraction ? Firing off an action that updates the state, vs updating the state directly...   I should note that while your approach works it will become very difficult to manage at scale.   In other words, theoretically this approach could work (as a learning exercise), until we experience scaling issues ?   I'm not trying to be condescending but I recommend that you read the brief Flux for Stupid People.   Thank you ! I look forward to being educated and accept critique. I find taking offence to any form of feedback to be counter productive to learning. ;)  I will read up on the materials. Before then, thank you for your response !"
reactjs,3dxek6,grigio,1 point,Mon Jul 20 09:24:15 2015 UTC,"I18next, social network startup"
reactjs,3dxcvh,jarsbe,2,Mon Jul 20 09:00:11 2015 UTC,Very cool. I was going to attempt the exact same thing myself. Glad to see it doesn't take too much code to get it working.
reactjs,3dxeur,cubid0,4,Mon Jul 20 09:28:23 2015 UTC,"Possible but you're missing out on the entire npm eco-system of modules. Also ""The in-browser JSX transformer is fairly large and results in extraneous computation client-side that can be avoided. Do not use it in production — see the next section."" https://facebook.github.io/react/docs/tooling-integration.html  You need to build a client side bundle and include it in your html. You can probably bypass maven altogether."
reactjs,3dxeur,jarsbe,2,Mon Jul 20 09:50:36 2015 UTC,I would agree.   Take advantage of the existing front end tooling. See if you can execute a command line command from a maven task to kick off the npm tasks etc. that would be where you might want to start.
reactjs,3dxeur,immigrantnightclub,1 point,Mon Jul 20 10:27:08 2015 UTC,"If you'd like to experiment a bit, you could try using the expose-loader from webpack to expose a module's exports globally:  https://github.com/webpack/expose-loader"
reactjs,3dxeur,Walter_Bishop_PhD,1 point,Tue Jul 21 08:05:03 2015 UTC,Problem is that I’m developing in Java environment (Maven)    Who cares?  Are you unable to install node + npm?
reactjs,3dxd1k,Kim-Jung-Illmatic,1 point,Mon Jul 20 09:02:18 2015 UTC,"Can't speak to the react-canvas api specifically, but if you load using the CSS font declarations, you can draw to the canvas using that font family."
reactjs,3dwbv6,Mackseraner,1 point,Mon Jul 20 02:00:07 2015 UTC,"I'm a bot, bleep, bloop. Someone has linked to this thread from another place on reddit:   [/r/javascript] I'm trying to get into isomorphic React, please critique my minimal sample app and its async data fetching approach (x-post /r/reactjs)   If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads. (Info / Contact)"
reactjs,3dwbv6,TotesMessenger,1 point,Mon Jul 20 14:05:17 2015 UTC,Check out Marty. It's a solid Flux implementation that has solid isomorphic capabilities.  http://martyjs.org
reactjs,3dwbv6,theduro,1 point,Mon Jul 20 03:22:34 2015 UTC,+1 for Marty. Also check out marty-express: https://github.com/martyjs/marty-express  It makes handing off server-side state to the client a breeze.
reactjs,3dwbv6,command-tab,1 point,Mon Jul 20 04:17:00 2015 UTC,"Thanks, I had never heard of Marty. I was looking at Alt.js but for the app I am currently looking to build, Flux is probably overkill which is why I wanted to try to piece together the isomorphism myself.  One thing I couldn't find out: with Marty, how do you handle POST requests on the server? If you check out my example, it can optionally handle POST requests before rendering (for when JavaScript is deactivated on the client): https://github.com/maximilianschmitt/full-stack-react/blob/master/components/markdown.js#L49"
reactjs,3dwbv6,theduro,2,Mon Jul 20 10:59:35 2015 UTC,"Check out this project starter I wrote. It uses Hapi for the server, but you should still be able to sort it out.  http://github.com/zehnergroup/cheesy-poofs  Basically Marty provides you a hook that let's you rejigger your requests on the server to send to local host. So you do internal http requests inside your server."
reactjs,3dwbv6,theduro,1 point,Mon Jul 20 15:37:31 2015 UTC,Thank you! What file should I be looking at to see the rejiggered requests?
reactjs,3dsan2,webdevq3,13,Sat Jul 18 23:46:49 2015 UTC,"I would highly recommend checking out Redux if you want to keep the ""single tree"" approach to state management but still retain Flux-branded concepts like stores, action creators, and the dispatcher. Its main benefit is treating your application state as a pure function, which means your ""stores"" become ""reducers"". It is similar to Baobab in that it encourages functional practices and does not include a React-specific API in its core library.   Upsides include:    Minimal core API  Immutable data in the store is optional Support for derived data with something like reselect (analogous to Baobab facets) Being used in a wide variety of projects, see examples at awesome-redux   Downsides right now might be:    Not as feature-rich as Alt (e.g. middleware is needed for Promise support) Documentation is still not finalized Minimal API leads to more boilerplate (there are already utilities helping to relieve this)"
reactjs,3do8vy,ChainsawTeeth,1 point,Fri Jul 17 21:58:05 2015 UTC,"I use an app store for maintaining view states across multiple components. No real data goes into them beyond maybe user data. Doesn't reduce the numbers of booleans, but it's still way cleaner than keeping the state in the dom like something like backbone does..."
reactjs,3do8vy,_Aggron,1 point,Sat Jul 18 05:30:52 2015 UTC,"you could create a key mirror enumeration (not really an enum) for the different states, which keeps your code a lot cleaner, easier to read, and centralizes all of the different possible states.  import keyMirror from 'react/lib/keyMirror'  export default keyMirror({   READY: null,   LOADING: null,   ERROR: null });   then while using them   import LoadingStates from './loading-states' class SomeStore {     constructor() {          this.state = {status: LoadingStates.READY}     }     @bind(FakeActions.loadSomething)     loadDemoData({url}) {         dataLoader.load(url)         this.state.status = LoadingStates.LOADING     }     @bind(FakeActions.somethingWasLoaded)     parseDemoData({data}) {         // not exactly parsing, but w/e         this.state.data = data         this.state.status = LoadingStates.READY     }     @bind(FakeActions.errorWhileLoading)     loadDemoData({error}) {         this.state.error = error.toString()         this.state.status = LoadingStates.ERROR     }     // etc  }"
reactjs,3do8vy,terrorTrain,1 point,Sat Jul 18 13:52:01 2015 UTC,What flux implementation are you using that uses ES7 decorators?
reactjs,3do8vy,cowjenga,1 point,Sat Jul 18 15:23:39 2015 UTC,"Alt has a bunch of decorators, but I don't think they are well documented"
reactjs,3do8vy,terrorTrain,1 point,Sat Jul 18 16:15:26 2015 UTC,Sounds like you might want something like this... https://www.npmjs.com/package/state-machine
reactjs,3dm819,Killavus,6,Fri Jul 17 12:13:15 2015 UTC,"Interesting read and good to know.  this is the reason we won't be using ES6 classes:   this.handleChange = this.handleChange.bind(this);   Babel seems like a good alternative, but I think we'll just stick with React.createClass for the time being.  (Freakin' love the framework tho' -- I finally enjoy javascript!  Thanks React team!!!)"
reactjs,3dm819,ArtDealer,3,Fri Jul 17 15:02:35 2015 UTC,"I've solved this by always separating components into dumb (props-only) and smart (props, state, stores, actions), where the smart component (a.k.a. a container) passes along all the necessary action creator functions as props, properly binded, to the dumb component.  import React, { PropTypes } from 'react';  export default class Counter extends React.Component {   static propTypes = {     increment: PropTypes.func.isRequired,     incrementIfOdd: PropTypes.func.isRequired,     decrement: PropTypes.func.isRequired,     counter: PropTypes.number.isRequired   };    render() {     const { increment, incrementIfOdd, decrement, counter } = this.props;     return (       <p>         Clicked: {counter} times         {' '}         <button onClick={increment}>+</button>         {' '}         <button onClick={decrement}>-</button>         {' '}         <button onClick={incrementIfOdd}>Increment if odd</button>       </p>     );   } }"
reactjs,3dm819,SawyerDarcy,1 point,Fri Jul 17 15:57:40 2015 UTC,This works well with flux too.
reactjs,3dm819,Rezistik,4,Fri Jul 17 19:42:13 2015 UTC,Isn't this solved by babel and fat arrows? I don't have a single bind(this) call in my codebase.
reactjs,3dm819,mbrochh,1 point,Fri Jul 17 19:11:12 2015 UTC,this was the hotsauce that caught my eye.
reactjs,3dm819,cerealbh,1 point,Sat Jul 18 04:48:23 2015 UTC,That is awesome. Thank you.
reactjs,3dm819,addition,2,Sat Jul 18 13:34:39 2015 UTC,I hope the ::this.handleChange style syntax for function binding makes it into ES2016
reactjs,3dm819,Walter_Bishop_PhD,1 point,Sat Jul 18 01:27:01 2015 UTC,"For the last example, isn't it a tiny bit worse for performance since handleChange is no longer a prototype method (instead every component instance has its own local handleChange function)?"
reactjs,3dnedy,pH_low,5,Fri Jul 17 18:06:07 2015 UTC,"you need to call setState in the componentDidMount to trigger a new render.  I would actually recommend not using state for elements. Instead, call a function from your render and have it return the array of elements. You can wrap functions in curly brackets just like a variable, so something like {this.buildOptions()}. This way is ideal because in the future your options may use data from this.props or this.state and you want it to update the view when that data changes."
reactjs,3dnedy,dizzysfarm,1 point,Fri Jul 17 22:44:14 2015 UTC,"Thank you! Sorry for the late reply, I was away from my computer! That makes perfect sense, I just implemented that function, thanks again for your help :)"
reactjs,3dnedy,gilbox-dot-me,0,Tue Jul 21 05:10:59 2015 UTC,"This is how you use select in react:  <select value={['B', 'C']}/>"
reactjs,3dnedy,wibz,-1,Fri Jul 17 18:49:08 2015 UTC,What is not working?   Do you have a React.render() somewhere in your app?
reactjs,3dn358,gilbox-dot-me,2,Fri Jul 17 16:42:54 2015 UTC,Why would you link to a tweet that links to a github repo?
reactjs,3dn358,pizzzzzza,2,Fri Jul 17 20:22:32 2015 UTC,This pissed me off so much.
reactjs,3dn358,lvrbrtsn,1 point,Sat Jul 18 11:39:52 2015 UTC,"Because the tweet has a link to the demo and the source. If I just linked to the demo, it's difficult to find the source.  ... sorry about that, I'll never do it again xD"
reactjs,3dn358,TweetPoster,1 point,Sat Jul 18 20:27:11 2015 UTC,@gilboxme:   2015-07-17 16:40:12 UTC  React sticky header inspired by @_chenglou's react-motion. demo: gilbox.github.io code: github.com     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]
reactjs,3djwu7,aguyfromucdavis,1 point,Thu Jul 16 21:35:13 2015 UTC,"Nice, definitely liking the python react combo. I would mention that bokeh is further along than the other projects you mentioned, with a much more comprehensive glyph model."
